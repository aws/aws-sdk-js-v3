import {
  AcceptReservedInstancesExchangeQuoteCommandInput,
  AcceptReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/AcceptReservedInstancesExchangeQuoteCommand";
import {
  AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  AcceptTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/AcceptTransitGatewayMulticastDomainAssociationsCommand";
import {
  AcceptTransitGatewayPeeringAttachmentCommandInput,
  AcceptTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayPeeringAttachmentCommand";
import {
  AcceptTransitGatewayVpcAttachmentCommandInput,
  AcceptTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayVpcAttachmentCommand";
import {
  AcceptVpcEndpointConnectionsCommandInput,
  AcceptVpcEndpointConnectionsCommandOutput,
} from "../commands/AcceptVpcEndpointConnectionsCommand";
import {
  AcceptVpcPeeringConnectionCommandInput,
  AcceptVpcPeeringConnectionCommandOutput,
} from "../commands/AcceptVpcPeeringConnectionCommand";
import { AdvertiseByoipCidrCommandInput, AdvertiseByoipCidrCommandOutput } from "../commands/AdvertiseByoipCidrCommand";
import { AllocateAddressCommandInput, AllocateAddressCommandOutput } from "../commands/AllocateAddressCommand";
import { AllocateHostsCommandInput, AllocateHostsCommandOutput } from "../commands/AllocateHostsCommand";
import {
  ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput,
} from "../commands/ApplySecurityGroupsToClientVpnTargetNetworkCommand";
import {
  AssignIpv6AddressesCommandInput,
  AssignIpv6AddressesCommandOutput,
} from "../commands/AssignIpv6AddressesCommand";
import {
  AssignPrivateIpAddressesCommandInput,
  AssignPrivateIpAddressesCommandOutput,
} from "../commands/AssignPrivateIpAddressesCommand";
import { AssociateAddressCommandInput, AssociateAddressCommandOutput } from "../commands/AssociateAddressCommand";
import {
  AssociateClientVpnTargetNetworkCommandInput,
  AssociateClientVpnTargetNetworkCommandOutput,
} from "../commands/AssociateClientVpnTargetNetworkCommand";
import {
  AssociateDhcpOptionsCommandInput,
  AssociateDhcpOptionsCommandOutput,
} from "../commands/AssociateDhcpOptionsCommand";
import {
  AssociateEnclaveCertificateIamRoleCommandInput,
  AssociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/AssociateEnclaveCertificateIamRoleCommand";
import {
  AssociateIamInstanceProfileCommandInput,
  AssociateIamInstanceProfileCommandOutput,
} from "../commands/AssociateIamInstanceProfileCommand";
import {
  AssociateRouteTableCommandInput,
  AssociateRouteTableCommandOutput,
} from "../commands/AssociateRouteTableCommand";
import {
  AssociateSubnetCidrBlockCommandInput,
  AssociateSubnetCidrBlockCommandOutput,
} from "../commands/AssociateSubnetCidrBlockCommand";
import {
  AssociateTransitGatewayMulticastDomainCommandInput,
  AssociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/AssociateTransitGatewayMulticastDomainCommand";
import {
  AssociateTransitGatewayRouteTableCommandInput,
  AssociateTransitGatewayRouteTableCommandOutput,
} from "../commands/AssociateTransitGatewayRouteTableCommand";
import {
  AssociateVpcCidrBlockCommandInput,
  AssociateVpcCidrBlockCommandOutput,
} from "../commands/AssociateVpcCidrBlockCommand";
import {
  AttachClassicLinkVpcCommandInput,
  AttachClassicLinkVpcCommandOutput,
} from "../commands/AttachClassicLinkVpcCommand";
import {
  AttachInternetGatewayCommandInput,
  AttachInternetGatewayCommandOutput,
} from "../commands/AttachInternetGatewayCommand";
import {
  AttachNetworkInterfaceCommandInput,
  AttachNetworkInterfaceCommandOutput,
} from "../commands/AttachNetworkInterfaceCommand";
import { AttachVolumeCommandInput, AttachVolumeCommandOutput } from "../commands/AttachVolumeCommand";
import { AttachVpnGatewayCommandInput, AttachVpnGatewayCommandOutput } from "../commands/AttachVpnGatewayCommand";
import {
  AuthorizeClientVpnIngressCommandInput,
  AuthorizeClientVpnIngressCommandOutput,
} from "../commands/AuthorizeClientVpnIngressCommand";
import {
  AuthorizeSecurityGroupEgressCommandInput,
  AuthorizeSecurityGroupEgressCommandOutput,
} from "../commands/AuthorizeSecurityGroupEgressCommand";
import {
  AuthorizeSecurityGroupIngressCommandInput,
  AuthorizeSecurityGroupIngressCommandOutput,
} from "../commands/AuthorizeSecurityGroupIngressCommand";
import { BundleInstanceCommandInput, BundleInstanceCommandOutput } from "../commands/BundleInstanceCommand";
import { CancelBundleTaskCommandInput, CancelBundleTaskCommandOutput } from "../commands/CancelBundleTaskCommand";
import {
  CancelCapacityReservationCommandInput,
  CancelCapacityReservationCommandOutput,
} from "../commands/CancelCapacityReservationCommand";
import {
  CancelConversionTaskCommandInput,
  CancelConversionTaskCommandOutput,
} from "../commands/CancelConversionTaskCommand";
import { CancelExportTaskCommandInput, CancelExportTaskCommandOutput } from "../commands/CancelExportTaskCommand";
import { CancelImportTaskCommandInput, CancelImportTaskCommandOutput } from "../commands/CancelImportTaskCommand";
import {
  CancelReservedInstancesListingCommandInput,
  CancelReservedInstancesListingCommandOutput,
} from "../commands/CancelReservedInstancesListingCommand";
import {
  CancelSpotFleetRequestsCommandInput,
  CancelSpotFleetRequestsCommandOutput,
} from "../commands/CancelSpotFleetRequestsCommand";
import {
  CancelSpotInstanceRequestsCommandInput,
  CancelSpotInstanceRequestsCommandOutput,
} from "../commands/CancelSpotInstanceRequestsCommand";
import {
  ConfirmProductInstanceCommandInput,
  ConfirmProductInstanceCommandOutput,
} from "../commands/ConfirmProductInstanceCommand";
import { CopyFpgaImageCommandInput, CopyFpgaImageCommandOutput } from "../commands/CopyFpgaImageCommand";
import { CopyImageCommandInput, CopyImageCommandOutput } from "../commands/CopyImageCommand";
import { CopySnapshotCommandInput, CopySnapshotCommandOutput } from "../commands/CopySnapshotCommand";
import {
  CreateCapacityReservationCommandInput,
  CreateCapacityReservationCommandOutput,
} from "../commands/CreateCapacityReservationCommand";
import {
  CreateCarrierGatewayCommandInput,
  CreateCarrierGatewayCommandOutput,
} from "../commands/CreateCarrierGatewayCommand";
import {
  CreateClientVpnEndpointCommandInput,
  CreateClientVpnEndpointCommandOutput,
} from "../commands/CreateClientVpnEndpointCommand";
import {
  CreateClientVpnRouteCommandInput,
  CreateClientVpnRouteCommandOutput,
} from "../commands/CreateClientVpnRouteCommand";
import {
  CreateCustomerGatewayCommandInput,
  CreateCustomerGatewayCommandOutput,
} from "../commands/CreateCustomerGatewayCommand";
import {
  CreateDefaultSubnetCommandInput,
  CreateDefaultSubnetCommandOutput,
} from "../commands/CreateDefaultSubnetCommand";
import { CreateDefaultVpcCommandInput, CreateDefaultVpcCommandOutput } from "../commands/CreateDefaultVpcCommand";
import { CreateDhcpOptionsCommandInput, CreateDhcpOptionsCommandOutput } from "../commands/CreateDhcpOptionsCommand";
import {
  CreateEgressOnlyInternetGatewayCommandInput,
  CreateEgressOnlyInternetGatewayCommandOutput,
} from "../commands/CreateEgressOnlyInternetGatewayCommand";
import { CreateFleetCommandInput, CreateFleetCommandOutput } from "../commands/CreateFleetCommand";
import { CreateFlowLogsCommandInput, CreateFlowLogsCommandOutput } from "../commands/CreateFlowLogsCommand";
import { CreateFpgaImageCommandInput, CreateFpgaImageCommandOutput } from "../commands/CreateFpgaImageCommand";
import { CreateImageCommandInput, CreateImageCommandOutput } from "../commands/CreateImageCommand";
import {
  CreateInstanceExportTaskCommandInput,
  CreateInstanceExportTaskCommandOutput,
} from "../commands/CreateInstanceExportTaskCommand";
import {
  CreateInternetGatewayCommandInput,
  CreateInternetGatewayCommandOutput,
} from "../commands/CreateInternetGatewayCommand";
import { CreateKeyPairCommandInput, CreateKeyPairCommandOutput } from "../commands/CreateKeyPairCommand";
import {
  CreateLaunchTemplateCommandInput,
  CreateLaunchTemplateCommandOutput,
} from "../commands/CreateLaunchTemplateCommand";
import {
  CreateLaunchTemplateVersionCommandInput,
  CreateLaunchTemplateVersionCommandOutput,
} from "../commands/CreateLaunchTemplateVersionCommand";
import {
  CreateLocalGatewayRouteCommandInput,
  CreateLocalGatewayRouteCommandOutput,
} from "../commands/CreateLocalGatewayRouteCommand";
import {
  CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  CreateLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableVpcAssociationCommand";
import {
  CreateManagedPrefixListCommandInput,
  CreateManagedPrefixListCommandOutput,
} from "../commands/CreateManagedPrefixListCommand";
import { CreateNatGatewayCommandInput, CreateNatGatewayCommandOutput } from "../commands/CreateNatGatewayCommand";
import { CreateNetworkAclCommandInput, CreateNetworkAclCommandOutput } from "../commands/CreateNetworkAclCommand";
import {
  CreateNetworkAclEntryCommandInput,
  CreateNetworkAclEntryCommandOutput,
} from "../commands/CreateNetworkAclEntryCommand";
import {
  CreateNetworkInsightsPathCommandInput,
  CreateNetworkInsightsPathCommandOutput,
} from "../commands/CreateNetworkInsightsPathCommand";
import {
  CreateNetworkInterfaceCommandInput,
  CreateNetworkInterfaceCommandOutput,
} from "../commands/CreateNetworkInterfaceCommand";
import {
  CreateNetworkInterfacePermissionCommandInput,
  CreateNetworkInterfacePermissionCommandOutput,
} from "../commands/CreateNetworkInterfacePermissionCommand";
import {
  CreatePlacementGroupCommandInput,
  CreatePlacementGroupCommandOutput,
} from "../commands/CreatePlacementGroupCommand";
import {
  CreateReservedInstancesListingCommandInput,
  CreateReservedInstancesListingCommandOutput,
} from "../commands/CreateReservedInstancesListingCommand";
import { CreateRouteCommandInput, CreateRouteCommandOutput } from "../commands/CreateRouteCommand";
import { CreateRouteTableCommandInput, CreateRouteTableCommandOutput } from "../commands/CreateRouteTableCommand";
import {
  CreateSecurityGroupCommandInput,
  CreateSecurityGroupCommandOutput,
} from "../commands/CreateSecurityGroupCommand";
import { CreateSnapshotCommandInput, CreateSnapshotCommandOutput } from "../commands/CreateSnapshotCommand";
import { CreateSnapshotsCommandInput, CreateSnapshotsCommandOutput } from "../commands/CreateSnapshotsCommand";
import {
  CreateSpotDatafeedSubscriptionCommandInput,
  CreateSpotDatafeedSubscriptionCommandOutput,
} from "../commands/CreateSpotDatafeedSubscriptionCommand";
import { CreateSubnetCommandInput, CreateSubnetCommandOutput } from "../commands/CreateSubnetCommand";
import { CreateTagsCommandInput, CreateTagsCommandOutput } from "../commands/CreateTagsCommand";
import {
  CreateTrafficMirrorFilterCommandInput,
  CreateTrafficMirrorFilterCommandOutput,
} from "../commands/CreateTrafficMirrorFilterCommand";
import {
  CreateTrafficMirrorFilterRuleCommandInput,
  CreateTrafficMirrorFilterRuleCommandOutput,
} from "../commands/CreateTrafficMirrorFilterRuleCommand";
import {
  CreateTrafficMirrorSessionCommandInput,
  CreateTrafficMirrorSessionCommandOutput,
} from "../commands/CreateTrafficMirrorSessionCommand";
import {
  CreateTrafficMirrorTargetCommandInput,
  CreateTrafficMirrorTargetCommandOutput,
} from "../commands/CreateTrafficMirrorTargetCommand";
import {
  CreateTransitGatewayCommandInput,
  CreateTransitGatewayCommandOutput,
} from "../commands/CreateTransitGatewayCommand";
import {
  CreateTransitGatewayConnectCommandInput,
  CreateTransitGatewayConnectCommandOutput,
} from "../commands/CreateTransitGatewayConnectCommand";
import {
  CreateTransitGatewayConnectPeerCommandInput,
  CreateTransitGatewayConnectPeerCommandOutput,
} from "../commands/CreateTransitGatewayConnectPeerCommand";
import {
  CreateTransitGatewayMulticastDomainCommandInput,
  CreateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/CreateTransitGatewayMulticastDomainCommand";
import {
  CreateTransitGatewayPeeringAttachmentCommandInput,
  CreateTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayPeeringAttachmentCommand";
import {
  CreateTransitGatewayPrefixListReferenceCommandInput,
  CreateTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/CreateTransitGatewayPrefixListReferenceCommand";
import {
  CreateTransitGatewayRouteCommandInput,
  CreateTransitGatewayRouteCommandOutput,
} from "../commands/CreateTransitGatewayRouteCommand";
import {
  CreateTransitGatewayRouteTableCommandInput,
  CreateTransitGatewayRouteTableCommandOutput,
} from "../commands/CreateTransitGatewayRouteTableCommand";
import {
  CreateTransitGatewayVpcAttachmentCommandInput,
  CreateTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayVpcAttachmentCommand";
import { CreateVolumeCommandInput, CreateVolumeCommandOutput } from "../commands/CreateVolumeCommand";
import { CreateVpcCommandInput, CreateVpcCommandOutput } from "../commands/CreateVpcCommand";
import { CreateVpcEndpointCommandInput, CreateVpcEndpointCommandOutput } from "../commands/CreateVpcEndpointCommand";
import {
  CreateVpcEndpointConnectionNotificationCommandInput,
  CreateVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/CreateVpcEndpointConnectionNotificationCommand";
import {
  CreateVpcEndpointServiceConfigurationCommandInput,
  CreateVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/CreateVpcEndpointServiceConfigurationCommand";
import {
  CreateVpcPeeringConnectionCommandInput,
  CreateVpcPeeringConnectionCommandOutput,
} from "../commands/CreateVpcPeeringConnectionCommand";
import {
  CreateVpnConnectionCommandInput,
  CreateVpnConnectionCommandOutput,
} from "../commands/CreateVpnConnectionCommand";
import {
  CreateVpnConnectionRouteCommandInput,
  CreateVpnConnectionRouteCommandOutput,
} from "../commands/CreateVpnConnectionRouteCommand";
import { CreateVpnGatewayCommandInput, CreateVpnGatewayCommandOutput } from "../commands/CreateVpnGatewayCommand";
import {
  DeleteCarrierGatewayCommandInput,
  DeleteCarrierGatewayCommandOutput,
} from "../commands/DeleteCarrierGatewayCommand";
import {
  DeleteClientVpnEndpointCommandInput,
  DeleteClientVpnEndpointCommandOutput,
} from "../commands/DeleteClientVpnEndpointCommand";
import {
  DeleteClientVpnRouteCommandInput,
  DeleteClientVpnRouteCommandOutput,
} from "../commands/DeleteClientVpnRouteCommand";
import {
  DeleteCustomerGatewayCommandInput,
  DeleteCustomerGatewayCommandOutput,
} from "../commands/DeleteCustomerGatewayCommand";
import { DeleteDhcpOptionsCommandInput, DeleteDhcpOptionsCommandOutput } from "../commands/DeleteDhcpOptionsCommand";
import {
  DeleteEgressOnlyInternetGatewayCommandInput,
  DeleteEgressOnlyInternetGatewayCommandOutput,
} from "../commands/DeleteEgressOnlyInternetGatewayCommand";
import { DeleteFleetsCommandInput, DeleteFleetsCommandOutput } from "../commands/DeleteFleetsCommand";
import { DeleteFlowLogsCommandInput, DeleteFlowLogsCommandOutput } from "../commands/DeleteFlowLogsCommand";
import { DeleteFpgaImageCommandInput, DeleteFpgaImageCommandOutput } from "../commands/DeleteFpgaImageCommand";
import {
  DeleteInternetGatewayCommandInput,
  DeleteInternetGatewayCommandOutput,
} from "../commands/DeleteInternetGatewayCommand";
import { DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput } from "../commands/DeleteKeyPairCommand";
import {
  DeleteLaunchTemplateCommandInput,
  DeleteLaunchTemplateCommandOutput,
} from "../commands/DeleteLaunchTemplateCommand";
import {
  DeleteLaunchTemplateVersionsCommandInput,
  DeleteLaunchTemplateVersionsCommandOutput,
} from "../commands/DeleteLaunchTemplateVersionsCommand";
import {
  DeleteLocalGatewayRouteCommandInput,
  DeleteLocalGatewayRouteCommandOutput,
} from "../commands/DeleteLocalGatewayRouteCommand";
import {
  DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  DeleteLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableVpcAssociationCommand";
import {
  DeleteManagedPrefixListCommandInput,
  DeleteManagedPrefixListCommandOutput,
} from "../commands/DeleteManagedPrefixListCommand";
import { DeleteNatGatewayCommandInput, DeleteNatGatewayCommandOutput } from "../commands/DeleteNatGatewayCommand";
import { DeleteNetworkAclCommandInput, DeleteNetworkAclCommandOutput } from "../commands/DeleteNetworkAclCommand";
import {
  DeleteNetworkAclEntryCommandInput,
  DeleteNetworkAclEntryCommandOutput,
} from "../commands/DeleteNetworkAclEntryCommand";
import {
  DeleteNetworkInsightsAnalysisCommandInput,
  DeleteNetworkInsightsAnalysisCommandOutput,
} from "../commands/DeleteNetworkInsightsAnalysisCommand";
import {
  DeleteNetworkInsightsPathCommandInput,
  DeleteNetworkInsightsPathCommandOutput,
} from "../commands/DeleteNetworkInsightsPathCommand";
import {
  DeleteNetworkInterfaceCommandInput,
  DeleteNetworkInterfaceCommandOutput,
} from "../commands/DeleteNetworkInterfaceCommand";
import {
  DeleteNetworkInterfacePermissionCommandInput,
  DeleteNetworkInterfacePermissionCommandOutput,
} from "../commands/DeleteNetworkInterfacePermissionCommand";
import {
  DeletePlacementGroupCommandInput,
  DeletePlacementGroupCommandOutput,
} from "../commands/DeletePlacementGroupCommand";
import {
  DeleteQueuedReservedInstancesCommandInput,
  DeleteQueuedReservedInstancesCommandOutput,
} from "../commands/DeleteQueuedReservedInstancesCommand";
import { DeleteRouteCommandInput, DeleteRouteCommandOutput } from "../commands/DeleteRouteCommand";
import { DeleteRouteTableCommandInput, DeleteRouteTableCommandOutput } from "../commands/DeleteRouteTableCommand";
import {
  DeleteSecurityGroupCommandInput,
  DeleteSecurityGroupCommandOutput,
} from "../commands/DeleteSecurityGroupCommand";
import { DeleteSnapshotCommandInput, DeleteSnapshotCommandOutput } from "../commands/DeleteSnapshotCommand";
import {
  DeleteSpotDatafeedSubscriptionCommandInput,
  DeleteSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DeleteSpotDatafeedSubscriptionCommand";
import { DeleteSubnetCommandInput, DeleteSubnetCommandOutput } from "../commands/DeleteSubnetCommand";
import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "../commands/DeleteTagsCommand";
import {
  DeleteTrafficMirrorFilterCommandInput,
  DeleteTrafficMirrorFilterCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterCommand";
import {
  DeleteTrafficMirrorFilterRuleCommandInput,
  DeleteTrafficMirrorFilterRuleCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterRuleCommand";
import {
  DeleteTrafficMirrorSessionCommandInput,
  DeleteTrafficMirrorSessionCommandOutput,
} from "../commands/DeleteTrafficMirrorSessionCommand";
import {
  DeleteTrafficMirrorTargetCommandInput,
  DeleteTrafficMirrorTargetCommandOutput,
} from "../commands/DeleteTrafficMirrorTargetCommand";
import {
  DeleteTransitGatewayCommandInput,
  DeleteTransitGatewayCommandOutput,
} from "../commands/DeleteTransitGatewayCommand";
import {
  DeleteTransitGatewayConnectCommandInput,
  DeleteTransitGatewayConnectCommandOutput,
} from "../commands/DeleteTransitGatewayConnectCommand";
import {
  DeleteTransitGatewayConnectPeerCommandInput,
  DeleteTransitGatewayConnectPeerCommandOutput,
} from "../commands/DeleteTransitGatewayConnectPeerCommand";
import {
  DeleteTransitGatewayMulticastDomainCommandInput,
  DeleteTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DeleteTransitGatewayMulticastDomainCommand";
import {
  DeleteTransitGatewayPeeringAttachmentCommandInput,
  DeleteTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayPeeringAttachmentCommand";
import {
  DeleteTransitGatewayPrefixListReferenceCommandInput,
  DeleteTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/DeleteTransitGatewayPrefixListReferenceCommand";
import {
  DeleteTransitGatewayRouteCommandInput,
  DeleteTransitGatewayRouteCommandOutput,
} from "../commands/DeleteTransitGatewayRouteCommand";
import {
  DeleteTransitGatewayRouteTableCommandInput,
  DeleteTransitGatewayRouteTableCommandOutput,
} from "../commands/DeleteTransitGatewayRouteTableCommand";
import {
  DeleteTransitGatewayVpcAttachmentCommandInput,
  DeleteTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayVpcAttachmentCommand";
import { DeleteVolumeCommandInput, DeleteVolumeCommandOutput } from "../commands/DeleteVolumeCommand";
import { DeleteVpcCommandInput, DeleteVpcCommandOutput } from "../commands/DeleteVpcCommand";
import {
  DeleteVpcEndpointConnectionNotificationsCommandInput,
  DeleteVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DeleteVpcEndpointConnectionNotificationsCommand";
import {
  DeleteVpcEndpointServiceConfigurationsCommandInput,
  DeleteVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DeleteVpcEndpointServiceConfigurationsCommand";
import { DeleteVpcEndpointsCommandInput, DeleteVpcEndpointsCommandOutput } from "../commands/DeleteVpcEndpointsCommand";
import {
  DeleteVpcPeeringConnectionCommandInput,
  DeleteVpcPeeringConnectionCommandOutput,
} from "../commands/DeleteVpcPeeringConnectionCommand";
import {
  DeleteVpnConnectionCommandInput,
  DeleteVpnConnectionCommandOutput,
} from "../commands/DeleteVpnConnectionCommand";
import {
  DeleteVpnConnectionRouteCommandInput,
  DeleteVpnConnectionRouteCommandOutput,
} from "../commands/DeleteVpnConnectionRouteCommand";
import { DeleteVpnGatewayCommandInput, DeleteVpnGatewayCommandOutput } from "../commands/DeleteVpnGatewayCommand";
import {
  DeprovisionByoipCidrCommandInput,
  DeprovisionByoipCidrCommandOutput,
} from "../commands/DeprovisionByoipCidrCommand";
import { DeregisterImageCommandInput, DeregisterImageCommandOutput } from "../commands/DeregisterImageCommand";
import {
  DeregisterInstanceEventNotificationAttributesCommandInput,
  DeregisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DeregisterInstanceEventNotificationAttributesCommand";
import {
  DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  DeregisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupMembersCommand";
import {
  DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  DeregisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupSourcesCommand";
import {
  DescribeAccountAttributesCommandInput,
  DescribeAccountAttributesCommandOutput,
} from "../commands/DescribeAccountAttributesCommand";
import { DescribeAddressesCommandInput, DescribeAddressesCommandOutput } from "../commands/DescribeAddressesCommand";
import {
  DescribeAggregateIdFormatCommandInput,
  DescribeAggregateIdFormatCommandOutput,
} from "../commands/DescribeAggregateIdFormatCommand";
import {
  DescribeAvailabilityZonesCommandInput,
  DescribeAvailabilityZonesCommandOutput,
} from "../commands/DescribeAvailabilityZonesCommand";
import {
  DescribeBundleTasksCommandInput,
  DescribeBundleTasksCommandOutput,
} from "../commands/DescribeBundleTasksCommand";
import { DescribeByoipCidrsCommandInput, DescribeByoipCidrsCommandOutput } from "../commands/DescribeByoipCidrsCommand";
import {
  DescribeCapacityReservationsCommandInput,
  DescribeCapacityReservationsCommandOutput,
} from "../commands/DescribeCapacityReservationsCommand";
import {
  DescribeCarrierGatewaysCommandInput,
  DescribeCarrierGatewaysCommandOutput,
} from "../commands/DescribeCarrierGatewaysCommand";
import {
  DescribeClassicLinkInstancesCommandInput,
  DescribeClassicLinkInstancesCommandOutput,
} from "../commands/DescribeClassicLinkInstancesCommand";
import {
  DescribeClientVpnAuthorizationRulesCommandInput,
  DescribeClientVpnAuthorizationRulesCommandOutput,
} from "../commands/DescribeClientVpnAuthorizationRulesCommand";
import {
  DescribeClientVpnConnectionsCommandInput,
  DescribeClientVpnConnectionsCommandOutput,
} from "../commands/DescribeClientVpnConnectionsCommand";
import {
  DescribeClientVpnEndpointsCommandInput,
  DescribeClientVpnEndpointsCommandOutput,
} from "../commands/DescribeClientVpnEndpointsCommand";
import {
  DescribeClientVpnRoutesCommandInput,
  DescribeClientVpnRoutesCommandOutput,
} from "../commands/DescribeClientVpnRoutesCommand";
import {
  DescribeClientVpnTargetNetworksCommandInput,
  DescribeClientVpnTargetNetworksCommandOutput,
} from "../commands/DescribeClientVpnTargetNetworksCommand";
import { DescribeCoipPoolsCommandInput, DescribeCoipPoolsCommandOutput } from "../commands/DescribeCoipPoolsCommand";
import {
  DescribeConversionTasksCommandInput,
  DescribeConversionTasksCommandOutput,
} from "../commands/DescribeConversionTasksCommand";
import {
  DescribeCustomerGatewaysCommandInput,
  DescribeCustomerGatewaysCommandOutput,
} from "../commands/DescribeCustomerGatewaysCommand";
import {
  DescribeDhcpOptionsCommandInput,
  DescribeDhcpOptionsCommandOutput,
} from "../commands/DescribeDhcpOptionsCommand";
import {
  DescribeEgressOnlyInternetGatewaysCommandInput,
  DescribeEgressOnlyInternetGatewaysCommandOutput,
} from "../commands/DescribeEgressOnlyInternetGatewaysCommand";
import {
  DescribeElasticGpusCommandInput,
  DescribeElasticGpusCommandOutput,
} from "../commands/DescribeElasticGpusCommand";
import {
  DescribeExportImageTasksCommandInput,
  DescribeExportImageTasksCommandOutput,
} from "../commands/DescribeExportImageTasksCommand";
import {
  DescribeExportTasksCommandInput,
  DescribeExportTasksCommandOutput,
} from "../commands/DescribeExportTasksCommand";
import {
  DescribeFastSnapshotRestoresCommandInput,
  DescribeFastSnapshotRestoresCommandOutput,
} from "../commands/DescribeFastSnapshotRestoresCommand";
import {
  DescribeFleetHistoryCommandInput,
  DescribeFleetHistoryCommandOutput,
} from "../commands/DescribeFleetHistoryCommand";
import {
  DescribeFleetInstancesCommandInput,
  DescribeFleetInstancesCommandOutput,
} from "../commands/DescribeFleetInstancesCommand";
import { DescribeFleetsCommandInput, DescribeFleetsCommandOutput } from "../commands/DescribeFleetsCommand";
import { DescribeFlowLogsCommandInput, DescribeFlowLogsCommandOutput } from "../commands/DescribeFlowLogsCommand";
import {
  DescribeFpgaImageAttributeCommandInput,
  DescribeFpgaImageAttributeCommandOutput,
} from "../commands/DescribeFpgaImageAttributeCommand";
import { DescribeFpgaImagesCommandInput, DescribeFpgaImagesCommandOutput } from "../commands/DescribeFpgaImagesCommand";
import {
  DescribeHostReservationOfferingsCommandInput,
  DescribeHostReservationOfferingsCommandOutput,
} from "../commands/DescribeHostReservationOfferingsCommand";
import {
  DescribeHostReservationsCommandInput,
  DescribeHostReservationsCommandOutput,
} from "../commands/DescribeHostReservationsCommand";
import { DescribeHostsCommandInput, DescribeHostsCommandOutput } from "../commands/DescribeHostsCommand";
import {
  DescribeIamInstanceProfileAssociationsCommandInput,
  DescribeIamInstanceProfileAssociationsCommandOutput,
} from "../commands/DescribeIamInstanceProfileAssociationsCommand";
import { DescribeIdFormatCommandInput, DescribeIdFormatCommandOutput } from "../commands/DescribeIdFormatCommand";
import {
  DescribeIdentityIdFormatCommandInput,
  DescribeIdentityIdFormatCommandOutput,
} from "../commands/DescribeIdentityIdFormatCommand";
import {
  DescribeImageAttributeCommandInput,
  DescribeImageAttributeCommandOutput,
} from "../commands/DescribeImageAttributeCommand";
import { DescribeImagesCommandInput, DescribeImagesCommandOutput } from "../commands/DescribeImagesCommand";
import {
  DescribeImportImageTasksCommandInput,
  DescribeImportImageTasksCommandOutput,
} from "../commands/DescribeImportImageTasksCommand";
import {
  DescribeImportSnapshotTasksCommandInput,
  DescribeImportSnapshotTasksCommandOutput,
} from "../commands/DescribeImportSnapshotTasksCommand";
import {
  DescribeInstanceAttributeCommandInput,
  DescribeInstanceAttributeCommandOutput,
} from "../commands/DescribeInstanceAttributeCommand";
import {
  DescribeInstanceCreditSpecificationsCommandInput,
  DescribeInstanceCreditSpecificationsCommandOutput,
} from "../commands/DescribeInstanceCreditSpecificationsCommand";
import {
  DescribeInstanceEventNotificationAttributesCommandInput,
  DescribeInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DescribeInstanceEventNotificationAttributesCommand";
import {
  DescribeInstanceStatusCommandInput,
  DescribeInstanceStatusCommandOutput,
} from "../commands/DescribeInstanceStatusCommand";
import {
  DescribeInstanceTypeOfferingsCommandInput,
  DescribeInstanceTypeOfferingsCommandOutput,
} from "../commands/DescribeInstanceTypeOfferingsCommand";
import {
  DescribeInstanceTypesCommandInput,
  DescribeInstanceTypesCommandOutput,
} from "../commands/DescribeInstanceTypesCommand";
import { DescribeInstancesCommandInput, DescribeInstancesCommandOutput } from "../commands/DescribeInstancesCommand";
import {
  DescribeInternetGatewaysCommandInput,
  DescribeInternetGatewaysCommandOutput,
} from "../commands/DescribeInternetGatewaysCommand";
import { DescribeIpv6PoolsCommandInput, DescribeIpv6PoolsCommandOutput } from "../commands/DescribeIpv6PoolsCommand";
import { DescribeKeyPairsCommandInput, DescribeKeyPairsCommandOutput } from "../commands/DescribeKeyPairsCommand";
import {
  DescribeLaunchTemplateVersionsCommandInput,
  DescribeLaunchTemplateVersionsCommandOutput,
} from "../commands/DescribeLaunchTemplateVersionsCommand";
import {
  DescribeLaunchTemplatesCommandInput,
  DescribeLaunchTemplatesCommandOutput,
} from "../commands/DescribeLaunchTemplatesCommand";
import {
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand";
import {
  DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVpcAssociationsCommand";
import {
  DescribeLocalGatewayRouteTablesCommandInput,
  DescribeLocalGatewayRouteTablesCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTablesCommand";
import {
  DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfaceGroupsCommand";
import {
  DescribeLocalGatewayVirtualInterfacesCommandInput,
  DescribeLocalGatewayVirtualInterfacesCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfacesCommand";
import {
  DescribeLocalGatewaysCommandInput,
  DescribeLocalGatewaysCommandOutput,
} from "../commands/DescribeLocalGatewaysCommand";
import {
  DescribeManagedPrefixListsCommandInput,
  DescribeManagedPrefixListsCommandOutput,
} from "../commands/DescribeManagedPrefixListsCommand";
import {
  DescribeMovingAddressesCommandInput,
  DescribeMovingAddressesCommandOutput,
} from "../commands/DescribeMovingAddressesCommand";
import {
  DescribeNatGatewaysCommandInput,
  DescribeNatGatewaysCommandOutput,
} from "../commands/DescribeNatGatewaysCommand";
import {
  DescribeNetworkAclsCommandInput,
  DescribeNetworkAclsCommandOutput,
} from "../commands/DescribeNetworkAclsCommand";
import {
  DescribeNetworkInsightsAnalysesCommandInput,
  DescribeNetworkInsightsAnalysesCommandOutput,
} from "../commands/DescribeNetworkInsightsAnalysesCommand";
import {
  DescribeNetworkInsightsPathsCommandInput,
  DescribeNetworkInsightsPathsCommandOutput,
} from "../commands/DescribeNetworkInsightsPathsCommand";
import {
  DescribeNetworkInterfaceAttributeCommandInput,
  DescribeNetworkInterfaceAttributeCommandOutput,
} from "../commands/DescribeNetworkInterfaceAttributeCommand";
import {
  DescribeNetworkInterfacePermissionsCommandInput,
  DescribeNetworkInterfacePermissionsCommandOutput,
} from "../commands/DescribeNetworkInterfacePermissionsCommand";
import {
  DescribeNetworkInterfacesCommandInput,
  DescribeNetworkInterfacesCommandOutput,
} from "../commands/DescribeNetworkInterfacesCommand";
import {
  DescribePlacementGroupsCommandInput,
  DescribePlacementGroupsCommandOutput,
} from "../commands/DescribePlacementGroupsCommand";
import {
  DescribePrefixListsCommandInput,
  DescribePrefixListsCommandOutput,
} from "../commands/DescribePrefixListsCommand";
import {
  DescribePrincipalIdFormatCommandInput,
  DescribePrincipalIdFormatCommandOutput,
} from "../commands/DescribePrincipalIdFormatCommand";
import {
  DescribePublicIpv4PoolsCommandInput,
  DescribePublicIpv4PoolsCommandOutput,
} from "../commands/DescribePublicIpv4PoolsCommand";
import { DescribeRegionsCommandInput, DescribeRegionsCommandOutput } from "../commands/DescribeRegionsCommand";
import {
  DescribeReservedInstancesCommandInput,
  DescribeReservedInstancesCommandOutput,
} from "../commands/DescribeReservedInstancesCommand";
import {
  DescribeReservedInstancesListingsCommandInput,
  DescribeReservedInstancesListingsCommandOutput,
} from "../commands/DescribeReservedInstancesListingsCommand";
import {
  DescribeReservedInstancesModificationsCommandInput,
  DescribeReservedInstancesModificationsCommandOutput,
} from "../commands/DescribeReservedInstancesModificationsCommand";
import {
  DescribeReservedInstancesOfferingsCommandInput,
  DescribeReservedInstancesOfferingsCommandOutput,
} from "../commands/DescribeReservedInstancesOfferingsCommand";
import {
  DescribeRouteTablesCommandInput,
  DescribeRouteTablesCommandOutput,
} from "../commands/DescribeRouteTablesCommand";
import {
  DescribeScheduledInstanceAvailabilityCommandInput,
  DescribeScheduledInstanceAvailabilityCommandOutput,
} from "../commands/DescribeScheduledInstanceAvailabilityCommand";
import {
  DescribeScheduledInstancesCommandInput,
  DescribeScheduledInstancesCommandOutput,
} from "../commands/DescribeScheduledInstancesCommand";
import {
  DescribeSecurityGroupReferencesCommandInput,
  DescribeSecurityGroupReferencesCommandOutput,
} from "../commands/DescribeSecurityGroupReferencesCommand";
import {
  DescribeSecurityGroupsCommandInput,
  DescribeSecurityGroupsCommandOutput,
} from "../commands/DescribeSecurityGroupsCommand";
import {
  DescribeSnapshotAttributeCommandInput,
  DescribeSnapshotAttributeCommandOutput,
} from "../commands/DescribeSnapshotAttributeCommand";
import { DescribeSnapshotsCommandInput, DescribeSnapshotsCommandOutput } from "../commands/DescribeSnapshotsCommand";
import {
  DescribeSpotDatafeedSubscriptionCommandInput,
  DescribeSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DescribeSpotDatafeedSubscriptionCommand";
import {
  DescribeSpotFleetInstancesCommandInput,
  DescribeSpotFleetInstancesCommandOutput,
} from "../commands/DescribeSpotFleetInstancesCommand";
import {
  DescribeSpotFleetRequestHistoryCommandInput,
  DescribeSpotFleetRequestHistoryCommandOutput,
} from "../commands/DescribeSpotFleetRequestHistoryCommand";
import {
  DescribeSpotFleetRequestsCommandInput,
  DescribeSpotFleetRequestsCommandOutput,
} from "../commands/DescribeSpotFleetRequestsCommand";
import {
  DescribeSpotInstanceRequestsCommandInput,
  DescribeSpotInstanceRequestsCommandOutput,
} from "../commands/DescribeSpotInstanceRequestsCommand";
import {
  DescribeSpotPriceHistoryCommandInput,
  DescribeSpotPriceHistoryCommandOutput,
} from "../commands/DescribeSpotPriceHistoryCommand";
import {
  DescribeStaleSecurityGroupsCommandInput,
  DescribeStaleSecurityGroupsCommandOutput,
} from "../commands/DescribeStaleSecurityGroupsCommand";
import { DescribeSubnetsCommandInput, DescribeSubnetsCommandOutput } from "../commands/DescribeSubnetsCommand";
import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "../commands/DescribeTagsCommand";
import {
  DescribeTrafficMirrorFiltersCommandInput,
  DescribeTrafficMirrorFiltersCommandOutput,
} from "../commands/DescribeTrafficMirrorFiltersCommand";
import {
  DescribeTrafficMirrorSessionsCommandInput,
  DescribeTrafficMirrorSessionsCommandOutput,
} from "../commands/DescribeTrafficMirrorSessionsCommand";
import {
  DescribeTrafficMirrorTargetsCommandInput,
  DescribeTrafficMirrorTargetsCommandOutput,
} from "../commands/DescribeTrafficMirrorTargetsCommand";
import {
  DescribeTransitGatewayAttachmentsCommandInput,
  DescribeTransitGatewayAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayAttachmentsCommand";
import {
  DescribeTransitGatewayConnectPeersCommandInput,
  DescribeTransitGatewayConnectPeersCommandOutput,
} from "../commands/DescribeTransitGatewayConnectPeersCommand";
import {
  DescribeTransitGatewayConnectsCommandInput,
  DescribeTransitGatewayConnectsCommandOutput,
} from "../commands/DescribeTransitGatewayConnectsCommand";
import {
  DescribeTransitGatewayMulticastDomainsCommandInput,
  DescribeTransitGatewayMulticastDomainsCommandOutput,
} from "../commands/DescribeTransitGatewayMulticastDomainsCommand";
import {
  DescribeTransitGatewayPeeringAttachmentsCommandInput,
  DescribeTransitGatewayPeeringAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayPeeringAttachmentsCommand";
import {
  DescribeTransitGatewayRouteTablesCommandInput,
  DescribeTransitGatewayRouteTablesCommandOutput,
} from "../commands/DescribeTransitGatewayRouteTablesCommand";
import {
  DescribeTransitGatewayVpcAttachmentsCommandInput,
  DescribeTransitGatewayVpcAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayVpcAttachmentsCommand";
import {
  DescribeTransitGatewaysCommandInput,
  DescribeTransitGatewaysCommandOutput,
} from "../commands/DescribeTransitGatewaysCommand";
import {
  DescribeVolumeAttributeCommandInput,
  DescribeVolumeAttributeCommandOutput,
} from "../commands/DescribeVolumeAttributeCommand";
import {
  DescribeVolumeStatusCommandInput,
  DescribeVolumeStatusCommandOutput,
} from "../commands/DescribeVolumeStatusCommand";
import { DescribeVolumesCommandInput, DescribeVolumesCommandOutput } from "../commands/DescribeVolumesCommand";
import {
  DescribeVolumesModificationsCommandInput,
  DescribeVolumesModificationsCommandOutput,
} from "../commands/DescribeVolumesModificationsCommand";
import {
  DescribeVpcAttributeCommandInput,
  DescribeVpcAttributeCommandOutput,
} from "../commands/DescribeVpcAttributeCommand";
import {
  DescribeVpcClassicLinkCommandInput,
  DescribeVpcClassicLinkCommandOutput,
} from "../commands/DescribeVpcClassicLinkCommand";
import {
  DescribeVpcClassicLinkDnsSupportCommandInput,
  DescribeVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DescribeVpcClassicLinkDnsSupportCommand";
import {
  DescribeVpcEndpointConnectionNotificationsCommandInput,
  DescribeVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionNotificationsCommand";
import {
  DescribeVpcEndpointConnectionsCommandInput,
  DescribeVpcEndpointConnectionsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionsCommand";
import {
  DescribeVpcEndpointServiceConfigurationsCommandInput,
  DescribeVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DescribeVpcEndpointServiceConfigurationsCommand";
import {
  DescribeVpcEndpointServicePermissionsCommandInput,
  DescribeVpcEndpointServicePermissionsCommandOutput,
} from "../commands/DescribeVpcEndpointServicePermissionsCommand";
import {
  DescribeVpcEndpointServicesCommandInput,
  DescribeVpcEndpointServicesCommandOutput,
} from "../commands/DescribeVpcEndpointServicesCommand";
import {
  DescribeVpcEndpointsCommandInput,
  DescribeVpcEndpointsCommandOutput,
} from "../commands/DescribeVpcEndpointsCommand";
import {
  DescribeVpcPeeringConnectionsCommandInput,
  DescribeVpcPeeringConnectionsCommandOutput,
} from "../commands/DescribeVpcPeeringConnectionsCommand";
import { DescribeVpcsCommandInput, DescribeVpcsCommandOutput } from "../commands/DescribeVpcsCommand";
import {
  DescribeVpnConnectionsCommandInput,
  DescribeVpnConnectionsCommandOutput,
} from "../commands/DescribeVpnConnectionsCommand";
import {
  DescribeVpnGatewaysCommandInput,
  DescribeVpnGatewaysCommandOutput,
} from "../commands/DescribeVpnGatewaysCommand";
import {
  DetachClassicLinkVpcCommandInput,
  DetachClassicLinkVpcCommandOutput,
} from "../commands/DetachClassicLinkVpcCommand";
import {
  DetachInternetGatewayCommandInput,
  DetachInternetGatewayCommandOutput,
} from "../commands/DetachInternetGatewayCommand";
import {
  DetachNetworkInterfaceCommandInput,
  DetachNetworkInterfaceCommandOutput,
} from "../commands/DetachNetworkInterfaceCommand";
import { DetachVolumeCommandInput, DetachVolumeCommandOutput } from "../commands/DetachVolumeCommand";
import { DetachVpnGatewayCommandInput, DetachVpnGatewayCommandOutput } from "../commands/DetachVpnGatewayCommand";
import {
  DisableEbsEncryptionByDefaultCommandInput,
  DisableEbsEncryptionByDefaultCommandOutput,
} from "../commands/DisableEbsEncryptionByDefaultCommand";
import {
  DisableFastSnapshotRestoresCommandInput,
  DisableFastSnapshotRestoresCommandOutput,
} from "../commands/DisableFastSnapshotRestoresCommand";
import {
  DisableTransitGatewayRouteTablePropagationCommandInput,
  DisableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/DisableTransitGatewayRouteTablePropagationCommand";
import {
  DisableVgwRoutePropagationCommandInput,
  DisableVgwRoutePropagationCommandOutput,
} from "../commands/DisableVgwRoutePropagationCommand";
import {
  DisableVpcClassicLinkCommandInput,
  DisableVpcClassicLinkCommandOutput,
} from "../commands/DisableVpcClassicLinkCommand";
import {
  DisableVpcClassicLinkDnsSupportCommandInput,
  DisableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DisableVpcClassicLinkDnsSupportCommand";
import {
  DisassociateAddressCommandInput,
  DisassociateAddressCommandOutput,
} from "../commands/DisassociateAddressCommand";
import {
  DisassociateClientVpnTargetNetworkCommandInput,
  DisassociateClientVpnTargetNetworkCommandOutput,
} from "../commands/DisassociateClientVpnTargetNetworkCommand";
import {
  DisassociateEnclaveCertificateIamRoleCommandInput,
  DisassociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/DisassociateEnclaveCertificateIamRoleCommand";
import {
  DisassociateIamInstanceProfileCommandInput,
  DisassociateIamInstanceProfileCommandOutput,
} from "../commands/DisassociateIamInstanceProfileCommand";
import {
  DisassociateRouteTableCommandInput,
  DisassociateRouteTableCommandOutput,
} from "../commands/DisassociateRouteTableCommand";
import {
  DisassociateSubnetCidrBlockCommandInput,
  DisassociateSubnetCidrBlockCommandOutput,
} from "../commands/DisassociateSubnetCidrBlockCommand";
import {
  DisassociateTransitGatewayMulticastDomainCommandInput,
  DisassociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DisassociateTransitGatewayMulticastDomainCommand";
import {
  DisassociateTransitGatewayRouteTableCommandInput,
  DisassociateTransitGatewayRouteTableCommandOutput,
} from "../commands/DisassociateTransitGatewayRouteTableCommand";
import {
  DisassociateVpcCidrBlockCommandInput,
  DisassociateVpcCidrBlockCommandOutput,
} from "../commands/DisassociateVpcCidrBlockCommand";
import {
  EnableEbsEncryptionByDefaultCommandInput,
  EnableEbsEncryptionByDefaultCommandOutput,
} from "../commands/EnableEbsEncryptionByDefaultCommand";
import {
  EnableFastSnapshotRestoresCommandInput,
  EnableFastSnapshotRestoresCommandOutput,
} from "../commands/EnableFastSnapshotRestoresCommand";
import {
  EnableTransitGatewayRouteTablePropagationCommandInput,
  EnableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/EnableTransitGatewayRouteTablePropagationCommand";
import {
  EnableVgwRoutePropagationCommandInput,
  EnableVgwRoutePropagationCommandOutput,
} from "../commands/EnableVgwRoutePropagationCommand";
import { EnableVolumeIOCommandInput, EnableVolumeIOCommandOutput } from "../commands/EnableVolumeIOCommand";
import {
  EnableVpcClassicLinkCommandInput,
  EnableVpcClassicLinkCommandOutput,
} from "../commands/EnableVpcClassicLinkCommand";
import {
  EnableVpcClassicLinkDnsSupportCommandInput,
  EnableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/EnableVpcClassicLinkDnsSupportCommand";
import {
  ExportClientVpnClientCertificateRevocationListCommandInput,
  ExportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ExportClientVpnClientCertificateRevocationListCommand";
import {
  ExportClientVpnClientConfigurationCommandInput,
  ExportClientVpnClientConfigurationCommandOutput,
} from "../commands/ExportClientVpnClientConfigurationCommand";
import { ExportImageCommandInput, ExportImageCommandOutput } from "../commands/ExportImageCommand";
import {
  ExportTransitGatewayRoutesCommandInput,
  ExportTransitGatewayRoutesCommandOutput,
} from "../commands/ExportTransitGatewayRoutesCommand";
import {
  GetAssociatedEnclaveCertificateIamRolesCommandInput,
  GetAssociatedEnclaveCertificateIamRolesCommandOutput,
} from "../commands/GetAssociatedEnclaveCertificateIamRolesCommand";
import {
  GetAssociatedIpv6PoolCidrsCommandInput,
  GetAssociatedIpv6PoolCidrsCommandOutput,
} from "../commands/GetAssociatedIpv6PoolCidrsCommand";
import {
  GetCapacityReservationUsageCommandInput,
  GetCapacityReservationUsageCommandOutput,
} from "../commands/GetCapacityReservationUsageCommand";
import { GetCoipPoolUsageCommandInput, GetCoipPoolUsageCommandOutput } from "../commands/GetCoipPoolUsageCommand";
import { GetConsoleOutputCommandInput, GetConsoleOutputCommandOutput } from "../commands/GetConsoleOutputCommand";
import {
  GetConsoleScreenshotCommandInput,
  GetConsoleScreenshotCommandOutput,
} from "../commands/GetConsoleScreenshotCommand";
import {
  GetDefaultCreditSpecificationCommandInput,
  GetDefaultCreditSpecificationCommandOutput,
} from "../commands/GetDefaultCreditSpecificationCommand";
import {
  GetEbsDefaultKmsKeyIdCommandInput,
  GetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/GetEbsDefaultKmsKeyIdCommand";
import {
  GetEbsEncryptionByDefaultCommandInput,
  GetEbsEncryptionByDefaultCommandOutput,
} from "../commands/GetEbsEncryptionByDefaultCommand";
import {
  GetGroupsForCapacityReservationCommandInput,
  GetGroupsForCapacityReservationCommandOutput,
} from "../commands/GetGroupsForCapacityReservationCommand";
import {
  GetHostReservationPurchasePreviewCommandInput,
  GetHostReservationPurchasePreviewCommandOutput,
} from "../commands/GetHostReservationPurchasePreviewCommand";
import {
  GetLaunchTemplateDataCommandInput,
  GetLaunchTemplateDataCommandOutput,
} from "../commands/GetLaunchTemplateDataCommand";
import {
  GetManagedPrefixListAssociationsCommandInput,
  GetManagedPrefixListAssociationsCommandOutput,
} from "../commands/GetManagedPrefixListAssociationsCommand";
import {
  GetManagedPrefixListEntriesCommandInput,
  GetManagedPrefixListEntriesCommandOutput,
} from "../commands/GetManagedPrefixListEntriesCommand";
import { GetPasswordDataCommandInput, GetPasswordDataCommandOutput } from "../commands/GetPasswordDataCommand";
import {
  GetReservedInstancesExchangeQuoteCommandInput,
  GetReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/GetReservedInstancesExchangeQuoteCommand";
import {
  GetTransitGatewayAttachmentPropagationsCommandInput,
  GetTransitGatewayAttachmentPropagationsCommandOutput,
} from "../commands/GetTransitGatewayAttachmentPropagationsCommand";
import {
  GetTransitGatewayMulticastDomainAssociationsCommandInput,
  GetTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/GetTransitGatewayMulticastDomainAssociationsCommand";
import {
  GetTransitGatewayPrefixListReferencesCommandInput,
  GetTransitGatewayPrefixListReferencesCommandOutput,
} from "../commands/GetTransitGatewayPrefixListReferencesCommand";
import {
  GetTransitGatewayRouteTableAssociationsCommandInput,
  GetTransitGatewayRouteTableAssociationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTableAssociationsCommand";
import {
  GetTransitGatewayRouteTablePropagationsCommandInput,
  GetTransitGatewayRouteTablePropagationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTablePropagationsCommand";
import {
  ImportClientVpnClientCertificateRevocationListCommandInput,
  ImportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ImportClientVpnClientCertificateRevocationListCommand";
import { ImportImageCommandInput, ImportImageCommandOutput } from "../commands/ImportImageCommand";
import { ImportInstanceCommandInput, ImportInstanceCommandOutput } from "../commands/ImportInstanceCommand";
import { ImportKeyPairCommandInput, ImportKeyPairCommandOutput } from "../commands/ImportKeyPairCommand";
import { ImportSnapshotCommandInput, ImportSnapshotCommandOutput } from "../commands/ImportSnapshotCommand";
import { ImportVolumeCommandInput, ImportVolumeCommandOutput } from "../commands/ImportVolumeCommand";
import {
  ModifyAvailabilityZoneGroupCommandInput,
  ModifyAvailabilityZoneGroupCommandOutput,
} from "../commands/ModifyAvailabilityZoneGroupCommand";
import {
  ModifyCapacityReservationCommandInput,
  ModifyCapacityReservationCommandOutput,
} from "../commands/ModifyCapacityReservationCommand";
import {
  ModifyClientVpnEndpointCommandInput,
  ModifyClientVpnEndpointCommandOutput,
} from "../commands/ModifyClientVpnEndpointCommand";
import {
  ModifyDefaultCreditSpecificationCommandInput,
  ModifyDefaultCreditSpecificationCommandOutput,
} from "../commands/ModifyDefaultCreditSpecificationCommand";
import {
  ModifyEbsDefaultKmsKeyIdCommandInput,
  ModifyEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ModifyEbsDefaultKmsKeyIdCommand";
import { ModifyFleetCommandInput, ModifyFleetCommandOutput } from "../commands/ModifyFleetCommand";
import {
  ModifyFpgaImageAttributeCommandInput,
  ModifyFpgaImageAttributeCommandOutput,
} from "../commands/ModifyFpgaImageAttributeCommand";
import { ModifyHostsCommandInput, ModifyHostsCommandOutput } from "../commands/ModifyHostsCommand";
import { ModifyIdFormatCommandInput, ModifyIdFormatCommandOutput } from "../commands/ModifyIdFormatCommand";
import {
  ModifyIdentityIdFormatCommandInput,
  ModifyIdentityIdFormatCommandOutput,
} from "../commands/ModifyIdentityIdFormatCommand";
import {
  ModifyImageAttributeCommandInput,
  ModifyImageAttributeCommandOutput,
} from "../commands/ModifyImageAttributeCommand";
import {
  ModifyInstanceAttributeCommandInput,
  ModifyInstanceAttributeCommandOutput,
} from "../commands/ModifyInstanceAttributeCommand";
import {
  ModifyInstanceCapacityReservationAttributesCommandInput,
  ModifyInstanceCapacityReservationAttributesCommandOutput,
} from "../commands/ModifyInstanceCapacityReservationAttributesCommand";
import {
  ModifyInstanceCreditSpecificationCommandInput,
  ModifyInstanceCreditSpecificationCommandOutput,
} from "../commands/ModifyInstanceCreditSpecificationCommand";
import {
  ModifyInstanceEventStartTimeCommandInput,
  ModifyInstanceEventStartTimeCommandOutput,
} from "../commands/ModifyInstanceEventStartTimeCommand";
import {
  ModifyInstanceMetadataOptionsCommandInput,
  ModifyInstanceMetadataOptionsCommandOutput,
} from "../commands/ModifyInstanceMetadataOptionsCommand";
import {
  ModifyInstancePlacementCommandInput,
  ModifyInstancePlacementCommandOutput,
} from "../commands/ModifyInstancePlacementCommand";
import {
  ModifyLaunchTemplateCommandInput,
  ModifyLaunchTemplateCommandOutput,
} from "../commands/ModifyLaunchTemplateCommand";
import {
  ModifyManagedPrefixListCommandInput,
  ModifyManagedPrefixListCommandOutput,
} from "../commands/ModifyManagedPrefixListCommand";
import {
  ModifyNetworkInterfaceAttributeCommandInput,
  ModifyNetworkInterfaceAttributeCommandOutput,
} from "../commands/ModifyNetworkInterfaceAttributeCommand";
import {
  ModifyReservedInstancesCommandInput,
  ModifyReservedInstancesCommandOutput,
} from "../commands/ModifyReservedInstancesCommand";
import {
  ModifySnapshotAttributeCommandInput,
  ModifySnapshotAttributeCommandOutput,
} from "../commands/ModifySnapshotAttributeCommand";
import {
  ModifySpotFleetRequestCommandInput,
  ModifySpotFleetRequestCommandOutput,
} from "../commands/ModifySpotFleetRequestCommand";
import {
  ModifySubnetAttributeCommandInput,
  ModifySubnetAttributeCommandOutput,
} from "../commands/ModifySubnetAttributeCommand";
import {
  ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  ModifyTrafficMirrorFilterNetworkServicesCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterNetworkServicesCommand";
import {
  ModifyTrafficMirrorFilterRuleCommandInput,
  ModifyTrafficMirrorFilterRuleCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterRuleCommand";
import {
  ModifyTrafficMirrorSessionCommandInput,
  ModifyTrafficMirrorSessionCommandOutput,
} from "../commands/ModifyTrafficMirrorSessionCommand";
import {
  ModifyTransitGatewayCommandInput,
  ModifyTransitGatewayCommandOutput,
} from "../commands/ModifyTransitGatewayCommand";
import {
  ModifyTransitGatewayPrefixListReferenceCommandInput,
  ModifyTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/ModifyTransitGatewayPrefixListReferenceCommand";
import {
  ModifyTransitGatewayVpcAttachmentCommandInput,
  ModifyTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/ModifyTransitGatewayVpcAttachmentCommand";
import {
  ModifyVolumeAttributeCommandInput,
  ModifyVolumeAttributeCommandOutput,
} from "../commands/ModifyVolumeAttributeCommand";
import { ModifyVolumeCommandInput, ModifyVolumeCommandOutput } from "../commands/ModifyVolumeCommand";
import { ModifyVpcAttributeCommandInput, ModifyVpcAttributeCommandOutput } from "../commands/ModifyVpcAttributeCommand";
import { ModifyVpcEndpointCommandInput, ModifyVpcEndpointCommandOutput } from "../commands/ModifyVpcEndpointCommand";
import {
  ModifyVpcEndpointConnectionNotificationCommandInput,
  ModifyVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/ModifyVpcEndpointConnectionNotificationCommand";
import {
  ModifyVpcEndpointServiceConfigurationCommandInput,
  ModifyVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/ModifyVpcEndpointServiceConfigurationCommand";
import {
  ModifyVpcEndpointServicePermissionsCommandInput,
  ModifyVpcEndpointServicePermissionsCommandOutput,
} from "../commands/ModifyVpcEndpointServicePermissionsCommand";
import {
  ModifyVpcPeeringConnectionOptionsCommandInput,
  ModifyVpcPeeringConnectionOptionsCommandOutput,
} from "../commands/ModifyVpcPeeringConnectionOptionsCommand";
import { ModifyVpcTenancyCommandInput, ModifyVpcTenancyCommandOutput } from "../commands/ModifyVpcTenancyCommand";
import {
  ModifyVpnConnectionCommandInput,
  ModifyVpnConnectionCommandOutput,
} from "../commands/ModifyVpnConnectionCommand";
import {
  ModifyVpnConnectionOptionsCommandInput,
  ModifyVpnConnectionOptionsCommandOutput,
} from "../commands/ModifyVpnConnectionOptionsCommand";
import {
  ModifyVpnTunnelCertificateCommandInput,
  ModifyVpnTunnelCertificateCommandOutput,
} from "../commands/ModifyVpnTunnelCertificateCommand";
import {
  ModifyVpnTunnelOptionsCommandInput,
  ModifyVpnTunnelOptionsCommandOutput,
} from "../commands/ModifyVpnTunnelOptionsCommand";
import { MonitorInstancesCommandInput, MonitorInstancesCommandOutput } from "../commands/MonitorInstancesCommand";
import { MoveAddressToVpcCommandInput, MoveAddressToVpcCommandOutput } from "../commands/MoveAddressToVpcCommand";
import { ProvisionByoipCidrCommandInput, ProvisionByoipCidrCommandOutput } from "../commands/ProvisionByoipCidrCommand";
import {
  PurchaseHostReservationCommandInput,
  PurchaseHostReservationCommandOutput,
} from "../commands/PurchaseHostReservationCommand";
import {
  PurchaseReservedInstancesOfferingCommandInput,
  PurchaseReservedInstancesOfferingCommandOutput,
} from "../commands/PurchaseReservedInstancesOfferingCommand";
import {
  PurchaseScheduledInstancesCommandInput,
  PurchaseScheduledInstancesCommandOutput,
} from "../commands/PurchaseScheduledInstancesCommand";
import { RebootInstancesCommandInput, RebootInstancesCommandOutput } from "../commands/RebootInstancesCommand";
import { RegisterImageCommandInput, RegisterImageCommandOutput } from "../commands/RegisterImageCommand";
import {
  RegisterInstanceEventNotificationAttributesCommandInput,
  RegisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/RegisterInstanceEventNotificationAttributesCommand";
import {
  RegisterTransitGatewayMulticastGroupMembersCommandInput,
  RegisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupMembersCommand";
import {
  RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  RegisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupSourcesCommand";
import {
  RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  RejectTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/RejectTransitGatewayMulticastDomainAssociationsCommand";
import {
  RejectTransitGatewayPeeringAttachmentCommandInput,
  RejectTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayPeeringAttachmentCommand";
import {
  RejectTransitGatewayVpcAttachmentCommandInput,
  RejectTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayVpcAttachmentCommand";
import {
  RejectVpcEndpointConnectionsCommandInput,
  RejectVpcEndpointConnectionsCommandOutput,
} from "../commands/RejectVpcEndpointConnectionsCommand";
import {
  RejectVpcPeeringConnectionCommandInput,
  RejectVpcPeeringConnectionCommandOutput,
} from "../commands/RejectVpcPeeringConnectionCommand";
import { ReleaseAddressCommandInput, ReleaseAddressCommandOutput } from "../commands/ReleaseAddressCommand";
import { ReleaseHostsCommandInput, ReleaseHostsCommandOutput } from "../commands/ReleaseHostsCommand";
import {
  ReplaceIamInstanceProfileAssociationCommandInput,
  ReplaceIamInstanceProfileAssociationCommandOutput,
} from "../commands/ReplaceIamInstanceProfileAssociationCommand";
import {
  ReplaceNetworkAclAssociationCommandInput,
  ReplaceNetworkAclAssociationCommandOutput,
} from "../commands/ReplaceNetworkAclAssociationCommand";
import {
  ReplaceNetworkAclEntryCommandInput,
  ReplaceNetworkAclEntryCommandOutput,
} from "../commands/ReplaceNetworkAclEntryCommand";
import { ReplaceRouteCommandInput, ReplaceRouteCommandOutput } from "../commands/ReplaceRouteCommand";
import {
  ReplaceRouteTableAssociationCommandInput,
  ReplaceRouteTableAssociationCommandOutput,
} from "../commands/ReplaceRouteTableAssociationCommand";
import {
  ReplaceTransitGatewayRouteCommandInput,
  ReplaceTransitGatewayRouteCommandOutput,
} from "../commands/ReplaceTransitGatewayRouteCommand";
import {
  ReportInstanceStatusCommandInput,
  ReportInstanceStatusCommandOutput,
} from "../commands/ReportInstanceStatusCommand";
import { RequestSpotFleetCommandInput, RequestSpotFleetCommandOutput } from "../commands/RequestSpotFleetCommand";
import {
  RequestSpotInstancesCommandInput,
  RequestSpotInstancesCommandOutput,
} from "../commands/RequestSpotInstancesCommand";
import {
  ResetEbsDefaultKmsKeyIdCommandInput,
  ResetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ResetEbsDefaultKmsKeyIdCommand";
import {
  ResetFpgaImageAttributeCommandInput,
  ResetFpgaImageAttributeCommandOutput,
} from "../commands/ResetFpgaImageAttributeCommand";
import {
  ResetImageAttributeCommandInput,
  ResetImageAttributeCommandOutput,
} from "../commands/ResetImageAttributeCommand";
import {
  ResetInstanceAttributeCommandInput,
  ResetInstanceAttributeCommandOutput,
} from "../commands/ResetInstanceAttributeCommand";
import {
  ResetNetworkInterfaceAttributeCommandInput,
  ResetNetworkInterfaceAttributeCommandOutput,
} from "../commands/ResetNetworkInterfaceAttributeCommand";
import {
  ResetSnapshotAttributeCommandInput,
  ResetSnapshotAttributeCommandOutput,
} from "../commands/ResetSnapshotAttributeCommand";
import {
  RestoreAddressToClassicCommandInput,
  RestoreAddressToClassicCommandOutput,
} from "../commands/RestoreAddressToClassicCommand";
import {
  RestoreManagedPrefixListVersionCommandInput,
  RestoreManagedPrefixListVersionCommandOutput,
} from "../commands/RestoreManagedPrefixListVersionCommand";
import {
  RevokeClientVpnIngressCommandInput,
  RevokeClientVpnIngressCommandOutput,
} from "../commands/RevokeClientVpnIngressCommand";
import {
  RevokeSecurityGroupEgressCommandInput,
  RevokeSecurityGroupEgressCommandOutput,
} from "../commands/RevokeSecurityGroupEgressCommand";
import {
  RevokeSecurityGroupIngressCommandInput,
  RevokeSecurityGroupIngressCommandOutput,
} from "../commands/RevokeSecurityGroupIngressCommand";
import { RunInstancesCommandInput, RunInstancesCommandOutput } from "../commands/RunInstancesCommand";
import {
  RunScheduledInstancesCommandInput,
  RunScheduledInstancesCommandOutput,
} from "../commands/RunScheduledInstancesCommand";
import {
  SearchLocalGatewayRoutesCommandInput,
  SearchLocalGatewayRoutesCommandOutput,
} from "../commands/SearchLocalGatewayRoutesCommand";
import {
  SearchTransitGatewayMulticastGroupsCommandInput,
  SearchTransitGatewayMulticastGroupsCommandOutput,
} from "../commands/SearchTransitGatewayMulticastGroupsCommand";
import {
  SearchTransitGatewayRoutesCommandInput,
  SearchTransitGatewayRoutesCommandOutput,
} from "../commands/SearchTransitGatewayRoutesCommand";
import {
  SendDiagnosticInterruptCommandInput,
  SendDiagnosticInterruptCommandOutput,
} from "../commands/SendDiagnosticInterruptCommand";
import { StartInstancesCommandInput, StartInstancesCommandOutput } from "../commands/StartInstancesCommand";
import {
  StartNetworkInsightsAnalysisCommandInput,
  StartNetworkInsightsAnalysisCommandOutput,
} from "../commands/StartNetworkInsightsAnalysisCommand";
import {
  StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  StartVpcEndpointServicePrivateDnsVerificationCommandOutput,
} from "../commands/StartVpcEndpointServicePrivateDnsVerificationCommand";
import { StopInstancesCommandInput, StopInstancesCommandOutput } from "../commands/StopInstancesCommand";
import {
  TerminateClientVpnConnectionsCommandInput,
  TerminateClientVpnConnectionsCommandOutput,
} from "../commands/TerminateClientVpnConnectionsCommand";
import { TerminateInstancesCommandInput, TerminateInstancesCommandOutput } from "../commands/TerminateInstancesCommand";
import {
  UnassignIpv6AddressesCommandInput,
  UnassignIpv6AddressesCommandOutput,
} from "../commands/UnassignIpv6AddressesCommand";
import {
  UnassignPrivateIpAddressesCommandInput,
  UnassignPrivateIpAddressesCommandOutput,
} from "../commands/UnassignPrivateIpAddressesCommand";
import { UnmonitorInstancesCommandInput, UnmonitorInstancesCommandOutput } from "../commands/UnmonitorInstancesCommand";
import {
  UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  UpdateSecurityGroupRuleDescriptionsEgressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsEgressCommand";
import {
  UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  UpdateSecurityGroupRuleDescriptionsIngressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsIngressCommand";
import { WithdrawByoipCidrCommandInput, WithdrawByoipCidrCommandOutput } from "../commands/WithdrawByoipCidrCommand";
import {
  AcceptReservedInstancesExchangeQuoteRequest,
  AcceptReservedInstancesExchangeQuoteResult,
  AcceptTransitGatewayMulticastDomainAssociationsRequest,
  AcceptTransitGatewayMulticastDomainAssociationsResult,
  AcceptTransitGatewayPeeringAttachmentRequest,
  AcceptTransitGatewayPeeringAttachmentResult,
  AcceptTransitGatewayVpcAttachmentRequest,
  AcceptTransitGatewayVpcAttachmentResult,
  AcceptVpcEndpointConnectionsRequest,
  AcceptVpcEndpointConnectionsResult,
  AcceptVpcPeeringConnectionRequest,
  AcceptVpcPeeringConnectionResult,
  AccountAttribute,
  AccountAttributeName,
  AccountAttributeValue,
  ActiveInstance,
  AddPrefixListEntry,
  Address,
  AdvertiseByoipCidrRequest,
  AdvertiseByoipCidrResult,
  AllocateAddressRequest,
  AllocateAddressResult,
  AllocateHostsRequest,
  AllocateHostsResult,
  AllowedPrincipal,
  AlternatePathHint,
  ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  ApplySecurityGroupsToClientVpnTargetNetworkResult,
  AssignIpv6AddressesRequest,
  AssignIpv6AddressesResult,
  AssignPrivateIpAddressesRequest,
  AssignPrivateIpAddressesResult,
  AssignedPrivateIpAddress,
  AssociateAddressRequest,
  AssociateAddressResult,
  AssociateClientVpnTargetNetworkRequest,
  AssociateClientVpnTargetNetworkResult,
  AssociateDhcpOptionsRequest,
  AssociateEnclaveCertificateIamRoleRequest,
  AssociateEnclaveCertificateIamRoleResult,
  AssociateIamInstanceProfileRequest,
  AssociateIamInstanceProfileResult,
  AssociateRouteTableRequest,
  AssociateRouteTableResult,
  AssociateSubnetCidrBlockRequest,
  AssociateSubnetCidrBlockResult,
  AssociateTransitGatewayMulticastDomainRequest,
  AssociateTransitGatewayMulticastDomainResult,
  AssociateTransitGatewayRouteTableRequest,
  AssociateTransitGatewayRouteTableResult,
  AssociateVpcCidrBlockRequest,
  AssociateVpcCidrBlockResult,
  AssociationStatus,
  AttachClassicLinkVpcRequest,
  AttachClassicLinkVpcResult,
  AttachInternetGatewayRequest,
  AttachNetworkInterfaceRequest,
  AttachNetworkInterfaceResult,
  AttachVolumeRequest,
  AttachVpnGatewayRequest,
  AttachVpnGatewayResult,
  AttributeValue,
  AuthorizeClientVpnIngressRequest,
  AuthorizeClientVpnIngressResult,
  AuthorizeSecurityGroupEgressRequest,
  AuthorizeSecurityGroupIngressRequest,
  BlockDeviceMapping,
  BundleInstanceRequest,
  BundleInstanceResult,
  BundleTask,
  BundleTaskError,
  ByoipCidr,
  CancelBundleTaskRequest,
  CancelBundleTaskResult,
  CancelCapacityReservationRequest,
  CancelCapacityReservationResult,
  CancelConversionRequest,
  CancelExportTaskRequest,
  CancelImportTaskRequest,
  CancelImportTaskResult,
  CancelReservedInstancesListingRequest,
  CancelReservedInstancesListingResult,
  CancelSpotFleetRequestsError,
  CancelSpotFleetRequestsErrorItem,
  CancelSpotFleetRequestsRequest,
  CancelSpotFleetRequestsResponse,
  CancelSpotFleetRequestsSuccessItem,
  CancelSpotInstanceRequestsRequest,
  CancelSpotInstanceRequestsResult,
  CancelledSpotInstanceRequest,
  CapacityReservation,
  CapacityReservationOptionsRequest,
  CapacityReservationTarget,
  CarrierGateway,
  CertificateAuthenticationRequest,
  CidrBlock,
  ClientConnectOptions,
  ClientVpnAuthenticationRequest,
  ClientVpnAuthorizationRuleStatus,
  ClientVpnEndpointStatus,
  ClientVpnRouteStatus,
  ConfirmProductInstanceRequest,
  ConfirmProductInstanceResult,
  ConnectionLogOptions,
  CopyFpgaImageRequest,
  CopyFpgaImageResult,
  CopyImageRequest,
  CopyImageResult,
  CopySnapshotRequest,
  CopySnapshotResult,
  CreateCapacityReservationRequest,
  CreateCapacityReservationResult,
  CreateCarrierGatewayRequest,
  CreateCarrierGatewayResult,
  CreateClientVpnEndpointRequest,
  CreateClientVpnEndpointResult,
  CreateClientVpnRouteRequest,
  CreateClientVpnRouteResult,
  CreateCustomerGatewayRequest,
  CreateCustomerGatewayResult,
  CreateDefaultSubnetRequest,
  CreateDefaultSubnetResult,
  CreateDefaultVpcRequest,
  CreateDefaultVpcResult,
  CreateDhcpOptionsRequest,
  CreateDhcpOptionsResult,
  CreateEgressOnlyInternetGatewayRequest,
  CreateEgressOnlyInternetGatewayResult,
  CreateFleetError,
  CreateFleetInstance,
  CreateFleetRequest,
  CreateFleetResult,
  CreateFlowLogsRequest,
  CreateFlowLogsResult,
  CreateFpgaImageRequest,
  CreateFpgaImageResult,
  CreateImageRequest,
  CreateImageResult,
  CreateInstanceExportTaskRequest,
  CreateInstanceExportTaskResult,
  CreateInternetGatewayRequest,
  CreateInternetGatewayResult,
  CreateKeyPairRequest,
  CreditSpecificationRequest,
  CustomerGateway,
  DhcpConfiguration,
  DhcpOptions,
  DirectoryServiceAuthenticationRequest,
  EbsBlockDevice,
  EgressOnlyInternetGateway,
  ElasticGpuSpecification,
  ExportTask,
  ExportToS3Task,
  ExportToS3TaskSpecification,
  FederatedAuthenticationRequest,
  FleetLaunchTemplateConfigRequest,
  FleetLaunchTemplateOverrides,
  FleetLaunchTemplateOverridesRequest,
  FleetLaunchTemplateSpecification,
  FleetLaunchTemplateSpecificationRequest,
  FleetSpotCapacityRebalanceRequest,
  FleetSpotMaintenanceStrategiesRequest,
  IamInstanceProfile,
  IamInstanceProfileAssociation,
  IamInstanceProfileSpecification,
  InstanceCount,
  InstanceExportDetails,
  InternetGateway,
  InternetGatewayAttachment,
  IpPermission,
  IpRange,
  Ipv6CidrBlock,
  Ipv6Range,
  KeyPair,
  LaunchTemplateAndOverridesResponse,
  LaunchTemplateBlockDeviceMappingRequest,
  LaunchTemplateCapacityReservationSpecificationRequest,
  LaunchTemplateCpuOptionsRequest,
  LaunchTemplateEbsBlockDeviceRequest,
  LaunchTemplateElasticInferenceAccelerator,
  LaunchTemplateEnclaveOptionsRequest,
  LaunchTemplateHibernationOptionsRequest,
  LaunchTemplateIamInstanceProfileSpecificationRequest,
  LaunchTemplateInstanceMarketOptionsRequest,
  LaunchTemplateLicenseConfigurationRequest,
  LaunchTemplateSpotMarketOptionsRequest,
  NewDhcpConfiguration,
  OnDemandOptionsRequest,
  PeeringAttachmentStatus,
  PeeringTgwInfo,
  Placement,
  PlacementResponse,
  PrefixListId,
  PriceSchedule,
  ReservedInstancesListing,
  RouteTableAssociationState,
  S3Storage,
  SpotOptionsRequest,
  Storage,
  StorageLocation,
  Subnet,
  SubnetAssociation,
  SubnetCidrBlockState,
  SubnetIpv6CidrBlockAssociation,
  Tag,
  TagSpecification,
  TargetCapacitySpecificationRequest,
  TargetConfigurationRequest,
  TransitGatewayAssociation,
  TransitGatewayMulticastDomainAssociations,
  TransitGatewayPeeringAttachment,
  TransitGatewayVpcAttachment,
  TransitGatewayVpcAttachmentOptions,
  UnsuccessfulItem,
  UnsuccessfulItemError,
  UserIdGroupPair,
  VolumeAttachment,
  Vpc,
  VpcAttachment,
  VpcCidrBlockAssociation,
  VpcCidrBlockState,
  VpcIpv6CidrBlockAssociation,
  VpcPeeringConnection,
  VpcPeeringConnectionOptionsDescription,
  VpcPeeringConnectionStateReason,
  VpcPeeringConnectionVpcInfo,
  _InstanceType,
} from "../models/models_0";
import {
  CapacityReservationTargetResponse,
  ConnectionNotification,
  CreateLaunchTemplateRequest,
  CreateLaunchTemplateResult,
  CreateLaunchTemplateVersionRequest,
  CreateLaunchTemplateVersionResult,
  CreateLocalGatewayRouteRequest,
  CreateLocalGatewayRouteResult,
  CreateLocalGatewayRouteTableVpcAssociationRequest,
  CreateLocalGatewayRouteTableVpcAssociationResult,
  CreateManagedPrefixListRequest,
  CreateManagedPrefixListResult,
  CreateNatGatewayRequest,
  CreateNatGatewayResult,
  CreateNetworkAclEntryRequest,
  CreateNetworkAclRequest,
  CreateNetworkAclResult,
  CreateNetworkInsightsPathRequest,
  CreateNetworkInsightsPathResult,
  CreateNetworkInterfacePermissionRequest,
  CreateNetworkInterfacePermissionResult,
  CreateNetworkInterfaceRequest,
  CreateNetworkInterfaceResult,
  CreatePlacementGroupRequest,
  CreatePlacementGroupResult,
  CreateReservedInstancesListingRequest,
  CreateReservedInstancesListingResult,
  CreateRouteRequest,
  CreateRouteResult,
  CreateRouteTableRequest,
  CreateRouteTableResult,
  CreateSecurityGroupRequest,
  CreateSecurityGroupResult,
  CreateSnapshotRequest,
  CreateSnapshotsRequest,
  CreateSnapshotsResult,
  CreateSpotDatafeedSubscriptionRequest,
  CreateSpotDatafeedSubscriptionResult,
  CreateSubnetRequest,
  CreateSubnetResult,
  CreateTagsRequest,
  CreateTrafficMirrorFilterRequest,
  CreateTrafficMirrorFilterResult,
  CreateTrafficMirrorFilterRuleRequest,
  CreateTrafficMirrorFilterRuleResult,
  CreateTrafficMirrorSessionRequest,
  CreateTrafficMirrorSessionResult,
  CreateTrafficMirrorTargetRequest,
  CreateTrafficMirrorTargetResult,
  CreateTransitGatewayConnectPeerRequest,
  CreateTransitGatewayConnectPeerResult,
  CreateTransitGatewayConnectRequest,
  CreateTransitGatewayConnectRequestOptions,
  CreateTransitGatewayConnectResult,
  CreateTransitGatewayMulticastDomainRequest,
  CreateTransitGatewayMulticastDomainRequestOptions,
  CreateTransitGatewayMulticastDomainResult,
  CreateTransitGatewayPeeringAttachmentRequest,
  CreateTransitGatewayPeeringAttachmentResult,
  CreateTransitGatewayPrefixListReferenceRequest,
  CreateTransitGatewayPrefixListReferenceResult,
  CreateTransitGatewayRequest,
  CreateTransitGatewayResult,
  CreateTransitGatewayRouteRequest,
  CreateTransitGatewayRouteResult,
  CreateTransitGatewayRouteTableRequest,
  CreateTransitGatewayRouteTableResult,
  CreateTransitGatewayVpcAttachmentRequest,
  CreateTransitGatewayVpcAttachmentRequestOptions,
  CreateTransitGatewayVpcAttachmentResult,
  CreateVolumeRequest,
  CreateVpcEndpointConnectionNotificationRequest,
  CreateVpcEndpointConnectionNotificationResult,
  CreateVpcEndpointRequest,
  CreateVpcEndpointResult,
  CreateVpcEndpointServiceConfigurationRequest,
  CreateVpcEndpointServiceConfigurationResult,
  CreateVpcPeeringConnectionRequest,
  CreateVpcPeeringConnectionResult,
  CreateVpcRequest,
  CreateVpcResult,
  CreateVpnConnectionRequest,
  CreateVpnConnectionResult,
  CreateVpnConnectionRouteRequest,
  CreateVpnGatewayRequest,
  CreateVpnGatewayResult,
  CreditSpecification,
  DeleteCarrierGatewayRequest,
  DeleteCarrierGatewayResult,
  DeleteClientVpnEndpointRequest,
  DeleteClientVpnEndpointResult,
  DeleteClientVpnRouteRequest,
  DeleteClientVpnRouteResult,
  DeleteCustomerGatewayRequest,
  DeleteDhcpOptionsRequest,
  DeleteEgressOnlyInternetGatewayRequest,
  DeleteEgressOnlyInternetGatewayResult,
  DeleteFleetError,
  DeleteFleetErrorItem,
  DeleteFleetSuccessItem,
  DeleteFleetsRequest,
  DeleteFleetsResult,
  DeleteFlowLogsRequest,
  DeleteFlowLogsResult,
  DeleteFpgaImageRequest,
  DeleteFpgaImageResult,
  DeleteInternetGatewayRequest,
  DeleteKeyPairRequest,
  DeleteLaunchTemplateRequest,
  DeleteLaunchTemplateResult,
  DeleteLaunchTemplateVersionsRequest,
  DeleteLaunchTemplateVersionsResponseErrorItem,
  DeleteLaunchTemplateVersionsResponseSuccessItem,
  DeleteLaunchTemplateVersionsResult,
  DeleteLocalGatewayRouteRequest,
  DeleteLocalGatewayRouteResult,
  DeleteLocalGatewayRouteTableVpcAssociationRequest,
  DeleteLocalGatewayRouteTableVpcAssociationResult,
  DeleteManagedPrefixListRequest,
  DeleteManagedPrefixListResult,
  DeleteNatGatewayRequest,
  DeleteNatGatewayResult,
  DeleteNetworkAclEntryRequest,
  DeleteNetworkAclRequest,
  DeleteNetworkInsightsAnalysisRequest,
  DeleteNetworkInsightsAnalysisResult,
  DeleteNetworkInsightsPathRequest,
  DeleteNetworkInsightsPathResult,
  DnsEntry,
  ElasticGpuSpecificationResponse,
  GroupIdentifier,
  IKEVersionsListValue,
  IKEVersionsRequestListValue,
  IcmpTypeCode,
  InstanceIpv6Address,
  InstanceIpv6AddressRequest,
  InstanceSpecification,
  LastError,
  LaunchTemplate,
  LaunchTemplateBlockDeviceMapping,
  LaunchTemplateCapacityReservationSpecificationResponse,
  LaunchTemplateCpuOptions,
  LaunchTemplateEbsBlockDevice,
  LaunchTemplateElasticInferenceAcceleratorResponse,
  LaunchTemplateEnclaveOptions,
  LaunchTemplateHibernationOptions,
  LaunchTemplateIamInstanceProfileSpecification,
  LaunchTemplateInstanceMarketOptions,
  LaunchTemplateInstanceMetadataOptions,
  LaunchTemplateInstanceMetadataOptionsRequest,
  LaunchTemplateInstanceNetworkInterfaceSpecification,
  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  LaunchTemplateLicenseConfiguration,
  LaunchTemplatePlacement,
  LaunchTemplatePlacementRequest,
  LaunchTemplateSpotMarketOptions,
  LaunchTemplateTagSpecification,
  LaunchTemplateTagSpecificationRequest,
  LaunchTemplateVersion,
  LaunchTemplatesMonitoring,
  LaunchTemplatesMonitoringRequest,
  LocalGatewayRoute,
  LocalGatewayRouteTableVpcAssociation,
  ManagedPrefixList,
  NatGateway,
  NatGatewayAddress,
  NetworkAcl,
  NetworkAclAssociation,
  NetworkAclEntry,
  NetworkInsightsPath,
  NetworkInterface,
  NetworkInterfaceAssociation,
  NetworkInterfaceAttachment,
  NetworkInterfaceIpv6Address,
  NetworkInterfacePermission,
  NetworkInterfacePermissionState,
  NetworkInterfacePrivateIpAddress,
  Phase1DHGroupNumbersListValue,
  Phase1DHGroupNumbersRequestListValue,
  Phase1EncryptionAlgorithmsListValue,
  Phase1EncryptionAlgorithmsRequestListValue,
  Phase1IntegrityAlgorithmsListValue,
  Phase1IntegrityAlgorithmsRequestListValue,
  Phase2DHGroupNumbersListValue,
  Phase2DHGroupNumbersRequestListValue,
  Phase2EncryptionAlgorithmsListValue,
  Phase2EncryptionAlgorithmsRequestListValue,
  Phase2IntegrityAlgorithmsListValue,
  Phase2IntegrityAlgorithmsRequestListValue,
  PlacementGroup,
  PortRange,
  PriceScheduleSpecification,
  PrivateDnsNameConfiguration,
  PrivateIpAddressSpecification,
  PropagatingVgw,
  ProvisionedBandwidth,
  RequestLaunchTemplateData,
  ResponseError,
  ResponseLaunchTemplateData,
  Route,
  RouteTable,
  RouteTableAssociation,
  SecurityGroupIdentifier,
  ServiceConfiguration,
  ServiceTypeDetail,
  Snapshot,
  SnapshotInfo,
  SpotDatafeedSubscription,
  SpotInstanceStateFault,
  TrafficMirrorFilter,
  TrafficMirrorFilterRule,
  TrafficMirrorNetworkService,
  TrafficMirrorPortRange,
  TrafficMirrorPortRangeRequest,
  TrafficMirrorSession,
  TrafficMirrorTarget,
  TransitGateway,
  TransitGatewayAttachmentBgpConfiguration,
  TransitGatewayConnect,
  TransitGatewayConnectOptions,
  TransitGatewayConnectPeer,
  TransitGatewayConnectPeerConfiguration,
  TransitGatewayConnectRequestBgpOptions,
  TransitGatewayMulticastDomain,
  TransitGatewayMulticastDomainOptions,
  TransitGatewayOptions,
  TransitGatewayPrefixListAttachment,
  TransitGatewayPrefixListReference,
  TransitGatewayRequestOptions,
  TransitGatewayRoute,
  TransitGatewayRouteAttachment,
  TransitGatewayRouteTable,
  TunnelOption,
  ValidationError,
  ValidationWarning,
  VgwTelemetry,
  Volume,
  VpcEndpoint,
  VpnConnection,
  VpnConnectionOptions,
  VpnConnectionOptionsSpecification,
  VpnGateway,
  VpnStaticRoute,
  VpnTunnelOptionsSpecification,
} from "../models/models_1";
import {
  AssociatedTargetNetwork,
  AttributeBooleanValue,
  AuthorizationRule,
  AvailabilityZone,
  AvailabilityZoneMessage,
  AvailableCapacity,
  CapacityReservationOptions,
  CapacityReservationSpecificationResponse,
  CertificateAuthentication,
  ClassicLinkInstance,
  ClientConnectResponseOptions,
  ClientVpnAuthentication,
  ClientVpnConnection,
  ClientVpnConnectionStatus,
  ClientVpnEndpoint,
  ClientVpnEndpointAttributeStatus,
  ClientVpnRoute,
  CoipPool,
  ConnectionLogResponseOptions,
  ConversionTask,
  CpuOptions,
  DeleteNetworkInterfacePermissionRequest,
  DeleteNetworkInterfacePermissionResult,
  DeleteNetworkInterfaceRequest,
  DeletePlacementGroupRequest,
  DeleteQueuedReservedInstancesError,
  DeleteQueuedReservedInstancesRequest,
  DeleteQueuedReservedInstancesResult,
  DeleteRouteRequest,
  DeleteRouteTableRequest,
  DeleteSecurityGroupRequest,
  DeleteSnapshotRequest,
  DeleteSpotDatafeedSubscriptionRequest,
  DeleteSubnetRequest,
  DeleteTagsRequest,
  DeleteTrafficMirrorFilterRequest,
  DeleteTrafficMirrorFilterResult,
  DeleteTrafficMirrorFilterRuleRequest,
  DeleteTrafficMirrorFilterRuleResult,
  DeleteTrafficMirrorSessionRequest,
  DeleteTrafficMirrorSessionResult,
  DeleteTrafficMirrorTargetRequest,
  DeleteTrafficMirrorTargetResult,
  DeleteTransitGatewayConnectPeerRequest,
  DeleteTransitGatewayConnectPeerResult,
  DeleteTransitGatewayConnectRequest,
  DeleteTransitGatewayConnectResult,
  DeleteTransitGatewayMulticastDomainRequest,
  DeleteTransitGatewayMulticastDomainResult,
  DeleteTransitGatewayPeeringAttachmentRequest,
  DeleteTransitGatewayPeeringAttachmentResult,
  DeleteTransitGatewayPrefixListReferenceRequest,
  DeleteTransitGatewayPrefixListReferenceResult,
  DeleteTransitGatewayRequest,
  DeleteTransitGatewayResult,
  DeleteTransitGatewayRouteRequest,
  DeleteTransitGatewayRouteResult,
  DeleteTransitGatewayRouteTableRequest,
  DeleteTransitGatewayRouteTableResult,
  DeleteTransitGatewayVpcAttachmentRequest,
  DeleteTransitGatewayVpcAttachmentResult,
  DeleteVolumeRequest,
  DeleteVpcEndpointConnectionNotificationsRequest,
  DeleteVpcEndpointConnectionNotificationsResult,
  DeleteVpcEndpointServiceConfigurationsRequest,
  DeleteVpcEndpointServiceConfigurationsResult,
  DeleteVpcEndpointsRequest,
  DeleteVpcEndpointsResult,
  DeleteVpcPeeringConnectionRequest,
  DeleteVpcPeeringConnectionResult,
  DeleteVpcRequest,
  DeleteVpnConnectionRequest,
  DeleteVpnConnectionRouteRequest,
  DeleteVpnGatewayRequest,
  DeprovisionByoipCidrRequest,
  DeprovisionByoipCidrResult,
  DeregisterImageRequest,
  DeregisterInstanceEventNotificationAttributesRequest,
  DeregisterInstanceEventNotificationAttributesResult,
  DeregisterInstanceTagAttributeRequest,
  DeregisterTransitGatewayMulticastGroupMembersRequest,
  DeregisterTransitGatewayMulticastGroupMembersResult,
  DeregisterTransitGatewayMulticastGroupSourcesRequest,
  DeregisterTransitGatewayMulticastGroupSourcesResult,
  DescribeAccountAttributesRequest,
  DescribeAccountAttributesResult,
  DescribeAddressesRequest,
  DescribeAddressesResult,
  DescribeAggregateIdFormatRequest,
  DescribeAggregateIdFormatResult,
  DescribeAvailabilityZonesRequest,
  DescribeAvailabilityZonesResult,
  DescribeBundleTasksRequest,
  DescribeBundleTasksResult,
  DescribeByoipCidrsRequest,
  DescribeByoipCidrsResult,
  DescribeCapacityReservationsRequest,
  DescribeCapacityReservationsResult,
  DescribeCarrierGatewaysRequest,
  DescribeCarrierGatewaysResult,
  DescribeClassicLinkInstancesRequest,
  DescribeClassicLinkInstancesResult,
  DescribeClientVpnAuthorizationRulesRequest,
  DescribeClientVpnAuthorizationRulesResult,
  DescribeClientVpnConnectionsRequest,
  DescribeClientVpnConnectionsResult,
  DescribeClientVpnEndpointsRequest,
  DescribeClientVpnEndpointsResult,
  DescribeClientVpnRoutesRequest,
  DescribeClientVpnRoutesResult,
  DescribeClientVpnTargetNetworksRequest,
  DescribeClientVpnTargetNetworksResult,
  DescribeCoipPoolsRequest,
  DescribeCoipPoolsResult,
  DescribeConversionTasksRequest,
  DescribeConversionTasksResult,
  DescribeCustomerGatewaysRequest,
  DescribeCustomerGatewaysResult,
  DescribeDhcpOptionsRequest,
  DescribeDhcpOptionsResult,
  DescribeEgressOnlyInternetGatewaysRequest,
  DescribeEgressOnlyInternetGatewaysResult,
  DescribeElasticGpusRequest,
  DescribeElasticGpusResult,
  DescribeExportImageTasksRequest,
  DescribeExportImageTasksResult,
  DescribeExportTasksRequest,
  DescribeExportTasksResult,
  DescribeFastSnapshotRestoreSuccessItem,
  DescribeFastSnapshotRestoresRequest,
  DescribeFastSnapshotRestoresResult,
  DescribeFleetError,
  DescribeFleetHistoryRequest,
  DescribeFleetHistoryResult,
  DescribeFleetInstancesRequest,
  DescribeFleetInstancesResult,
  DescribeFleetsInstances,
  DescribeFleetsRequest,
  DescribeFleetsResult,
  DescribeFlowLogsRequest,
  DescribeFlowLogsResult,
  DescribeFpgaImageAttributeRequest,
  DescribeFpgaImageAttributeResult,
  DescribeFpgaImagesRequest,
  DescribeFpgaImagesResult,
  DescribeHostReservationOfferingsRequest,
  DescribeHostReservationOfferingsResult,
  DescribeHostReservationsRequest,
  DescribeHostReservationsResult,
  DescribeHostsRequest,
  DescribeHostsResult,
  DescribeIamInstanceProfileAssociationsRequest,
  DescribeIamInstanceProfileAssociationsResult,
  DescribeIdFormatRequest,
  DescribeIdFormatResult,
  DescribeIdentityIdFormatRequest,
  DescribeIdentityIdFormatResult,
  DescribeImageAttributeRequest,
  DescribeImagesRequest,
  DescribeImagesResult,
  DescribeImportImageTasksRequest,
  DescribeImportImageTasksResult,
  DescribeImportSnapshotTasksRequest,
  DescribeImportSnapshotTasksResult,
  DescribeInstanceAttributeRequest,
  DescribeInstanceCreditSpecificationsRequest,
  DescribeInstanceCreditSpecificationsResult,
  DescribeInstanceEventNotificationAttributesRequest,
  DescribeInstanceEventNotificationAttributesResult,
  DescribeInstanceStatusRequest,
  DescribeInstanceStatusResult,
  DescribeInstanceTypeOfferingsRequest,
  DescribeInstanceTypeOfferingsResult,
  DescribeInstanceTypesRequest,
  DescribeInstancesRequest,
  DescribeInstancesResult,
  DirectoryServiceAuthentication,
  DiskImageDescription,
  DiskImageVolumeDescription,
  EbsInfo,
  EbsInstanceBlockDevice,
  EbsOptimizedInfo,
  ElasticGpuAssociation,
  ElasticGpuHealth,
  ElasticGpus,
  ElasticInferenceAcceleratorAssociation,
  EnclaveOptions,
  EventInformation,
  ExportImageTask,
  ExportTaskS3Location,
  FailedQueuedPurchaseDeletion,
  FederatedAuthentication,
  Filter,
  FleetData,
  FleetLaunchTemplateConfig,
  FleetSpotCapacityRebalance,
  FleetSpotMaintenanceStrategies,
  FlowLog,
  FpgaDeviceInfo,
  FpgaDeviceMemoryInfo,
  FpgaImage,
  FpgaImageAttribute,
  FpgaImageState,
  FpgaInfo,
  GpuDeviceInfo,
  GpuDeviceMemoryInfo,
  GpuInfo,
  HibernationOptions,
  HistoryRecordEntry,
  Host,
  HostInstance,
  HostOffering,
  HostProperties,
  HostReservation,
  IdFormat,
  Image,
  ImageAttribute,
  ImportImageLicenseConfigurationResponse,
  ImportImageTask,
  ImportInstanceTaskDetails,
  ImportInstanceVolumeDetailItem,
  ImportSnapshotTask,
  ImportVolumeTaskDetails,
  Instance,
  InstanceAttribute,
  InstanceBlockDeviceMapping,
  InstanceCapacity,
  InstanceCreditSpecification,
  InstanceMetadataOptionsResponse,
  InstanceNetworkInterface,
  InstanceNetworkInterfaceAssociation,
  InstanceNetworkInterfaceAttachment,
  InstancePrivateIpAddress,
  InstanceState,
  InstanceStatus,
  InstanceStatusDetails,
  InstanceStatusEvent,
  InstanceStatusSummary,
  InstanceTagNotificationAttribute,
  InstanceTypeOffering,
  LaunchPermission,
  LicenseConfiguration,
  LoadPermission,
  Monitoring,
  OnDemandOptions,
  PciId,
  ProductCode,
  Reservation,
  SnapshotDetail,
  SnapshotTaskDetail,
  SpotOptions,
  StateReason,
  SuccessfulQueuedPurchaseDeletion,
  TargetCapacitySpecification,
  TargetNetwork,
  TransitGatewayMulticastDeregisteredGroupMembers,
  TransitGatewayMulticastDeregisteredGroupSources,
  UserBucketDetails,
  VirtualizationType,
} from "../models/models_2";
import {
  AnalysisAclRule,
  AnalysisComponent,
  AnalysisLoadBalancerListener,
  AnalysisLoadBalancerTarget,
  AnalysisPacketHeader,
  AnalysisRouteTableRoute,
  AnalysisSecurityGroupRule,
  ArchitectureType,
  ClassicLinkDnsSupport,
  ClassicLoadBalancer,
  ClassicLoadBalancersConfig,
  CreateVolumePermission,
  DescribeInstanceTypesResult,
  DescribeInternetGatewaysRequest,
  DescribeInternetGatewaysResult,
  DescribeIpv6PoolsRequest,
  DescribeIpv6PoolsResult,
  DescribeKeyPairsRequest,
  DescribeKeyPairsResult,
  DescribeLaunchTemplateVersionsRequest,
  DescribeLaunchTemplateVersionsResult,
  DescribeLaunchTemplatesRequest,
  DescribeLaunchTemplatesResult,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult,
  DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  DescribeLocalGatewayRouteTableVpcAssociationsResult,
  DescribeLocalGatewayRouteTablesRequest,
  DescribeLocalGatewayRouteTablesResult,
  DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  DescribeLocalGatewayVirtualInterfaceGroupsResult,
  DescribeLocalGatewayVirtualInterfacesRequest,
  DescribeLocalGatewayVirtualInterfacesResult,
  DescribeLocalGatewaysRequest,
  DescribeLocalGatewaysResult,
  DescribeManagedPrefixListsRequest,
  DescribeManagedPrefixListsResult,
  DescribeMovingAddressesRequest,
  DescribeMovingAddressesResult,
  DescribeNatGatewaysRequest,
  DescribeNatGatewaysResult,
  DescribeNetworkAclsRequest,
  DescribeNetworkAclsResult,
  DescribeNetworkInsightsAnalysesRequest,
  DescribeNetworkInsightsAnalysesResult,
  DescribeNetworkInsightsPathsRequest,
  DescribeNetworkInsightsPathsResult,
  DescribeNetworkInterfaceAttributeRequest,
  DescribeNetworkInterfaceAttributeResult,
  DescribeNetworkInterfacePermissionsRequest,
  DescribeNetworkInterfacePermissionsResult,
  DescribeNetworkInterfacesRequest,
  DescribeNetworkInterfacesResult,
  DescribePlacementGroupsRequest,
  DescribePlacementGroupsResult,
  DescribePrefixListsRequest,
  DescribePrefixListsResult,
  DescribePrincipalIdFormatRequest,
  DescribePrincipalIdFormatResult,
  DescribePublicIpv4PoolsRequest,
  DescribePublicIpv4PoolsResult,
  DescribeRegionsRequest,
  DescribeRegionsResult,
  DescribeReservedInstancesListingsRequest,
  DescribeReservedInstancesListingsResult,
  DescribeReservedInstancesModificationsRequest,
  DescribeReservedInstancesModificationsResult,
  DescribeReservedInstancesOfferingsRequest,
  DescribeReservedInstancesOfferingsResult,
  DescribeReservedInstancesRequest,
  DescribeReservedInstancesResult,
  DescribeRouteTablesRequest,
  DescribeRouteTablesResult,
  DescribeScheduledInstanceAvailabilityRequest,
  DescribeScheduledInstanceAvailabilityResult,
  DescribeScheduledInstancesRequest,
  DescribeScheduledInstancesResult,
  DescribeSecurityGroupReferencesRequest,
  DescribeSecurityGroupReferencesResult,
  DescribeSecurityGroupsRequest,
  DescribeSecurityGroupsResult,
  DescribeSnapshotAttributeRequest,
  DescribeSnapshotAttributeResult,
  DescribeSnapshotsRequest,
  DescribeSnapshotsResult,
  DescribeSpotDatafeedSubscriptionRequest,
  DescribeSpotDatafeedSubscriptionResult,
  DescribeSpotFleetInstancesRequest,
  DescribeSpotFleetInstancesResponse,
  DescribeSpotFleetRequestHistoryRequest,
  DescribeSpotFleetRequestHistoryResponse,
  DescribeSpotFleetRequestsRequest,
  DescribeSpotFleetRequestsResponse,
  DescribeSpotInstanceRequestsRequest,
  DescribeSpotInstanceRequestsResult,
  DescribeSpotPriceHistoryRequest,
  DescribeSpotPriceHistoryResult,
  DescribeStaleSecurityGroupsRequest,
  DescribeStaleSecurityGroupsResult,
  DescribeSubnetsRequest,
  DescribeSubnetsResult,
  DescribeTagsRequest,
  DescribeTagsResult,
  DescribeTrafficMirrorFiltersRequest,
  DescribeTrafficMirrorFiltersResult,
  DescribeTrafficMirrorSessionsRequest,
  DescribeTrafficMirrorSessionsResult,
  DescribeTrafficMirrorTargetsRequest,
  DescribeTrafficMirrorTargetsResult,
  DescribeTransitGatewayAttachmentsRequest,
  DescribeTransitGatewayAttachmentsResult,
  DescribeTransitGatewayConnectPeersRequest,
  DescribeTransitGatewayConnectPeersResult,
  DescribeTransitGatewayConnectsRequest,
  DescribeTransitGatewayConnectsResult,
  DescribeTransitGatewayMulticastDomainsRequest,
  DescribeTransitGatewayMulticastDomainsResult,
  DescribeTransitGatewayPeeringAttachmentsRequest,
  DescribeTransitGatewayPeeringAttachmentsResult,
  DescribeTransitGatewayRouteTablesRequest,
  DescribeTransitGatewayRouteTablesResult,
  DescribeTransitGatewayVpcAttachmentsRequest,
  DescribeTransitGatewayVpcAttachmentsResult,
  DescribeTransitGatewaysRequest,
  DescribeTransitGatewaysResult,
  DescribeVolumeAttributeRequest,
  DescribeVolumeAttributeResult,
  DescribeVolumeStatusRequest,
  DescribeVolumeStatusResult,
  DescribeVolumesModificationsRequest,
  DescribeVolumesModificationsResult,
  DescribeVolumesRequest,
  DescribeVolumesResult,
  DescribeVpcAttributeRequest,
  DescribeVpcAttributeResult,
  DescribeVpcClassicLinkDnsSupportRequest,
  DescribeVpcClassicLinkDnsSupportResult,
  DescribeVpcClassicLinkRequest,
  DescribeVpcClassicLinkResult,
  DescribeVpcEndpointConnectionNotificationsRequest,
  DescribeVpcEndpointConnectionNotificationsResult,
  DescribeVpcEndpointConnectionsRequest,
  DescribeVpcEndpointConnectionsResult,
  DescribeVpcEndpointServiceConfigurationsRequest,
  DescribeVpcEndpointServiceConfigurationsResult,
  DescribeVpcEndpointServicePermissionsRequest,
  DescribeVpcEndpointServicePermissionsResult,
  DescribeVpcEndpointServicesRequest,
  DescribeVpcEndpointServicesResult,
  DescribeVpcEndpointsRequest,
  DescribeVpcEndpointsResult,
  DescribeVpcPeeringConnectionsRequest,
  DescribeVpcPeeringConnectionsResult,
  DescribeVpcsRequest,
  DescribeVpcsResult,
  DescribeVpnConnectionsRequest,
  DescribeVpnConnectionsResult,
  DescribeVpnGatewaysRequest,
  DescribeVpnGatewaysResult,
  DetachClassicLinkVpcRequest,
  DetachClassicLinkVpcResult,
  DetachInternetGatewayRequest,
  DetachNetworkInterfaceRequest,
  DetachVolumeRequest,
  DetachVpnGatewayRequest,
  DisableEbsEncryptionByDefaultRequest,
  DisableEbsEncryptionByDefaultResult,
  DisableFastSnapshotRestoreErrorItem,
  DisableFastSnapshotRestoreStateError,
  DisableFastSnapshotRestoreStateErrorItem,
  DisableFastSnapshotRestoreSuccessItem,
  DisableFastSnapshotRestoresRequest,
  DisableFastSnapshotRestoresResult,
  DisableTransitGatewayRouteTablePropagationRequest,
  DisableTransitGatewayRouteTablePropagationResult,
  DisableVgwRoutePropagationRequest,
  DisableVpcClassicLinkDnsSupportRequest,
  DisableVpcClassicLinkDnsSupportResult,
  DisableVpcClassicLinkRequest,
  DisableVpcClassicLinkResult,
  DisassociateAddressRequest,
  DisassociateClientVpnTargetNetworkRequest,
  DisassociateClientVpnTargetNetworkResult,
  DisassociateEnclaveCertificateIamRoleRequest,
  DisassociateEnclaveCertificateIamRoleResult,
  DisassociateIamInstanceProfileRequest,
  DisassociateIamInstanceProfileResult,
  DisassociateRouteTableRequest,
  DisassociateSubnetCidrBlockRequest,
  DisassociateSubnetCidrBlockResult,
  DisassociateTransitGatewayMulticastDomainRequest,
  DisassociateTransitGatewayMulticastDomainResult,
  DiskInfo,
  Explanation,
  HistoryRecord,
  InferenceAcceleratorInfo,
  InferenceDeviceInfo,
  InstanceNetworkInterfaceSpecification,
  InstanceStorageInfo,
  InstanceTypeInfo,
  Ipv6Pool,
  KeyPairInfo,
  LaunchSpecification,
  LaunchTemplateConfig,
  LaunchTemplateOverrides,
  LoadBalancersConfig,
  LocalGateway,
  LocalGatewayRouteTable,
  LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
  LocalGatewayVirtualInterface,
  LocalGatewayVirtualInterfaceGroup,
  MemoryInfo,
  MovingAddressStatus,
  NetworkCardInfo,
  NetworkInfo,
  NetworkInsightsAnalysis,
  PathComponent,
  PlacementGroupInfo,
  PlacementGroupStrategy,
  PoolCidrBlock,
  PrefixList,
  PricingDetail,
  PrincipalIdFormat,
  PrivateDnsDetails,
  ProcessorInfo,
  PublicIpv4Pool,
  PublicIpv4PoolRange,
  RecurringCharge,
  Region,
  ReservedInstances,
  ReservedInstancesConfiguration,
  ReservedInstancesId,
  ReservedInstancesModification,
  ReservedInstancesModificationResult,
  ReservedInstancesOffering,
  RootDeviceType,
  RunInstancesMonitoringEnabled,
  ScheduledInstance,
  ScheduledInstanceAvailability,
  ScheduledInstanceRecurrence,
  ScheduledInstanceRecurrenceRequest,
  SecurityGroup,
  SecurityGroupReference,
  ServiceDetail,
  SlotDateTimeRangeRequest,
  SlotStartTimeRangeRequest,
  SpotCapacityRebalance,
  SpotFleetLaunchSpecification,
  SpotFleetMonitoring,
  SpotFleetRequestConfig,
  SpotFleetRequestConfigData,
  SpotFleetTagSpecification,
  SpotInstanceRequest,
  SpotInstanceStatus,
  SpotMaintenanceStrategies,
  SpotPlacement,
  SpotPrice,
  StaleIpPermission,
  StaleSecurityGroup,
  TagDescription,
  TargetGroup,
  TargetGroupsConfig,
  TransitGatewayAttachment,
  TransitGatewayAttachmentAssociation,
  TransitGatewayPropagation,
  UsageClassType,
  VCpuInfo,
  VolumeModification,
  VolumeStatusAction,
  VolumeStatusAttachmentStatus,
  VolumeStatusDetails,
  VolumeStatusEvent,
  VolumeStatusInfo,
  VolumeStatusItem,
  VpcClassicLink,
  VpcEndpointConnection,
} from "../models/models_3";
import {
  AssociatedRole,
  BlobAttributeValue,
  CapacityReservationGroup,
  CapacityReservationSpecification,
  CidrAuthorizationContext,
  ClientCertificateRevocationListStatus,
  ClientData,
  CoipAddressUsage,
  CpuOptionsRequest,
  CreateVolumePermissionModifications,
  DisassociateTransitGatewayRouteTableRequest,
  DisassociateTransitGatewayRouteTableResult,
  DisassociateVpcCidrBlockRequest,
  DisassociateVpcCidrBlockResult,
  DiskImage,
  DiskImageDetail,
  DnsServersOptionsModifyStructure,
  EbsInstanceBlockDeviceSpecification,
  ElasticInferenceAccelerator,
  EnableEbsEncryptionByDefaultRequest,
  EnableEbsEncryptionByDefaultResult,
  EnableFastSnapshotRestoreErrorItem,
  EnableFastSnapshotRestoreStateError,
  EnableFastSnapshotRestoreStateErrorItem,
  EnableFastSnapshotRestoreSuccessItem,
  EnableFastSnapshotRestoresRequest,
  EnableFastSnapshotRestoresResult,
  EnableTransitGatewayRouteTablePropagationRequest,
  EnableTransitGatewayRouteTablePropagationResult,
  EnableVgwRoutePropagationRequest,
  EnableVolumeIORequest,
  EnableVpcClassicLinkDnsSupportRequest,
  EnableVpcClassicLinkDnsSupportResult,
  EnableVpcClassicLinkRequest,
  EnableVpcClassicLinkResult,
  EnclaveOptionsRequest,
  ExportClientVpnClientCertificateRevocationListRequest,
  ExportClientVpnClientCertificateRevocationListResult,
  ExportClientVpnClientConfigurationRequest,
  ExportClientVpnClientConfigurationResult,
  ExportImageRequest,
  ExportImageResult,
  ExportTaskS3LocationRequest,
  ExportTransitGatewayRoutesRequest,
  ExportTransitGatewayRoutesResult,
  GetAssociatedEnclaveCertificateIamRolesRequest,
  GetAssociatedEnclaveCertificateIamRolesResult,
  GetAssociatedIpv6PoolCidrsRequest,
  GetAssociatedIpv6PoolCidrsResult,
  GetCapacityReservationUsageRequest,
  GetCapacityReservationUsageResult,
  GetCoipPoolUsageRequest,
  GetCoipPoolUsageResult,
  GetConsoleOutputRequest,
  GetConsoleOutputResult,
  GetConsoleScreenshotRequest,
  GetConsoleScreenshotResult,
  GetDefaultCreditSpecificationRequest,
  GetDefaultCreditSpecificationResult,
  GetEbsDefaultKmsKeyIdRequest,
  GetEbsDefaultKmsKeyIdResult,
  GetEbsEncryptionByDefaultRequest,
  GetEbsEncryptionByDefaultResult,
  GetGroupsForCapacityReservationRequest,
  GetGroupsForCapacityReservationResult,
  GetHostReservationPurchasePreviewRequest,
  GetHostReservationPurchasePreviewResult,
  GetLaunchTemplateDataRequest,
  GetLaunchTemplateDataResult,
  GetManagedPrefixListAssociationsRequest,
  GetManagedPrefixListAssociationsResult,
  GetManagedPrefixListEntriesRequest,
  GetManagedPrefixListEntriesResult,
  GetPasswordDataRequest,
  GetPasswordDataResult,
  GetReservedInstancesExchangeQuoteRequest,
  GetReservedInstancesExchangeQuoteResult,
  GetTransitGatewayAttachmentPropagationsRequest,
  GetTransitGatewayAttachmentPropagationsResult,
  GetTransitGatewayMulticastDomainAssociationsRequest,
  GetTransitGatewayMulticastDomainAssociationsResult,
  GetTransitGatewayPrefixListReferencesRequest,
  GetTransitGatewayPrefixListReferencesResult,
  GetTransitGatewayRouteTableAssociationsRequest,
  GetTransitGatewayRouteTableAssociationsResult,
  GetTransitGatewayRouteTablePropagationsRequest,
  GetTransitGatewayRouteTablePropagationsResult,
  ImageDiskContainer,
  ImportClientVpnClientCertificateRevocationListRequest,
  ImportClientVpnClientCertificateRevocationListResult,
  ImportImageLicenseConfigurationRequest,
  ImportImageRequest,
  ImportImageResult,
  ImportInstanceLaunchSpecification,
  ImportInstanceRequest,
  ImportInstanceResult,
  ImportKeyPairRequest,
  ImportKeyPairResult,
  ImportSnapshotRequest,
  ImportSnapshotResult,
  ImportVolumeRequest,
  ImportVolumeResult,
  InstanceBlockDeviceMappingSpecification,
  InstanceCreditSpecificationRequest,
  InstanceFamilyCreditSpecification,
  InstanceMonitoring,
  InstanceUsage,
  Ipv6CidrAssociation,
  LaunchPermissionModifications,
  LoadPermissionModifications,
  LoadPermissionRequest,
  ModifyAvailabilityZoneGroupRequest,
  ModifyAvailabilityZoneGroupResult,
  ModifyCapacityReservationRequest,
  ModifyCapacityReservationResult,
  ModifyClientVpnEndpointRequest,
  ModifyClientVpnEndpointResult,
  ModifyDefaultCreditSpecificationRequest,
  ModifyDefaultCreditSpecificationResult,
  ModifyEbsDefaultKmsKeyIdRequest,
  ModifyEbsDefaultKmsKeyIdResult,
  ModifyFleetRequest,
  ModifyFleetResult,
  ModifyFpgaImageAttributeRequest,
  ModifyFpgaImageAttributeResult,
  ModifyHostsRequest,
  ModifyHostsResult,
  ModifyIdFormatRequest,
  ModifyIdentityIdFormatRequest,
  ModifyImageAttributeRequest,
  ModifyInstanceAttributeRequest,
  ModifyInstanceCapacityReservationAttributesRequest,
  ModifyInstanceCapacityReservationAttributesResult,
  ModifyInstanceCreditSpecificationRequest,
  ModifyInstanceCreditSpecificationResult,
  ModifyInstanceEventStartTimeRequest,
  ModifyInstanceEventStartTimeResult,
  ModifyInstanceMetadataOptionsRequest,
  ModifyInstanceMetadataOptionsResult,
  ModifyInstancePlacementRequest,
  ModifyInstancePlacementResult,
  ModifyLaunchTemplateRequest,
  ModifyLaunchTemplateResult,
  ModifyManagedPrefixListRequest,
  ModifyManagedPrefixListResult,
  ModifyNetworkInterfaceAttributeRequest,
  ModifyReservedInstancesRequest,
  ModifyReservedInstancesResult,
  ModifySnapshotAttributeRequest,
  ModifySpotFleetRequestRequest,
  ModifySpotFleetRequestResponse,
  ModifySubnetAttributeRequest,
  ModifyTrafficMirrorFilterNetworkServicesRequest,
  ModifyTrafficMirrorFilterNetworkServicesResult,
  ModifyTrafficMirrorFilterRuleRequest,
  ModifyTrafficMirrorFilterRuleResult,
  ModifyTrafficMirrorSessionRequest,
  ModifyTrafficMirrorSessionResult,
  ModifyTransitGatewayOptions,
  ModifyTransitGatewayPrefixListReferenceRequest,
  ModifyTransitGatewayPrefixListReferenceResult,
  ModifyTransitGatewayRequest,
  ModifyTransitGatewayResult,
  ModifyTransitGatewayVpcAttachmentRequest,
  ModifyTransitGatewayVpcAttachmentRequestOptions,
  ModifyTransitGatewayVpcAttachmentResult,
  ModifyVolumeAttributeRequest,
  ModifyVolumeRequest,
  ModifyVolumeResult,
  ModifyVpcAttributeRequest,
  ModifyVpcEndpointConnectionNotificationRequest,
  ModifyVpcEndpointConnectionNotificationResult,
  ModifyVpcEndpointRequest,
  ModifyVpcEndpointResult,
  ModifyVpcEndpointServiceConfigurationRequest,
  ModifyVpcEndpointServiceConfigurationResult,
  ModifyVpcEndpointServicePermissionsRequest,
  ModifyVpcEndpointServicePermissionsResult,
  ModifyVpcPeeringConnectionOptionsRequest,
  ModifyVpcPeeringConnectionOptionsResult,
  ModifyVpcTenancyRequest,
  ModifyVpcTenancyResult,
  ModifyVpnConnectionOptionsRequest,
  ModifyVpnConnectionOptionsResult,
  ModifyVpnConnectionRequest,
  ModifyVpnConnectionResult,
  ModifyVpnTunnelCertificateRequest,
  ModifyVpnTunnelCertificateResult,
  ModifyVpnTunnelOptionsRequest,
  ModifyVpnTunnelOptionsResult,
  ModifyVpnTunnelOptionsSpecification,
  MonitorInstancesRequest,
  MonitorInstancesResult,
  MoveAddressToVpcRequest,
  MoveAddressToVpcResult,
  NetworkInterfaceAttachmentChanges,
  PeeringConnectionOptions,
  PeeringConnectionOptionsRequest,
  PrefixListAssociation,
  PrefixListEntry,
  ProvisionByoipCidrRequest,
  ProvisionByoipCidrResult,
  Purchase,
  PurchaseHostReservationRequest,
  PurchaseHostReservationResult,
  PurchaseRequest,
  PurchaseReservedInstancesOfferingRequest,
  PurchaseReservedInstancesOfferingResult,
  PurchaseScheduledInstancesRequest,
  PurchaseScheduledInstancesResult,
  RebootInstancesRequest,
  RegisterImageRequest,
  RegisterImageResult,
  RegisterInstanceEventNotificationAttributesRequest,
  RegisterInstanceEventNotificationAttributesResult,
  RegisterInstanceTagAttributeRequest,
  RegisterTransitGatewayMulticastGroupMembersRequest,
  RegisterTransitGatewayMulticastGroupMembersResult,
  RegisterTransitGatewayMulticastGroupSourcesRequest,
  RegisterTransitGatewayMulticastGroupSourcesResult,
  RejectTransitGatewayMulticastDomainAssociationsRequest,
  RejectTransitGatewayMulticastDomainAssociationsResult,
  RejectTransitGatewayPeeringAttachmentRequest,
  RejectTransitGatewayPeeringAttachmentResult,
  RejectTransitGatewayVpcAttachmentRequest,
  RejectTransitGatewayVpcAttachmentResult,
  RejectVpcEndpointConnectionsRequest,
  RejectVpcEndpointConnectionsResult,
  RejectVpcPeeringConnectionRequest,
  RejectVpcPeeringConnectionResult,
  ReleaseAddressRequest,
  ReleaseHostsRequest,
  ReleaseHostsResult,
  RemovePrefixListEntry,
  ReplaceIamInstanceProfileAssociationRequest,
  ReplaceIamInstanceProfileAssociationResult,
  ReplaceNetworkAclAssociationRequest,
  ReplaceNetworkAclAssociationResult,
  ReplaceNetworkAclEntryRequest,
  ReplaceRouteRequest,
  ReplaceRouteTableAssociationRequest,
  ReplaceRouteTableAssociationResult,
  ReplaceTransitGatewayRouteRequest,
  ReplaceTransitGatewayRouteResult,
  ReportInstanceReasonCodes,
  ReportInstanceStatusRequest,
  RequestSpotFleetRequest,
  RequestSpotFleetResponse,
  RequestSpotInstancesRequest,
  RequestSpotInstancesResult,
  RequestSpotLaunchSpecification,
  ReservationValue,
  ReservedInstanceLimitPrice,
  ReservedInstanceReservationValue,
  ResetEbsDefaultKmsKeyIdRequest,
  ResetEbsDefaultKmsKeyIdResult,
  ResetFpgaImageAttributeRequest,
  ResetFpgaImageAttributeResult,
  ResetImageAttributeRequest,
  ResetInstanceAttributeRequest,
  ResetNetworkInterfaceAttributeRequest,
  ResetSnapshotAttributeRequest,
  RestoreAddressToClassicRequest,
  RestoreAddressToClassicResult,
  RestoreManagedPrefixListVersionRequest,
  RestoreManagedPrefixListVersionResult,
  RevokeClientVpnIngressRequest,
  RevokeClientVpnIngressResult,
  RevokeSecurityGroupEgressRequest,
  RevokeSecurityGroupEgressResult,
  RevokeSecurityGroupIngressRequest,
  RevokeSecurityGroupIngressResult,
  SnapshotDiskContainer,
  SuccessfulInstanceCreditSpecificationItem,
  TargetConfiguration,
  TargetReservationValue,
  TrafficMirrorFilterRuleField,
  TrafficMirrorSessionField,
  TransitGatewayAttachmentPropagation,
  TransitGatewayMulticastDomainAssociation,
  TransitGatewayMulticastRegisteredGroupMembers,
  TransitGatewayMulticastRegisteredGroupSources,
  TransitGatewayRouteTableAssociation,
  TransitGatewayRouteTablePropagation,
  UnsuccessfulInstanceCreditSpecificationItem,
  UnsuccessfulInstanceCreditSpecificationItemError,
  UserBucket,
  UserData,
  VolumeDetail,
} from "../models/models_4";
import {
  HibernationOptionsRequest,
  InstanceMarketOptionsRequest,
  InstanceMetadataOptionsRequest,
  InstanceStateChange,
  LaunchTemplateSpecification,
  LicenseConfigurationRequest,
  RunInstancesRequest,
  RunScheduledInstancesRequest,
  RunScheduledInstancesResult,
  ScheduledInstancesBlockDeviceMapping,
  ScheduledInstancesEbs,
  ScheduledInstancesIamInstanceProfile,
  ScheduledInstancesIpv6Address,
  ScheduledInstancesLaunchSpecification,
  ScheduledInstancesMonitoring,
  ScheduledInstancesNetworkInterface,
  ScheduledInstancesPlacement,
  ScheduledInstancesPrivateIpAddressConfig,
  SearchLocalGatewayRoutesRequest,
  SearchLocalGatewayRoutesResult,
  SearchTransitGatewayMulticastGroupsRequest,
  SearchTransitGatewayMulticastGroupsResult,
  SearchTransitGatewayRoutesRequest,
  SearchTransitGatewayRoutesResult,
  SendDiagnosticInterruptRequest,
  SpotMarketOptions,
  StartInstancesRequest,
  StartInstancesResult,
  StartNetworkInsightsAnalysisRequest,
  StartNetworkInsightsAnalysisResult,
  StartVpcEndpointServicePrivateDnsVerificationRequest,
  StartVpcEndpointServicePrivateDnsVerificationResult,
  StopInstancesRequest,
  StopInstancesResult,
  TerminateClientVpnConnectionsRequest,
  TerminateClientVpnConnectionsResult,
  TerminateConnectionStatus,
  TerminateInstancesRequest,
  TerminateInstancesResult,
  TransitGatewayMulticastGroup,
  UnassignIpv6AddressesRequest,
  UnassignIpv6AddressesResult,
  UnassignPrivateIpAddressesRequest,
  UnmonitorInstancesRequest,
  UnmonitorInstancesResult,
  UpdateSecurityGroupRuleDescriptionsEgressRequest,
  UpdateSecurityGroupRuleDescriptionsEgressResult,
  UpdateSecurityGroupRuleDescriptionsIngressRequest,
  UpdateSecurityGroupRuleDescriptionsIngressResult,
  WithdrawByoipCidrRequest,
  WithdrawByoipCidrResult,
} from "../models/models_5";
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@aws-sdk/protocol-http";
import {
  SmithyException as __SmithyException,
  extendedEncodeURIComponent as __extendedEncodeURIComponent,
  getArrayIfSingleItem as __getArrayIfSingleItem,
  getValueFromTextNode as __getValueFromTextNode,
} from "@aws-sdk/smithy-client";
import {
  Endpoint as __Endpoint,
  HeaderBag as __HeaderBag,
  MetadataBearer as __MetadataBearer,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext,
} from "@aws-sdk/types";
import { parse as xmlParse } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";

export const serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = async (
  input: AcceptReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest(input, context),
    Action: "AcceptReservedInstancesExchangeQuote",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  input: AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "AcceptTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = async (
  input: AcceptTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "AcceptTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = async (
  input: AcceptTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest(input, context),
    Action: "AcceptTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AcceptVpcEndpointConnectionsCommand = async (
  input: AcceptVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptVpcEndpointConnectionsRequest(input, context),
    Action: "AcceptVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AcceptVpcPeeringConnectionCommand = async (
  input: AcceptVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AcceptVpcPeeringConnectionRequest(input, context),
    Action: "AcceptVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AdvertiseByoipCidrCommand = async (
  input: AdvertiseByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AdvertiseByoipCidrRequest(input, context),
    Action: "AdvertiseByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AllocateAddressCommand = async (
  input: AllocateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AllocateAddressRequest(input, context),
    Action: "AllocateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AllocateHostsCommand = async (
  input: AllocateHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AllocateHostsRequest(input, context),
    Action: "AllocateHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  input: ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
    Action: "ApplySecurityGroupsToClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssignIpv6AddressesCommand = async (
  input: AssignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssignIpv6AddressesRequest(input, context),
    Action: "AssignIpv6Addresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssignPrivateIpAddressesCommand = async (
  input: AssignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssignPrivateIpAddressesRequest(input, context),
    Action: "AssignPrivateIpAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateAddressCommand = async (
  input: AssociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateAddressRequest(input, context),
    Action: "AssociateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateClientVpnTargetNetworkCommand = async (
  input: AssociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateClientVpnTargetNetworkRequest(input, context),
    Action: "AssociateClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateDhcpOptionsCommand = async (
  input: AssociateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateDhcpOptionsRequest(input, context),
    Action: "AssociateDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = async (
  input: AssociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest(input, context),
    Action: "AssociateEnclaveCertificateIamRole",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateIamInstanceProfileCommand = async (
  input: AssociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateIamInstanceProfileRequest(input, context),
    Action: "AssociateIamInstanceProfile",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateRouteTableCommand = async (
  input: AssociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateRouteTableRequest(input, context),
    Action: "AssociateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateSubnetCidrBlockCommand = async (
  input: AssociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateSubnetCidrBlockRequest(input, context),
    Action: "AssociateSubnetCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = async (
  input: AssociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest(input, context),
    Action: "AssociateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateTransitGatewayRouteTableCommand = async (
  input: AssociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateTransitGatewayRouteTableRequest(input, context),
    Action: "AssociateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AssociateVpcCidrBlockCommand = async (
  input: AssociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AssociateVpcCidrBlockRequest(input, context),
    Action: "AssociateVpcCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AttachClassicLinkVpcCommand = async (
  input: AttachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AttachClassicLinkVpcRequest(input, context),
    Action: "AttachClassicLinkVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AttachInternetGatewayCommand = async (
  input: AttachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AttachInternetGatewayRequest(input, context),
    Action: "AttachInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AttachNetworkInterfaceCommand = async (
  input: AttachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AttachNetworkInterfaceRequest(input, context),
    Action: "AttachNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AttachVolumeCommand = async (
  input: AttachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AttachVolumeRequest(input, context),
    Action: "AttachVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AttachVpnGatewayCommand = async (
  input: AttachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AttachVpnGatewayRequest(input, context),
    Action: "AttachVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AuthorizeClientVpnIngressCommand = async (
  input: AuthorizeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AuthorizeClientVpnIngressRequest(input, context),
    Action: "AuthorizeClientVpnIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AuthorizeSecurityGroupEgressCommand = async (
  input: AuthorizeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AuthorizeSecurityGroupEgressRequest(input, context),
    Action: "AuthorizeSecurityGroupEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2AuthorizeSecurityGroupIngressCommand = async (
  input: AuthorizeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2AuthorizeSecurityGroupIngressRequest(input, context),
    Action: "AuthorizeSecurityGroupIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2BundleInstanceCommand = async (
  input: BundleInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2BundleInstanceRequest(input, context),
    Action: "BundleInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelBundleTaskCommand = async (
  input: CancelBundleTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelBundleTaskRequest(input, context),
    Action: "CancelBundleTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelCapacityReservationCommand = async (
  input: CancelCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelCapacityReservationRequest(input, context),
    Action: "CancelCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelConversionTaskCommand = async (
  input: CancelConversionTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelConversionRequest(input, context),
    Action: "CancelConversionTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelExportTaskCommand = async (
  input: CancelExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelExportTaskRequest(input, context),
    Action: "CancelExportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelImportTaskCommand = async (
  input: CancelImportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelImportTaskRequest(input, context),
    Action: "CancelImportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelReservedInstancesListingCommand = async (
  input: CancelReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelReservedInstancesListingRequest(input, context),
    Action: "CancelReservedInstancesListing",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelSpotFleetRequestsCommand = async (
  input: CancelSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelSpotFleetRequestsRequest(input, context),
    Action: "CancelSpotFleetRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CancelSpotInstanceRequestsCommand = async (
  input: CancelSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CancelSpotInstanceRequestsRequest(input, context),
    Action: "CancelSpotInstanceRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ConfirmProductInstanceCommand = async (
  input: ConfirmProductInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ConfirmProductInstanceRequest(input, context),
    Action: "ConfirmProductInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CopyFpgaImageCommand = async (
  input: CopyFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CopyFpgaImageRequest(input, context),
    Action: "CopyFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CopyImageCommand = async (
  input: CopyImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CopyImageRequest(input, context),
    Action: "CopyImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CopySnapshotCommand = async (
  input: CopySnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CopySnapshotRequest(input, context),
    Action: "CopySnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateCapacityReservationCommand = async (
  input: CreateCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateCapacityReservationRequest(input, context),
    Action: "CreateCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateCarrierGatewayCommand = async (
  input: CreateCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateCarrierGatewayRequest(input, context),
    Action: "CreateCarrierGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateClientVpnEndpointCommand = async (
  input: CreateClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateClientVpnEndpointRequest(input, context),
    Action: "CreateClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateClientVpnRouteCommand = async (
  input: CreateClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateClientVpnRouteRequest(input, context),
    Action: "CreateClientVpnRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateCustomerGatewayCommand = async (
  input: CreateCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateCustomerGatewayRequest(input, context),
    Action: "CreateCustomerGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateDefaultSubnetCommand = async (
  input: CreateDefaultSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateDefaultSubnetRequest(input, context),
    Action: "CreateDefaultSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateDefaultVpcCommand = async (
  input: CreateDefaultVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateDefaultVpcRequest(input, context),
    Action: "CreateDefaultVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateDhcpOptionsCommand = async (
  input: CreateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateDhcpOptionsRequest(input, context),
    Action: "CreateDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateEgressOnlyInternetGatewayCommand = async (
  input: CreateEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateEgressOnlyInternetGatewayRequest(input, context),
    Action: "CreateEgressOnlyInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateFleetCommand = async (
  input: CreateFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateFleetRequest(input, context),
    Action: "CreateFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateFlowLogsCommand = async (
  input: CreateFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateFlowLogsRequest(input, context),
    Action: "CreateFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateFpgaImageCommand = async (
  input: CreateFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateFpgaImageRequest(input, context),
    Action: "CreateFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateImageCommand = async (
  input: CreateImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateImageRequest(input, context),
    Action: "CreateImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateInstanceExportTaskCommand = async (
  input: CreateInstanceExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateInstanceExportTaskRequest(input, context),
    Action: "CreateInstanceExportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateInternetGatewayCommand = async (
  input: CreateInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateInternetGatewayRequest(input, context),
    Action: "CreateInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateKeyPairCommand = async (
  input: CreateKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateKeyPairRequest(input, context),
    Action: "CreateKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateLaunchTemplateCommand = async (
  input: CreateLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateLaunchTemplateRequest(input, context),
    Action: "CreateLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateLaunchTemplateVersionCommand = async (
  input: CreateLaunchTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateLaunchTemplateVersionRequest(input, context),
    Action: "CreateLaunchTemplateVersion",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateLocalGatewayRouteCommand = async (
  input: CreateLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateLocalGatewayRouteRequest(input, context),
    Action: "CreateLocalGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  input: CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
    Action: "CreateLocalGatewayRouteTableVpcAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateManagedPrefixListCommand = async (
  input: CreateManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateManagedPrefixListRequest(input, context),
    Action: "CreateManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNatGatewayCommand = async (
  input: CreateNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNatGatewayRequest(input, context),
    Action: "CreateNatGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNetworkAclCommand = async (
  input: CreateNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNetworkAclRequest(input, context),
    Action: "CreateNetworkAcl",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNetworkAclEntryCommand = async (
  input: CreateNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNetworkAclEntryRequest(input, context),
    Action: "CreateNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNetworkInsightsPathCommand = async (
  input: CreateNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNetworkInsightsPathRequest(input, context),
    Action: "CreateNetworkInsightsPath",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNetworkInterfaceCommand = async (
  input: CreateNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNetworkInterfaceRequest(input, context),
    Action: "CreateNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateNetworkInterfacePermissionCommand = async (
  input: CreateNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateNetworkInterfacePermissionRequest(input, context),
    Action: "CreateNetworkInterfacePermission",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreatePlacementGroupCommand = async (
  input: CreatePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreatePlacementGroupRequest(input, context),
    Action: "CreatePlacementGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateReservedInstancesListingCommand = async (
  input: CreateReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateReservedInstancesListingRequest(input, context),
    Action: "CreateReservedInstancesListing",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateRouteCommand = async (
  input: CreateRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateRouteRequest(input, context),
    Action: "CreateRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateRouteTableCommand = async (
  input: CreateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateRouteTableRequest(input, context),
    Action: "CreateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateSecurityGroupCommand = async (
  input: CreateSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateSecurityGroupRequest(input, context),
    Action: "CreateSecurityGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateSnapshotCommand = async (
  input: CreateSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateSnapshotRequest(input, context),
    Action: "CreateSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateSnapshotsCommand = async (
  input: CreateSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateSnapshotsRequest(input, context),
    Action: "CreateSnapshots",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateSpotDatafeedSubscriptionCommand = async (
  input: CreateSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateSpotDatafeedSubscriptionRequest(input, context),
    Action: "CreateSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateSubnetCommand = async (
  input: CreateSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateSubnetRequest(input, context),
    Action: "CreateSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTagsCommand = async (
  input: CreateTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTagsRequest(input, context),
    Action: "CreateTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTrafficMirrorFilterCommand = async (
  input: CreateTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTrafficMirrorFilterRequest(input, context),
    Action: "CreateTrafficMirrorFilter",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTrafficMirrorFilterRuleCommand = async (
  input: CreateTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTrafficMirrorFilterRuleRequest(input, context),
    Action: "CreateTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTrafficMirrorSessionCommand = async (
  input: CreateTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTrafficMirrorSessionRequest(input, context),
    Action: "CreateTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTrafficMirrorTargetCommand = async (
  input: CreateTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTrafficMirrorTargetRequest(input, context),
    Action: "CreateTrafficMirrorTarget",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayCommand = async (
  input: CreateTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayRequest(input, context),
    Action: "CreateTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayConnectCommand = async (
  input: CreateTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayConnectRequest(input, context),
    Action: "CreateTransitGatewayConnect",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayConnectPeerCommand = async (
  input: CreateTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayConnectPeerRequest(input, context),
    Action: "CreateTransitGatewayConnectPeer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayMulticastDomainCommand = async (
  input: CreateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayMulticastDomainRequest(input, context),
    Action: "CreateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = async (
  input: CreateTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "CreateTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = async (
  input: CreateTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "CreateTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayRouteCommand = async (
  input: CreateTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayRouteRequest(input, context),
    Action: "CreateTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayRouteTableCommand = async (
  input: CreateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayRouteTableRequest(input, context),
    Action: "CreateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = async (
  input: CreateTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest(input, context),
    Action: "CreateTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVolumeCommand = async (
  input: CreateVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVolumeRequest(input, context),
    Action: "CreateVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpcCommand = async (
  input: CreateVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpcRequest(input, context),
    Action: "CreateVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpcEndpointCommand = async (
  input: CreateVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpcEndpointRequest(input, context),
    Action: "CreateVpcEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = async (
  input: CreateVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest(input, context),
    Action: "CreateVpcEndpointConnectionNotification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = async (
  input: CreateVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest(input, context),
    Action: "CreateVpcEndpointServiceConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpcPeeringConnectionCommand = async (
  input: CreateVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpcPeeringConnectionRequest(input, context),
    Action: "CreateVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpnConnectionCommand = async (
  input: CreateVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpnConnectionRequest(input, context),
    Action: "CreateVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpnConnectionRouteCommand = async (
  input: CreateVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpnConnectionRouteRequest(input, context),
    Action: "CreateVpnConnectionRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2CreateVpnGatewayCommand = async (
  input: CreateVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2CreateVpnGatewayRequest(input, context),
    Action: "CreateVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteCarrierGatewayCommand = async (
  input: DeleteCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteCarrierGatewayRequest(input, context),
    Action: "DeleteCarrierGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteClientVpnEndpointCommand = async (
  input: DeleteClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteClientVpnEndpointRequest(input, context),
    Action: "DeleteClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteClientVpnRouteCommand = async (
  input: DeleteClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteClientVpnRouteRequest(input, context),
    Action: "DeleteClientVpnRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteCustomerGatewayCommand = async (
  input: DeleteCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteCustomerGatewayRequest(input, context),
    Action: "DeleteCustomerGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteDhcpOptionsCommand = async (
  input: DeleteDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteDhcpOptionsRequest(input, context),
    Action: "DeleteDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = async (
  input: DeleteEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest(input, context),
    Action: "DeleteEgressOnlyInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteFleetsCommand = async (
  input: DeleteFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteFleetsRequest(input, context),
    Action: "DeleteFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteFlowLogsCommand = async (
  input: DeleteFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteFlowLogsRequest(input, context),
    Action: "DeleteFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteFpgaImageCommand = async (
  input: DeleteFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteFpgaImageRequest(input, context),
    Action: "DeleteFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteInternetGatewayCommand = async (
  input: DeleteInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteInternetGatewayRequest(input, context),
    Action: "DeleteInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteKeyPairCommand = async (
  input: DeleteKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteKeyPairRequest(input, context),
    Action: "DeleteKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteLaunchTemplateCommand = async (
  input: DeleteLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteLaunchTemplateRequest(input, context),
    Action: "DeleteLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteLaunchTemplateVersionsCommand = async (
  input: DeleteLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteLaunchTemplateVersionsRequest(input, context),
    Action: "DeleteLaunchTemplateVersions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteLocalGatewayRouteCommand = async (
  input: DeleteLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteLocalGatewayRouteRequest(input, context),
    Action: "DeleteLocalGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  input: DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
    Action: "DeleteLocalGatewayRouteTableVpcAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteManagedPrefixListCommand = async (
  input: DeleteManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteManagedPrefixListRequest(input, context),
    Action: "DeleteManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNatGatewayCommand = async (
  input: DeleteNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNatGatewayRequest(input, context),
    Action: "DeleteNatGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkAclCommand = async (
  input: DeleteNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkAclRequest(input, context),
    Action: "DeleteNetworkAcl",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkAclEntryCommand = async (
  input: DeleteNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkAclEntryRequest(input, context),
    Action: "DeleteNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkInsightsAnalysisCommand = async (
  input: DeleteNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkInsightsAnalysisRequest(input, context),
    Action: "DeleteNetworkInsightsAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkInsightsPathCommand = async (
  input: DeleteNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkInsightsPathRequest(input, context),
    Action: "DeleteNetworkInsightsPath",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkInterfaceCommand = async (
  input: DeleteNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkInterfaceRequest(input, context),
    Action: "DeleteNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteNetworkInterfacePermissionCommand = async (
  input: DeleteNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteNetworkInterfacePermissionRequest(input, context),
    Action: "DeleteNetworkInterfacePermission",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeletePlacementGroupCommand = async (
  input: DeletePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeletePlacementGroupRequest(input, context),
    Action: "DeletePlacementGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteQueuedReservedInstancesCommand = async (
  input: DeleteQueuedReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteQueuedReservedInstancesRequest(input, context),
    Action: "DeleteQueuedReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteRouteCommand = async (
  input: DeleteRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteRouteRequest(input, context),
    Action: "DeleteRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteRouteTableCommand = async (
  input: DeleteRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteRouteTableRequest(input, context),
    Action: "DeleteRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteSecurityGroupCommand = async (
  input: DeleteSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteSecurityGroupRequest(input, context),
    Action: "DeleteSecurityGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteSnapshotCommand = async (
  input: DeleteSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteSnapshotRequest(input, context),
    Action: "DeleteSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = async (
  input: DeleteSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest(input, context),
    Action: "DeleteSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteSubnetCommand = async (
  input: DeleteSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteSubnetRequest(input, context),
    Action: "DeleteSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTagsCommand = async (
  input: DeleteTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTagsRequest(input, context),
    Action: "DeleteTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTrafficMirrorFilterCommand = async (
  input: DeleteTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTrafficMirrorFilterRequest(input, context),
    Action: "DeleteTrafficMirrorFilter",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = async (
  input: DeleteTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest(input, context),
    Action: "DeleteTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTrafficMirrorSessionCommand = async (
  input: DeleteTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTrafficMirrorSessionRequest(input, context),
    Action: "DeleteTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTrafficMirrorTargetCommand = async (
  input: DeleteTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTrafficMirrorTargetRequest(input, context),
    Action: "DeleteTrafficMirrorTarget",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayCommand = async (
  input: DeleteTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayRequest(input, context),
    Action: "DeleteTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayConnectCommand = async (
  input: DeleteTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayConnectRequest(input, context),
    Action: "DeleteTransitGatewayConnect",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayConnectPeerCommand = async (
  input: DeleteTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayConnectPeerRequest(input, context),
    Action: "DeleteTransitGatewayConnectPeer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = async (
  input: DeleteTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest(input, context),
    Action: "DeleteTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = async (
  input: DeleteTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "DeleteTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = async (
  input: DeleteTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "DeleteTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayRouteCommand = async (
  input: DeleteTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayRouteRequest(input, context),
    Action: "DeleteTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayRouteTableCommand = async (
  input: DeleteTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayRouteTableRequest(input, context),
    Action: "DeleteTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = async (
  input: DeleteTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest(input, context),
    Action: "DeleteTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVolumeCommand = async (
  input: DeleteVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVolumeRequest(input, context),
    Action: "DeleteVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpcCommand = async (
  input: DeleteVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpcRequest(input, context),
    Action: "DeleteVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = async (
  input: DeleteVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest(input, context),
    Action: "DeleteVpcEndpointConnectionNotifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpcEndpointsCommand = async (
  input: DeleteVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpcEndpointsRequest(input, context),
    Action: "DeleteVpcEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = async (
  input: DeleteVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest(input, context),
    Action: "DeleteVpcEndpointServiceConfigurations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpcPeeringConnectionCommand = async (
  input: DeleteVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpcPeeringConnectionRequest(input, context),
    Action: "DeleteVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpnConnectionCommand = async (
  input: DeleteVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpnConnectionRequest(input, context),
    Action: "DeleteVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpnConnectionRouteCommand = async (
  input: DeleteVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpnConnectionRouteRequest(input, context),
    Action: "DeleteVpnConnectionRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeleteVpnGatewayCommand = async (
  input: DeleteVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeleteVpnGatewayRequest(input, context),
    Action: "DeleteVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeprovisionByoipCidrCommand = async (
  input: DeprovisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeprovisionByoipCidrRequest(input, context),
    Action: "DeprovisionByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeregisterImageCommand = async (
  input: DeregisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeregisterImageRequest(input, context),
    Action: "DeregisterImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = async (
  input: DeregisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest(input, context),
    Action: "DeregisterInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  input: DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
    Action: "DeregisterTransitGatewayMulticastGroupMembers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    Action: "DeregisterTransitGatewayMulticastGroupSources",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeAccountAttributesCommand = async (
  input: DescribeAccountAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeAccountAttributesRequest(input, context),
    Action: "DescribeAccountAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeAddressesCommand = async (
  input: DescribeAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeAddressesRequest(input, context),
    Action: "DescribeAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeAggregateIdFormatCommand = async (
  input: DescribeAggregateIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeAggregateIdFormatRequest(input, context),
    Action: "DescribeAggregateIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeAvailabilityZonesCommand = async (
  input: DescribeAvailabilityZonesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeAvailabilityZonesRequest(input, context),
    Action: "DescribeAvailabilityZones",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeBundleTasksCommand = async (
  input: DescribeBundleTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeBundleTasksRequest(input, context),
    Action: "DescribeBundleTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeByoipCidrsCommand = async (
  input: DescribeByoipCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeByoipCidrsRequest(input, context),
    Action: "DescribeByoipCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeCapacityReservationsCommand = async (
  input: DescribeCapacityReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeCapacityReservationsRequest(input, context),
    Action: "DescribeCapacityReservations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeCarrierGatewaysCommand = async (
  input: DescribeCarrierGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeCarrierGatewaysRequest(input, context),
    Action: "DescribeCarrierGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClassicLinkInstancesCommand = async (
  input: DescribeClassicLinkInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClassicLinkInstancesRequest(input, context),
    Action: "DescribeClassicLinkInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = async (
  input: DescribeClientVpnAuthorizationRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest(input, context),
    Action: "DescribeClientVpnAuthorizationRules",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClientVpnConnectionsCommand = async (
  input: DescribeClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClientVpnConnectionsRequest(input, context),
    Action: "DescribeClientVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClientVpnEndpointsCommand = async (
  input: DescribeClientVpnEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClientVpnEndpointsRequest(input, context),
    Action: "DescribeClientVpnEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClientVpnRoutesCommand = async (
  input: DescribeClientVpnRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClientVpnRoutesRequest(input, context),
    Action: "DescribeClientVpnRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeClientVpnTargetNetworksCommand = async (
  input: DescribeClientVpnTargetNetworksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeClientVpnTargetNetworksRequest(input, context),
    Action: "DescribeClientVpnTargetNetworks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeCoipPoolsCommand = async (
  input: DescribeCoipPoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeCoipPoolsRequest(input, context),
    Action: "DescribeCoipPools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeConversionTasksCommand = async (
  input: DescribeConversionTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeConversionTasksRequest(input, context),
    Action: "DescribeConversionTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeCustomerGatewaysCommand = async (
  input: DescribeCustomerGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeCustomerGatewaysRequest(input, context),
    Action: "DescribeCustomerGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeDhcpOptionsCommand = async (
  input: DescribeDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeDhcpOptionsRequest(input, context),
    Action: "DescribeDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = async (
  input: DescribeEgressOnlyInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest(input, context),
    Action: "DescribeEgressOnlyInternetGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeElasticGpusCommand = async (
  input: DescribeElasticGpusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeElasticGpusRequest(input, context),
    Action: "DescribeElasticGpus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeExportImageTasksCommand = async (
  input: DescribeExportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeExportImageTasksRequest(input, context),
    Action: "DescribeExportImageTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeExportTasksCommand = async (
  input: DescribeExportTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeExportTasksRequest(input, context),
    Action: "DescribeExportTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFastSnapshotRestoresCommand = async (
  input: DescribeFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFastSnapshotRestoresRequest(input, context),
    Action: "DescribeFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFleetHistoryCommand = async (
  input: DescribeFleetHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFleetHistoryRequest(input, context),
    Action: "DescribeFleetHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFleetInstancesCommand = async (
  input: DescribeFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFleetInstancesRequest(input, context),
    Action: "DescribeFleetInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFleetsCommand = async (
  input: DescribeFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFleetsRequest(input, context),
    Action: "DescribeFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFlowLogsCommand = async (
  input: DescribeFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFlowLogsRequest(input, context),
    Action: "DescribeFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFpgaImageAttributeCommand = async (
  input: DescribeFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFpgaImageAttributeRequest(input, context),
    Action: "DescribeFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeFpgaImagesCommand = async (
  input: DescribeFpgaImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeFpgaImagesRequest(input, context),
    Action: "DescribeFpgaImages",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeHostReservationOfferingsCommand = async (
  input: DescribeHostReservationOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeHostReservationOfferingsRequest(input, context),
    Action: "DescribeHostReservationOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeHostReservationsCommand = async (
  input: DescribeHostReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeHostReservationsRequest(input, context),
    Action: "DescribeHostReservations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeHostsCommand = async (
  input: DescribeHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeHostsRequest(input, context),
    Action: "DescribeHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = async (
  input: DescribeIamInstanceProfileAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest(input, context),
    Action: "DescribeIamInstanceProfileAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeIdentityIdFormatCommand = async (
  input: DescribeIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeIdentityIdFormatRequest(input, context),
    Action: "DescribeIdentityIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeIdFormatCommand = async (
  input: DescribeIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeIdFormatRequest(input, context),
    Action: "DescribeIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeImageAttributeCommand = async (
  input: DescribeImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeImageAttributeRequest(input, context),
    Action: "DescribeImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeImagesCommand = async (
  input: DescribeImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeImagesRequest(input, context),
    Action: "DescribeImages",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeImportImageTasksCommand = async (
  input: DescribeImportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeImportImageTasksRequest(input, context),
    Action: "DescribeImportImageTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeImportSnapshotTasksCommand = async (
  input: DescribeImportSnapshotTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeImportSnapshotTasksRequest(input, context),
    Action: "DescribeImportSnapshotTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceAttributeCommand = async (
  input: DescribeInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceAttributeRequest(input, context),
    Action: "DescribeInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceCreditSpecificationsCommand = async (
  input: DescribeInstanceCreditSpecificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceCreditSpecificationsRequest(input, context),
    Action: "DescribeInstanceCreditSpecifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = async (
  input: DescribeInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest(input, context),
    Action: "DescribeInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstancesCommand = async (
  input: DescribeInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstancesRequest(input, context),
    Action: "DescribeInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceStatusCommand = async (
  input: DescribeInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceStatusRequest(input, context),
    Action: "DescribeInstanceStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceTypeOfferingsCommand = async (
  input: DescribeInstanceTypeOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceTypeOfferingsRequest(input, context),
    Action: "DescribeInstanceTypeOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInstanceTypesCommand = async (
  input: DescribeInstanceTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInstanceTypesRequest(input, context),
    Action: "DescribeInstanceTypes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeInternetGatewaysCommand = async (
  input: DescribeInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeInternetGatewaysRequest(input, context),
    Action: "DescribeInternetGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeIpv6PoolsCommand = async (
  input: DescribeIpv6PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeIpv6PoolsRequest(input, context),
    Action: "DescribeIpv6Pools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeKeyPairsCommand = async (
  input: DescribeKeyPairsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeKeyPairsRequest(input, context),
    Action: "DescribeKeyPairs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLaunchTemplatesCommand = async (
  input: DescribeLaunchTemplatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLaunchTemplatesRequest(input, context),
    Action: "DescribeLaunchTemplates",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLaunchTemplateVersionsCommand = async (
  input: DescribeLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLaunchTemplateVersionsRequest(input, context),
    Action: "DescribeLaunchTemplateVersions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewayRouteTablesCommand = async (
  input: DescribeLocalGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewayRouteTablesRequest(input, context),
    Action: "DescribeLocalGatewayRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
    Action: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
    Action: "DescribeLocalGatewayRouteTableVpcAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewaysCommand = async (
  input: DescribeLocalGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewaysRequest(input, context),
    Action: "DescribeLocalGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  input: DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
    Action: "DescribeLocalGatewayVirtualInterfaceGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = async (
  input: DescribeLocalGatewayVirtualInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest(input, context),
    Action: "DescribeLocalGatewayVirtualInterfaces",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeManagedPrefixListsCommand = async (
  input: DescribeManagedPrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeManagedPrefixListsRequest(input, context),
    Action: "DescribeManagedPrefixLists",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeMovingAddressesCommand = async (
  input: DescribeMovingAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeMovingAddressesRequest(input, context),
    Action: "DescribeMovingAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNatGatewaysCommand = async (
  input: DescribeNatGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNatGatewaysRequest(input, context),
    Action: "DescribeNatGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkAclsCommand = async (
  input: DescribeNetworkAclsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkAclsRequest(input, context),
    Action: "DescribeNetworkAcls",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkInsightsAnalysesCommand = async (
  input: DescribeNetworkInsightsAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkInsightsAnalysesRequest(input, context),
    Action: "DescribeNetworkInsightsAnalyses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkInsightsPathsCommand = async (
  input: DescribeNetworkInsightsPathsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkInsightsPathsRequest(input, context),
    Action: "DescribeNetworkInsightsPaths",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkInterfaceAttributeCommand = async (
  input: DescribeNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkInterfaceAttributeRequest(input, context),
    Action: "DescribeNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkInterfacePermissionsCommand = async (
  input: DescribeNetworkInterfacePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkInterfacePermissionsRequest(input, context),
    Action: "DescribeNetworkInterfacePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeNetworkInterfacesCommand = async (
  input: DescribeNetworkInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeNetworkInterfacesRequest(input, context),
    Action: "DescribeNetworkInterfaces",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribePlacementGroupsCommand = async (
  input: DescribePlacementGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribePlacementGroupsRequest(input, context),
    Action: "DescribePlacementGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribePrefixListsCommand = async (
  input: DescribePrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribePrefixListsRequest(input, context),
    Action: "DescribePrefixLists",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribePrincipalIdFormatCommand = async (
  input: DescribePrincipalIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribePrincipalIdFormatRequest(input, context),
    Action: "DescribePrincipalIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribePublicIpv4PoolsCommand = async (
  input: DescribePublicIpv4PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribePublicIpv4PoolsRequest(input, context),
    Action: "DescribePublicIpv4Pools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeRegionsCommand = async (
  input: DescribeRegionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeRegionsRequest(input, context),
    Action: "DescribeRegions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeReservedInstancesCommand = async (
  input: DescribeReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeReservedInstancesRequest(input, context),
    Action: "DescribeReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeReservedInstancesListingsCommand = async (
  input: DescribeReservedInstancesListingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeReservedInstancesListingsRequest(input, context),
    Action: "DescribeReservedInstancesListings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeReservedInstancesModificationsCommand = async (
  input: DescribeReservedInstancesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeReservedInstancesModificationsRequest(input, context),
    Action: "DescribeReservedInstancesModifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeReservedInstancesOfferingsCommand = async (
  input: DescribeReservedInstancesOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeReservedInstancesOfferingsRequest(input, context),
    Action: "DescribeReservedInstancesOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeRouteTablesCommand = async (
  input: DescribeRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeRouteTablesRequest(input, context),
    Action: "DescribeRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = async (
  input: DescribeScheduledInstanceAvailabilityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest(input, context),
    Action: "DescribeScheduledInstanceAvailability",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeScheduledInstancesCommand = async (
  input: DescribeScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeScheduledInstancesRequest(input, context),
    Action: "DescribeScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSecurityGroupReferencesCommand = async (
  input: DescribeSecurityGroupReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSecurityGroupReferencesRequest(input, context),
    Action: "DescribeSecurityGroupReferences",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSecurityGroupsCommand = async (
  input: DescribeSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSecurityGroupsRequest(input, context),
    Action: "DescribeSecurityGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSnapshotAttributeCommand = async (
  input: DescribeSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSnapshotAttributeRequest(input, context),
    Action: "DescribeSnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSnapshotsCommand = async (
  input: DescribeSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSnapshotsRequest(input, context),
    Action: "DescribeSnapshots",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = async (
  input: DescribeSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest(input, context),
    Action: "DescribeSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotFleetInstancesCommand = async (
  input: DescribeSpotFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotFleetInstancesRequest(input, context),
    Action: "DescribeSpotFleetInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotFleetRequestHistoryCommand = async (
  input: DescribeSpotFleetRequestHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotFleetRequestHistoryRequest(input, context),
    Action: "DescribeSpotFleetRequestHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotFleetRequestsCommand = async (
  input: DescribeSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotFleetRequestsRequest(input, context),
    Action: "DescribeSpotFleetRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotInstanceRequestsCommand = async (
  input: DescribeSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotInstanceRequestsRequest(input, context),
    Action: "DescribeSpotInstanceRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSpotPriceHistoryCommand = async (
  input: DescribeSpotPriceHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSpotPriceHistoryRequest(input, context),
    Action: "DescribeSpotPriceHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeStaleSecurityGroupsCommand = async (
  input: DescribeStaleSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeStaleSecurityGroupsRequest(input, context),
    Action: "DescribeStaleSecurityGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeSubnetsCommand = async (
  input: DescribeSubnetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeSubnetsRequest(input, context),
    Action: "DescribeSubnets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTagsCommand = async (
  input: DescribeTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTagsRequest(input, context),
    Action: "DescribeTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTrafficMirrorFiltersCommand = async (
  input: DescribeTrafficMirrorFiltersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTrafficMirrorFiltersRequest(input, context),
    Action: "DescribeTrafficMirrorFilters",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTrafficMirrorSessionsCommand = async (
  input: DescribeTrafficMirrorSessionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTrafficMirrorSessionsRequest(input, context),
    Action: "DescribeTrafficMirrorSessions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTrafficMirrorTargetsCommand = async (
  input: DescribeTrafficMirrorTargetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTrafficMirrorTargetsRequest(input, context),
    Action: "DescribeTrafficMirrorTargets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayAttachmentsCommand = async (
  input: DescribeTransitGatewayAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayConnectPeersCommand = async (
  input: DescribeTransitGatewayConnectPeersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayConnectPeersRequest(input, context),
    Action: "DescribeTransitGatewayConnectPeers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayConnectsCommand = async (
  input: DescribeTransitGatewayConnectsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayConnectsRequest(input, context),
    Action: "DescribeTransitGatewayConnects",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = async (
  input: DescribeTransitGatewayMulticastDomainsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest(input, context),
    Action: "DescribeTransitGatewayMulticastDomains",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = async (
  input: DescribeTransitGatewayPeeringAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayPeeringAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayRouteTablesCommand = async (
  input: DescribeTransitGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayRouteTablesRequest(input, context),
    Action: "DescribeTransitGatewayRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewaysCommand = async (
  input: DescribeTransitGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewaysRequest(input, context),
    Action: "DescribeTransitGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = async (
  input: DescribeTransitGatewayVpcAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayVpcAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVolumeAttributeCommand = async (
  input: DescribeVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVolumeAttributeRequest(input, context),
    Action: "DescribeVolumeAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVolumesCommand = async (
  input: DescribeVolumesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVolumesRequest(input, context),
    Action: "DescribeVolumes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVolumesModificationsCommand = async (
  input: DescribeVolumesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVolumesModificationsRequest(input, context),
    Action: "DescribeVolumesModifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVolumeStatusCommand = async (
  input: DescribeVolumeStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVolumeStatusRequest(input, context),
    Action: "DescribeVolumeStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcAttributeCommand = async (
  input: DescribeVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcAttributeRequest(input, context),
    Action: "DescribeVpcAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcClassicLinkCommand = async (
  input: DescribeVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcClassicLinkRequest(input, context),
    Action: "DescribeVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = async (
  input: DescribeVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest(input, context),
    Action: "DescribeVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = async (
  input: DescribeVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest(input, context),
    Action: "DescribeVpcEndpointConnectionNotifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointConnectionsCommand = async (
  input: DescribeVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointConnectionsRequest(input, context),
    Action: "DescribeVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointsCommand = async (
  input: DescribeVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointsRequest(input, context),
    Action: "DescribeVpcEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = async (
  input: DescribeVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest(input, context),
    Action: "DescribeVpcEndpointServiceConfigurations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = async (
  input: DescribeVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest(input, context),
    Action: "DescribeVpcEndpointServicePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcEndpointServicesCommand = async (
  input: DescribeVpcEndpointServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcEndpointServicesRequest(input, context),
    Action: "DescribeVpcEndpointServices",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcPeeringConnectionsCommand = async (
  input: DescribeVpcPeeringConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcPeeringConnectionsRequest(input, context),
    Action: "DescribeVpcPeeringConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpcsCommand = async (
  input: DescribeVpcsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpcsRequest(input, context),
    Action: "DescribeVpcs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpnConnectionsCommand = async (
  input: DescribeVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpnConnectionsRequest(input, context),
    Action: "DescribeVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DescribeVpnGatewaysCommand = async (
  input: DescribeVpnGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DescribeVpnGatewaysRequest(input, context),
    Action: "DescribeVpnGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DetachClassicLinkVpcCommand = async (
  input: DetachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DetachClassicLinkVpcRequest(input, context),
    Action: "DetachClassicLinkVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DetachInternetGatewayCommand = async (
  input: DetachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DetachInternetGatewayRequest(input, context),
    Action: "DetachInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DetachNetworkInterfaceCommand = async (
  input: DetachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DetachNetworkInterfaceRequest(input, context),
    Action: "DetachNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DetachVolumeCommand = async (
  input: DetachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DetachVolumeRequest(input, context),
    Action: "DetachVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DetachVpnGatewayCommand = async (
  input: DetachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DetachVpnGatewayRequest(input, context),
    Action: "DetachVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableEbsEncryptionByDefaultCommand = async (
  input: DisableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableEbsEncryptionByDefaultRequest(input, context),
    Action: "DisableEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableFastSnapshotRestoresCommand = async (
  input: DisableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableFastSnapshotRestoresRequest(input, context),
    Action: "DisableFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = async (
  input: DisableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest(input, context),
    Action: "DisableTransitGatewayRouteTablePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableVgwRoutePropagationCommand = async (
  input: DisableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableVgwRoutePropagationRequest(input, context),
    Action: "DisableVgwRoutePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableVpcClassicLinkCommand = async (
  input: DisableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableVpcClassicLinkRequest(input, context),
    Action: "DisableVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = async (
  input: DisableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest(input, context),
    Action: "DisableVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateAddressCommand = async (
  input: DisassociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateAddressRequest(input, context),
    Action: "DisassociateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateClientVpnTargetNetworkCommand = async (
  input: DisassociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateClientVpnTargetNetworkRequest(input, context),
    Action: "DisassociateClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = async (
  input: DisassociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest(input, context),
    Action: "DisassociateEnclaveCertificateIamRole",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateIamInstanceProfileCommand = async (
  input: DisassociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateIamInstanceProfileRequest(input, context),
    Action: "DisassociateIamInstanceProfile",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateRouteTableCommand = async (
  input: DisassociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateRouteTableRequest(input, context),
    Action: "DisassociateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateSubnetCidrBlockCommand = async (
  input: DisassociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateSubnetCidrBlockRequest(input, context),
    Action: "DisassociateSubnetCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = async (
  input: DisassociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest(input, context),
    Action: "DisassociateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateTransitGatewayRouteTableCommand = async (
  input: DisassociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateTransitGatewayRouteTableRequest(input, context),
    Action: "DisassociateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2DisassociateVpcCidrBlockCommand = async (
  input: DisassociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2DisassociateVpcCidrBlockRequest(input, context),
    Action: "DisassociateVpcCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableEbsEncryptionByDefaultCommand = async (
  input: EnableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableEbsEncryptionByDefaultRequest(input, context),
    Action: "EnableEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableFastSnapshotRestoresCommand = async (
  input: EnableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableFastSnapshotRestoresRequest(input, context),
    Action: "EnableFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = async (
  input: EnableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest(input, context),
    Action: "EnableTransitGatewayRouteTablePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableVgwRoutePropagationCommand = async (
  input: EnableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableVgwRoutePropagationRequest(input, context),
    Action: "EnableVgwRoutePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableVolumeIOCommand = async (
  input: EnableVolumeIOCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableVolumeIORequest(input, context),
    Action: "EnableVolumeIO",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableVpcClassicLinkCommand = async (
  input: EnableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableVpcClassicLinkRequest(input, context),
    Action: "EnableVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = async (
  input: EnableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest(input, context),
    Action: "EnableVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = async (
  input: ExportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest(input, context),
    Action: "ExportClientVpnClientCertificateRevocationList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ExportClientVpnClientConfigurationCommand = async (
  input: ExportClientVpnClientConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ExportClientVpnClientConfigurationRequest(input, context),
    Action: "ExportClientVpnClientConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ExportImageCommand = async (
  input: ExportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ExportImageRequest(input, context),
    Action: "ExportImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ExportTransitGatewayRoutesCommand = async (
  input: ExportTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ExportTransitGatewayRoutesRequest(input, context),
    Action: "ExportTransitGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = async (
  input: GetAssociatedEnclaveCertificateIamRolesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
    Action: "GetAssociatedEnclaveCertificateIamRoles",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = async (
  input: GetAssociatedIpv6PoolCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest(input, context),
    Action: "GetAssociatedIpv6PoolCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetCapacityReservationUsageCommand = async (
  input: GetCapacityReservationUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetCapacityReservationUsageRequest(input, context),
    Action: "GetCapacityReservationUsage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetCoipPoolUsageCommand = async (
  input: GetCoipPoolUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetCoipPoolUsageRequest(input, context),
    Action: "GetCoipPoolUsage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetConsoleOutputCommand = async (
  input: GetConsoleOutputCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetConsoleOutputRequest(input, context),
    Action: "GetConsoleOutput",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetConsoleScreenshotCommand = async (
  input: GetConsoleScreenshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetConsoleScreenshotRequest(input, context),
    Action: "GetConsoleScreenshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetDefaultCreditSpecificationCommand = async (
  input: GetDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetDefaultCreditSpecificationRequest(input, context),
    Action: "GetDefaultCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetEbsDefaultKmsKeyIdCommand = async (
  input: GetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetEbsDefaultKmsKeyIdRequest(input, context),
    Action: "GetEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetEbsEncryptionByDefaultCommand = async (
  input: GetEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetEbsEncryptionByDefaultRequest(input, context),
    Action: "GetEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetGroupsForCapacityReservationCommand = async (
  input: GetGroupsForCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetGroupsForCapacityReservationRequest(input, context),
    Action: "GetGroupsForCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetHostReservationPurchasePreviewCommand = async (
  input: GetHostReservationPurchasePreviewCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetHostReservationPurchasePreviewRequest(input, context),
    Action: "GetHostReservationPurchasePreview",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetLaunchTemplateDataCommand = async (
  input: GetLaunchTemplateDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetLaunchTemplateDataRequest(input, context),
    Action: "GetLaunchTemplateData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetManagedPrefixListAssociationsCommand = async (
  input: GetManagedPrefixListAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetManagedPrefixListAssociationsRequest(input, context),
    Action: "GetManagedPrefixListAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetManagedPrefixListEntriesCommand = async (
  input: GetManagedPrefixListEntriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetManagedPrefixListEntriesRequest(input, context),
    Action: "GetManagedPrefixListEntries",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetPasswordDataCommand = async (
  input: GetPasswordDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetPasswordDataRequest(input, context),
    Action: "GetPasswordData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetReservedInstancesExchangeQuoteCommand = async (
  input: GetReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetReservedInstancesExchangeQuoteRequest(input, context),
    Action: "GetReservedInstancesExchangeQuote",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = async (
  input: GetTransitGatewayAttachmentPropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest(input, context),
    Action: "GetTransitGatewayAttachmentPropagations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = async (
  input: GetTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "GetTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = async (
  input: GetTransitGatewayPrefixListReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest(input, context),
    Action: "GetTransitGatewayPrefixListReferences",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = async (
  input: GetTransitGatewayRouteTableAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest(input, context),
    Action: "GetTransitGatewayRouteTableAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = async (
  input: GetTransitGatewayRouteTablePropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest(input, context),
    Action: "GetTransitGatewayRouteTablePropagations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = async (
  input: ImportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest(input, context),
    Action: "ImportClientVpnClientCertificateRevocationList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportImageCommand = async (
  input: ImportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportImageRequest(input, context),
    Action: "ImportImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportInstanceCommand = async (
  input: ImportInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportInstanceRequest(input, context),
    Action: "ImportInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportKeyPairCommand = async (
  input: ImportKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportKeyPairRequest(input, context),
    Action: "ImportKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportSnapshotCommand = async (
  input: ImportSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportSnapshotRequest(input, context),
    Action: "ImportSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ImportVolumeCommand = async (
  input: ImportVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ImportVolumeRequest(input, context),
    Action: "ImportVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyAvailabilityZoneGroupCommand = async (
  input: ModifyAvailabilityZoneGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyAvailabilityZoneGroupRequest(input, context),
    Action: "ModifyAvailabilityZoneGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyCapacityReservationCommand = async (
  input: ModifyCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyCapacityReservationRequest(input, context),
    Action: "ModifyCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyClientVpnEndpointCommand = async (
  input: ModifyClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyClientVpnEndpointRequest(input, context),
    Action: "ModifyClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyDefaultCreditSpecificationCommand = async (
  input: ModifyDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyDefaultCreditSpecificationRequest(input, context),
    Action: "ModifyDefaultCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = async (
  input: ModifyEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest(input, context),
    Action: "ModifyEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyFleetCommand = async (
  input: ModifyFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyFleetRequest(input, context),
    Action: "ModifyFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyFpgaImageAttributeCommand = async (
  input: ModifyFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyFpgaImageAttributeRequest(input, context),
    Action: "ModifyFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyHostsCommand = async (
  input: ModifyHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyHostsRequest(input, context),
    Action: "ModifyHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyIdentityIdFormatCommand = async (
  input: ModifyIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyIdentityIdFormatRequest(input, context),
    Action: "ModifyIdentityIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyIdFormatCommand = async (
  input: ModifyIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyIdFormatRequest(input, context),
    Action: "ModifyIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyImageAttributeCommand = async (
  input: ModifyImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyImageAttributeRequest(input, context),
    Action: "ModifyImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstanceAttributeCommand = async (
  input: ModifyInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstanceAttributeRequest(input, context),
    Action: "ModifyInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = async (
  input: ModifyInstanceCapacityReservationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest(input, context),
    Action: "ModifyInstanceCapacityReservationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstanceCreditSpecificationCommand = async (
  input: ModifyInstanceCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstanceCreditSpecificationRequest(input, context),
    Action: "ModifyInstanceCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstanceEventStartTimeCommand = async (
  input: ModifyInstanceEventStartTimeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstanceEventStartTimeRequest(input, context),
    Action: "ModifyInstanceEventStartTime",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstanceMetadataOptionsCommand = async (
  input: ModifyInstanceMetadataOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstanceMetadataOptionsRequest(input, context),
    Action: "ModifyInstanceMetadataOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyInstancePlacementCommand = async (
  input: ModifyInstancePlacementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyInstancePlacementRequest(input, context),
    Action: "ModifyInstancePlacement",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyLaunchTemplateCommand = async (
  input: ModifyLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyLaunchTemplateRequest(input, context),
    Action: "ModifyLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyManagedPrefixListCommand = async (
  input: ModifyManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyManagedPrefixListRequest(input, context),
    Action: "ModifyManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyNetworkInterfaceAttributeCommand = async (
  input: ModifyNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyNetworkInterfaceAttributeRequest(input, context),
    Action: "ModifyNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyReservedInstancesCommand = async (
  input: ModifyReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyReservedInstancesRequest(input, context),
    Action: "ModifyReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifySnapshotAttributeCommand = async (
  input: ModifySnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifySnapshotAttributeRequest(input, context),
    Action: "ModifySnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifySpotFleetRequestCommand = async (
  input: ModifySpotFleetRequestCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifySpotFleetRequestRequest(input, context),
    Action: "ModifySpotFleetRequest",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifySubnetAttributeCommand = async (
  input: ModifySubnetAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifySubnetAttributeRequest(input, context),
    Action: "ModifySubnetAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  input: ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
    Action: "ModifyTrafficMirrorFilterNetworkServices",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = async (
  input: ModifyTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest(input, context),
    Action: "ModifyTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTrafficMirrorSessionCommand = async (
  input: ModifyTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTrafficMirrorSessionRequest(input, context),
    Action: "ModifyTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTransitGatewayCommand = async (
  input: ModifyTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTransitGatewayRequest(input, context),
    Action: "ModifyTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = async (
  input: ModifyTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "ModifyTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = async (
  input: ModifyTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest(input, context),
    Action: "ModifyTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVolumeCommand = async (
  input: ModifyVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVolumeRequest(input, context),
    Action: "ModifyVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVolumeAttributeCommand = async (
  input: ModifyVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVolumeAttributeRequest(input, context),
    Action: "ModifyVolumeAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcAttributeCommand = async (
  input: ModifyVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcAttributeRequest(input, context),
    Action: "ModifyVpcAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcEndpointCommand = async (
  input: ModifyVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcEndpointRequest(input, context),
    Action: "ModifyVpcEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = async (
  input: ModifyVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest(input, context),
    Action: "ModifyVpcEndpointConnectionNotification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = async (
  input: ModifyVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest(input, context),
    Action: "ModifyVpcEndpointServiceConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = async (
  input: ModifyVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest(input, context),
    Action: "ModifyVpcEndpointServicePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = async (
  input: ModifyVpcPeeringConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest(input, context),
    Action: "ModifyVpcPeeringConnectionOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpcTenancyCommand = async (
  input: ModifyVpcTenancyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpcTenancyRequest(input, context),
    Action: "ModifyVpcTenancy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpnConnectionCommand = async (
  input: ModifyVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpnConnectionRequest(input, context),
    Action: "ModifyVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpnConnectionOptionsCommand = async (
  input: ModifyVpnConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpnConnectionOptionsRequest(input, context),
    Action: "ModifyVpnConnectionOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpnTunnelCertificateCommand = async (
  input: ModifyVpnTunnelCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpnTunnelCertificateRequest(input, context),
    Action: "ModifyVpnTunnelCertificate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ModifyVpnTunnelOptionsCommand = async (
  input: ModifyVpnTunnelOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ModifyVpnTunnelOptionsRequest(input, context),
    Action: "ModifyVpnTunnelOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2MonitorInstancesCommand = async (
  input: MonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2MonitorInstancesRequest(input, context),
    Action: "MonitorInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2MoveAddressToVpcCommand = async (
  input: MoveAddressToVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2MoveAddressToVpcRequest(input, context),
    Action: "MoveAddressToVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ProvisionByoipCidrCommand = async (
  input: ProvisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ProvisionByoipCidrRequest(input, context),
    Action: "ProvisionByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2PurchaseHostReservationCommand = async (
  input: PurchaseHostReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2PurchaseHostReservationRequest(input, context),
    Action: "PurchaseHostReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2PurchaseReservedInstancesOfferingCommand = async (
  input: PurchaseReservedInstancesOfferingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2PurchaseReservedInstancesOfferingRequest(input, context),
    Action: "PurchaseReservedInstancesOffering",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2PurchaseScheduledInstancesCommand = async (
  input: PurchaseScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2PurchaseScheduledInstancesRequest(input, context),
    Action: "PurchaseScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RebootInstancesCommand = async (
  input: RebootInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RebootInstancesRequest(input, context),
    Action: "RebootInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RegisterImageCommand = async (
  input: RegisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RegisterImageRequest(input, context),
    Action: "RegisterImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = async (
  input: RegisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest(input, context),
    Action: "RegisterInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = async (
  input: RegisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
    Action: "RegisterTransitGatewayMulticastGroupMembers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    Action: "RegisterTransitGatewayMulticastGroupSources",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  input: RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "RejectTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = async (
  input: RejectTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "RejectTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = async (
  input: RejectTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest(input, context),
    Action: "RejectTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RejectVpcEndpointConnectionsCommand = async (
  input: RejectVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RejectVpcEndpointConnectionsRequest(input, context),
    Action: "RejectVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RejectVpcPeeringConnectionCommand = async (
  input: RejectVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RejectVpcPeeringConnectionRequest(input, context),
    Action: "RejectVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReleaseAddressCommand = async (
  input: ReleaseAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReleaseAddressRequest(input, context),
    Action: "ReleaseAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReleaseHostsCommand = async (
  input: ReleaseHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReleaseHostsRequest(input, context),
    Action: "ReleaseHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = async (
  input: ReplaceIamInstanceProfileAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest(input, context),
    Action: "ReplaceIamInstanceProfileAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceNetworkAclAssociationCommand = async (
  input: ReplaceNetworkAclAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceNetworkAclAssociationRequest(input, context),
    Action: "ReplaceNetworkAclAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceNetworkAclEntryCommand = async (
  input: ReplaceNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceNetworkAclEntryRequest(input, context),
    Action: "ReplaceNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceRouteCommand = async (
  input: ReplaceRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceRouteRequest(input, context),
    Action: "ReplaceRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceRouteTableAssociationCommand = async (
  input: ReplaceRouteTableAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceRouteTableAssociationRequest(input, context),
    Action: "ReplaceRouteTableAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReplaceTransitGatewayRouteCommand = async (
  input: ReplaceTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReplaceTransitGatewayRouteRequest(input, context),
    Action: "ReplaceTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ReportInstanceStatusCommand = async (
  input: ReportInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ReportInstanceStatusRequest(input, context),
    Action: "ReportInstanceStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RequestSpotFleetCommand = async (
  input: RequestSpotFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RequestSpotFleetRequest(input, context),
    Action: "RequestSpotFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RequestSpotInstancesCommand = async (
  input: RequestSpotInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RequestSpotInstancesRequest(input, context),
    Action: "RequestSpotInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = async (
  input: ResetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest(input, context),
    Action: "ResetEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetFpgaImageAttributeCommand = async (
  input: ResetFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetFpgaImageAttributeRequest(input, context),
    Action: "ResetFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetImageAttributeCommand = async (
  input: ResetImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetImageAttributeRequest(input, context),
    Action: "ResetImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetInstanceAttributeCommand = async (
  input: ResetInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetInstanceAttributeRequest(input, context),
    Action: "ResetInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetNetworkInterfaceAttributeCommand = async (
  input: ResetNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetNetworkInterfaceAttributeRequest(input, context),
    Action: "ResetNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2ResetSnapshotAttributeCommand = async (
  input: ResetSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2ResetSnapshotAttributeRequest(input, context),
    Action: "ResetSnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RestoreAddressToClassicCommand = async (
  input: RestoreAddressToClassicCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RestoreAddressToClassicRequest(input, context),
    Action: "RestoreAddressToClassic",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RestoreManagedPrefixListVersionCommand = async (
  input: RestoreManagedPrefixListVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RestoreManagedPrefixListVersionRequest(input, context),
    Action: "RestoreManagedPrefixListVersion",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RevokeClientVpnIngressCommand = async (
  input: RevokeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RevokeClientVpnIngressRequest(input, context),
    Action: "RevokeClientVpnIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RevokeSecurityGroupEgressCommand = async (
  input: RevokeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RevokeSecurityGroupEgressRequest(input, context),
    Action: "RevokeSecurityGroupEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RevokeSecurityGroupIngressCommand = async (
  input: RevokeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RevokeSecurityGroupIngressRequest(input, context),
    Action: "RevokeSecurityGroupIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RunInstancesCommand = async (
  input: RunInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RunInstancesRequest(input, context),
    Action: "RunInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2RunScheduledInstancesCommand = async (
  input: RunScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2RunScheduledInstancesRequest(input, context),
    Action: "RunScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2SearchLocalGatewayRoutesCommand = async (
  input: SearchLocalGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2SearchLocalGatewayRoutesRequest(input, context),
    Action: "SearchLocalGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = async (
  input: SearchTransitGatewayMulticastGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest(input, context),
    Action: "SearchTransitGatewayMulticastGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2SearchTransitGatewayRoutesCommand = async (
  input: SearchTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2SearchTransitGatewayRoutesRequest(input, context),
    Action: "SearchTransitGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2SendDiagnosticInterruptCommand = async (
  input: SendDiagnosticInterruptCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2SendDiagnosticInterruptRequest(input, context),
    Action: "SendDiagnosticInterrupt",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2StartInstancesCommand = async (
  input: StartInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2StartInstancesRequest(input, context),
    Action: "StartInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2StartNetworkInsightsAnalysisCommand = async (
  input: StartNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2StartNetworkInsightsAnalysisRequest(input, context),
    Action: "StartNetworkInsightsAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  input: StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
    Action: "StartVpcEndpointServicePrivateDnsVerification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2StopInstancesCommand = async (
  input: StopInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2StopInstancesRequest(input, context),
    Action: "StopInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2TerminateClientVpnConnectionsCommand = async (
  input: TerminateClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2TerminateClientVpnConnectionsRequest(input, context),
    Action: "TerminateClientVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2TerminateInstancesCommand = async (
  input: TerminateInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2TerminateInstancesRequest(input, context),
    Action: "TerminateInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2UnassignIpv6AddressesCommand = async (
  input: UnassignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2UnassignIpv6AddressesRequest(input, context),
    Action: "UnassignIpv6Addresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2UnassignPrivateIpAddressesCommand = async (
  input: UnassignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2UnassignPrivateIpAddressesRequest(input, context),
    Action: "UnassignPrivateIpAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2UnmonitorInstancesCommand = async (
  input: UnmonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2UnmonitorInstancesRequest(input, context),
    Action: "UnmonitorInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
    Action: "UpdateSecurityGroupRuleDescriptionsEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
    Action: "UpdateSecurityGroupRuleDescriptionsIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_ec2WithdrawByoipCidrCommand = async (
  input: WithdrawByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-www-form-urlencoded",
  };
  let body: any;
  body = buildFormUrlencodedString({
    ...serializeAws_ec2WithdrawByoipCidrRequest(input, context),
    Action: "WithdrawByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult(data, context);
  const response: AcceptReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: AcceptTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult(data, context);
  const response: AcceptTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult(data, context);
  const response: AcceptTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AcceptVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptVpcEndpointConnectionsResult(data, context);
  const response: AcceptVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AcceptVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AcceptVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AcceptVpcPeeringConnectionResult(data, context);
  const response: AcceptVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AcceptVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AdvertiseByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AdvertiseByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AdvertiseByoipCidrResult(data, context);
  const response: AdvertiseByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AdvertiseByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AllocateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AllocateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AllocateAddressResult(data, context);
  const response: AllocateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AllocateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AllocateHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AllocateHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AllocateHostsResult(data, context);
  const response: AllocateHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AllocateHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
  const response: ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssignIpv6AddressesResult(data, context);
  const response: AssignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssignPrivateIpAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssignPrivateIpAddressesResult(data, context);
  const response: AssignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateAddressResult(data, context);
  const response: AssociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateClientVpnTargetNetworkResult(data, context);
  const response: AssociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AssociateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult(data, context);
  const response: AssociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateIamInstanceProfileResult(data, context);
  const response: AssociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateRouteTableResult(data, context);
  const response: AssociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateSubnetCidrBlockResult(data, context);
  const response: AssociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult(data, context);
  const response: AssociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateTransitGatewayRouteTableResult(data, context);
  const response: AssociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AssociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AssociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AssociateVpcCidrBlockResult(data, context);
  const response: AssociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AssociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AttachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AttachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AttachClassicLinkVpcResult(data, context);
  const response: AttachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AttachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AttachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AttachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AttachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AttachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AttachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AttachNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AttachNetworkInterfaceResult(data, context);
  const response: AttachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AttachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AttachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AttachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2VolumeAttachment(data, context);
  const response: AttachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AttachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AttachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AttachVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AttachVpnGatewayResult(data, context);
  const response: AttachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AttachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AuthorizeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AuthorizeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2AuthorizeClientVpnIngressResult(data, context);
  const response: AuthorizeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AuthorizeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AuthorizeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AuthorizeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2AuthorizeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AuthorizeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2BundleInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2BundleInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2BundleInstanceResult(data, context);
  const response: BundleInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2BundleInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelBundleTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelBundleTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelBundleTaskResult(data, context);
  const response: CancelBundleTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelBundleTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelCapacityReservationResult(data, context);
  const response: CancelCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelConversionTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelConversionTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelConversionTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelConversionTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelExportTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelImportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelImportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelImportTaskResult(data, context);
  const response: CancelImportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelImportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelReservedInstancesListingResult(data, context);
  const response: CancelReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelSpotFleetRequestsResponse(data, context);
  const response: CancelSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CancelSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CancelSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CancelSpotInstanceRequestsResult(data, context);
  const response: CancelSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CancelSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ConfirmProductInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ConfirmProductInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ConfirmProductInstanceResult(data, context);
  const response: ConfirmProductInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ConfirmProductInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CopyFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CopyFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CopyFpgaImageResult(data, context);
  const response: CopyFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CopyFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CopyImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CopyImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CopyImageResult(data, context);
  const response: CopyImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CopyImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CopySnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CopySnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CopySnapshotResult(data, context);
  const response: CopySnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CopySnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateCapacityReservationResult(data, context);
  const response: CreateCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateCarrierGatewayResult(data, context);
  const response: CreateCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateClientVpnEndpointResult(data, context);
  const response: CreateClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateClientVpnRouteResult(data, context);
  const response: CreateClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateCustomerGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateCustomerGatewayResult(data, context);
  const response: CreateCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateDefaultSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateDefaultSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateDefaultSubnetResult(data, context);
  const response: CreateDefaultSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateDefaultSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateDefaultVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateDefaultVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateDefaultVpcResult(data, context);
  const response: CreateDefaultVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateDefaultVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateDhcpOptionsResult(data, context);
  const response: CreateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateEgressOnlyInternetGatewayResult(data, context);
  const response: CreateEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateFleetResult(data, context);
  const response: CreateFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateFlowLogsResult(data, context);
  const response: CreateFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateFpgaImageResult(data, context);
  const response: CreateFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateImageResult(data, context);
  const response: CreateImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateInstanceExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateInstanceExportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateInstanceExportTaskResult(data, context);
  const response: CreateInstanceExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateInstanceExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateInternetGatewayResult(data, context);
  const response: CreateInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2KeyPair(data, context);
  const response: CreateKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateLaunchTemplateResult(data, context);
  const response: CreateLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateLaunchTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateLaunchTemplateVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateLaunchTemplateVersionResult(data, context);
  const response: CreateLaunchTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateLaunchTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateLocalGatewayRouteResult(data, context);
  const response: CreateLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: CreateLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateManagedPrefixListResult(data, context);
  const response: CreateManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateNatGatewayResult(data, context);
  const response: CreateNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNetworkAclCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateNetworkAclResult(data, context);
  const response: CreateNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateNetworkInsightsPathResult(data, context);
  const response: CreateNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateNetworkInterfaceResult(data, context);
  const response: CreateNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateNetworkInterfacePermissionResult(data, context);
  const response: CreateNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreatePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreatePlacementGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreatePlacementGroupResult(data, context);
  const response: CreatePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreatePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateReservedInstancesListingResult(data, context);
  const response: CreateReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateRouteResult(data, context);
  const response: CreateRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateRouteTableResult(data, context);
  const response: CreateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateSecurityGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateSecurityGroupResult(data, context);
  const response: CreateSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2Snapshot(data, context);
  const response: CreateSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateSnapshotsResult(data, context);
  const response: CreateSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateSpotDatafeedSubscriptionResult(data, context);
  const response: CreateSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateSubnetResult(data, context);
  const response: CreateSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTrafficMirrorFilterResult(data, context);
  const response: CreateTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTrafficMirrorFilterRuleResult(data, context);
  const response: CreateTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTrafficMirrorSessionResult(data, context);
  const response: CreateTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTrafficMirrorTargetResult(data, context);
  const response: CreateTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayResult(data, context);
  const response: CreateTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayConnectResult(data, context);
  const response: CreateTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayConnectPeerResult(data, context);
  const response: CreateTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayMulticastDomainResult(data, context);
  const response: CreateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult(data, context);
  const response: CreateTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult(data, context);
  const response: CreateTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayRouteResult(data, context);
  const response: CreateTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayRouteTableResult(data, context);
  const response: CreateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult(data, context);
  const response: CreateTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2Volume(data, context);
  const response: CreateVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpcResult(data, context);
  const response: CreateVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpcEndpointResult(data, context);
  const response: CreateVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult(data, context);
  const response: CreateVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult(data, context);
  const response: CreateVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpcPeeringConnectionResult(data, context);
  const response: CreateVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpnConnectionResult(data, context);
  const response: CreateVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2CreateVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2CreateVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2CreateVpnGatewayResult(data, context);
  const response: CreateVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2CreateVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteCarrierGatewayResult(data, context);
  const response: DeleteCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteClientVpnEndpointResult(data, context);
  const response: DeleteClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteClientVpnRouteResult(data, context);
  const response: DeleteClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteCustomerGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult(data, context);
  const response: DeleteEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteFleetsResult(data, context);
  const response: DeleteFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteFlowLogsResult(data, context);
  const response: DeleteFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteFpgaImageResult(data, context);
  const response: DeleteFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteKeyPairCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteLaunchTemplateResult(data, context);
  const response: DeleteLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteLaunchTemplateVersionsResult(data, context);
  const response: DeleteLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteLocalGatewayRouteResult(data, context);
  const response: DeleteLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: DeleteLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteManagedPrefixListResult(data, context);
  const response: DeleteManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteNatGatewayResult(data, context);
  const response: DeleteNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkAclCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteNetworkInsightsAnalysisResult(data, context);
  const response: DeleteNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteNetworkInsightsPathResult(data, context);
  const response: DeleteNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteNetworkInterfacePermissionResult(data, context);
  const response: DeleteNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeletePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeletePlacementGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeletePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeletePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteQueuedReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteQueuedReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteQueuedReservedInstancesResult(data, context);
  const response: DeleteQueuedReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteQueuedReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteSecurityGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteSnapshotCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteSubnetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTrafficMirrorFilterResult(data, context);
  const response: DeleteTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult(data, context);
  const response: DeleteTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTrafficMirrorSessionResult(data, context);
  const response: DeleteTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTrafficMirrorTargetResult(data, context);
  const response: DeleteTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayResult(data, context);
  const response: DeleteTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayConnectResult(data, context);
  const response: DeleteTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayConnectPeerResult(data, context);
  const response: DeleteTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult(data, context);
  const response: DeleteTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult(data, context);
  const response: DeleteTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult(data, context);
  const response: DeleteTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayRouteResult(data, context);
  const response: DeleteTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayRouteTableResult(data, context);
  const response: DeleteTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult(data, context);
  const response: DeleteTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVolumeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpcCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult(data, context);
  const response: DeleteVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteVpcEndpointsResult(data, context);
  const response: DeleteVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult(data, context);
  const response: DeleteVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeleteVpcPeeringConnectionResult(data, context);
  const response: DeleteVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpnConnectionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeleteVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeleteVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeleteVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeprovisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeprovisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeprovisionByoipCidrResult(data, context);
  const response: DeprovisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeprovisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeregisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeregisterImageCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeregisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeregisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult(data, context);
  const response: DeregisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeAccountAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeAccountAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeAccountAttributesResult(data, context);
  const response: DescribeAccountAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeAccountAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeAddressesResult(data, context);
  const response: DescribeAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeAggregateIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeAggregateIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeAggregateIdFormatResult(data, context);
  const response: DescribeAggregateIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeAggregateIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeAvailabilityZonesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeAvailabilityZonesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeAvailabilityZonesResult(data, context);
  const response: DescribeAvailabilityZonesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeAvailabilityZonesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeBundleTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeBundleTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeBundleTasksResult(data, context);
  const response: DescribeBundleTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeBundleTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeByoipCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeByoipCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeByoipCidrsResult(data, context);
  const response: DescribeByoipCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeByoipCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeCapacityReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeCapacityReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeCapacityReservationsResult(data, context);
  const response: DescribeCapacityReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeCapacityReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeCarrierGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeCarrierGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeCarrierGatewaysResult(data, context);
  const response: DescribeCarrierGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeCarrierGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClassicLinkInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClassicLinkInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClassicLinkInstancesResult(data, context);
  const response: DescribeClassicLinkInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClassicLinkInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult(data, context);
  const response: DescribeClientVpnAuthorizationRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClientVpnConnectionsResult(data, context);
  const response: DescribeClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClientVpnEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClientVpnEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClientVpnEndpointsResult(data, context);
  const response: DescribeClientVpnEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClientVpnEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClientVpnRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClientVpnRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClientVpnRoutesResult(data, context);
  const response: DescribeClientVpnRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClientVpnRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeClientVpnTargetNetworksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeClientVpnTargetNetworksResult(data, context);
  const response: DescribeClientVpnTargetNetworksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeCoipPoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeCoipPoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeCoipPoolsResult(data, context);
  const response: DescribeCoipPoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeCoipPoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeConversionTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeConversionTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeConversionTasksResult(data, context);
  const response: DescribeConversionTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeConversionTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeCustomerGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeCustomerGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeCustomerGatewaysResult(data, context);
  const response: DescribeCustomerGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeCustomerGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeDhcpOptionsResult(data, context);
  const response: DescribeDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult(data, context);
  const response: DescribeEgressOnlyInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeElasticGpusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeElasticGpusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeElasticGpusResult(data, context);
  const response: DescribeElasticGpusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeElasticGpusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeExportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeExportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeExportImageTasksResult(data, context);
  const response: DescribeExportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeExportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeExportTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeExportTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeExportTasksResult(data, context);
  const response: DescribeExportTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeExportTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFastSnapshotRestoresResult(data, context);
  const response: DescribeFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFleetHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFleetHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFleetHistoryResult(data, context);
  const response: DescribeFleetHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFleetHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFleetInstancesResult(data, context);
  const response: DescribeFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFleetsResult(data, context);
  const response: DescribeFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFlowLogsResult(data, context);
  const response: DescribeFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFpgaImageAttributeResult(data, context);
  const response: DescribeFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeFpgaImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeFpgaImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeFpgaImagesResult(data, context);
  const response: DescribeFpgaImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeFpgaImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeHostReservationOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeHostReservationOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeHostReservationOfferingsResult(data, context);
  const response: DescribeHostReservationOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeHostReservationOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeHostReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeHostReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeHostReservationsResult(data, context);
  const response: DescribeHostReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeHostReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeHostsResult(data, context);
  const response: DescribeHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult(data, context);
  const response: DescribeIamInstanceProfileAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeIdentityIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeIdentityIdFormatResult(data, context);
  const response: DescribeIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeIdFormatResult(data, context);
  const response: DescribeIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImageAttribute(data, context);
  const response: DescribeImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeImagesResult(data, context);
  const response: DescribeImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeImportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeImportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeImportImageTasksResult(data, context);
  const response: DescribeImportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeImportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeImportSnapshotTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeImportSnapshotTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeImportSnapshotTasksResult(data, context);
  const response: DescribeImportSnapshotTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeImportSnapshotTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2InstanceAttribute(data, context);
  const response: DescribeInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstanceCreditSpecificationsResult(data, context);
  const response: DescribeInstanceCreditSpecificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult(data, context);
  const response: DescribeInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstancesResult(data, context);
  const response: DescribeInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstanceStatusResult(data, context);
  const response: DescribeInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceTypeOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstanceTypeOfferingsResult(data, context);
  const response: DescribeInstanceTypeOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInstanceTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInstanceTypesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInstanceTypesResult(data, context);
  const response: DescribeInstanceTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInstanceTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeInternetGatewaysResult(data, context);
  const response: DescribeInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeIpv6PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeIpv6PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeIpv6PoolsResult(data, context);
  const response: DescribeIpv6PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeIpv6PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeKeyPairsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeKeyPairsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeKeyPairsResult(data, context);
  const response: DescribeKeyPairsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeKeyPairsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLaunchTemplatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLaunchTemplatesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLaunchTemplatesResult(data, context);
  const response: DescribeLaunchTemplatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLaunchTemplatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLaunchTemplateVersionsResult(data, context);
  const response: DescribeLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewayRouteTablesResult(data, context);
  const response: DescribeLocalGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(
      output,
      context
    );
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewaysResult(data, context);
  const response: DescribeLocalGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeManagedPrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeManagedPrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeManagedPrefixListsResult(data, context);
  const response: DescribeManagedPrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeManagedPrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeMovingAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeMovingAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeMovingAddressesResult(data, context);
  const response: DescribeMovingAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeMovingAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNatGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNatGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNatGatewaysResult(data, context);
  const response: DescribeNatGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNatGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkAclsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkAclsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkAclsResult(data, context);
  const response: DescribeNetworkAclsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkAclsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkInsightsAnalysesResult(data, context);
  const response: DescribeNetworkInsightsAnalysesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkInsightsPathsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkInsightsPathsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkInsightsPathsResult(data, context);
  const response: DescribeNetworkInsightsPathsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkInsightsPathsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkInterfaceAttributeResult(data, context);
  const response: DescribeNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkInterfacePermissionsResult(data, context);
  const response: DescribeNetworkInterfacePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeNetworkInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeNetworkInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeNetworkInterfacesResult(data, context);
  const response: DescribeNetworkInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeNetworkInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribePlacementGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribePlacementGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribePlacementGroupsResult(data, context);
  const response: DescribePlacementGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribePlacementGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribePrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribePrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribePrefixListsResult(data, context);
  const response: DescribePrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribePrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribePrincipalIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribePrincipalIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribePrincipalIdFormatResult(data, context);
  const response: DescribePrincipalIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribePrincipalIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribePublicIpv4PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribePublicIpv4PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribePublicIpv4PoolsResult(data, context);
  const response: DescribePublicIpv4PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribePublicIpv4PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeRegionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeRegionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeRegionsResult(data, context);
  const response: DescribeRegionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeRegionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeReservedInstancesResult(data, context);
  const response: DescribeReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeReservedInstancesListingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeReservedInstancesListingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeReservedInstancesListingsResult(data, context);
  const response: DescribeReservedInstancesListingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeReservedInstancesListingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeReservedInstancesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeReservedInstancesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeReservedInstancesModificationsResult(data, context);
  const response: DescribeReservedInstancesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeReservedInstancesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeReservedInstancesOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeReservedInstancesOfferingsResult(data, context);
  const response: DescribeReservedInstancesOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeRouteTablesResult(data, context);
  const response: DescribeRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult(data, context);
  const response: DescribeScheduledInstanceAvailabilityCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeScheduledInstancesResult(data, context);
  const response: DescribeScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSecurityGroupReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSecurityGroupReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSecurityGroupReferencesResult(data, context);
  const response: DescribeSecurityGroupReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSecurityGroupReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSecurityGroupsResult(data, context);
  const response: DescribeSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSnapshotAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSnapshotAttributeResult(data, context);
  const response: DescribeSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSnapshotsResult(data, context);
  const response: DescribeSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult(data, context);
  const response: DescribeSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotFleetInstancesResponse(data, context);
  const response: DescribeSpotFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse(data, context);
  const response: DescribeSpotFleetRequestHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotFleetRequestsResponse(data, context);
  const response: DescribeSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotInstanceRequestsResult(data, context);
  const response: DescribeSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSpotPriceHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSpotPriceHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSpotPriceHistoryResult(data, context);
  const response: DescribeSpotPriceHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSpotPriceHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeStaleSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeStaleSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeStaleSecurityGroupsResult(data, context);
  const response: DescribeStaleSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeStaleSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeSubnetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeSubnetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeSubnetsResult(data, context);
  const response: DescribeSubnetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeSubnetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTagsResult(data, context);
  const response: DescribeTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTrafficMirrorFiltersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTrafficMirrorFiltersResult(data, context);
  const response: DescribeTrafficMirrorFiltersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTrafficMirrorSessionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTrafficMirrorSessionsResult(data, context);
  const response: DescribeTrafficMirrorSessionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTrafficMirrorTargetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTrafficMirrorTargetsResult(data, context);
  const response: DescribeTrafficMirrorTargetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayAttachmentsResult(data, context);
  const response: DescribeTransitGatewayAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayConnectPeersResult(data, context);
  const response: DescribeTransitGatewayConnectPeersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayConnectsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayConnectsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayConnectsResult(data, context);
  const response: DescribeTransitGatewayConnectsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayConnectsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult(data, context);
  const response: DescribeTransitGatewayMulticastDomainsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult(data, context);
  const response: DescribeTransitGatewayPeeringAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayRouteTablesResult(data, context);
  const response: DescribeTransitGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewaysResult(data, context);
  const response: DescribeTransitGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult(data, context);
  const response: DescribeTransitGatewayVpcAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVolumeAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVolumeAttributeResult(data, context);
  const response: DescribeVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVolumesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVolumesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVolumesResult(data, context);
  const response: DescribeVolumesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVolumesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVolumesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVolumesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVolumesModificationsResult(data, context);
  const response: DescribeVolumesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVolumesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVolumeStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVolumeStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVolumeStatusResult(data, context);
  const response: DescribeVolumeStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVolumeStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcAttributeResult(data, context);
  const response: DescribeVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcClassicLinkResult(data, context);
  const response: DescribeVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult(data, context);
  const response: DescribeVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult(data, context);
  const response: DescribeVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointConnectionsResult(data, context);
  const response: DescribeVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointsResult(data, context);
  const response: DescribeVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult(data, context);
  const response: DescribeVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult(data, context);
  const response: DescribeVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcEndpointServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcEndpointServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcEndpointServicesResult(data, context);
  const response: DescribeVpcEndpointServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcEndpointServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcPeeringConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcPeeringConnectionsResult(data, context);
  const response: DescribeVpcPeeringConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpcsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpcsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpcsResult(data, context);
  const response: DescribeVpcsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpcsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpnConnectionsResult(data, context);
  const response: DescribeVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DescribeVpnGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DescribeVpnGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DescribeVpnGatewaysResult(data, context);
  const response: DescribeVpnGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DescribeVpnGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DetachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DetachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DetachClassicLinkVpcResult(data, context);
  const response: DetachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DetachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DetachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DetachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DetachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DetachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DetachNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DetachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DetachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DetachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2VolumeAttachment(data, context);
  const response: DetachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DetachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DetachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DetachVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DetachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisableEbsEncryptionByDefaultResult(data, context);
  const response: DisableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisableFastSnapshotRestoresResult(data, context);
  const response: DisableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult(data, context);
  const response: DisableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisableVpcClassicLinkResult(data, context);
  const response: DisableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult(data, context);
  const response: DisableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateClientVpnTargetNetworkResult(data, context);
  const response: DisassociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult(data, context);
  const response: DisassociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateIamInstanceProfileResult(data, context);
  const response: DisassociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateSubnetCidrBlockResult(data, context);
  const response: DisassociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult(data, context);
  const response: DisassociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateTransitGatewayRouteTableResult(data, context);
  const response: DisassociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2DisassociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2DisassociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2DisassociateVpcCidrBlockResult(data, context);
  const response: DisassociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2DisassociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2EnableEbsEncryptionByDefaultResult(data, context);
  const response: EnableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2EnableFastSnapshotRestoresResult(data, context);
  const response: EnableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult(data, context);
  const response: EnableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableVolumeIOCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableVolumeIOCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVolumeIOCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableVolumeIOCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2EnableVpcClassicLinkResult(data, context);
  const response: EnableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult(data, context);
  const response: EnableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ExportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ExportClientVpnClientConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ExportClientVpnClientConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ExportClientVpnClientConfigurationResult(data, context);
  const response: ExportClientVpnClientConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ExportClientVpnClientConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ExportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ExportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ExportImageResult(data, context);
  const response: ExportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ExportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ExportTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ExportTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ExportTransitGatewayRoutesResult(data, context);
  const response: ExportTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ExportTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult(data, context);
  const response: GetAssociatedEnclaveCertificateIamRolesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult(data, context);
  const response: GetAssociatedIpv6PoolCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetCapacityReservationUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetCapacityReservationUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetCapacityReservationUsageResult(data, context);
  const response: GetCapacityReservationUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetCapacityReservationUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetCoipPoolUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetCoipPoolUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetCoipPoolUsageResult(data, context);
  const response: GetCoipPoolUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetCoipPoolUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetConsoleOutputCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetConsoleOutputCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetConsoleOutputResult(data, context);
  const response: GetConsoleOutputCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetConsoleOutputCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetConsoleScreenshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetConsoleScreenshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetConsoleScreenshotResult(data, context);
  const response: GetConsoleScreenshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetConsoleScreenshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetDefaultCreditSpecificationResult(data, context);
  const response: GetDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetEbsDefaultKmsKeyIdResult(data, context);
  const response: GetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetEbsEncryptionByDefaultResult(data, context);
  const response: GetEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetGroupsForCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetGroupsForCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetGroupsForCapacityReservationResult(data, context);
  const response: GetGroupsForCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetGroupsForCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetHostReservationPurchasePreviewCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetHostReservationPurchasePreviewCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetHostReservationPurchasePreviewResult(data, context);
  const response: GetHostReservationPurchasePreviewCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetHostReservationPurchasePreviewCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetLaunchTemplateDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetLaunchTemplateDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetLaunchTemplateDataResult(data, context);
  const response: GetLaunchTemplateDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetLaunchTemplateDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetManagedPrefixListAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetManagedPrefixListAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetManagedPrefixListAssociationsResult(data, context);
  const response: GetManagedPrefixListAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetManagedPrefixListAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetManagedPrefixListEntriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetManagedPrefixListEntriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetManagedPrefixListEntriesResult(data, context);
  const response: GetManagedPrefixListEntriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetManagedPrefixListEntriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetPasswordDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetPasswordDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetPasswordDataResult(data, context);
  const response: GetPasswordDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetPasswordDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetReservedInstancesExchangeQuoteResult(data, context);
  const response: GetReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult(data, context);
  const response: GetTransitGatewayAttachmentPropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: GetTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult(data, context);
  const response: GetTransitGatewayPrefixListReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult(data, context);
  const response: GetTransitGatewayRouteTableAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult(data, context);
  const response: GetTransitGatewayRouteTablePropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ImportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportImageResult(data, context);
  const response: ImportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportInstanceResult(data, context);
  const response: ImportInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportKeyPairResult(data, context);
  const response: ImportKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportSnapshotResult(data, context);
  const response: ImportSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ImportVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ImportVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ImportVolumeResult(data, context);
  const response: ImportVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ImportVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyAvailabilityZoneGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyAvailabilityZoneGroupResult(data, context);
  const response: ModifyAvailabilityZoneGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyCapacityReservationResult(data, context);
  const response: ModifyCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyClientVpnEndpointResult(data, context);
  const response: ModifyClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyDefaultCreditSpecificationResult(data, context);
  const response: ModifyDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult(data, context);
  const response: ModifyEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyFleetResult(data, context);
  const response: ModifyFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyFpgaImageAttributeResult(data, context);
  const response: ModifyFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyHostsResult(data, context);
  const response: ModifyHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyIdentityIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult(data, context);
  const response: ModifyInstanceCapacityReservationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstanceCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyInstanceCreditSpecificationResult(data, context);
  const response: ModifyInstanceCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstanceEventStartTimeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstanceEventStartTimeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyInstanceEventStartTimeResult(data, context);
  const response: ModifyInstanceEventStartTimeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstanceEventStartTimeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstanceMetadataOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyInstanceMetadataOptionsResult(data, context);
  const response: ModifyInstanceMetadataOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyInstancePlacementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyInstancePlacementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyInstancePlacementResult(data, context);
  const response: ModifyInstancePlacementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyInstancePlacementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyLaunchTemplateResult(data, context);
  const response: ModifyLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyManagedPrefixListResult(data, context);
  const response: ModifyManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyReservedInstancesResult(data, context);
  const response: ModifyReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifySnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifySnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifySnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifySpotFleetRequestCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifySpotFleetRequestCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifySpotFleetRequestResponse(data, context);
  const response: ModifySpotFleetRequestCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifySpotFleetRequestCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifySubnetAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifySubnetAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySubnetAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifySubnetAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
  const response: ModifyTrafficMirrorFilterNetworkServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult(data, context);
  const response: ModifyTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTrafficMirrorSessionResult(data, context);
  const response: ModifyTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTransitGatewayResult(data, context);
  const response: ModifyTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult(data, context);
  const response: ModifyTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult(data, context);
  const response: ModifyTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVolumeResult(data, context);
  const response: ModifyVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVolumeAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcEndpointResult(data, context);
  const response: ModifyVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult(data, context);
  const response: ModifyVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult(data, context);
  const response: ModifyVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult(data, context);
  const response: ModifyVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult(data, context);
  const response: ModifyVpcPeeringConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpcTenancyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpcTenancyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpcTenancyResult(data, context);
  const response: ModifyVpcTenancyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpcTenancyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpnConnectionResult(data, context);
  const response: ModifyVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpnConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpnConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpnConnectionOptionsResult(data, context);
  const response: ModifyVpnConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpnConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpnTunnelCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpnTunnelCertificateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpnTunnelCertificateResult(data, context);
  const response: ModifyVpnTunnelCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpnTunnelCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ModifyVpnTunnelOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ModifyVpnTunnelOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ModifyVpnTunnelOptionsResult(data, context);
  const response: ModifyVpnTunnelOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ModifyVpnTunnelOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2MonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2MonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2MonitorInstancesResult(data, context);
  const response: MonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2MonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2MoveAddressToVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2MoveAddressToVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2MoveAddressToVpcResult(data, context);
  const response: MoveAddressToVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2MoveAddressToVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ProvisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ProvisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ProvisionByoipCidrResult(data, context);
  const response: ProvisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ProvisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2PurchaseHostReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2PurchaseHostReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2PurchaseHostReservationResult(data, context);
  const response: PurchaseHostReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2PurchaseHostReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2PurchaseReservedInstancesOfferingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2PurchaseReservedInstancesOfferingResult(data, context);
  const response: PurchaseReservedInstancesOfferingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2PurchaseScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2PurchaseScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2PurchaseScheduledInstancesResult(data, context);
  const response: PurchaseScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2PurchaseScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RebootInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RebootInstancesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: RebootInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RebootInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RegisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RegisterImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RegisterImageResult(data, context);
  const response: RegisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RegisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult(data, context);
  const response: RegisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: RejectTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult(data, context);
  const response: RejectTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult(data, context);
  const response: RejectTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RejectVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RejectVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RejectVpcEndpointConnectionsResult(data, context);
  const response: RejectVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RejectVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RejectVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RejectVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RejectVpcPeeringConnectionResult(data, context);
  const response: RejectVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RejectVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReleaseAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReleaseAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReleaseAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReleaseAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReleaseHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReleaseHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ReleaseHostsResult(data, context);
  const response: ReleaseHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReleaseHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult(data, context);
  const response: ReplaceIamInstanceProfileAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceNetworkAclAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceNetworkAclAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ReplaceNetworkAclAssociationResult(data, context);
  const response: ReplaceNetworkAclAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceNetworkAclAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceRouteTableAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceRouteTableAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ReplaceRouteTableAssociationResult(data, context);
  const response: ReplaceRouteTableAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceRouteTableAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReplaceTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReplaceTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ReplaceTransitGatewayRouteResult(data, context);
  const response: ReplaceTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReplaceTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ReportInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ReportInstanceStatusCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReportInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ReportInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RequestSpotFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RequestSpotFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RequestSpotFleetResponse(data, context);
  const response: RequestSpotFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RequestSpotFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RequestSpotInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RequestSpotInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RequestSpotInstancesResult(data, context);
  const response: RequestSpotInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RequestSpotInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult(data, context);
  const response: ResetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2ResetFpgaImageAttributeResult(data, context);
  const response: ResetFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2ResetSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2ResetSnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2ResetSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RestoreAddressToClassicCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RestoreAddressToClassicCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RestoreAddressToClassicResult(data, context);
  const response: RestoreAddressToClassicCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RestoreAddressToClassicCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RestoreManagedPrefixListVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RestoreManagedPrefixListVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RestoreManagedPrefixListVersionResult(data, context);
  const response: RestoreManagedPrefixListVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RestoreManagedPrefixListVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RevokeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RevokeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RevokeClientVpnIngressResult(data, context);
  const response: RevokeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RevokeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RevokeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RevokeSecurityGroupEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RevokeSecurityGroupEgressResult(data, context);
  const response: RevokeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RevokeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RevokeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RevokeSecurityGroupIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RevokeSecurityGroupIngressResult(data, context);
  const response: RevokeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RevokeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RunInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RunInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2Reservation(data, context);
  const response: RunInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RunInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2RunScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2RunScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2RunScheduledInstancesResult(data, context);
  const response: RunScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2RunScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2SearchLocalGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2SearchLocalGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2SearchLocalGatewayRoutesResult(data, context);
  const response: SearchLocalGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2SearchLocalGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult(data, context);
  const response: SearchTransitGatewayMulticastGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2SearchTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2SearchTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2SearchTransitGatewayRoutesResult(data, context);
  const response: SearchTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2SearchTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2SendDiagnosticInterruptCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2SendDiagnosticInterruptCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: SendDiagnosticInterruptCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2SendDiagnosticInterruptCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2StartInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2StartInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2StartInstancesResult(data, context);
  const response: StartInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2StartInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2StartNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2StartNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2StartNetworkInsightsAnalysisResult(data, context);
  const response: StartNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2StartNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
  const response: StartVpcEndpointServicePrivateDnsVerificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2StopInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2StopInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2StopInstancesResult(data, context);
  const response: StopInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2StopInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2TerminateClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2TerminateClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2TerminateClientVpnConnectionsResult(data, context);
  const response: TerminateClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2TerminateClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2TerminateInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2TerminateInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2TerminateInstancesResult(data, context);
  const response: TerminateInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2TerminateInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2UnassignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2UnassignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2UnassignIpv6AddressesResult(data, context);
  const response: UnassignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2UnassignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2UnassignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2UnassignPrivateIpAddressesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: UnassignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2UnassignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2UnmonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2UnmonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2UnmonitorInstancesResult(data, context);
  const response: UnmonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2UnmonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_ec2WithdrawByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_ec2WithdrawByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_ec2WithdrawByoipCidrResult(data, context);
  const response: WithdrawByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_ec2WithdrawByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.Errors.Error.code || parsedBody.Errors.Error.Code || errorCode;
      response = {
        ...parsedBody.Errors.Error,
        name: `${errorCode}`,
        message: parsedBody.Errors.Error.message || parsedBody.Errors.Error.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

const serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest = (
  input: AcceptReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
    const memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest = (
  input: AcceptTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest = (
  input: AcceptTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest = (
  input: AcceptTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AcceptVpcEndpointConnectionsRequest = (
  input: AcceptVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2AcceptVpcPeeringConnectionRequest = (
  input: AcceptVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2AccountAttributeNameStringList = (
  input: (AccountAttributeName | string)[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AttributeName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2AddPrefixListEntries = (input: AddPrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2AddPrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2AddPrefixListEntry = (input: AddPrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

const serializeAws_ec2AdvertiseByoipCidrRequest = (input: AdvertiseByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AllocateAddressRequest = (input: AllocateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Domain !== undefined && input.Domain !== null) {
    entries["Domain"] = input.Domain;
  }
  if (input.Address !== undefined && input.Address !== null) {
    entries["Address"] = input.Address;
  }
  if (input.PublicIpv4Pool !== undefined && input.PublicIpv4Pool !== null) {
    entries["PublicIpv4Pool"] = input.PublicIpv4Pool;
  }
  if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
    entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
  }
  if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
    entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2AllocateHostsRequest = (input: AllocateHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
    entries["AutoPlacement"] = input.AutoPlacement;
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  if (input.Quantity !== undefined && input.Quantity !== null) {
    entries["Quantity"] = input.Quantity;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
    entries["HostRecovery"] = input.HostRecovery;
  }
  return entries;
};

const serializeAws_ec2AllocationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AllocationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest = (
  input: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ArnList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2AssignIpv6AddressesRequest = (
  input: AssignIpv6AddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

const serializeAws_ec2AssignPrivateIpAddressesRequest = (
  input: AssignPrivateIpAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AllowReassignment !== undefined && input.AllowReassignment !== null) {
    entries["AllowReassignment"] = input.AllowReassignment;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  return entries;
};

const serializeAws_ec2AssociateAddressRequest = (input: AssociateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId !== undefined && input.AllocationId !== null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.AllowReassociation !== undefined && input.AllowReassociation !== null) {
    entries["AllowReassociation"] = input.AllowReassociation;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

const serializeAws_ec2AssociateClientVpnTargetNetworkRequest = (
  input: AssociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AssociateDhcpOptionsRequest = (
  input: AssociateDhcpOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
    entries["DhcpOptionsId"] = input.DhcpOptionsId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest = (
  input: AssociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.RoleArn !== undefined && input.RoleArn !== null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AssociateIamInstanceProfileRequest = (
  input: AssociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

const serializeAws_ec2AssociateRouteTableRequest = (
  input: AssociateRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.GatewayId !== undefined && input.GatewayId !== null) {
    entries["GatewayId"] = input.GatewayId;
  }
  return entries;
};

const serializeAws_ec2AssociateSubnetCidrBlockRequest = (
  input: AssociateSubnetCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  return entries;
};

const serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest = (
  input: AssociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AssociateTransitGatewayRouteTableRequest = (
  input: AssociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AssociateVpcCidrBlockRequest = (
  input: AssociateVpcCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
    entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
  }
  if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
    entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
  }
  if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
    entries["Ipv6Pool"] = input.Ipv6Pool;
  }
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  return entries;
};

const serializeAws_ec2AssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AssociationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2AttachClassicLinkVpcRequest = (
  input: AttachClassicLinkVpcRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2AttachInternetGatewayRequest = (
  input: AttachInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2AttachNetworkInterfaceRequest = (
  input: AttachNetworkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  return entries;
};

const serializeAws_ec2AttachVolumeRequest = (input: AttachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Device !== undefined && input.Device !== null) {
    entries["Device"] = input.Device;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AttachVpnGatewayRequest = (input: AttachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AttributeBooleanValue = (input: AttributeBooleanValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2AttributeValue = (input: AttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2AuthorizeClientVpnIngressRequest = (
  input: AuthorizeClientVpnIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
    entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
  }
  if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
    entries["AccessGroupId"] = input.AccessGroupId;
  }
  if (input.AuthorizeAllGroups !== undefined && input.AuthorizeAllGroups !== null) {
    entries["AuthorizeAllGroups"] = input.AuthorizeAllGroups;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AuthorizeSecurityGroupEgressRequest = (
  input: AuthorizeSecurityGroupEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CidrIp !== undefined && input.CidrIp !== null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  return entries;
};

const serializeAws_ec2AuthorizeSecurityGroupIngressRequest = (
  input: AuthorizeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrIp !== undefined && input.CidrIp !== null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2AvailabilityZoneStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2BillingProductList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2BlobAttributeValue = (input: BlobAttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = context.base64Encoder(input.Value);
  }
  return entries;
};

const serializeAws_ec2BlockDeviceMapping = (input: BlockDeviceMapping, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.VirtualName !== undefined && input.VirtualName !== null) {
    entries["VirtualName"] = input.VirtualName;
  }
  if (input.Ebs !== undefined && input.Ebs !== null) {
    const memberEntries = serializeAws_ec2EbsBlockDevice(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice !== undefined && input.NoDevice !== null) {
    entries["NoDevice"] = input.NoDevice;
  }
  return entries;
};

const serializeAws_ec2BlockDeviceMappingList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2BlockDeviceMappingRequestList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2BundleIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`BundleId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2BundleInstanceRequest = (input: BundleInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Storage !== undefined && input.Storage !== null) {
    const memberEntries = serializeAws_ec2Storage(input.Storage, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Storage.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CancelBundleTaskRequest = (input: CancelBundleTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BundleId !== undefined && input.BundleId !== null) {
    entries["BundleId"] = input.BundleId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CancelCapacityReservationRequest = (
  input: CancelCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CancelConversionRequest = (input: CancelConversionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ConversionTaskId !== undefined && input.ConversionTaskId !== null) {
    entries["ConversionTaskId"] = input.ConversionTaskId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReasonMessage !== undefined && input.ReasonMessage !== null) {
    entries["ReasonMessage"] = input.ReasonMessage;
  }
  return entries;
};

const serializeAws_ec2CancelExportTaskRequest = (input: CancelExportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExportTaskId !== undefined && input.ExportTaskId !== null) {
    entries["ExportTaskId"] = input.ExportTaskId;
  }
  return entries;
};

const serializeAws_ec2CancelImportTaskRequest = (input: CancelImportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CancelReason !== undefined && input.CancelReason !== null) {
    entries["CancelReason"] = input.CancelReason;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ImportTaskId !== undefined && input.ImportTaskId !== null) {
    entries["ImportTaskId"] = input.ImportTaskId;
  }
  return entries;
};

const serializeAws_ec2CancelReservedInstancesListingRequest = (
  input: CancelReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
    entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
  }
  return entries;
};

const serializeAws_ec2CancelSpotFleetRequestsRequest = (
  input: CancelSpotFleetRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
    const memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
    entries["TerminateInstances"] = input.TerminateInstances;
  }
  return entries;
};

const serializeAws_ec2CancelSpotInstanceRequestsRequest = (
  input: CancelSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
    const memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CapacityReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2CapacityReservationOptionsRequest = (
  input: CapacityReservationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.UsageStrategy !== undefined && input.UsageStrategy !== null) {
    entries["UsageStrategy"] = input.UsageStrategy;
  }
  return entries;
};

const serializeAws_ec2CapacityReservationSpecification = (
  input: CapacityReservationSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
    entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
  }
  if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CapacityReservationTarget = (input: CapacityReservationTarget, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.CapacityReservationResourceGroupArn !== undefined && input.CapacityReservationResourceGroupArn !== null) {
    entries["CapacityReservationResourceGroupArn"] = input.CapacityReservationResourceGroupArn;
  }
  return entries;
};

const serializeAws_ec2CarrierGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2CertificateAuthenticationRequest = (
  input: CertificateAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientRootCertificateChainArn !== undefined && input.ClientRootCertificateChainArn !== null) {
    entries["ClientRootCertificateChainArn"] = input.ClientRootCertificateChainArn;
  }
  return entries;
};

const serializeAws_ec2CidrAuthorizationContext = (input: CidrAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Message !== undefined && input.Message !== null) {
    entries["Message"] = input.Message;
  }
  if (input.Signature !== undefined && input.Signature !== null) {
    entries["Signature"] = input.Signature;
  }
  return entries;
};

const serializeAws_ec2ClassicLoadBalancer = (input: ClassicLoadBalancer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

const serializeAws_ec2ClassicLoadBalancers = (input: ClassicLoadBalancer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ClassicLoadBalancer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ClassicLoadBalancersConfig = (
  input: ClassicLoadBalancersConfig,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClassicLoadBalancers !== undefined && input.ClassicLoadBalancers !== null) {
    const memberEntries = serializeAws_ec2ClassicLoadBalancers(input.ClassicLoadBalancers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ClientConnectOptions = (input: ClientConnectOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {
    entries["LambdaFunctionArn"] = input.LambdaFunctionArn;
  }
  return entries;
};

const serializeAws_ec2ClientData = (input: ClientData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Comment !== undefined && input.Comment !== null) {
    entries["Comment"] = input.Comment;
  }
  if (input.UploadEnd !== undefined && input.UploadEnd !== null) {
    entries["UploadEnd"] = input.UploadEnd.toISOString().split(".")[0] + "Z";
  }
  if (input.UploadSize !== undefined && input.UploadSize !== null) {
    entries["UploadSize"] = input.UploadSize;
  }
  if (input.UploadStart !== undefined && input.UploadStart !== null) {
    entries["UploadStart"] = input.UploadStart.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2ClientVpnAuthenticationRequest = (
  input: ClientVpnAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.ActiveDirectory !== undefined && input.ActiveDirectory !== null) {
    const memberEntries = serializeAws_ec2DirectoryServiceAuthenticationRequest(input.ActiveDirectory, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActiveDirectory.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MutualAuthentication !== undefined && input.MutualAuthentication !== null) {
    const memberEntries = serializeAws_ec2CertificateAuthenticationRequest(input.MutualAuthentication, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  if (input.FederatedAuthentication !== undefined && input.FederatedAuthentication !== null) {
    const memberEntries = serializeAws_ec2FederatedAuthenticationRequest(input.FederatedAuthentication, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FederatedAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ClientVpnAuthenticationRequestList = (
  input: ClientVpnAuthenticationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ClientVpnAuthenticationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ClientVpnEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ClientVpnSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2CoipPoolIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ConfirmProductInstanceRequest = (
  input: ConfirmProductInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.ProductCode !== undefined && input.ProductCode !== null) {
    entries["ProductCode"] = input.ProductCode;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ConnectionLogOptions = (input: ConnectionLogOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.CloudwatchLogGroup !== undefined && input.CloudwatchLogGroup !== null) {
    entries["CloudwatchLogGroup"] = input.CloudwatchLogGroup;
  }
  if (input.CloudwatchLogStream !== undefined && input.CloudwatchLogStream !== null) {
    entries["CloudwatchLogStream"] = input.CloudwatchLogStream;
  }
  return entries;
};

const serializeAws_ec2ConnectionNotificationIdsList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ConversionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2CopyFpgaImageRequest = (input: CopyFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SourceFpgaImageId !== undefined && input.SourceFpgaImageId !== null) {
    entries["SourceFpgaImageId"] = input.SourceFpgaImageId;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CopyImageRequest = (input: CopyImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.SourceImageId !== undefined && input.SourceImageId !== null) {
    entries["SourceImageId"] = input.SourceImageId;
  }
  if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CopySnapshotRequest = (input: CopySnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DestinationRegion !== undefined && input.DestinationRegion !== null) {
    entries["DestinationRegion"] = input.DestinationRegion;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.PresignedUrl !== undefined && input.PresignedUrl !== null) {
    entries["PresignedUrl"] = input.PresignedUrl;
  }
  if (input.SourceRegion !== undefined && input.SourceRegion !== null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.SourceSnapshotId !== undefined && input.SourceSnapshotId !== null) {
    entries["SourceSnapshotId"] = input.SourceSnapshotId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CpuOptionsRequest = (input: CpuOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CoreCount !== undefined && input.CoreCount !== null) {
    entries["CoreCount"] = input.CoreCount;
  }
  if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
    entries["ThreadsPerCore"] = input.ThreadsPerCore;
  }
  return entries;
};

const serializeAws_ec2CreateCapacityReservationRequest = (
  input: CreateCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstancePlatform !== undefined && input.InstancePlatform !== null) {
    entries["InstancePlatform"] = input.InstancePlatform;
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
    entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
  }
  if (input.Tenancy !== undefined && input.Tenancy !== null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.EphemeralStorage !== undefined && input.EphemeralStorage !== null) {
    entries["EphemeralStorage"] = input.EphemeralStorage;
  }
  if (input.EndDate !== undefined && input.EndDate !== null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.EndDateType !== undefined && input.EndDateType !== null) {
    entries["EndDateType"] = input.EndDateType;
  }
  if (input.InstanceMatchCriteria !== undefined && input.InstanceMatchCriteria !== null) {
    entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateCarrierGatewayRequest = (
  input: CreateCarrierGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateClientVpnEndpointRequest = (
  input: CreateClientVpnEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientCidrBlock !== undefined && input.ClientCidrBlock !== null) {
    entries["ClientCidrBlock"] = input.ClientCidrBlock;
  }
  if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
    entries["ServerCertificateArn"] = input.ServerCertificateArn;
  }
  if (input.AuthenticationOptions !== undefined && input.AuthenticationOptions !== null) {
    const memberEntries = serializeAws_ec2ClientVpnAuthenticationRequestList(input.AuthenticationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
    const memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DnsServers !== undefined && input.DnsServers !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.DnsServers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TransportProtocol !== undefined && input.TransportProtocol !== null) {
    entries["TransportProtocol"] = input.TransportProtocol;
  }
  if (input.VpnPort !== undefined && input.VpnPort !== null) {
    entries["VpnPort"] = input.VpnPort;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
    entries["SplitTunnel"] = input.SplitTunnel;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
    entries["SelfServicePortal"] = input.SelfServicePortal;
  }
  if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
    const memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateClientVpnRouteRequest = (
  input: CreateClientVpnRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
    entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateCustomerGatewayRequest = (
  input: CreateCustomerGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.BgpAsn !== undefined && input.BgpAsn !== null) {
    entries["BgpAsn"] = input.BgpAsn;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["IpAddress"] = input.PublicIp;
  }
  if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateDefaultSubnetRequest = (
  input: CreateDefaultSubnetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateDefaultVpcRequest = (input: CreateDefaultVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateDhcpOptionsRequest = (input: CreateDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpConfigurations !== undefined && input.DhcpConfigurations !== null) {
    const memberEntries = serializeAws_ec2NewDhcpConfigurationList(input.DhcpConfigurations, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateEgressOnlyInternetGatewayRequest = (
  input: CreateEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateFleetRequest = (input: CreateFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
    const memberEntries = serializeAws_ec2SpotOptionsRequest(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.OnDemandOptions !== undefined && input.OnDemandOptions !== null) {
    const memberEntries = serializeAws_ec2OnDemandOptionsRequest(input.OnDemandOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OnDemandOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
    const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
    const memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(
      input.TargetCapacitySpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
    entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
    entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateFlowLogsRequest = (input: CreateFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DeliverLogsPermissionArn !== undefined && input.DeliverLogsPermissionArn !== null) {
    entries["DeliverLogsPermissionArn"] = input.DeliverLogsPermissionArn;
  }
  if (input.LogGroupName !== undefined && input.LogGroupName !== null) {
    entries["LogGroupName"] = input.LogGroupName;
  }
  if (input.ResourceIds !== undefined && input.ResourceIds !== null) {
    const memberEntries = serializeAws_ec2FlowLogResourceIds(input.ResourceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ResourceType !== undefined && input.ResourceType !== null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.TrafficType !== undefined && input.TrafficType !== null) {
    entries["TrafficType"] = input.TrafficType;
  }
  if (input.LogDestinationType !== undefined && input.LogDestinationType !== null) {
    entries["LogDestinationType"] = input.LogDestinationType;
  }
  if (input.LogDestination !== undefined && input.LogDestination !== null) {
    entries["LogDestination"] = input.LogDestination;
  }
  if (input.LogFormat !== undefined && input.LogFormat !== null) {
    entries["LogFormat"] = input.LogFormat;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxAggregationInterval !== undefined && input.MaxAggregationInterval !== null) {
    entries["MaxAggregationInterval"] = input.MaxAggregationInterval;
  }
  return entries;
};

const serializeAws_ec2CreateFpgaImageRequest = (input: CreateFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InputStorageLocation !== undefined && input.InputStorageLocation !== null) {
    const memberEntries = serializeAws_ec2StorageLocation(input.InputStorageLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InputStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LogsStorageLocation !== undefined && input.LogsStorageLocation !== null) {
    const memberEntries = serializeAws_ec2StorageLocation(input.LogsStorageLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogsStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateImageRequest = (input: CreateImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.NoReboot !== undefined && input.NoReboot !== null) {
    entries["NoReboot"] = input.NoReboot;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateInstanceExportTaskRequest = (
  input: CreateInstanceExportTaskRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.ExportToS3Task !== undefined && input.ExportToS3Task !== null) {
    const memberEntries = serializeAws_ec2ExportToS3TaskSpecification(input.ExportToS3Task, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportToS3.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.TargetEnvironment !== undefined && input.TargetEnvironment !== null) {
    entries["TargetEnvironment"] = input.TargetEnvironment;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateInternetGatewayRequest = (
  input: CreateInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateKeyPairRequest = (input: CreateKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateLaunchTemplateRequest = (
  input: CreateLaunchTemplateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
    entries["VersionDescription"] = input.VersionDescription;
  }
  if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
    const memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateLaunchTemplateVersionRequest = (
  input: CreateLaunchTemplateVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.SourceVersion !== undefined && input.SourceVersion !== null) {
    entries["SourceVersion"] = input.SourceVersion;
  }
  if (input.VersionDescription !== undefined && input.VersionDescription !== null) {
    entries["VersionDescription"] = input.VersionDescription;
  }
  if (input.LaunchTemplateData !== undefined && input.LaunchTemplateData !== null) {
    const memberEntries = serializeAws_ec2RequestLaunchTemplateData(input.LaunchTemplateData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateLocalGatewayRouteRequest = (
  input: CreateLocalGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.LocalGatewayVirtualInterfaceGroupId !== undefined && input.LocalGatewayVirtualInterfaceGroupId !== null) {
    entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest = (
  input: CreateLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateManagedPrefixListRequest = (
  input: CreateManagedPrefixListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
    entries["PrefixListName"] = input.PrefixListName;
  }
  if (input.Entries !== undefined && input.Entries !== null) {
    const memberEntries = serializeAws_ec2AddPrefixListEntries(input.Entries, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxEntries !== undefined && input.MaxEntries !== null) {
    entries["MaxEntries"] = input.MaxEntries;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressFamily !== undefined && input.AddressFamily !== null) {
    entries["AddressFamily"] = input.AddressFamily;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateNatGatewayRequest = (input: CreateNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId !== undefined && input.AllocationId !== null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateNetworkAclEntryRequest = (
  input: CreateNetworkAclEntryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress !== undefined && input.Egress !== null) {
    entries["Egress"] = input.Egress;
  }
  if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
    const memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.PortRange !== undefined && input.PortRange !== null) {
    const memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.RuleAction !== undefined && input.RuleAction !== null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

const serializeAws_ec2CreateNetworkAclRequest = (input: CreateNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateNetworkInsightsPathRequest = (
  input: CreateNetworkInsightsPathRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SourceIp !== undefined && input.SourceIp !== null) {
    entries["SourceIp"] = input.SourceIp;
  }
  if (input.DestinationIp !== undefined && input.DestinationIp !== null) {
    entries["DestinationIp"] = input.DestinationIp;
  }
  if (input.Source !== undefined && input.Source !== null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination !== undefined && input.Destination !== null) {
    entries["Destination"] = input.Destination;
  }
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationPort !== undefined && input.DestinationPort !== null) {
    entries["DestinationPort"] = input.DestinationPort;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateNetworkInterfacePermissionRequest = (
  input: CreateNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.AwsAccountId !== undefined && input.AwsAccountId !== null) {
    entries["AwsAccountId"] = input.AwsAccountId;
  }
  if (input.AwsService !== undefined && input.AwsService !== null) {
    entries["AwsService"] = input.AwsService;
  }
  if (input.Permission !== undefined && input.Permission !== null) {
    entries["Permission"] = input.Permission;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateNetworkInterfaceRequest = (
  input: CreateNetworkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreatePlacementGroupRequest = (
  input: CreatePlacementGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.Strategy !== undefined && input.Strategy !== null) {
    entries["Strategy"] = input.Strategy;
  }
  if (input.PartitionCount !== undefined && input.PartitionCount !== null) {
    entries["PartitionCount"] = input.PartitionCount;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateReservedInstancesListingRequest = (
  input: CreateReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.PriceSchedules !== undefined && input.PriceSchedules !== null) {
    const memberEntries = serializeAws_ec2PriceScheduleSpecificationList(input.PriceSchedules, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
    entries["ReservedInstancesId"] = input.ReservedInstancesId;
  }
  return entries;
};

const serializeAws_ec2CreateRouteRequest = (input: CreateRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  if (input.GatewayId !== undefined && input.GatewayId !== null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
    entries["LocalGatewayId"] = input.LocalGatewayId;
  }
  if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2CreateRouteTableRequest = (input: CreateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateSecurityGroupRequest = (
  input: CreateSecurityGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["GroupDescription"] = input.Description;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateSnapshotRequest = (input: CreateSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateSnapshotsRequest = (input: CreateSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.InstanceSpecification !== undefined && input.InstanceSpecification !== null) {
    const memberEntries = serializeAws_ec2InstanceSpecification(input.InstanceSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.CopyTagsFromSource !== undefined && input.CopyTagsFromSource !== null) {
    entries["CopyTagsFromSource"] = input.CopyTagsFromSource;
  }
  return entries;
};

const serializeAws_ec2CreateSpotDatafeedSubscriptionRequest = (
  input: CreateSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Bucket !== undefined && input.Bucket !== null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Prefix !== undefined && input.Prefix !== null) {
    entries["Prefix"] = input.Prefix;
  }
  return entries;
};

const serializeAws_ec2CreateSubnetRequest = (input: CreateSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.AvailabilityZoneId !== undefined && input.AvailabilityZoneId !== null) {
    entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
  }
  if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTagsRequest = (input: CreateTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources !== undefined && input.Resources !== null) {
    const memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Tags !== undefined && input.Tags !== null) {
    const memberEntries = serializeAws_ec2TagList(input.Tags, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateTrafficMirrorFilterRequest = (
  input: CreateTrafficMirrorFilterRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateTrafficMirrorFilterRuleRequest = (
  input: CreateTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
    entries["TrafficDirection"] = input.TrafficDirection;
  }
  if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  if (input.RuleAction !== undefined && input.RuleAction !== null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
    entries["SourceCidrBlock"] = input.SourceCidrBlock;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateTrafficMirrorSessionRequest = (
  input: CreateTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.PacketLength !== undefined && input.PacketLength !== null) {
    entries["PacketLength"] = input.PacketLength;
  }
  if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
    entries["SessionNumber"] = input.SessionNumber;
  }
  if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
    entries["VirtualNetworkId"] = input.VirtualNetworkId;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateTrafficMirrorTargetRequest = (
  input: CreateTrafficMirrorTargetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.NetworkLoadBalancerArn !== undefined && input.NetworkLoadBalancerArn !== null) {
    entries["NetworkLoadBalancerArn"] = input.NetworkLoadBalancerArn;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayConnectPeerRequest = (
  input: CreateTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.TransitGatewayAddress !== undefined && input.TransitGatewayAddress !== null) {
    entries["TransitGatewayAddress"] = input.TransitGatewayAddress;
  }
  if (input.PeerAddress !== undefined && input.PeerAddress !== null) {
    entries["PeerAddress"] = input.PeerAddress;
  }
  if (input.BgpOptions !== undefined && input.BgpOptions !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayConnectRequestBgpOptions(input.BgpOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BgpOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InsideCidrBlocks !== undefined && input.InsideCidrBlocks !== null) {
    const memberEntries = serializeAws_ec2InsideCidrBlocksStringList(input.InsideCidrBlocks, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayConnectRequest = (
  input: CreateTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransportTransitGatewayAttachmentId !== undefined && input.TransportTransitGatewayAttachmentId !== null) {
    entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2CreateTransitGatewayConnectRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayConnectRequestOptions = (
  input: CreateTransitGatewayConnectRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayMulticastDomainRequest = (
  input: CreateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions = (
  input: CreateTransitGatewayMulticastDomainRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Igmpv2Support !== undefined && input.Igmpv2Support !== null) {
    entries["Igmpv2Support"] = input.Igmpv2Support;
  }
  if (input.StaticSourcesSupport !== undefined && input.StaticSourcesSupport !== null) {
    entries["StaticSourcesSupport"] = input.StaticSourcesSupport;
  }
  if (input.AutoAcceptSharedAssociations !== undefined && input.AutoAcceptSharedAssociations !== null) {
    entries["AutoAcceptSharedAssociations"] = input.AutoAcceptSharedAssociations;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest = (
  input: CreateTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.PeerTransitGatewayId !== undefined && input.PeerTransitGatewayId !== null) {
    entries["PeerTransitGatewayId"] = input.PeerTransitGatewayId;
  }
  if (input.PeerAccountId !== undefined && input.PeerAccountId !== null) {
    entries["PeerAccountId"] = input.PeerAccountId;
  }
  if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
    entries["PeerRegion"] = input.PeerRegion;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest = (
  input: CreateTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole !== undefined && input.Blackhole !== null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayRequest = (
  input: CreateTransitGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayRouteRequest = (
  input: CreateTransitGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole !== undefined && input.Blackhole !== null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayRouteTableRequest = (
  input: CreateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest = (
  input: CreateTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions = (
  input: CreateTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
    entries["Ipv6Support"] = input.Ipv6Support;
  }
  if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
    entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
  }
  return entries;
};

const serializeAws_ec2CreateVolumePermission = (input: CreateVolumePermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group !== undefined && input.Group !== null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId !== undefined && input.UserId !== null) {
    entries["UserId"] = input.UserId;
  }
  return entries;
};

const serializeAws_ec2CreateVolumePermissionList = (input: CreateVolumePermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2CreateVolumePermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2CreateVolumePermissionModifications = (
  input: CreateVolumePermissionModifications,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Add !== undefined && input.Add !== null) {
    const memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Add, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove !== undefined && input.Remove !== null) {
    const memberEntries = serializeAws_ec2CreateVolumePermissionList(input.Remove, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVolumeRequest = (input: CreateVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Iops !== undefined && input.Iops !== null) {
    entries["Iops"] = input.Iops;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.OutpostArn !== undefined && input.OutpostArn !== null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.Size !== undefined && input.Size !== null) {
    entries["Size"] = input.Size;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeType !== undefined && input.VolumeType !== null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
    entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
  }
  if (input.Throughput !== undefined && input.Throughput !== null) {
    entries["Throughput"] = input.Throughput;
  }
  return entries;
};

const serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest = (
  input: CreateVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
    entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
  }
  if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2CreateVpcEndpointRequest = (input: CreateVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointType !== undefined && input.VpcEndpointType !== null) {
    entries["VpcEndpointType"] = input.VpcEndpointType;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.ServiceName !== undefined && input.ServiceName !== null) {
    entries["ServiceName"] = input.ServiceName;
  }
  if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RouteTableIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
    entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest = (
  input: CreateVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
    entries["AcceptanceRequired"] = input.AcceptanceRequired;
  }
  if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
    entries["PrivateDnsName"] = input.PrivateDnsName;
  }
  if (input.NetworkLoadBalancerArns !== undefined && input.NetworkLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.NetworkLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GatewayLoadBalancerArns !== undefined && input.GatewayLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.GatewayLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVpcPeeringConnectionRequest = (
  input: CreateVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PeerOwnerId !== undefined && input.PeerOwnerId !== null) {
    entries["PeerOwnerId"] = input.PeerOwnerId;
  }
  if (input.PeerVpcId !== undefined && input.PeerVpcId !== null) {
    entries["PeerVpcId"] = input.PeerVpcId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.PeerRegion !== undefined && input.PeerRegion !== null) {
    entries["PeerRegion"] = input.PeerRegion;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVpcRequest = (input: CreateVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.AmazonProvidedIpv6CidrBlock !== undefined && input.AmazonProvidedIpv6CidrBlock !== null) {
    entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
  }
  if (input.Ipv6Pool !== undefined && input.Ipv6Pool !== null) {
    entries["Ipv6Pool"] = input.Ipv6Pool;
  }
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.Ipv6CidrBlockNetworkBorderGroup !== undefined && input.Ipv6CidrBlockNetworkBorderGroup !== null) {
    entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVpnConnectionRequest = (
  input: CreateVpnConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2VpnConnectionOptionsSpecification(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2CreateVpnConnectionRouteRequest = (
  input: CreateVpnConnectionRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  return entries;
};

const serializeAws_ec2CreateVpnGatewayRequest = (input: CreateVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
    entries["AmazonSideAsn"] = input.AmazonSideAsn;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2CreditSpecificationRequest = (
  input: CreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

const serializeAws_ec2CustomerGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CustomerGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2DeleteCarrierGatewayRequest = (
  input: DeleteCarrierGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteClientVpnEndpointRequest = (
  input: DeleteClientVpnEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteClientVpnRouteRequest = (
  input: DeleteClientVpnRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetVpcSubnetId !== undefined && input.TargetVpcSubnetId !== null) {
    entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
  }
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteCustomerGatewayRequest = (
  input: DeleteCustomerGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteDhcpOptionsRequest = (input: DeleteDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpOptionsId !== undefined && input.DhcpOptionsId !== null) {
    entries["DhcpOptionsId"] = input.DhcpOptionsId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest = (
  input: DeleteEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  return entries;
};

const serializeAws_ec2DeleteFleetsRequest = (input: DeleteFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FleetIds !== undefined && input.FleetIds !== null) {
    const memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstances !== undefined && input.TerminateInstances !== null) {
    entries["TerminateInstances"] = input.TerminateInstances;
  }
  return entries;
};

const serializeAws_ec2DeleteFlowLogsRequest = (input: DeleteFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
    const memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteFpgaImageRequest = (input: DeleteFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  return entries;
};

const serializeAws_ec2DeleteInternetGatewayRequest = (
  input: DeleteInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  return entries;
};

const serializeAws_ec2DeleteKeyPairRequest = (input: DeleteKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.KeyPairId !== undefined && input.KeyPairId !== null) {
    entries["KeyPairId"] = input.KeyPairId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteLaunchTemplateRequest = (
  input: DeleteLaunchTemplateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  return entries;
};

const serializeAws_ec2DeleteLaunchTemplateVersionsRequest = (
  input: DeleteLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Versions !== undefined && input.Versions !== null) {
    const memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteLocalGatewayRouteRequest = (
  input: DeleteLocalGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest = (
  input: DeleteLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (
    input.LocalGatewayRouteTableVpcAssociationId !== undefined &&
    input.LocalGatewayRouteTableVpcAssociationId !== null
  ) {
    entries["LocalGatewayRouteTableVpcAssociationId"] = input.LocalGatewayRouteTableVpcAssociationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteManagedPrefixListRequest = (
  input: DeleteManagedPrefixListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  return entries;
};

const serializeAws_ec2DeleteNatGatewayRequest = (input: DeleteNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkAclEntryRequest = (
  input: DeleteNetworkAclEntryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress !== undefined && input.Egress !== null) {
    entries["Egress"] = input.Egress;
  }
  if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkAclRequest = (input: DeleteNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkInsightsAnalysisRequest = (
  input: DeleteNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInsightsAnalysisId !== undefined && input.NetworkInsightsAnalysisId !== null) {
    entries["NetworkInsightsAnalysisId"] = input.NetworkInsightsAnalysisId;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkInsightsPathRequest = (
  input: DeleteNetworkInsightsPathRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkInterfacePermissionRequest = (
  input: DeleteNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfacePermissionId !== undefined && input.NetworkInterfacePermissionId !== null) {
    entries["NetworkInterfacePermissionId"] = input.NetworkInterfacePermissionId;
  }
  if (input.Force !== undefined && input.Force !== null) {
    entries["Force"] = input.Force;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteNetworkInterfaceRequest = (
  input: DeleteNetworkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

const serializeAws_ec2DeletePlacementGroupRequest = (
  input: DeletePlacementGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  return entries;
};

const serializeAws_ec2DeleteQueuedReservedInstancesIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2DeleteQueuedReservedInstancesRequest = (
  input: DeleteQueuedReservedInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
    const memberEntries = serializeAws_ec2DeleteQueuedReservedInstancesIdList(input.ReservedInstancesIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteRouteRequest = (input: DeleteRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

const serializeAws_ec2DeleteRouteTableRequest = (input: DeleteRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

const serializeAws_ec2DeleteSecurityGroupRequest = (
  input: DeleteSecurityGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteSnapshotRequest = (input: DeleteSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest = (
  input: DeleteSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteSubnetRequest = (input: DeleteSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTagsRequest = (input: DeleteTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources !== undefined && input.Resources !== null) {
    const memberEntries = serializeAws_ec2ResourceIdList(input.Resources, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Tags !== undefined && input.Tags !== null) {
    const memberEntries = serializeAws_ec2TagList(input.Tags, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteTrafficMirrorFilterRequest = (
  input: DeleteTrafficMirrorFilterRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest = (
  input: DeleteTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
    entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTrafficMirrorSessionRequest = (
  input: DeleteTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
    entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTrafficMirrorTargetRequest = (
  input: DeleteTrafficMirrorTargetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayConnectPeerRequest = (
  input: DeleteTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayConnectPeerId !== undefined && input.TransitGatewayConnectPeerId !== null) {
    entries["TransitGatewayConnectPeerId"] = input.TransitGatewayConnectPeerId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayConnectRequest = (
  input: DeleteTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest = (
  input: DeleteTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest = (
  input: DeleteTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest = (
  input: DeleteTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayRequest = (
  input: DeleteTransitGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayRouteRequest = (
  input: DeleteTransitGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayRouteTableRequest = (
  input: DeleteTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest = (
  input: DeleteTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteVolumeRequest = (input: DeleteVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest = (
  input: DeleteVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationIds !== undefined && input.ConnectionNotificationIds !== null) {
    const memberEntries = serializeAws_ec2ConnectionNotificationIdsList(input.ConnectionNotificationIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest = (
  input: DeleteVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteVpcEndpointsRequest = (input: DeleteVpcEndpointsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeleteVpcPeeringConnectionRequest = (
  input: DeleteVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2DeleteVpcRequest = (input: DeleteVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteVpnConnectionRequest = (
  input: DeleteVpnConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeleteVpnConnectionRouteRequest = (
  input: DeleteVpnConnectionRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  return entries;
};

const serializeAws_ec2DeleteVpnGatewayRequest = (input: DeleteVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeprovisionByoipCidrRequest = (
  input: DeprovisionByoipCidrRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeregisterImageRequest = (input: DeregisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest = (
  input: DeregisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
    const memberEntries = serializeAws_ec2DeregisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeregisterInstanceTagAttributeRequest = (
  input: DeregisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
    entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
  }
  if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
    const memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest = (
  input: DeregisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest = (
  input: DeregisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeAccountAttributesRequest = (
  input: DescribeAccountAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AttributeNames !== undefined && input.AttributeNames !== null) {
    const memberEntries = serializeAws_ec2AccountAttributeNameStringList(input.AttributeNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeAddressesRequest = (input: DescribeAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PublicIps !== undefined && input.PublicIps !== null) {
    const memberEntries = serializeAws_ec2PublicIpStringList(input.PublicIps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AllocationIds !== undefined && input.AllocationIds !== null) {
    const memberEntries = serializeAws_ec2AllocationIdList(input.AllocationIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeAggregateIdFormatRequest = (
  input: DescribeAggregateIdFormatRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeAvailabilityZonesRequest = (
  input: DescribeAvailabilityZonesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ZoneNames !== undefined && input.ZoneNames !== null) {
    const memberEntries = serializeAws_ec2ZoneNameStringList(input.ZoneNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ZoneIds !== undefined && input.ZoneIds !== null) {
    const memberEntries = serializeAws_ec2ZoneIdStringList(input.ZoneIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AllAvailabilityZones !== undefined && input.AllAvailabilityZones !== null) {
    entries["AllAvailabilityZones"] = input.AllAvailabilityZones;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeBundleTasksRequest = (
  input: DescribeBundleTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.BundleIds !== undefined && input.BundleIds !== null) {
    const memberEntries = serializeAws_ec2BundleIdStringList(input.BundleIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeByoipCidrsRequest = (input: DescribeByoipCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeCapacityReservationsRequest = (
  input: DescribeCapacityReservationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationIds !== undefined && input.CapacityReservationIds !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationIdSet(input.CapacityReservationIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeCarrierGatewaysRequest = (
  input: DescribeCarrierGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CarrierGatewayIds !== undefined && input.CarrierGatewayIds !== null) {
    const memberEntries = serializeAws_ec2CarrierGatewayIdSet(input.CarrierGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeClassicLinkInstancesRequest = (
  input: DescribeClassicLinkInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest = (
  input: DescribeClientVpnAuthorizationRulesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeClientVpnConnectionsRequest = (
  input: DescribeClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeClientVpnEndpointsRequest = (
  input: DescribeClientVpnEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointIds !== undefined && input.ClientVpnEndpointIds !== null) {
    const memberEntries = serializeAws_ec2ClientVpnEndpointIdList(input.ClientVpnEndpointIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeClientVpnRoutesRequest = (
  input: DescribeClientVpnRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeClientVpnTargetNetworksRequest = (
  input: DescribeClientVpnTargetNetworksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.AssociationIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeCoipPoolsRequest = (input: DescribeCoipPoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolIds !== undefined && input.PoolIds !== null) {
    const memberEntries = serializeAws_ec2CoipPoolIdSet(input.PoolIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeConversionTasksRequest = (
  input: DescribeConversionTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ConversionTaskIds !== undefined && input.ConversionTaskIds !== null) {
    const memberEntries = serializeAws_ec2ConversionIdStringList(input.ConversionTaskIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeCustomerGatewaysRequest = (
  input: DescribeCustomerGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CustomerGatewayIds !== undefined && input.CustomerGatewayIds !== null) {
    const memberEntries = serializeAws_ec2CustomerGatewayIdStringList(input.CustomerGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeDhcpOptionsRequest = (
  input: DescribeDhcpOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DhcpOptionsIds !== undefined && input.DhcpOptionsIds !== null) {
    const memberEntries = serializeAws_ec2DhcpOptionsIdStringList(input.DhcpOptionsIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest = (
  input: DescribeEgressOnlyInternetGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EgressOnlyInternetGatewayIds !== undefined && input.EgressOnlyInternetGatewayIds !== null) {
    const memberEntries = serializeAws_ec2EgressOnlyInternetGatewayIdList(input.EgressOnlyInternetGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeElasticGpusRequest = (
  input: DescribeElasticGpusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ElasticGpuIds !== undefined && input.ElasticGpuIds !== null) {
    const memberEntries = serializeAws_ec2ElasticGpuIdSet(input.ElasticGpuIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeExportImageTasksRequest = (
  input: DescribeExportImageTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ExportImageTaskIds !== undefined && input.ExportImageTaskIds !== null) {
    const memberEntries = serializeAws_ec2ExportImageTaskIdList(input.ExportImageTaskIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeExportTasksRequest = (
  input: DescribeExportTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ExportTaskIds !== undefined && input.ExportTaskIds !== null) {
    const memberEntries = serializeAws_ec2ExportTaskIdStringList(input.ExportTaskIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeFastSnapshotRestoresRequest = (
  input: DescribeFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeFleetHistoryRequest = (
  input: DescribeFleetHistoryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EventType !== undefined && input.EventType !== null) {
    entries["EventType"] = input.EventType;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetId !== undefined && input.FleetId !== null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.StartTime !== undefined && input.StartTime !== null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2DescribeFleetInstancesRequest = (
  input: DescribeFleetInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetId !== undefined && input.FleetId !== null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeFleetsRequest = (input: DescribeFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetIds !== undefined && input.FleetIds !== null) {
    const memberEntries = serializeAws_ec2FleetIdSet(input.FleetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeFlowLogsRequest = (input: DescribeFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filter !== undefined && input.Filter !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FlowLogIds !== undefined && input.FlowLogIds !== null) {
    const memberEntries = serializeAws_ec2FlowLogIdList(input.FlowLogIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeFpgaImageAttributeRequest = (
  input: DescribeFpgaImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  return entries;
};

const serializeAws_ec2DescribeFpgaImagesRequest = (input: DescribeFpgaImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageIds !== undefined && input.FpgaImageIds !== null) {
    const memberEntries = serializeAws_ec2FpgaImageIdList(input.FpgaImageIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Owners !== undefined && input.Owners !== null) {
    const memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeHostReservationOfferingsRequest = (
  input: DescribeHostReservationOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filter !== undefined && input.Filter !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
    entries["MaxDuration"] = input.MaxDuration;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.MinDuration !== undefined && input.MinDuration !== null) {
    entries["MinDuration"] = input.MinDuration;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OfferingId !== undefined && input.OfferingId !== null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

const serializeAws_ec2DescribeHostReservationsRequest = (
  input: DescribeHostReservationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filter !== undefined && input.Filter !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostReservationIdSet !== undefined && input.HostReservationIdSet !== null) {
    const memberEntries = serializeAws_ec2HostReservationIdSet(input.HostReservationIdSet, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeHostsRequest = (input: DescribeHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filter !== undefined && input.Filter !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostIds !== undefined && input.HostIds !== null) {
    const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest = (
  input: DescribeIamInstanceProfileAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationIds !== undefined && input.AssociationIds !== null) {
    const memberEntries = serializeAws_ec2AssociationIdList(input.AssociationIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeIdentityIdFormatRequest = (
  input: DescribeIdentityIdFormatRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
    entries["PrincipalArn"] = input.PrincipalArn;
  }
  if (input.Resource !== undefined && input.Resource !== null) {
    entries["Resource"] = input.Resource;
  }
  return entries;
};

const serializeAws_ec2DescribeIdFormatRequest = (input: DescribeIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Resource !== undefined && input.Resource !== null) {
    entries["Resource"] = input.Resource;
  }
  return entries;
};

const serializeAws_ec2DescribeImageAttributeRequest = (
  input: DescribeImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeImagesRequest = (input: DescribeImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExecutableUsers !== undefined && input.ExecutableUsers !== null) {
    const memberEntries = serializeAws_ec2ExecutableByStringList(input.ExecutableUsers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageIds !== undefined && input.ImageIds !== null) {
    const memberEntries = serializeAws_ec2ImageIdStringList(input.ImageIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Owners !== undefined && input.Owners !== null) {
    const memberEntries = serializeAws_ec2OwnerStringList(input.Owners, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeImportImageTasksRequest = (
  input: DescribeImportImageTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
    const memberEntries = serializeAws_ec2ImportTaskIdList(input.ImportTaskIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeImportSnapshotTasksRequest = (
  input: DescribeImportSnapshotTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImportTaskIds !== undefined && input.ImportTaskIds !== null) {
    const memberEntries = serializeAws_ec2ImportSnapshotTaskIdList(input.ImportTaskIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceAttributeRequest = (
  input: DescribeInstanceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceCreditSpecificationsRequest = (
  input: DescribeInstanceCreditSpecificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest = (
  input: DescribeInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeInstancesRequest = (input: DescribeInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceStatusRequest = (
  input: DescribeInstanceStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IncludeAllInstances !== undefined && input.IncludeAllInstances !== null) {
    entries["IncludeAllInstances"] = input.IncludeAllInstances;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceTypeOfferingsRequest = (
  input: DescribeInstanceTypeOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LocationType !== undefined && input.LocationType !== null) {
    entries["LocationType"] = input.LocationType;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeInstanceTypesRequest = (
  input: DescribeInstanceTypesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
    const memberEntries = serializeAws_ec2RequestInstanceTypeList(input.InstanceTypes, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeInternetGatewaysRequest = (
  input: DescribeInternetGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayIds !== undefined && input.InternetGatewayIds !== null) {
    const memberEntries = serializeAws_ec2InternetGatewayIdList(input.InternetGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeIpv6PoolsRequest = (input: DescribeIpv6PoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolIds !== undefined && input.PoolIds !== null) {
    const memberEntries = serializeAws_ec2Ipv6PoolIdList(input.PoolIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeKeyPairsRequest = (input: DescribeKeyPairsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KeyNames !== undefined && input.KeyNames !== null) {
    const memberEntries = serializeAws_ec2KeyNameStringList(input.KeyNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KeyPairIds !== undefined && input.KeyPairIds !== null) {
    const memberEntries = serializeAws_ec2KeyPairIdStringList(input.KeyPairIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLaunchTemplatesRequest = (
  input: DescribeLaunchTemplatesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateIds !== undefined && input.LaunchTemplateIds !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateIdStringList(input.LaunchTemplateIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplateNames !== undefined && input.LaunchTemplateNames !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateNameStringList(input.LaunchTemplateNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeLaunchTemplateVersionsRequest = (
  input: DescribeLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Versions !== undefined && input.Versions !== null) {
    const memberEntries = serializeAws_ec2VersionStringList(input.Versions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MinVersion !== undefined && input.MinVersion !== null) {
    entries["MinVersion"] = input.MinVersion;
  }
  if (input.MaxVersion !== undefined && input.MaxVersion !== null) {
    entries["MaxVersion"] = input.MaxVersion;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewayRouteTablesRequest = (
  input: DescribeLocalGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableIds !== undefined && input.LocalGatewayRouteTableIds !== null) {
    const memberEntries = serializeAws_ec2LocalGatewayRouteTableIdSet(input.LocalGatewayRouteTableIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (
    input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== undefined &&
    input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds !== null
  ) {
    const memberEntries = serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(
      input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (
    input.LocalGatewayRouteTableVpcAssociationIds !== undefined &&
    input.LocalGatewayRouteTableVpcAssociationIds !== null
  ) {
    const memberEntries = serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet(
      input.LocalGatewayRouteTableVpcAssociationIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewaysRequest = (
  input: DescribeLocalGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayIds !== undefined && input.LocalGatewayIds !== null) {
    const memberEntries = serializeAws_ec2LocalGatewayIdSet(input.LocalGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest = (
  input: DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayVirtualInterfaceGroupIds !== undefined && input.LocalGatewayVirtualInterfaceGroupIds !== null) {
    const memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet(
      input.LocalGatewayVirtualInterfaceGroupIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest = (
  input: DescribeLocalGatewayVirtualInterfacesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayVirtualInterfaceIds !== undefined && input.LocalGatewayVirtualInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2LocalGatewayVirtualInterfaceIdSet(
      input.LocalGatewayVirtualInterfaceIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeManagedPrefixListsRequest = (
  input: DescribeManagedPrefixListsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.PrefixListIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeMovingAddressesRequest = (
  input: DescribeMovingAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PublicIps !== undefined && input.PublicIps !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.PublicIps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeNatGatewaysRequest = (
  input: DescribeNatGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filter !== undefined && input.Filter !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filter, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NatGatewayIds !== undefined && input.NatGatewayIds !== null) {
    const memberEntries = serializeAws_ec2NatGatewayIdStringList(input.NatGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkAclsRequest = (
  input: DescribeNetworkAclsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclIds !== undefined && input.NetworkAclIds !== null) {
    const memberEntries = serializeAws_ec2NetworkAclIdStringList(input.NetworkAclIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkInsightsAnalysesRequest = (
  input: DescribeNetworkInsightsAnalysesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAnalysisIds !== undefined && input.NetworkInsightsAnalysisIds !== null) {
    const memberEntries = serializeAws_ec2NetworkInsightsAnalysisIdList(input.NetworkInsightsAnalysisIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  if (input.AnalysisStartTime !== undefined && input.AnalysisStartTime !== null) {
    entries["AnalysisStartTime"] = input.AnalysisStartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.AnalysisEndTime !== undefined && input.AnalysisEndTime !== null) {
    entries["AnalysisEndTime"] = input.AnalysisEndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkInsightsPathsRequest = (
  input: DescribeNetworkInsightsPathsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsPathIds !== undefined && input.NetworkInsightsPathIds !== null) {
    const memberEntries = serializeAws_ec2NetworkInsightsPathIdList(input.NetworkInsightsPathIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkInterfaceAttributeRequest = (
  input: DescribeNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkInterfacePermissionsRequest = (
  input: DescribeNetworkInterfacePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfacePermissionIds !== undefined && input.NetworkInterfacePermissionIds !== null) {
    const memberEntries = serializeAws_ec2NetworkInterfacePermissionIdList(
      input.NetworkInterfacePermissionIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeNetworkInterfacesRequest = (
  input: DescribeNetworkInterfacesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2NetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribePlacementGroupsRequest = (
  input: DescribePlacementGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupNames !== undefined && input.GroupNames !== null) {
    const memberEntries = serializeAws_ec2PlacementGroupStringList(input.GroupNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupIds !== undefined && input.GroupIds !== null) {
    const memberEntries = serializeAws_ec2PlacementGroupIdStringList(input.GroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribePrefixListsRequest = (
  input: DescribePrefixListsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
    const memberEntries = serializeAws_ec2PrefixListResourceIdStringList(input.PrefixListIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribePrincipalIdFormatRequest = (
  input: DescribePrincipalIdFormatRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources !== undefined && input.Resources !== null) {
    const memberEntries = serializeAws_ec2ResourceList(input.Resources, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribePublicIpv4PoolsRequest = (
  input: DescribePublicIpv4PoolsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PoolIds !== undefined && input.PoolIds !== null) {
    const memberEntries = serializeAws_ec2PublicIpv4PoolIdStringList(input.PoolIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeRegionsRequest = (input: DescribeRegionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RegionNames !== undefined && input.RegionNames !== null) {
    const memberEntries = serializeAws_ec2RegionNameStringList(input.RegionNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.AllRegions !== undefined && input.AllRegions !== null) {
    entries["AllRegions"] = input.AllRegions;
  }
  return entries;
};

const serializeAws_ec2DescribeReservedInstancesListingsRequest = (
  input: DescribeReservedInstancesListingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesId !== undefined && input.ReservedInstancesId !== null) {
    entries["ReservedInstancesId"] = input.ReservedInstancesId;
  }
  if (input.ReservedInstancesListingId !== undefined && input.ReservedInstancesListingId !== null) {
    entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
  }
  return entries;
};

const serializeAws_ec2DescribeReservedInstancesModificationsRequest = (
  input: DescribeReservedInstancesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesModificationIds !== undefined && input.ReservedInstancesModificationIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstancesModificationIdStringList(
      input.ReservedInstancesModificationIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeReservedInstancesOfferingsRequest = (
  input: DescribeReservedInstancesOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IncludeMarketplace !== undefined && input.IncludeMarketplace !== null) {
    entries["IncludeMarketplace"] = input.IncludeMarketplace;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.MaxDuration !== undefined && input.MaxDuration !== null) {
    entries["MaxDuration"] = input.MaxDuration;
  }
  if (input.MaxInstanceCount !== undefined && input.MaxInstanceCount !== null) {
    entries["MaxInstanceCount"] = input.MaxInstanceCount;
  }
  if (input.MinDuration !== undefined && input.MinDuration !== null) {
    entries["MinDuration"] = input.MinDuration;
  }
  if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
    entries["OfferingClass"] = input.OfferingClass;
  }
  if (input.ProductDescription !== undefined && input.ProductDescription !== null) {
    entries["ProductDescription"] = input.ProductDescription;
  }
  if (input.ReservedInstancesOfferingIds !== undefined && input.ReservedInstancesOfferingIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstancesOfferingIdStringList(
      input.ReservedInstancesOfferingIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OfferingType !== undefined && input.OfferingType !== null) {
    entries["OfferingType"] = input.OfferingType;
  }
  return entries;
};

const serializeAws_ec2DescribeReservedInstancesRequest = (
  input: DescribeReservedInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OfferingClass !== undefined && input.OfferingClass !== null) {
    entries["OfferingClass"] = input.OfferingClass;
  }
  if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.OfferingType !== undefined && input.OfferingType !== null) {
    entries["OfferingType"] = input.OfferingType;
  }
  return entries;
};

const serializeAws_ec2DescribeRouteTablesRequest = (
  input: DescribeRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableIds !== undefined && input.RouteTableIds !== null) {
    const memberEntries = serializeAws_ec2RouteTableIdStringList(input.RouteTableIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest = (
  input: DescribeScheduledInstanceAvailabilityRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FirstSlotStartTimeRange !== undefined && input.FirstSlotStartTimeRange !== null) {
    const memberEntries = serializeAws_ec2SlotDateTimeRangeRequest(input.FirstSlotStartTimeRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FirstSlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.MaxSlotDurationInHours !== undefined && input.MaxSlotDurationInHours !== null) {
    entries["MaxSlotDurationInHours"] = input.MaxSlotDurationInHours;
  }
  if (input.MinSlotDurationInHours !== undefined && input.MinSlotDurationInHours !== null) {
    entries["MinSlotDurationInHours"] = input.MinSlotDurationInHours;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Recurrence !== undefined && input.Recurrence !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstanceRecurrenceRequest(input.Recurrence, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Recurrence.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeScheduledInstancesRequest = (
  input: DescribeScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.ScheduledInstanceIds !== undefined && input.ScheduledInstanceIds !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstanceIdRequestSet(input.ScheduledInstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SlotStartTimeRange !== undefined && input.SlotStartTimeRange !== null) {
    const memberEntries = serializeAws_ec2SlotStartTimeRangeRequest(input.SlotStartTimeRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeSecurityGroupReferencesRequest = (
  input: DescribeSecurityGroupReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    const memberEntries = serializeAws_ec2GroupIds(input.GroupId, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeSecurityGroupsRequest = (
  input: DescribeSecurityGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupIds !== undefined && input.GroupIds !== null) {
    const memberEntries = serializeAws_ec2GroupIdStringList(input.GroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames !== undefined && input.GroupNames !== null) {
    const memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeSnapshotAttributeRequest = (
  input: DescribeSnapshotAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeSnapshotsRequest = (input: DescribeSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OwnerIds !== undefined && input.OwnerIds !== null) {
    const memberEntries = serializeAws_ec2OwnerStringList(input.OwnerIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RestorableByUserIds !== undefined && input.RestorableByUserIds !== null) {
    const memberEntries = serializeAws_ec2RestorableByStringList(input.RestorableByUserIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SnapshotIds !== undefined && input.SnapshotIds !== null) {
    const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SnapshotIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest = (
  input: DescribeSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeSpotFleetInstancesRequest = (
  input: DescribeSpotFleetInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  return entries;
};

const serializeAws_ec2DescribeSpotFleetRequestHistoryRequest = (
  input: DescribeSpotFleetRequestHistoryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EventType !== undefined && input.EventType !== null) {
    entries["EventType"] = input.EventType;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  if (input.StartTime !== undefined && input.StartTime !== null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2DescribeSpotFleetRequestsRequest = (
  input: DescribeSpotFleetRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestIds !== undefined && input.SpotFleetRequestIds !== null) {
    const memberEntries = serializeAws_ec2SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeSpotInstanceRequestsRequest = (
  input: DescribeSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotInstanceRequestIds !== undefined && input.SpotInstanceRequestIds !== null) {
    const memberEntries = serializeAws_ec2SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeSpotPriceHistoryRequest = (
  input: DescribeSpotPriceHistoryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EndTime !== undefined && input.EndTime !== null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceTypes !== undefined && input.InstanceTypes !== null) {
    const memberEntries = serializeAws_ec2InstanceTypeList(input.InstanceTypes, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.ProductDescriptions !== undefined && input.ProductDescriptions !== null) {
    const memberEntries = serializeAws_ec2ProductDescriptionList(input.ProductDescriptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartTime !== undefined && input.StartTime !== null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2DescribeStaleSecurityGroupsRequest = (
  input: DescribeStaleSecurityGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2DescribeSubnetsRequest = (input: DescribeSubnetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2SubnetIdStringList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeTagsRequest = (input: DescribeTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeTrafficMirrorFiltersRequest = (
  input: DescribeTrafficMirrorFiltersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterIds !== undefined && input.TrafficMirrorFilterIds !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorFilterIdList(input.TrafficMirrorFilterIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeTrafficMirrorSessionsRequest = (
  input: DescribeTrafficMirrorSessionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionIds !== undefined && input.TrafficMirrorSessionIds !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorSessionIdList(input.TrafficMirrorSessionIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeTrafficMirrorTargetsRequest = (
  input: DescribeTrafficMirrorTargetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorTargetIds !== undefined && input.TrafficMirrorTargetIds !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorTargetIdList(input.TrafficMirrorTargetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayAttachmentsRequest = (
  input: DescribeTransitGatewayAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(
      input.TransitGatewayAttachmentIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayConnectPeersRequest = (
  input: DescribeTransitGatewayConnectPeersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayConnectPeerIds !== undefined && input.TransitGatewayConnectPeerIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayConnectPeerIdStringList(
      input.TransitGatewayConnectPeerIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayConnectsRequest = (
  input: DescribeTransitGatewayConnectsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(
      input.TransitGatewayAttachmentIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest = (
  input: DescribeTransitGatewayMulticastDomainsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainIds !== undefined && input.TransitGatewayMulticastDomainIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayMulticastDomainIdStringList(
      input.TransitGatewayMulticastDomainIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest = (
  input: DescribeTransitGatewayPeeringAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(
      input.TransitGatewayAttachmentIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayRouteTablesRequest = (
  input: DescribeTransitGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableIds !== undefined && input.TransitGatewayRouteTableIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayRouteTableIdStringList(
      input.TransitGatewayRouteTableIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewaysRequest = (
  input: DescribeTransitGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayIds !== undefined && input.TransitGatewayIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayIdStringList(input.TransitGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest = (
  input: DescribeTransitGatewayVpcAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds !== undefined && input.TransitGatewayAttachmentIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayAttachmentIdStringList(
      input.TransitGatewayAttachmentIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeVolumeAttributeRequest = (
  input: DescribeVolumeAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeVolumesModificationsRequest = (
  input: DescribeVolumesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
    const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeVolumesRequest = (input: DescribeVolumesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
    const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVolumeStatusRequest = (
  input: DescribeVolumeStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VolumeIds !== undefined && input.VolumeIds !== null) {
    const memberEntries = serializeAws_ec2VolumeIdStringList(input.VolumeIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcAttributeRequest = (
  input: DescribeVpcAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest = (
  input: DescribeVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VpcIds !== undefined && input.VpcIds !== null) {
    const memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeVpcClassicLinkRequest = (
  input: DescribeVpcClassicLinkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcIds !== undefined && input.VpcIds !== null) {
    const memberEntries = serializeAws_ec2VpcClassicLinkIdList(input.VpcIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest = (
  input: DescribeVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
    entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointConnectionsRequest = (
  input: DescribeVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest = (
  input: DescribeVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceIds !== undefined && input.ServiceIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointServiceIdList(input.ServiceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest = (
  input: DescribeVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointServicesRequest = (
  input: DescribeVpcEndpointServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceNames !== undefined && input.ServiceNames !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.ServiceNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcEndpointsRequest = (
  input: DescribeVpcEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcPeeringConnectionsRequest = (
  input: DescribeVpcPeeringConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionIds !== undefined && input.VpcPeeringConnectionIds !== null) {
    const memberEntries = serializeAws_ec2VpcPeeringConnectionIdList(input.VpcPeeringConnectionIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeVpcsRequest = (input: DescribeVpcsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcIds !== undefined && input.VpcIds !== null) {
    const memberEntries = serializeAws_ec2VpcIdStringList(input.VpcIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

const serializeAws_ec2DescribeVpnConnectionsRequest = (
  input: DescribeVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnConnectionIds !== undefined && input.VpnConnectionIds !== null) {
    const memberEntries = serializeAws_ec2VpnConnectionIdStringList(input.VpnConnectionIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DescribeVpnGatewaysRequest = (
  input: DescribeVpnGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnGatewayIds !== undefined && input.VpnGatewayIds !== null) {
    const memberEntries = serializeAws_ec2VpnGatewayIdStringList(input.VpnGatewayIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DetachClassicLinkVpcRequest = (
  input: DetachClassicLinkVpcRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2DetachInternetGatewayRequest = (
  input: DetachInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId !== undefined && input.InternetGatewayId !== null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2DetachNetworkInterfaceRequest = (
  input: DetachNetworkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
    entries["AttachmentId"] = input.AttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Force !== undefined && input.Force !== null) {
    entries["Force"] = input.Force;
  }
  return entries;
};

const serializeAws_ec2DetachVolumeRequest = (input: DetachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Device !== undefined && input.Device !== null) {
    entries["Device"] = input.Device;
  }
  if (input.Force !== undefined && input.Force !== null) {
    entries["Force"] = input.Force;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DetachVpnGatewayRequest = (input: DetachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DhcpOptionsIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`DhcpOptionsId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2DirectoryServiceAuthenticationRequest = (
  input: DirectoryServiceAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DirectoryId !== undefined && input.DirectoryId !== null) {
    entries["DirectoryId"] = input.DirectoryId;
  }
  return entries;
};

const serializeAws_ec2DisableEbsEncryptionByDefaultRequest = (
  input: DisableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisableFastSnapshotRestoresRequest = (
  input: DisableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
    const memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
    const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest = (
  input: DisableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisableVgwRoutePropagationRequest = (
  input: DisableVgwRoutePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GatewayId !== undefined && input.GatewayId !== null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest = (
  input: DisableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2DisableVpcClassicLinkRequest = (
  input: DisableVpcClassicLinkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2DisassociateAddressRequest = (
  input: DisassociateAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateClientVpnTargetNetworkRequest = (
  input: DisassociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest = (
  input: DisassociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.RoleArn !== undefined && input.RoleArn !== null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateIamInstanceProfileRequest = (
  input: DisassociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

const serializeAws_ec2DisassociateRouteTableRequest = (
  input: DisassociateRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateSubnetCidrBlockRequest = (
  input: DisassociateSubnetCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

const serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest = (
  input: DisassociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateTransitGatewayRouteTableRequest = (
  input: DisassociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2DisassociateVpcCidrBlockRequest = (
  input: DisassociateVpcCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

const serializeAws_ec2DiskImage = (input: DiskImage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Image !== undefined && input.Image !== null) {
    const memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Volume !== undefined && input.Volume !== null) {
    const memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2DiskImageDetail = (input: DiskImageDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Bytes !== undefined && input.Bytes !== null) {
    entries["Bytes"] = input.Bytes;
  }
  if (input.Format !== undefined && input.Format !== null) {
    entries["Format"] = input.Format;
  }
  if (input.ImportManifestUrl !== undefined && input.ImportManifestUrl !== null) {
    entries["ImportManifestUrl"] = input.ImportManifestUrl;
  }
  return entries;
};

const serializeAws_ec2DiskImageList = (input: DiskImage[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2DiskImage(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2DnsServersOptionsModifyStructure = (
  input: DnsServersOptionsModifyStructure,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CustomDnsServers !== undefined && input.CustomDnsServers !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.CustomDnsServers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2EbsBlockDevice = (input: EbsBlockDevice, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Iops !== undefined && input.Iops !== null) {
    entries["Iops"] = input.Iops;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType !== undefined && input.VolumeType !== null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.Throughput !== undefined && input.Throughput !== null) {
    entries["Throughput"] = input.Throughput;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  return entries;
};

const serializeAws_ec2EbsInstanceBlockDeviceSpecification = (
  input: EbsInstanceBlockDeviceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  return entries;
};

const serializeAws_ec2EgressOnlyInternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ElasticGpuIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ElasticGpuSpecification = (input: ElasticGpuSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  return entries;
};

const serializeAws_ec2ElasticGpuSpecificationList = (
  input: ElasticGpuSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ElasticGpuSpecifications = (input: ElasticGpuSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ElasticInferenceAccelerator = (
  input: ElasticInferenceAccelerator,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.Count !== undefined && input.Count !== null) {
    entries["Count"] = input.Count;
  }
  return entries;
};

const serializeAws_ec2ElasticInferenceAccelerators = (
  input: ElasticInferenceAccelerator[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2EnableEbsEncryptionByDefaultRequest = (
  input: EnableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2EnableFastSnapshotRestoresRequest = (
  input: EnableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZones !== undefined && input.AvailabilityZones !== null) {
    const memberEntries = serializeAws_ec2AvailabilityZoneStringList(input.AvailabilityZones, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourceSnapshotIds !== undefined && input.SourceSnapshotIds !== null) {
    const memberEntries = serializeAws_ec2SnapshotIdStringList(input.SourceSnapshotIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest = (
  input: EnableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2EnableVgwRoutePropagationRequest = (
  input: EnableVgwRoutePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GatewayId !== undefined && input.GatewayId !== null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2EnableVolumeIORequest = (input: EnableVolumeIORequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  return entries;
};

const serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest = (
  input: EnableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2EnableVpcClassicLinkRequest = (
  input: EnableVpcClassicLinkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2EnclaveOptionsRequest = (input: EnclaveOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2ExecutableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExecutableBy.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest = (
  input: ExportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ExportClientVpnClientConfigurationRequest = (
  input: ExportClientVpnClientConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ExportImageRequest = (input: ExportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
    entries["DiskImageFormat"] = input.DiskImageFormat;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.S3ExportLocation !== undefined && input.S3ExportLocation !== null) {
    const memberEntries = serializeAws_ec2ExportTaskS3LocationRequest(input.S3ExportLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ExportLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RoleName !== undefined && input.RoleName !== null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ExportImageTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportImageTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ExportTaskIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ExportTaskS3LocationRequest = (
  input: ExportTaskS3LocationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
    entries["S3Prefix"] = input.S3Prefix;
  }
  return entries;
};

const serializeAws_ec2ExportToS3TaskSpecification = (
  input: ExportToS3TaskSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ContainerFormat !== undefined && input.ContainerFormat !== null) {
    entries["ContainerFormat"] = input.ContainerFormat;
  }
  if (input.DiskImageFormat !== undefined && input.DiskImageFormat !== null) {
    entries["DiskImageFormat"] = input.DiskImageFormat;
  }
  if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Prefix !== undefined && input.S3Prefix !== null) {
    entries["S3Prefix"] = input.S3Prefix;
  }
  return entries;
};

const serializeAws_ec2ExportTransitGatewayRoutesRequest = (
  input: ExportTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2FederatedAuthenticationRequest = (
  input: FederatedAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SAMLProviderArn !== undefined && input.SAMLProviderArn !== null) {
    entries["SAMLProviderArn"] = input.SAMLProviderArn;
  }
  if (input.SelfServiceSAMLProviderArn !== undefined && input.SelfServiceSAMLProviderArn !== null) {
    entries["SelfServiceSAMLProviderArn"] = input.SelfServiceSAMLProviderArn;
  }
  return entries;
};

const serializeAws_ec2Filter = (input: Filter, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.Values !== undefined && input.Values !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2FilterList = (input: Filter[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Filter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2FleetIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateConfigListRequest = (
  input: FleetLaunchTemplateConfigRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateConfigRequest = (
  input: FleetLaunchTemplateConfigRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
    const memberEntries = serializeAws_ec2FleetLaunchTemplateSpecificationRequest(
      input.LaunchTemplateSpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Overrides !== undefined && input.Overrides !== null) {
    const memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesListRequest(input.Overrides, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateOverridesListRequest = (
  input: FleetLaunchTemplateOverridesRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2FleetLaunchTemplateOverridesRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateOverridesRequest = (
  input: FleetLaunchTemplateOverridesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
    entries["WeightedCapacity"] = input.WeightedCapacity;
  }
  if (input.Priority !== undefined && input.Priority !== null) {
    entries["Priority"] = input.Priority;
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateSpecification = (
  input: FleetLaunchTemplateSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version !== undefined && input.Version !== null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

const serializeAws_ec2FleetLaunchTemplateSpecificationRequest = (
  input: FleetLaunchTemplateSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version !== undefined && input.Version !== null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

const serializeAws_ec2FleetSpotCapacityRebalanceRequest = (
  input: FleetSpotCapacityRebalanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
    entries["ReplacementStrategy"] = input.ReplacementStrategy;
  }
  return entries;
};

const serializeAws_ec2FleetSpotMaintenanceStrategiesRequest = (
  input: FleetSpotMaintenanceStrategiesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
    const memberEntries = serializeAws_ec2FleetSpotCapacityRebalanceRequest(input.CapacityRebalance, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2FlowLogIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2FlowLogResourceIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2FpgaImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest = (
  input: GetAssociatedEnclaveCertificateIamRolesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn !== undefined && input.CertificateArn !== null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest = (
  input: GetAssociatedIpv6PoolCidrsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PoolId !== undefined && input.PoolId !== null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetCapacityReservationUsageRequest = (
  input: GetCapacityReservationUsageRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetCoipPoolUsageRequest = (input: GetCoipPoolUsageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolId !== undefined && input.PoolId !== null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetConsoleOutputRequest = (input: GetConsoleOutputRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Latest !== undefined && input.Latest !== null) {
    entries["Latest"] = input.Latest;
  }
  return entries;
};

const serializeAws_ec2GetConsoleScreenshotRequest = (
  input: GetConsoleScreenshotRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.WakeUp !== undefined && input.WakeUp !== null) {
    entries["WakeUp"] = input.WakeUp;
  }
  return entries;
};

const serializeAws_ec2GetDefaultCreditSpecificationRequest = (
  input: GetDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  return entries;
};

const serializeAws_ec2GetEbsDefaultKmsKeyIdRequest = (
  input: GetEbsDefaultKmsKeyIdRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetEbsEncryptionByDefaultRequest = (
  input: GetEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetGroupsForCapacityReservationRequest = (
  input: GetGroupsForCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetHostReservationPurchasePreviewRequest = (
  input: GetHostReservationPurchasePreviewRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
    const memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OfferingId !== undefined && input.OfferingId !== null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

const serializeAws_ec2GetLaunchTemplateDataRequest = (
  input: GetLaunchTemplateDataRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

const serializeAws_ec2GetManagedPrefixListAssociationsRequest = (
  input: GetManagedPrefixListAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2GetManagedPrefixListEntriesRequest = (
  input: GetManagedPrefixListEntriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TargetVersion !== undefined && input.TargetVersion !== null) {
    entries["TargetVersion"] = input.TargetVersion;
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

const serializeAws_ec2GetPasswordDataRequest = (input: GetPasswordDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetReservedInstancesExchangeQuoteRequest = (
  input: GetReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstanceIds !== undefined && input.ReservedInstanceIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstanceIdSet(input.ReservedInstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
    const memberEntries = serializeAws_ec2TargetConfigurationRequestSet(input.TargetConfigurations, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest = (
  input: GetTransitGatewayAttachmentPropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest = (
  input: GetTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest = (
  input: GetTransitGatewayPrefixListReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest = (
  input: GetTransitGatewayRouteTableAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest = (
  input: GetTransitGatewayRouteTablePropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2GroupIdentifier = (input: GroupIdentifier, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  return entries;
};

const serializeAws_ec2GroupIdentifierList = (input: GroupIdentifier[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2GroupIdentifier(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2GroupIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2GroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2GroupNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2HibernationOptionsRequest = (input: HibernationOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Configured !== undefined && input.Configured !== null) {
    entries["Configured"] = input.Configured;
  }
  return entries;
};

const serializeAws_ec2HostReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2IamInstanceProfileSpecification = (
  input: IamInstanceProfileSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Arn !== undefined && input.Arn !== null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

const serializeAws_ec2IcmpTypeCode = (input: IcmpTypeCode, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Code !== undefined && input.Code !== null) {
    entries["Code"] = input.Code;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  return entries;
};

const serializeAws_ec2IKEVersionsRequestList = (input: IKEVersionsRequestListValue[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2IKEVersionsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2IKEVersionsRequestListValue = (
  input: IKEVersionsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2ImageDiskContainer = (input: ImageDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Format !== undefined && input.Format !== null) {
    entries["Format"] = input.Format;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.Url !== undefined && input.Url !== null) {
    entries["Url"] = input.Url;
  }
  if (input.UserBucket !== undefined && input.UserBucket !== null) {
    const memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ImageDiskContainerList = (input: ImageDiskContainer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ImageDiskContainer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ImageIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest = (
  input: ImportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.CertificateRevocationList !== undefined && input.CertificateRevocationList !== null) {
    entries["CertificateRevocationList"] = input.CertificateRevocationList;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ImportImageLicenseConfigurationRequest = (
  input: ImportImageLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

const serializeAws_ec2ImportImageLicenseSpecificationListRequest = (
  input: ImportImageLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ImportImageLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ImportImageRequest = (input: ImportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Architecture !== undefined && input.Architecture !== null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.ClientData !== undefined && input.ClientData !== null) {
    const memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskContainers !== undefined && input.DiskContainers !== null) {
    const memberEntries = serializeAws_ec2ImageDiskContainerList(input.DiskContainers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Hypervisor !== undefined && input.Hypervisor !== null) {
    entries["Hypervisor"] = input.Hypervisor;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.LicenseType !== undefined && input.LicenseType !== null) {
    entries["LicenseType"] = input.LicenseType;
  }
  if (input.Platform !== undefined && input.Platform !== null) {
    entries["Platform"] = input.Platform;
  }
  if (input.RoleName !== undefined && input.RoleName !== null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
    const memberEntries = serializeAws_ec2ImportImageLicenseSpecificationListRequest(
      input.LicenseSpecifications,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ImportInstanceLaunchSpecification = (
  input: ImportInstanceLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.Architecture !== undefined && input.Architecture !== null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.GroupIds !== undefined && input.GroupIds !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.GroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames !== undefined && input.GroupNames !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupStringList(input.GroupNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    entries["Monitoring"] = input.Monitoring;
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    const memberEntries = serializeAws_ec2UserData(input.UserData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ImportInstanceRequest = (input: ImportInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskImages !== undefined && input.DiskImages !== null) {
    const memberEntries = serializeAws_ec2DiskImageList(input.DiskImages, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
    const memberEntries = serializeAws_ec2ImportInstanceLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Platform !== undefined && input.Platform !== null) {
    entries["Platform"] = input.Platform;
  }
  return entries;
};

const serializeAws_ec2ImportKeyPairRequest = (input: ImportKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.PublicKeyMaterial !== undefined && input.PublicKeyMaterial !== null) {
    entries["PublicKeyMaterial"] = context.base64Encoder(input.PublicKeyMaterial);
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ImportSnapshotRequest = (input: ImportSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientData !== undefined && input.ClientData !== null) {
    const memberEntries = serializeAws_ec2ClientData(input.ClientData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskContainer !== undefined && input.DiskContainer !== null) {
    const memberEntries = serializeAws_ec2SnapshotDiskContainer(input.DiskContainer, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.RoleName !== undefined && input.RoleName !== null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ImportSnapshotTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ImportTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ImportVolumeRequest = (input: ImportVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Image !== undefined && input.Image !== null) {
    const memberEntries = serializeAws_ec2DiskImageDetail(input.Image, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Volume !== undefined && input.Volume !== null) {
    const memberEntries = serializeAws_ec2VolumeDetail(input.Volume, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2InsideCidrBlocksStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceBlockDeviceMappingSpecification = (
  input: InstanceBlockDeviceMappingSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Ebs !== undefined && input.Ebs !== null) {
    const memberEntries = serializeAws_ec2EbsInstanceBlockDeviceSpecification(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice !== undefined && input.NoDevice !== null) {
    entries["NoDevice"] = input.NoDevice;
  }
  if (input.VirtualName !== undefined && input.VirtualName !== null) {
    entries["VirtualName"] = input.VirtualName;
  }
  return entries;
};

const serializeAws_ec2InstanceBlockDeviceMappingSpecificationList = (
  input: InstanceBlockDeviceMappingSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceCreditSpecificationListRequest = (
  input: InstanceCreditSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2InstanceCreditSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceCreditSpecificationRequest = (
  input: InstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

const serializeAws_ec2InstanceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceIpv6Address = (input: InstanceIpv6Address, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  return entries;
};

const serializeAws_ec2InstanceIpv6AddressList = (input: InstanceIpv6Address[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2InstanceIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceIpv6AddressListRequest = (
  input: InstanceIpv6AddressRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2InstanceIpv6AddressRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceIpv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceIpv6AddressRequest = (
  input: InstanceIpv6AddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  return entries;
};

const serializeAws_ec2InstanceMarketOptionsRequest = (
  input: InstanceMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MarketType !== undefined && input.MarketType !== null) {
    entries["MarketType"] = input.MarketType;
  }
  if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
    const memberEntries = serializeAws_ec2SpotMarketOptions(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2InstanceMetadataOptionsRequest = (
  input: InstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  return entries;
};

const serializeAws_ec2InstanceNetworkInterfaceSpecification = (
  input: InstanceNetworkInterfaceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
    entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
  }
  if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  return entries;
};

const serializeAws_ec2InstanceNetworkInterfaceSpecificationList = (
  input: InstanceNetworkInterfaceSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceSpecification = (input: InstanceSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.ExcludeBootVolume !== undefined && input.ExcludeBootVolume !== null) {
    entries["ExcludeBootVolume"] = input.ExcludeBootVolume;
  }
  return entries;
};

const serializeAws_ec2InstanceTagKeySet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2InstanceTypeList = (input: (_InstanceType | string)[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2InternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2IpPermission = (input: IpPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.IpRanges !== undefined && input.IpRanges !== null) {
    const memberEntries = serializeAws_ec2IpRangeList(input.IpRanges, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6Ranges !== undefined && input.Ipv6Ranges !== null) {
    const memberEntries = serializeAws_ec2Ipv6RangeList(input.Ipv6Ranges, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrefixListIds !== undefined && input.PrefixListIds !== null) {
    const memberEntries = serializeAws_ec2PrefixListIdList(input.PrefixListIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.UserIdGroupPairs !== undefined && input.UserIdGroupPairs !== null) {
    const memberEntries = serializeAws_ec2UserIdGroupPairList(input.UserIdGroupPairs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2IpPermissionList = (input: IpPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2IpPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2IpRange = (input: IpRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrIp !== undefined && input.CidrIp !== null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

const serializeAws_ec2IpRangeList = (input: IpRange[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2IpRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Ipv6AddressList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2Ipv6PoolIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2Ipv6Range = (input: Ipv6Range, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrIpv6 !== undefined && input.CidrIpv6 !== null) {
    entries["CidrIpv6"] = input.CidrIpv6;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

const serializeAws_ec2Ipv6RangeList = (input: Ipv6Range[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Ipv6Range(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2KeyNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2KeyPairIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyPairId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchPermission = (input: LaunchPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group !== undefined && input.Group !== null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId !== undefined && input.UserId !== null) {
    entries["UserId"] = input.UserId;
  }
  return entries;
};

const serializeAws_ec2LaunchPermissionList = (input: LaunchPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchPermissionModifications = (
  input: LaunchPermissionModifications,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Add !== undefined && input.Add !== null) {
    const memberEntries = serializeAws_ec2LaunchPermissionList(input.Add, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove !== undefined && input.Remove !== null) {
    const memberEntries = serializeAws_ec2LaunchPermissionList(input.Remove, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LaunchSpecsList = (input: SpotFleetLaunchSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2SpotFleetLaunchSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest = (
  input: LaunchTemplateBlockDeviceMappingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.VirtualName !== undefined && input.VirtualName !== null) {
    entries["VirtualName"] = input.VirtualName;
  }
  if (input.Ebs !== undefined && input.Ebs !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice !== undefined && input.NoDevice !== null) {
    entries["NoDevice"] = input.NoDevice;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList = (
  input: LaunchTemplateBlockDeviceMappingRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest = (
  input: LaunchTemplateCapacityReservationSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationPreference !== undefined && input.CapacityReservationPreference !== null) {
    entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
  }
  if (input.CapacityReservationTarget !== undefined && input.CapacityReservationTarget !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationTarget(input.CapacityReservationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateConfig = (input: LaunchTemplateConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LaunchTemplateSpecification !== undefined && input.LaunchTemplateSpecification !== null) {
    const memberEntries = serializeAws_ec2FleetLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Overrides !== undefined && input.Overrides !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateOverridesList(input.Overrides, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateConfigList = (input: LaunchTemplateConfig[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateCpuOptionsRequest = (
  input: LaunchTemplateCpuOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CoreCount !== undefined && input.CoreCount !== null) {
    entries["CoreCount"] = input.CoreCount;
  }
  if (input.ThreadsPerCore !== undefined && input.ThreadsPerCore !== null) {
    entries["ThreadsPerCore"] = input.ThreadsPerCore;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest = (
  input: LaunchTemplateEbsBlockDeviceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Iops !== undefined && input.Iops !== null) {
    entries["Iops"] = input.Iops;
  }
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType !== undefined && input.VolumeType !== null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.Throughput !== undefined && input.Throughput !== null) {
    entries["Throughput"] = input.Throughput;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateElasticInferenceAccelerator = (
  input: LaunchTemplateElasticInferenceAccelerator,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.Count !== undefined && input.Count !== null) {
    entries["Count"] = input.Count;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList = (
  input: LaunchTemplateElasticInferenceAccelerator[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateEnclaveOptionsRequest = (
  input: LaunchTemplateEnclaveOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateHibernationOptionsRequest = (
  input: LaunchTemplateHibernationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Configured !== undefined && input.Configured !== null) {
    entries["Configured"] = input.Configured;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest = (
  input: LaunchTemplateIamInstanceProfileSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Arn !== undefined && input.Arn !== null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest = (
  input: LaunchTemplateInstanceMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MarketType !== undefined && input.MarketType !== null) {
    entries["MarketType"] = input.MarketType;
  }
  if (input.SpotOptions !== undefined && input.SpotOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest = (
  input: LaunchTemplateInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociateCarrierIpAddress !== undefined && input.AssociateCarrierIpAddress !== null) {
    entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
  }
  if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InterfaceType !== undefined && input.InterfaceType !== null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2InstanceIpv6AddressListRequest(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.NetworkCardIndex !== undefined && input.NetworkCardIndex !== null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateLicenseConfigurationRequest = (
  input: LaunchTemplateLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest = (
  input: LaunchTemplateLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateOverrides = (input: LaunchTemplateOverrides, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
    entries["WeightedCapacity"] = input.WeightedCapacity;
  }
  if (input.Priority !== undefined && input.Priority !== null) {
    entries["Priority"] = input.Priority;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateOverridesList = (
  input: LaunchTemplateOverrides[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateOverrides(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplatePlacementRequest = (
  input: LaunchTemplatePlacementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Affinity !== undefined && input.Affinity !== null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.HostId !== undefined && input.HostId !== null) {
    entries["HostId"] = input.HostId;
  }
  if (input.Tenancy !== undefined && input.Tenancy !== null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
    entries["SpreadDomain"] = input.SpreadDomain;
  }
  if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplatesMonitoringRequest = (
  input: LaunchTemplatesMonitoringRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateSpecification = (
  input: LaunchTemplateSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version !== undefined && input.Version !== null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest = (
  input: LaunchTemplateSpotMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
    entries["SpotInstanceType"] = input.SpotInstanceType;
  }
  if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateTagSpecificationRequest = (
  input: LaunchTemplateTagSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ResourceType !== undefined && input.ResourceType !== null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags !== undefined && input.Tags !== null) {
    const memberEntries = serializeAws_ec2TagList(input.Tags, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LaunchTemplateTagSpecificationRequestList = (
  input: LaunchTemplateTagSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LicenseConfigurationRequest = (
  input: LicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn !== undefined && input.LicenseConfigurationArn !== null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

const serializeAws_ec2LicenseSpecificationListRequest = (
  input: LicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LoadBalancersConfig = (input: LoadBalancersConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClassicLoadBalancersConfig !== undefined && input.ClassicLoadBalancersConfig !== null) {
    const memberEntries = serializeAws_ec2ClassicLoadBalancersConfig(input.ClassicLoadBalancersConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TargetGroupsConfig !== undefined && input.TargetGroupsConfig !== null) {
    const memberEntries = serializeAws_ec2TargetGroupsConfig(input.TargetGroupsConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupsConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LoadPermissionListRequest = (input: LoadPermissionRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2LoadPermissionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2LoadPermissionModifications = (
  input: LoadPermissionModifications,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Add !== undefined && input.Add !== null) {
    const memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Add, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove !== undefined && input.Remove !== null) {
    const memberEntries = serializeAws_ec2LoadPermissionListRequest(input.Remove, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2LoadPermissionRequest = (input: LoadPermissionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group !== undefined && input.Group !== null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId !== undefined && input.UserId !== null) {
    entries["UserId"] = input.UserId;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayRouteTableIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (
  input: string[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2LocalGatewayVirtualInterfaceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ModifyAvailabilityZoneGroupRequest = (
  input: ModifyAvailabilityZoneGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.OptInStatus !== undefined && input.OptInStatus !== null) {
    entries["OptInStatus"] = input.OptInStatus;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyCapacityReservationRequest = (
  input: ModifyCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId !== undefined && input.CapacityReservationId !== null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.EndDate !== undefined && input.EndDate !== null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.EndDateType !== undefined && input.EndDateType !== null) {
    entries["EndDateType"] = input.EndDateType;
  }
  if (input.Accept !== undefined && input.Accept !== null) {
    entries["Accept"] = input.Accept;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyClientVpnEndpointRequest = (
  input: ModifyClientVpnEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.ServerCertificateArn !== undefined && input.ServerCertificateArn !== null) {
    entries["ServerCertificateArn"] = input.ServerCertificateArn;
  }
  if (input.ConnectionLogOptions !== undefined && input.ConnectionLogOptions !== null) {
    const memberEntries = serializeAws_ec2ConnectionLogOptions(input.ConnectionLogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DnsServers !== undefined && input.DnsServers !== null) {
    const memberEntries = serializeAws_ec2DnsServersOptionsModifyStructure(input.DnsServers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpnPort !== undefined && input.VpnPort !== null) {
    entries["VpnPort"] = input.VpnPort;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.SplitTunnel !== undefined && input.SplitTunnel !== null) {
    entries["SplitTunnel"] = input.SplitTunnel;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SelfServicePortal !== undefined && input.SelfServicePortal !== null) {
    entries["SelfServicePortal"] = input.SelfServicePortal;
  }
  if (input.ClientConnectOptions !== undefined && input.ClientConnectOptions !== null) {
    const memberEntries = serializeAws_ec2ClientConnectOptions(input.ClientConnectOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyDefaultCreditSpecificationRequest = (
  input: ModifyDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  if (input.CpuCredits !== undefined && input.CpuCredits !== null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

const serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest = (
  input: ModifyEbsDefaultKmsKeyIdRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.KmsKeyId !== undefined && input.KmsKeyId !== null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyFleetRequest = (input: ModifyFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
    const memberEntries = serializeAws_ec2FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FleetId !== undefined && input.FleetId !== null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.TargetCapacitySpecification !== undefined && input.TargetCapacitySpecification !== null) {
    const memberEntries = serializeAws_ec2TargetCapacitySpecificationRequest(
      input.TargetCapacitySpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyFpgaImageAttributeRequest = (
  input: ModifyFpgaImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.OperationType !== undefined && input.OperationType !== null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.UserIds !== undefined && input.UserIds !== null) {
    const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserGroups !== undefined && input.UserGroups !== null) {
    const memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
    const memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LoadPermission !== undefined && input.LoadPermission !== null) {
    const memberEntries = serializeAws_ec2LoadPermissionModifications(input.LoadPermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

const serializeAws_ec2ModifyHostsRequest = (input: ModifyHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AutoPlacement !== undefined && input.AutoPlacement !== null) {
    entries["AutoPlacement"] = input.AutoPlacement;
  }
  if (input.HostIds !== undefined && input.HostIds !== null) {
    const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostRecovery !== undefined && input.HostRecovery !== null) {
    entries["HostRecovery"] = input.HostRecovery;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstanceFamily !== undefined && input.InstanceFamily !== null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  return entries;
};

const serializeAws_ec2ModifyIdentityIdFormatRequest = (
  input: ModifyIdentityIdFormatRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {
    entries["PrincipalArn"] = input.PrincipalArn;
  }
  if (input.Resource !== undefined && input.Resource !== null) {
    entries["Resource"] = input.Resource;
  }
  if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
    entries["UseLongIds"] = input.UseLongIds;
  }
  return entries;
};

const serializeAws_ec2ModifyIdFormatRequest = (input: ModifyIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Resource !== undefined && input.Resource !== null) {
    entries["Resource"] = input.Resource;
  }
  if (input.UseLongIds !== undefined && input.UseLongIds !== null) {
    entries["UseLongIds"] = input.UseLongIds;
  }
  return entries;
};

const serializeAws_ec2ModifyImageAttributeRequest = (
  input: ModifyImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.Description !== undefined && input.Description !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.LaunchPermission !== undefined && input.LaunchPermission !== null) {
    const memberEntries = serializeAws_ec2LaunchPermissionModifications(input.LaunchPermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.OperationType !== undefined && input.OperationType !== null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.ProductCodes !== undefined && input.ProductCodes !== null) {
    const memberEntries = serializeAws_ec2ProductCodeStringList(input.ProductCodes, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserGroups !== undefined && input.UserGroups !== null) {
    const memberEntries = serializeAws_ec2UserGroupStringList(input.UserGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserIds !== undefined && input.UserIds !== null) {
    const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyInstanceAttributeRequest = (
  input: ModifyInstanceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2InstanceBlockDeviceMappingSpecificationList(
      input.BlockDeviceMappings,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.DisableApiTermination, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiTermination.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EbsOptimized, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EbsOptimized.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnaSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2GroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.InstanceInitiatedShutdownBehavior, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceInitiatedShutdownBehavior.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.InstanceType, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Kernel !== undefined && input.Kernel !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.Kernel, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Kernel.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ramdisk !== undefined && input.Ramdisk !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.Ramdisk, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ramdisk.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.SriovNetSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SriovNetSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    const memberEntries = serializeAws_ec2BlobAttributeValue(input.UserData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest = (
  input: ModifyInstanceCapacityReservationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationSpecification(
      input.CapacityReservationSpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyInstanceCreditSpecificationRequest = (
  input: ModifyInstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceCreditSpecifications !== undefined && input.InstanceCreditSpecifications !== null) {
    const memberEntries = serializeAws_ec2InstanceCreditSpecificationListRequest(
      input.InstanceCreditSpecifications,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyInstanceEventStartTimeRequest = (
  input: ModifyInstanceEventStartTimeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.InstanceEventId !== undefined && input.InstanceEventId !== null) {
    entries["InstanceEventId"] = input.InstanceEventId;
  }
  if (input.NotBefore !== undefined && input.NotBefore !== null) {
    entries["NotBefore"] = input.NotBefore.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2ModifyInstanceMetadataOptionsRequest = (
  input: ModifyInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.HttpTokens !== undefined && input.HttpTokens !== null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit !== undefined && input.HttpPutResponseHopLimit !== null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint !== undefined && input.HttpEndpoint !== null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyInstancePlacementRequest = (
  input: ModifyInstancePlacementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Affinity !== undefined && input.Affinity !== null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.HostId !== undefined && input.HostId !== null) {
    entries["HostId"] = input.HostId;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Tenancy !== undefined && input.Tenancy !== null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  return entries;
};

const serializeAws_ec2ModifyLaunchTemplateRequest = (
  input: ModifyLaunchTemplateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateId !== undefined && input.LaunchTemplateId !== null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName !== undefined && input.LaunchTemplateName !== null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.DefaultVersion !== undefined && input.DefaultVersion !== null) {
    entries["SetDefaultVersion"] = input.DefaultVersion;
  }
  return entries;
};

const serializeAws_ec2ModifyManagedPrefixListRequest = (
  input: ModifyManagedPrefixListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
    entries["CurrentVersion"] = input.CurrentVersion;
  }
  if (input.PrefixListName !== undefined && input.PrefixListName !== null) {
    entries["PrefixListName"] = input.PrefixListName;
  }
  if (input.AddEntries !== undefined && input.AddEntries !== null) {
    const memberEntries = serializeAws_ec2AddPrefixListEntries(input.AddEntries, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveEntries !== undefined && input.RemoveEntries !== null) {
    const memberEntries = serializeAws_ec2RemovePrefixListEntries(input.RemoveEntries, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyNetworkInterfaceAttributeRequest = (
  input: ModifyNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attachment !== undefined && input.Attachment !== null) {
    const memberEntries = serializeAws_ec2NetworkInterfaceAttachmentChanges(input.Attachment, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attachment.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description !== undefined && input.Description !== null) {
    const memberEntries = serializeAws_ec2AttributeValue(input.Description, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.SourceDestCheck, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyReservedInstancesRequest = (
  input: ModifyReservedInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReservedInstancesIds !== undefined && input.ReservedInstancesIds !== null) {
    const memberEntries = serializeAws_ec2ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TargetConfigurations !== undefined && input.TargetConfigurations !== null) {
    const memberEntries = serializeAws_ec2ReservedInstancesConfigurationList(input.TargetConfigurations, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifySnapshotAttributeRequest = (
  input: ModifySnapshotAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.CreateVolumePermission !== undefined && input.CreateVolumePermission !== null) {
    const memberEntries = serializeAws_ec2CreateVolumePermissionModifications(input.CreateVolumePermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreateVolumePermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames !== undefined && input.GroupNames !== null) {
    const memberEntries = serializeAws_ec2GroupNameStringList(input.GroupNames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OperationType !== undefined && input.OperationType !== null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.UserIds !== undefined && input.UserIds !== null) {
    const memberEntries = serializeAws_ec2UserIdStringList(input.UserIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifySpotFleetRequestRequest = (
  input: ModifySpotFleetRequestRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotFleetRequestId !== undefined && input.SpotFleetRequestId !== null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
    entries["TargetCapacity"] = input.TargetCapacity;
  }
  if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  return entries;
};

const serializeAws_ec2ModifySubnetAttributeRequest = (
  input: ModifySubnetAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssignIpv6AddressOnCreation !== undefined && input.AssignIpv6AddressOnCreation !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.AssignIpv6AddressOnCreation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssignIpv6AddressOnCreation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MapPublicIpOnLaunch !== undefined && input.MapPublicIpOnLaunch !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapPublicIpOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapPublicIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.MapCustomerOwnedIpOnLaunch !== undefined && input.MapCustomerOwnedIpOnLaunch !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.MapCustomerOwnedIpOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CustomerOwnedIpv4Pool !== undefined && input.CustomerOwnedIpv4Pool !== null) {
    entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
  }
  return entries;
};

const serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest = (
  input: ModifyTrafficMirrorFilterNetworkServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.AddNetworkServices !== undefined && input.AddNetworkServices !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.AddNetworkServices, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveNetworkServices !== undefined && input.RemoveNetworkServices !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorNetworkServiceList(input.RemoveNetworkServices, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest = (
  input: ModifyTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterRuleId !== undefined && input.TrafficMirrorFilterRuleId !== null) {
    entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
  }
  if (input.TrafficDirection !== undefined && input.TrafficDirection !== null) {
    entries["TrafficDirection"] = input.TrafficDirection;
  }
  if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  if (input.RuleAction !== undefined && input.RuleAction !== null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.DestinationPortRange !== undefined && input.DestinationPortRange !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePortRange !== undefined && input.SourcePortRange !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.SourceCidrBlock !== undefined && input.SourceCidrBlock !== null) {
    entries["SourceCidrBlock"] = input.SourceCidrBlock;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorFilterRuleFieldList(input.RemoveFields, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTrafficMirrorSessionRequest = (
  input: ModifyTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionId !== undefined && input.TrafficMirrorSessionId !== null) {
    entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
  }
  if (input.TrafficMirrorTargetId !== undefined && input.TrafficMirrorTargetId !== null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.TrafficMirrorFilterId !== undefined && input.TrafficMirrorFilterId !== null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.PacketLength !== undefined && input.PacketLength !== null) {
    entries["PacketLength"] = input.PacketLength;
  }
  if (input.SessionNumber !== undefined && input.SessionNumber !== null) {
    entries["SessionNumber"] = input.SessionNumber;
  }
  if (input.VirtualNetworkId !== undefined && input.VirtualNetworkId !== null) {
    entries["VirtualNetworkId"] = input.VirtualNetworkId;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.RemoveFields !== undefined && input.RemoveFields !== null) {
    const memberEntries = serializeAws_ec2TrafficMirrorSessionFieldList(input.RemoveFields, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTransitGatewayOptions = (
  input: ModifyTransitGatewayOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AddTransitGatewayCidrBlocks !== undefined && input.AddTransitGatewayCidrBlocks !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.AddTransitGatewayCidrBlocks, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveTransitGatewayCidrBlocks !== undefined && input.RemoveTransitGatewayCidrBlocks !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(
      input.RemoveTransitGatewayCidrBlocks,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
    entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
  }
  if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
    entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
  }
  if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
    entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
  }
  if (input.AssociationDefaultRouteTableId !== undefined && input.AssociationDefaultRouteTableId !== null) {
    entries["AssociationDefaultRouteTableId"] = input.AssociationDefaultRouteTableId;
  }
  if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
    entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
  }
  if (input.PropagationDefaultRouteTableId !== undefined && input.PropagationDefaultRouteTableId !== null) {
    entries["PropagationDefaultRouteTableId"] = input.PropagationDefaultRouteTableId;
  }
  return entries;
};

const serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest = (
  input: ModifyTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole !== undefined && input.Blackhole !== null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTransitGatewayRequest = (
  input: ModifyTransitGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2ModifyTransitGatewayOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest = (
  input: ModifyTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.AddSubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewaySubnetIdList(input.RemoveSubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Options !== undefined && input.Options !== null) {
    const memberEntries = serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions = (
  input: ModifyTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.Ipv6Support !== undefined && input.Ipv6Support !== null) {
    entries["Ipv6Support"] = input.Ipv6Support;
  }
  if (input.ApplianceModeSupport !== undefined && input.ApplianceModeSupport !== null) {
    entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
  }
  return entries;
};

const serializeAws_ec2ModifyVolumeAttributeRequest = (
  input: ModifyVolumeAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AutoEnableIO !== undefined && input.AutoEnableIO !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.AutoEnableIO, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoEnableIO.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVolumeRequest = (input: ModifyVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeId !== undefined && input.VolumeId !== null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.Size !== undefined && input.Size !== null) {
    entries["Size"] = input.Size;
  }
  if (input.VolumeType !== undefined && input.VolumeType !== null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.Iops !== undefined && input.Iops !== null) {
    entries["Iops"] = input.Iops;
  }
  if (input.Throughput !== undefined && input.Throughput !== null) {
    entries["Throughput"] = input.Throughput;
  }
  if (input.MultiAttachEnabled !== undefined && input.MultiAttachEnabled !== null) {
    entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
  }
  return entries;
};

const serializeAws_ec2ModifyVpcAttributeRequest = (input: ModifyVpcAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EnableDnsHostnames !== undefined && input.EnableDnsHostnames !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsHostnames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsHostnames.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableDnsSupport !== undefined && input.EnableDnsSupport !== null) {
    const memberEntries = serializeAws_ec2AttributeBooleanValue(input.EnableDnsSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

const serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest = (
  input: ModifyVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationId !== undefined && input.ConnectionNotificationId !== null) {
    entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
  }
  if (input.ConnectionNotificationArn !== undefined && input.ConnectionNotificationArn !== null) {
    entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
  }
  if (input.ConnectionEvents !== undefined && input.ConnectionEvents !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.ConnectionEvents, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyVpcEndpointRequest = (input: ModifyVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.ResetPolicy !== undefined && input.ResetPolicy !== null) {
    entries["ResetPolicy"] = input.ResetPolicy;
  }
  if (input.PolicyDocument !== undefined && input.PolicyDocument !== null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.AddRouteTableIds !== undefined && input.AddRouteTableIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.AddRouteTableIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveRouteTableIds !== undefined && input.RemoveRouteTableIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointRouteTableIdList(input.RemoveRouteTableIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddSubnetIds !== undefined && input.AddSubnetIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.AddSubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSubnetIds !== undefined && input.RemoveSubnetIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSubnetIdList(input.RemoveSubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddSecurityGroupIds !== undefined && input.AddSecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.AddSecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSecurityGroupIds !== undefined && input.RemoveSecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointSecurityGroupIdList(input.RemoveSecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateDnsEnabled !== undefined && input.PrivateDnsEnabled !== null) {
    entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
  }
  return entries;
};

const serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest = (
  input: ModifyVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.PrivateDnsName !== undefined && input.PrivateDnsName !== null) {
    entries["PrivateDnsName"] = input.PrivateDnsName;
  }
  if (input.RemovePrivateDnsName !== undefined && input.RemovePrivateDnsName !== null) {
    entries["RemovePrivateDnsName"] = input.RemovePrivateDnsName;
  }
  if (input.AcceptanceRequired !== undefined && input.AcceptanceRequired !== null) {
    entries["AcceptanceRequired"] = input.AcceptanceRequired;
  }
  if (input.AddNetworkLoadBalancerArns !== undefined && input.AddNetworkLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.AddNetworkLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveNetworkLoadBalancerArns !== undefined && input.RemoveNetworkLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.RemoveNetworkLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddGatewayLoadBalancerArns !== undefined && input.AddGatewayLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.AddGatewayLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveGatewayLoadBalancerArns !== undefined && input.RemoveGatewayLoadBalancerArns !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.RemoveGatewayLoadBalancerArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest = (
  input: ModifyVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.AddAllowedPrincipals !== undefined && input.AddAllowedPrincipals !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.AddAllowedPrincipals, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveAllowedPrincipals !== undefined && input.RemoveAllowedPrincipals !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.RemoveAllowedPrincipals, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest = (
  input: ModifyVpcPeeringConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AccepterPeeringConnectionOptions !== undefined && input.AccepterPeeringConnectionOptions !== null) {
    const memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(
      input.AccepterPeeringConnectionOptions,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccepterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RequesterPeeringConnectionOptions !== undefined && input.RequesterPeeringConnectionOptions !== null) {
    const memberEntries = serializeAws_ec2PeeringConnectionOptionsRequest(
      input.RequesterPeeringConnectionOptions,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RequesterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2ModifyVpcTenancyRequest = (input: ModifyVpcTenancyRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.InstanceTenancy !== undefined && input.InstanceTenancy !== null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVpnConnectionOptionsRequest = (
  input: ModifyVpnConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
    entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
  }
  if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
    entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
  }
  if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
    entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
  }
  if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
    entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVpnConnectionRequest = (
  input: ModifyVpnConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.CustomerGatewayId !== undefined && input.CustomerGatewayId !== null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.VpnGatewayId !== undefined && input.VpnGatewayId !== null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVpnTunnelCertificateRequest = (
  input: ModifyVpnTunnelCertificateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVpnTunnelOptionsRequest = (
  input: ModifyVpnTunnelOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId !== undefined && input.VpnConnectionId !== null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress !== undefined && input.VpnTunnelOutsideIpAddress !== null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
    const memberEntries = serializeAws_ec2ModifyVpnTunnelOptionsSpecification(input.TunnelOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ModifyVpnTunnelOptionsSpecification = (
  input: ModifyVpnTunnelOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
    entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
  }
  if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
    entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
  }
  if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
    entries["PreSharedKey"] = input.PreSharedKey;
  }
  if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
    entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
  }
  if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
    entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
  }
  if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
    entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
  }
  if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
    entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
  }
  if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
    entries["ReplayWindowSize"] = input.ReplayWindowSize;
  }
  if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
    entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
  }
  if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
    entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
  }
  if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(
      input.Phase1EncryptionAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(
      input.Phase2EncryptionAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(
      input.Phase1IntegrityAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(
      input.Phase2IntegrityAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
    const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
    const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
    const memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartupAction !== undefined && input.StartupAction !== null) {
    entries["StartupAction"] = input.StartupAction;
  }
  return entries;
};

const serializeAws_ec2MonitorInstancesRequest = (input: MonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2MoveAddressToVpcRequest = (input: MoveAddressToVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["PublicIp"] = input.PublicIp;
  }
  return entries;
};

const serializeAws_ec2NatGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NetworkAclIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NetworkInsightsAnalysisIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NetworkInsightsPathIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NetworkInterfaceAttachmentChanges = (
  input: NetworkInterfaceAttachmentChanges,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AttachmentId !== undefined && input.AttachmentId !== null) {
    entries["AttachmentId"] = input.AttachmentId;
  }
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  return entries;
};

const serializeAws_ec2NetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NetworkInterfacePermissionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2NewDhcpConfiguration = (input: NewDhcpConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key !== undefined && input.Key !== null) {
    entries["Key"] = input.Key;
  }
  if (input.Values !== undefined && input.Values !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.Values, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2NewDhcpConfigurationList = (input: NewDhcpConfiguration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2NewDhcpConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2OccurrenceDayRequestSet = (input: number[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OccurenceDay.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2OnDemandOptionsRequest = (input: OnDemandOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.CapacityReservationOptions !== undefined && input.CapacityReservationOptions !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationOptionsRequest(input.CapacityReservationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
    entries["SingleInstanceType"] = input.SingleInstanceType;
  }
  if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
    entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
  }
  if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
    entries["MinTargetCapacity"] = input.MinTargetCapacity;
  }
  if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
    entries["MaxTotalPrice"] = input.MaxTotalPrice;
  }
  return entries;
};

const serializeAws_ec2OwnerStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Owner.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PeeringConnectionOptionsRequest = (
  input: PeeringConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AllowDnsResolutionFromRemoteVpc !== undefined && input.AllowDnsResolutionFromRemoteVpc !== null) {
    entries["AllowDnsResolutionFromRemoteVpc"] = input.AllowDnsResolutionFromRemoteVpc;
  }
  if (
    input.AllowEgressFromLocalClassicLinkToRemoteVpc !== undefined &&
    input.AllowEgressFromLocalClassicLinkToRemoteVpc !== null
  ) {
    entries["AllowEgressFromLocalClassicLinkToRemoteVpc"] = input.AllowEgressFromLocalClassicLinkToRemoteVpc;
  }
  if (
    input.AllowEgressFromLocalVpcToRemoteClassicLink !== undefined &&
    input.AllowEgressFromLocalVpcToRemoteClassicLink !== null
  ) {
    entries["AllowEgressFromLocalVpcToRemoteClassicLink"] = input.AllowEgressFromLocalVpcToRemoteClassicLink;
  }
  return entries;
};

const serializeAws_ec2Phase1DHGroupNumbersRequestList = (
  input: Phase1DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase1DHGroupNumbersRequestListValue = (
  input: Phase1DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Phase1EncryptionAlgorithmsRequestList = (
  input: Phase1EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue = (
  input: Phase1EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Phase1IntegrityAlgorithmsRequestList = (
  input: Phase1IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue = (
  input: Phase1IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Phase2DHGroupNumbersRequestList = (
  input: Phase2DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase2DHGroupNumbersRequestListValue = (
  input: Phase2DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Phase2EncryptionAlgorithmsRequestList = (
  input: Phase2EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue = (
  input: Phase2EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Phase2IntegrityAlgorithmsRequestList = (
  input: Phase2IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue = (
  input: Phase2IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2Placement = (input: Placement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Affinity !== undefined && input.Affinity !== null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.PartitionNumber !== undefined && input.PartitionNumber !== null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  if (input.HostId !== undefined && input.HostId !== null) {
    entries["HostId"] = input.HostId;
  }
  if (input.Tenancy !== undefined && input.Tenancy !== null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.SpreadDomain !== undefined && input.SpreadDomain !== null) {
    entries["SpreadDomain"] = input.SpreadDomain;
  }
  if (input.HostResourceGroupArn !== undefined && input.HostResourceGroupArn !== null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  return entries;
};

const serializeAws_ec2PlacementGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PlacementGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PortRange = (input: PortRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.From !== undefined && input.From !== null) {
    entries["From"] = input.From;
  }
  if (input.To !== undefined && input.To !== null) {
    entries["To"] = input.To;
  }
  return entries;
};

const serializeAws_ec2PrefixListId = (input: PrefixListId, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  return entries;
};

const serializeAws_ec2PrefixListIdList = (input: PrefixListId[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2PrefixListId(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2PrefixListResourceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PriceScheduleSpecification = (
  input: PriceScheduleSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  if (input.Price !== undefined && input.Price !== null) {
    entries["Price"] = input.Price;
  }
  if (input.Term !== undefined && input.Term !== null) {
    entries["Term"] = input.Term;
  }
  return entries;
};

const serializeAws_ec2PriceScheduleSpecificationList = (
  input: PriceScheduleSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2PriceScheduleSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2PrivateIpAddressConfigSet = (
  input: ScheduledInstancesPrivateIpAddressConfig[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2PrivateIpAddressSpecification = (
  input: PrivateIpAddressSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Primary !== undefined && input.Primary !== null) {
    entries["Primary"] = input.Primary;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

const serializeAws_ec2PrivateIpAddressSpecificationList = (
  input: PrivateIpAddressSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2PrivateIpAddressSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2PrivateIpAddressStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PrivateIpAddress.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ProductCodeStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ProductCode.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ProductDescriptionList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ProvisionByoipCidrRequest = (input: ProvisionByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.CidrAuthorizationContext !== undefined && input.CidrAuthorizationContext !== null) {
    const memberEntries = serializeAws_ec2CidrAuthorizationContext(input.CidrAuthorizationContext, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PubliclyAdvertisable !== undefined && input.PubliclyAdvertisable !== null) {
    entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PoolTagSpecifications !== undefined && input.PoolTagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.PoolTagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2PublicIpStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PublicIp.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PublicIpv4PoolIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2PurchaseHostReservationRequest = (
  input: PurchaseHostReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  if (input.HostIdSet !== undefined && input.HostIdSet !== null) {
    const memberEntries = serializeAws_ec2RequestHostIdSet(input.HostIdSet, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
    entries["LimitPrice"] = input.LimitPrice;
  }
  if (input.OfferingId !== undefined && input.OfferingId !== null) {
    entries["OfferingId"] = input.OfferingId;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2PurchaseRequest = (input: PurchaseRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.PurchaseToken !== undefined && input.PurchaseToken !== null) {
    entries["PurchaseToken"] = input.PurchaseToken;
  }
  return entries;
};

const serializeAws_ec2PurchaseRequestSet = (input: PurchaseRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2PurchaseRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PurchaseRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2PurchaseReservedInstancesOfferingRequest = (
  input: PurchaseReservedInstancesOfferingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.ReservedInstancesOfferingId !== undefined && input.ReservedInstancesOfferingId !== null) {
    entries["ReservedInstancesOfferingId"] = input.ReservedInstancesOfferingId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LimitPrice !== undefined && input.LimitPrice !== null) {
    const memberEntries = serializeAws_ec2ReservedInstanceLimitPrice(input.LimitPrice, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LimitPrice.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PurchaseTime !== undefined && input.PurchaseTime !== null) {
    entries["PurchaseTime"] = input.PurchaseTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2PurchaseScheduledInstancesRequest = (
  input: PurchaseScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PurchaseRequests !== undefined && input.PurchaseRequests !== null) {
    const memberEntries = serializeAws_ec2PurchaseRequestSet(input.PurchaseRequests, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2ReasonCodesList = (
  input: (ReportInstanceReasonCodes | string)[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RebootInstancesRequest = (input: RebootInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RegionNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`RegionName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RegisterImageRequest = (input: RegisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageLocation !== undefined && input.ImageLocation !== null) {
    entries["ImageLocation"] = input.ImageLocation;
  }
  if (input.Architecture !== undefined && input.Architecture !== null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EnaSupport !== undefined && input.EnaSupport !== null) {
    entries["EnaSupport"] = input.EnaSupport;
  }
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  if (input.BillingProducts !== undefined && input.BillingProducts !== null) {
    const memberEntries = serializeAws_ec2BillingProductList(input.BillingProducts, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.RootDeviceName !== undefined && input.RootDeviceName !== null) {
    entries["RootDeviceName"] = input.RootDeviceName;
  }
  if (input.SriovNetSupport !== undefined && input.SriovNetSupport !== null) {
    entries["SriovNetSupport"] = input.SriovNetSupport;
  }
  if (input.VirtualizationType !== undefined && input.VirtualizationType !== null) {
    entries["VirtualizationType"] = input.VirtualizationType;
  }
  return entries;
};

const serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest = (
  input: RegisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTagAttribute !== undefined && input.InstanceTagAttribute !== null) {
    const memberEntries = serializeAws_ec2RegisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RegisterInstanceTagAttributeRequest = (
  input: RegisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IncludeAllTagsOfInstance !== undefined && input.IncludeAllTagsOfInstance !== null) {
    entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
  }
  if (input.InstanceTagKeys !== undefined && input.InstanceTagKeys !== null) {
    const memberEntries = serializeAws_ec2InstanceTagKeySet(input.InstanceTagKeys, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest = (
  input: RegisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest = (
  input: RegisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress !== undefined && input.GroupIpAddress !== null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds !== undefined && input.NetworkInterfaceIds !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest = (
  input: RejectTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds !== undefined && input.SubnetIds !== null) {
    const memberEntries = serializeAws_ec2ValueStringList(input.SubnetIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest = (
  input: RejectTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest = (
  input: RejectTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RejectVpcEndpointConnectionsRequest = (
  input: RejectVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointIds !== undefined && input.VpcEndpointIds !== null) {
    const memberEntries = serializeAws_ec2VpcEndpointIdList(input.VpcEndpointIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RejectVpcPeeringConnectionRequest = (
  input: RejectVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2ReleaseAddressRequest = (input: ReleaseAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId !== undefined && input.AllocationId !== null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.NetworkBorderGroup !== undefined && input.NetworkBorderGroup !== null) {
    entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ReleaseHostsRequest = (input: ReleaseHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.HostIds !== undefined && input.HostIds !== null) {
    const memberEntries = serializeAws_ec2RequestHostIdList(input.HostIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RemovePrefixListEntries = (input: RemovePrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2RemovePrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2RemovePrefixListEntry = (input: RemovePrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  return entries;
};

const serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest = (
  input: ReplaceIamInstanceProfileAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

const serializeAws_ec2ReplaceNetworkAclAssociationRequest = (
  input: ReplaceNetworkAclAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  return entries;
};

const serializeAws_ec2ReplaceNetworkAclEntryRequest = (
  input: ReplaceNetworkAclEntryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrBlock !== undefined && input.CidrBlock !== null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress !== undefined && input.Egress !== null) {
    entries["Egress"] = input.Egress;
  }
  if (input.IcmpTypeCode !== undefined && input.IcmpTypeCode !== null) {
    const memberEntries = serializeAws_ec2IcmpTypeCode(input.IcmpTypeCode, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6CidrBlock !== undefined && input.Ipv6CidrBlock !== null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.NetworkAclId !== undefined && input.NetworkAclId !== null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.PortRange !== undefined && input.PortRange !== null) {
    const memberEntries = serializeAws_ec2PortRange(input.PortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol !== undefined && input.Protocol !== null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.RuleAction !== undefined && input.RuleAction !== null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.RuleNumber !== undefined && input.RuleNumber !== null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

const serializeAws_ec2ReplaceRouteRequest = (input: ReplaceRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock !== undefined && input.DestinationIpv6CidrBlock !== null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId !== undefined && input.DestinationPrefixListId !== null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId !== undefined && input.VpcEndpointId !== null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.EgressOnlyInternetGatewayId !== undefined && input.EgressOnlyInternetGatewayId !== null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  if (input.GatewayId !== undefined && input.GatewayId !== null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.LocalTarget !== undefined && input.LocalTarget !== null) {
    entries["LocalTarget"] = input.LocalTarget;
  }
  if (input.NatGatewayId !== undefined && input.NatGatewayId !== null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.TransitGatewayId !== undefined && input.TransitGatewayId !== null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.LocalGatewayId !== undefined && input.LocalGatewayId !== null) {
    entries["LocalGatewayId"] = input.LocalGatewayId;
  }
  if (input.CarrierGatewayId !== undefined && input.CarrierGatewayId !== null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2ReplaceRouteTableAssociationRequest = (
  input: ReplaceRouteTableAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId !== undefined && input.AssociationId !== null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId !== undefined && input.RouteTableId !== null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

const serializeAws_ec2ReplaceTransitGatewayRouteRequest = (
  input: ReplaceTransitGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock !== undefined && input.DestinationCidrBlock !== null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId !== undefined && input.TransitGatewayAttachmentId !== null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole !== undefined && input.Blackhole !== null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ReportInstanceStatusRequest = (
  input: ReportInstanceStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EndTime !== undefined && input.EndTime !== null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Instances !== undefined && input.Instances !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.Instances, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReasonCodes !== undefined && input.ReasonCodes !== null) {
    const memberEntries = serializeAws_ec2ReasonCodesList(input.ReasonCodes, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartTime !== undefined && input.StartTime !== null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Status !== undefined && input.Status !== null) {
    entries["Status"] = input.Status;
  }
  return entries;
};

const serializeAws_ec2RequestHostIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RequestHostIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RequestInstanceTypeList = (input: (_InstanceType | string)[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RequestLaunchTemplateData = (input: RequestLaunchTemplateData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest(
      input.IamInstanceProfile,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList(
      input.BlockDeviceMappings,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(
      input.NetworkInterfaces,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplatesMonitoringRequest(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplatePlacementRequest(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamDiskId !== undefined && input.RamDiskId !== null) {
    entries["RamDiskId"] = input.RamDiskId;
  }
  if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
    entries["DisableApiTermination"] = input.DisableApiTermination;
  }
  if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    entries["UserData"] = input.UserData;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateTagSpecificationRequestList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticGpuSpecifications !== undefined && input.ElasticGpuSpecifications !== null) {
    const memberEntries = serializeAws_ec2ElasticGpuSpecificationList(input.ElasticGpuSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList(
      input.ElasticInferenceAccelerators,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest(
      input.InstanceMarketOptions,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
    const memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateCpuOptionsRequest(input.CpuOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest(
      input.CapacityReservationSpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest(
      input.LicenseSpecifications,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateHibernationOptionsRequest(input.HibernationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest(input.MetadataOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateEnclaveOptionsRequest(input.EnclaveOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RequestSpotFleetRequest = (input: RequestSpotFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotFleetRequestConfig !== undefined && input.SpotFleetRequestConfig !== null) {
    const memberEntries = serializeAws_ec2SpotFleetRequestConfigData(input.SpotFleetRequestConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RequestSpotInstancesRequest = (
  input: RequestSpotInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZoneGroup !== undefined && input.AvailabilityZoneGroup !== null) {
    entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
  }
  if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.LaunchGroup !== undefined && input.LaunchGroup !== null) {
    entries["LaunchGroup"] = input.LaunchGroup;
  }
  if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
    const memberEntries = serializeAws_ec2RequestSpotLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

const serializeAws_ec2RequestSpotLaunchSpecification = (
  input: RequestSpotLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList(
      input.SecurityGroupIds,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
    const memberEntries = serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList(
      input.SecurityGroups,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressingType !== undefined && input.AddressingType !== null) {
    entries["AddressingType"] = input.AddressingType;
  }
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    const memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
    const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    entries["UserData"] = input.UserData;
  }
  return entries;
};

const serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList = (
  input: string[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList = (
  input: string[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ReservedInstanceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ReservedInstanceLimitPrice = (
  input: ReservedInstanceLimitPrice,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Amount !== undefined && input.Amount !== null) {
    entries["Amount"] = input.Amount;
  }
  if (input.CurrencyCode !== undefined && input.CurrencyCode !== null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  return entries;
};

const serializeAws_ec2ReservedInstancesConfiguration = (
  input: ReservedInstancesConfiguration,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Platform !== undefined && input.Platform !== null) {
    entries["Platform"] = input.Platform;
  }
  if (input.Scope !== undefined && input.Scope !== null) {
    entries["Scope"] = input.Scope;
  }
  return entries;
};

const serializeAws_ec2ReservedInstancesConfigurationList = (
  input: ReservedInstancesConfiguration[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ReservedInstancesConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ReservedInstancesIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ReservedInstancesModificationIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesModificationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ReservedInstancesOfferingIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest = (
  input: ResetEbsDefaultKmsKeyIdRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ResetFpgaImageAttributeRequest = (
  input: ResetFpgaImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId !== undefined && input.FpgaImageId !== null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  return entries;
};

const serializeAws_ec2ResetImageAttributeRequest = (
  input: ResetImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ResetInstanceAttributeRequest = (
  input: ResetInstanceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

const serializeAws_ec2ResetNetworkInterfaceAttributeRequest = (
  input: ResetNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.SourceDestCheck !== undefined && input.SourceDestCheck !== null) {
    entries["SourceDestCheck"] = input.SourceDestCheck;
  }
  return entries;
};

const serializeAws_ec2ResetSnapshotAttributeRequest = (
  input: ResetSnapshotAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute !== undefined && input.Attribute !== null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ResourceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ResourceList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RestorableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RestoreAddressToClassicRequest = (
  input: RestoreAddressToClassicRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PublicIp !== undefined && input.PublicIp !== null) {
    entries["PublicIp"] = input.PublicIp;
  }
  return entries;
};

const serializeAws_ec2RestoreManagedPrefixListVersionRequest = (
  input: RestoreManagedPrefixListVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId !== undefined && input.PrefixListId !== null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.PreviousVersion !== undefined && input.PreviousVersion !== null) {
    entries["PreviousVersion"] = input.PreviousVersion;
  }
  if (input.CurrentVersion !== undefined && input.CurrentVersion !== null) {
    entries["CurrentVersion"] = input.CurrentVersion;
  }
  return entries;
};

const serializeAws_ec2RevokeClientVpnIngressRequest = (
  input: RevokeClientVpnIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetNetworkCidr !== undefined && input.TargetNetworkCidr !== null) {
    entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
  }
  if (input.AccessGroupId !== undefined && input.AccessGroupId !== null) {
    entries["AccessGroupId"] = input.AccessGroupId;
  }
  if (input.RevokeAllGroups !== undefined && input.RevokeAllGroups !== null) {
    entries["RevokeAllGroups"] = input.RevokeAllGroups;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RevokeSecurityGroupEgressRequest = (
  input: RevokeSecurityGroupEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CidrIp !== undefined && input.CidrIp !== null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  return entries;
};

const serializeAws_ec2RevokeSecurityGroupIngressRequest = (
  input: RevokeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrIp !== undefined && input.CidrIp !== null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpProtocol !== undefined && input.IpProtocol !== null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.SourceSecurityGroupName !== undefined && input.SourceSecurityGroupName !== null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId !== undefined && input.SourceSecurityGroupOwnerId !== null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2RouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2RunInstancesMonitoringEnabled = (
  input: RunInstancesMonitoringEnabled,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2RunInstancesRequest = (input: RunInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2InstanceIpv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.MaxCount !== undefined && input.MaxCount !== null) {
    entries["MaxCount"] = input.MaxCount;
  }
  if (input.MinCount !== undefined && input.MinCount !== null) {
    entries["MinCount"] = input.MinCount;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    const memberEntries = serializeAws_ec2RunInstancesMonitoringEnabled(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupIdStringList(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
    const memberEntries = serializeAws_ec2SecurityGroupStringList(input.SecurityGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    entries["UserData"] = input.UserData;
  }
  if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DisableApiTermination !== undefined && input.DisableApiTermination !== null) {
    entries["DisableApiTermination"] = input.DisableApiTermination;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInitiatedShutdownBehavior !== undefined && input.InstanceInitiatedShutdownBehavior !== null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
    const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.ElasticGpuSpecification !== undefined && input.ElasticGpuSpecification !== null) {
    const memberEntries = serializeAws_ec2ElasticGpuSpecifications(input.ElasticGpuSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticInferenceAccelerators !== undefined && input.ElasticInferenceAccelerators !== null) {
    const memberEntries = serializeAws_ec2ElasticInferenceAccelerators(input.ElasticInferenceAccelerators, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplate !== undefined && input.LaunchTemplate !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateSpecification(input.LaunchTemplate, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceMarketOptions !== undefined && input.InstanceMarketOptions !== null) {
    const memberEntries = serializeAws_ec2InstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CreditSpecification !== undefined && input.CreditSpecification !== null) {
    const memberEntries = serializeAws_ec2CreditSpecificationRequest(input.CreditSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuOptions !== undefined && input.CpuOptions !== null) {
    const memberEntries = serializeAws_ec2CpuOptionsRequest(input.CpuOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CapacityReservationSpecification !== undefined && input.CapacityReservationSpecification !== null) {
    const memberEntries = serializeAws_ec2CapacityReservationSpecification(
      input.CapacityReservationSpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.HibernationOptions !== undefined && input.HibernationOptions !== null) {
    const memberEntries = serializeAws_ec2HibernationOptionsRequest(input.HibernationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LicenseSpecifications !== undefined && input.LicenseSpecifications !== null) {
    const memberEntries = serializeAws_ec2LicenseSpecificationListRequest(input.LicenseSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MetadataOptions !== undefined && input.MetadataOptions !== null) {
    const memberEntries = serializeAws_ec2InstanceMetadataOptionsRequest(input.MetadataOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnclaveOptions !== undefined && input.EnclaveOptions !== null) {
    const memberEntries = serializeAws_ec2EnclaveOptionsRequest(input.EnclaveOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2RunScheduledInstancesRequest = (
  input: RunScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.LaunchSpecification !== undefined && input.LaunchSpecification !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ScheduledInstanceId !== undefined && input.ScheduledInstanceId !== null) {
    entries["ScheduledInstanceId"] = input.ScheduledInstanceId;
  }
  return entries;
};

const serializeAws_ec2S3Storage = (input: S3Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AWSAccessKeyId !== undefined && input.AWSAccessKeyId !== null) {
    entries["AWSAccessKeyId"] = input.AWSAccessKeyId;
  }
  if (input.Bucket !== undefined && input.Bucket !== null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.Prefix !== undefined && input.Prefix !== null) {
    entries["Prefix"] = input.Prefix;
  }
  if (input.UploadPolicy !== undefined && input.UploadPolicy !== null) {
    entries["UploadPolicy"] = context.base64Encoder(input.UploadPolicy);
  }
  if (input.UploadPolicySignature !== undefined && input.UploadPolicySignature !== null) {
    entries["UploadPolicySignature"] = input.UploadPolicySignature;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstanceIdRequestSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ScheduledInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstanceRecurrenceRequest = (
  input: ScheduledInstanceRecurrenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Frequency !== undefined && input.Frequency !== null) {
    entries["Frequency"] = input.Frequency;
  }
  if (input.Interval !== undefined && input.Interval !== null) {
    entries["Interval"] = input.Interval;
  }
  if (input.OccurrenceDays !== undefined && input.OccurrenceDays !== null) {
    const memberEntries = serializeAws_ec2OccurrenceDayRequestSet(input.OccurrenceDays, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OccurrenceRelativeToEnd !== undefined && input.OccurrenceRelativeToEnd !== null) {
    entries["OccurrenceRelativeToEnd"] = input.OccurrenceRelativeToEnd;
  }
  if (input.OccurrenceUnit !== undefined && input.OccurrenceUnit !== null) {
    entries["OccurrenceUnit"] = input.OccurrenceUnit;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesBlockDeviceMapping = (
  input: ScheduledInstancesBlockDeviceMapping,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName !== undefined && input.DeviceName !== null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Ebs !== undefined && input.Ebs !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesEbs(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice !== undefined && input.NoDevice !== null) {
    entries["NoDevice"] = input.NoDevice;
  }
  if (input.VirtualName !== undefined && input.VirtualName !== null) {
    entries["VirtualName"] = input.VirtualName;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet = (
  input: ScheduledInstancesBlockDeviceMapping[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesEbs = (input: ScheduledInstancesEbs, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Encrypted !== undefined && input.Encrypted !== null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Iops !== undefined && input.Iops !== null) {
    entries["Iops"] = input.Iops;
  }
  if (input.SnapshotId !== undefined && input.SnapshotId !== null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize !== undefined && input.VolumeSize !== null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType !== undefined && input.VolumeType !== null) {
    entries["VolumeType"] = input.VolumeType;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesIamInstanceProfile = (
  input: ScheduledInstancesIamInstanceProfile,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Arn !== undefined && input.Arn !== null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name !== undefined && input.Name !== null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesIpv6Address = (
  input: ScheduledInstancesIpv6Address,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Ipv6Address !== undefined && input.Ipv6Address !== null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesIpv6AddressList = (
  input: ScheduledInstancesIpv6Address[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ScheduledInstancesIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Ipv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesLaunchSpecification = (
  input: ScheduledInstancesLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesIamInstanceProfile(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesMonitoring(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterfaceSet(input.NetworkInterfaces, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SecurityGroupIds !== undefined && input.SecurityGroupIds !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.SecurityGroupIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    entries["UserData"] = input.UserData;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesMonitoring = (
  input: ScheduledInstancesMonitoring,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesNetworkInterface = (
  input: ScheduledInstancesNetworkInterface,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociatePublicIpAddress !== undefined && input.AssociatePublicIpAddress !== null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination !== undefined && input.DeleteOnTermination !== null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex !== undefined && input.DeviceIndex !== null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups !== undefined && input.Groups !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesSecurityGroupIdSet(input.Groups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount !== undefined && input.Ipv6AddressCount !== null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2ScheduledInstancesIpv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddressConfigs !== undefined && input.PrivateIpAddressConfigs !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressConfigSet(input.PrivateIpAddressConfigs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount !== undefined && input.SecondaryPrivateIpAddressCount !== null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesNetworkInterfaceSet = (
  input: ScheduledInstancesNetworkInterface[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2ScheduledInstancesNetworkInterface(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`NetworkInterface.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesPlacement = (
  input: ScheduledInstancesPlacement,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig = (
  input: ScheduledInstancesPrivateIpAddressConfig,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Primary !== undefined && input.Primary !== null) {
    entries["Primary"] = input.Primary;
  }
  if (input.PrivateIpAddress !== undefined && input.PrivateIpAddress !== null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

const serializeAws_ec2ScheduledInstancesSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SearchLocalGatewayRoutesRequest = (
  input: SearchLocalGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId !== undefined && input.LocalGatewayRouteTableId !== null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest = (
  input: SearchTransitGatewayMulticastGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId !== undefined && input.TransitGatewayMulticastDomainId !== null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken !== undefined && input.NextToken !== null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2SearchTransitGatewayRoutesRequest = (
  input: SearchTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId !== undefined && input.TransitGatewayRouteTableId !== null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters !== undefined && input.Filters !== null) {
    const memberEntries = serializeAws_ec2FilterList(input.Filters, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults !== undefined && input.MaxResults !== null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2SecurityGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SecurityGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SendDiagnosticInterruptRequest = (
  input: SendDiagnosticInterruptRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId !== undefined && input.InstanceId !== null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2SlotDateTimeRangeRequest = (input: SlotDateTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
    entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
  }
  if (input.LatestTime !== undefined && input.LatestTime !== null) {
    entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2SlotStartTimeRangeRequest = (input: SlotStartTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EarliestTime !== undefined && input.EarliestTime !== null) {
    entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
  }
  if (input.LatestTime !== undefined && input.LatestTime !== null) {
    entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

const serializeAws_ec2SnapshotDiskContainer = (input: SnapshotDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.Format !== undefined && input.Format !== null) {
    entries["Format"] = input.Format;
  }
  if (input.Url !== undefined && input.Url !== null) {
    entries["Url"] = input.Url;
  }
  if (input.UserBucket !== undefined && input.UserBucket !== null) {
    const memberEntries = serializeAws_ec2UserBucket(input.UserBucket, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2SnapshotIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SnapshotId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SpotCapacityRebalance = (input: SpotCapacityRebalance, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ReplacementStrategy !== undefined && input.ReplacementStrategy !== null) {
    entries["ReplacementStrategy"] = input.ReplacementStrategy;
  }
  return entries;
};

const serializeAws_ec2SpotFleetLaunchSpecification = (
  input: SpotFleetLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SecurityGroups !== undefined && input.SecurityGroups !== null) {
    const memberEntries = serializeAws_ec2GroupIdentifierList(input.SecurityGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressingType !== undefined && input.AddressingType !== null) {
    entries["AddressingType"] = input.AddressingType;
  }
  if (input.BlockDeviceMappings !== undefined && input.BlockDeviceMappings !== null) {
    const memberEntries = serializeAws_ec2BlockDeviceMappingList(input.BlockDeviceMappings, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized !== undefined && input.EbsOptimized !== null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile !== undefined && input.IamInstanceProfile !== null) {
    const memberEntries = serializeAws_ec2IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId !== undefined && input.ImageId !== null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType !== undefined && input.InstanceType !== null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId !== undefined && input.KernelId !== null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName !== undefined && input.KeyName !== null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring !== undefined && input.Monitoring !== null) {
    const memberEntries = serializeAws_ec2SpotFleetMonitoring(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces !== undefined && input.NetworkInterfaces !== null) {
    const memberEntries = serializeAws_ec2InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement !== undefined && input.Placement !== null) {
    const memberEntries = serializeAws_ec2SpotPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId !== undefined && input.RamdiskId !== null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.SubnetId !== undefined && input.SubnetId !== null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData !== undefined && input.UserData !== null) {
    entries["UserData"] = input.UserData;
  }
  if (input.WeightedCapacity !== undefined && input.WeightedCapacity !== null) {
    entries["WeightedCapacity"] = input.WeightedCapacity;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2SpotFleetTagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2SpotFleetMonitoring = (input: SpotFleetMonitoring, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled !== undefined && input.Enabled !== null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

const serializeAws_ec2SpotFleetRequestConfigData = (
  input: SpotFleetRequestConfigData,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.OnDemandAllocationStrategy !== undefined && input.OnDemandAllocationStrategy !== null) {
    entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
  }
  if (input.SpotMaintenanceStrategies !== undefined && input.SpotMaintenanceStrategies !== null) {
    const memberEntries = serializeAws_ec2SpotMaintenanceStrategies(input.SpotMaintenanceStrategies, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotMaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.ExcessCapacityTerminationPolicy !== undefined && input.ExcessCapacityTerminationPolicy !== null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.FulfilledCapacity !== undefined && input.FulfilledCapacity !== null) {
    entries["FulfilledCapacity"] = input.FulfilledCapacity;
  }
  if (input.OnDemandFulfilledCapacity !== undefined && input.OnDemandFulfilledCapacity !== null) {
    entries["OnDemandFulfilledCapacity"] = input.OnDemandFulfilledCapacity;
  }
  if (input.IamFleetRole !== undefined && input.IamFleetRole !== null) {
    entries["IamFleetRole"] = input.IamFleetRole;
  }
  if (input.LaunchSpecifications !== undefined && input.LaunchSpecifications !== null) {
    const memberEntries = serializeAws_ec2LaunchSpecsList(input.LaunchSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplateConfigs !== undefined && input.LaunchTemplateConfigs !== null) {
    const memberEntries = serializeAws_ec2LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotPrice !== undefined && input.SpotPrice !== null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.TargetCapacity !== undefined && input.TargetCapacity !== null) {
    entries["TargetCapacity"] = input.TargetCapacity;
  }
  if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  if (input.OnDemandMaxTotalPrice !== undefined && input.OnDemandMaxTotalPrice !== null) {
    entries["OnDemandMaxTotalPrice"] = input.OnDemandMaxTotalPrice;
  }
  if (input.SpotMaxTotalPrice !== undefined && input.SpotMaxTotalPrice !== null) {
    entries["SpotMaxTotalPrice"] = input.SpotMaxTotalPrice;
  }
  if (input.TerminateInstancesWithExpiration !== undefined && input.TerminateInstancesWithExpiration !== null) {
    entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
  }
  if (input.Type !== undefined && input.Type !== null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom !== undefined && input.ValidFrom !== null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.ReplaceUnhealthyInstances !== undefined && input.ReplaceUnhealthyInstances !== null) {
    entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
  }
  if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  if (input.LoadBalancersConfig !== undefined && input.LoadBalancersConfig !== null) {
    const memberEntries = serializeAws_ec2LoadBalancersConfig(input.LoadBalancersConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
    entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2SpotFleetRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SpotFleetTagSpecification = (input: SpotFleetTagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ResourceType !== undefined && input.ResourceType !== null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags !== undefined && input.Tags !== null) {
    const memberEntries = serializeAws_ec2TagList(input.Tags, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2SpotFleetTagSpecificationList = (
  input: SpotFleetTagSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2SpotFleetTagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2SpotInstanceRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SpotInstanceRequestId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2SpotMaintenanceStrategies = (input: SpotMaintenanceStrategies, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityRebalance !== undefined && input.CapacityRebalance !== null) {
    const memberEntries = serializeAws_ec2SpotCapacityRebalance(input.CapacityRebalance, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2SpotMarketOptions = (input: SpotMarketOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.MaxPrice !== undefined && input.MaxPrice !== null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SpotInstanceType !== undefined && input.SpotInstanceType !== null) {
    entries["SpotInstanceType"] = input.SpotInstanceType;
  }
  if (input.BlockDurationMinutes !== undefined && input.BlockDurationMinutes !== null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ValidUntil !== undefined && input.ValidUntil !== null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

const serializeAws_ec2SpotOptionsRequest = (input: SpotOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationStrategy !== undefined && input.AllocationStrategy !== null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.MaintenanceStrategies !== undefined && input.MaintenanceStrategies !== null) {
    const memberEntries = serializeAws_ec2FleetSpotMaintenanceStrategiesRequest(input.MaintenanceStrategies, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInterruptionBehavior !== undefined && input.InstanceInterruptionBehavior !== null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  if (input.InstancePoolsToUseCount !== undefined && input.InstancePoolsToUseCount !== null) {
    entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
  }
  if (input.SingleInstanceType !== undefined && input.SingleInstanceType !== null) {
    entries["SingleInstanceType"] = input.SingleInstanceType;
  }
  if (input.SingleAvailabilityZone !== undefined && input.SingleAvailabilityZone !== null) {
    entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
  }
  if (input.MinTargetCapacity !== undefined && input.MinTargetCapacity !== null) {
    entries["MinTargetCapacity"] = input.MinTargetCapacity;
  }
  if (input.MaxTotalPrice !== undefined && input.MaxTotalPrice !== null) {
    entries["MaxTotalPrice"] = input.MaxTotalPrice;
  }
  return entries;
};

const serializeAws_ec2SpotPlacement = (input: SpotPlacement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone !== undefined && input.AvailabilityZone !== null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.Tenancy !== undefined && input.Tenancy !== null) {
    entries["Tenancy"] = input.Tenancy;
  }
  return entries;
};

const serializeAws_ec2StartInstancesRequest = (input: StartInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AdditionalInfo !== undefined && input.AdditionalInfo !== null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2StartNetworkInsightsAnalysisRequest = (
  input: StartNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsPathId !== undefined && input.NetworkInsightsPathId !== null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  if (input.FilterInArns !== undefined && input.FilterInArns !== null) {
    const memberEntries = serializeAws_ec2ArnList(input.FilterInArns, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications !== undefined && input.TagSpecifications !== null) {
    const memberEntries = serializeAws_ec2TagSpecificationList(input.TagSpecifications, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken !== undefined && input.ClientToken !== null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

const serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest = (
  input: StartVpcEndpointServicePrivateDnsVerificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId !== undefined && input.ServiceId !== null) {
    entries["ServiceId"] = input.ServiceId;
  }
  return entries;
};

const serializeAws_ec2StopInstancesRequest = (input: StopInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Hibernate !== undefined && input.Hibernate !== null) {
    entries["Hibernate"] = input.Hibernate;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Force !== undefined && input.Force !== null) {
    entries["Force"] = input.Force;
  }
  return entries;
};

const serializeAws_ec2Storage = (input: Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3 !== undefined && input.S3 !== null) {
    const memberEntries = serializeAws_ec2S3Storage(input.S3, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2StorageLocation = (input: StorageLocation, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Bucket !== undefined && input.Bucket !== null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.Key !== undefined && input.Key !== null) {
    entries["Key"] = input.Key;
  }
  return entries;
};

const serializeAws_ec2SubnetIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2Tag = (input: Tag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key !== undefined && input.Key !== null) {
    entries["Key"] = input.Key;
  }
  if (input.Value !== undefined && input.Value !== null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

const serializeAws_ec2TagList = (input: Tag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2TagSpecification = (input: TagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ResourceType !== undefined && input.ResourceType !== null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags !== undefined && input.Tags !== null) {
    const memberEntries = serializeAws_ec2TagList(input.Tags, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2TagSpecificationList = (input: TagSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2TagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2TargetCapacitySpecificationRequest = (
  input: TargetCapacitySpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TotalTargetCapacity !== undefined && input.TotalTargetCapacity !== null) {
    entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
  }
  if (input.OnDemandTargetCapacity !== undefined && input.OnDemandTargetCapacity !== null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  if (input.SpotTargetCapacity !== undefined && input.SpotTargetCapacity !== null) {
    entries["SpotTargetCapacity"] = input.SpotTargetCapacity;
  }
  if (input.DefaultTargetCapacityType !== undefined && input.DefaultTargetCapacityType !== null) {
    entries["DefaultTargetCapacityType"] = input.DefaultTargetCapacityType;
  }
  return entries;
};

const serializeAws_ec2TargetConfigurationRequest = (
  input: TargetConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceCount !== undefined && input.InstanceCount !== null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.OfferingId !== undefined && input.OfferingId !== null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

const serializeAws_ec2TargetConfigurationRequestSet = (
  input: TargetConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2TargetConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2TargetGroup = (input: TargetGroup, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Arn !== undefined && input.Arn !== null) {
    entries["Arn"] = input.Arn;
  }
  return entries;
};

const serializeAws_ec2TargetGroups = (input: TargetGroup[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2TargetGroup(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2TargetGroupsConfig = (input: TargetGroupsConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TargetGroups !== undefined && input.TargetGroups !== null) {
    const memberEntries = serializeAws_ec2TargetGroups(input.TargetGroups, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2TerminateClientVpnConnectionsRequest = (
  input: TerminateClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId !== undefined && input.ClientVpnEndpointId !== null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.ConnectionId !== undefined && input.ConnectionId !== null) {
    entries["ConnectionId"] = input.ConnectionId;
  }
  if (input.Username !== undefined && input.Username !== null) {
    entries["Username"] = input.Username;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2TerminateInstancesRequest = (input: TerminateInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorFilterIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorFilterRuleFieldList = (
  input: (TrafficMirrorFilterRuleField | string)[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorNetworkServiceList = (
  input: (TrafficMirrorNetworkService | string)[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorPortRangeRequest = (
  input: TrafficMirrorPortRangeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.FromPort !== undefined && input.FromPort !== null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.ToPort !== undefined && input.ToPort !== null) {
    entries["ToPort"] = input.ToPort;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorSessionFieldList = (
  input: (TrafficMirrorSessionField | string)[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorSessionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TrafficMirrorTargetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayAttachmentIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayCidrBlockStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayConnectPeerIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayConnectRequestBgpOptions = (
  input: TransitGatewayConnectRequestBgpOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PeerAsn !== undefined && input.PeerAsn !== null) {
    entries["PeerAsn"] = input.PeerAsn;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayMulticastDomainIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayNetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewayRequestOptions = (
  input: TransitGatewayRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AmazonSideAsn !== undefined && input.AmazonSideAsn !== null) {
    entries["AmazonSideAsn"] = input.AmazonSideAsn;
  }
  if (input.AutoAcceptSharedAttachments !== undefined && input.AutoAcceptSharedAttachments !== null) {
    entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
  }
  if (input.DefaultRouteTableAssociation !== undefined && input.DefaultRouteTableAssociation !== null) {
    entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
  }
  if (input.DefaultRouteTablePropagation !== undefined && input.DefaultRouteTablePropagation !== null) {
    entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
  }
  if (input.VpnEcmpSupport !== undefined && input.VpnEcmpSupport !== null) {
    entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
  }
  if (input.DnsSupport !== undefined && input.DnsSupport !== null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.MulticastSupport !== undefined && input.MulticastSupport !== null) {
    entries["MulticastSupport"] = input.MulticastSupport;
  }
  if (input.TransitGatewayCidrBlocks !== undefined && input.TransitGatewayCidrBlocks !== null) {
    const memberEntries = serializeAws_ec2TransitGatewayCidrBlockStringList(input.TransitGatewayCidrBlocks, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2TransitGatewayRouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2TransitGatewaySubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2UnassignIpv6AddressesRequest = (
  input: UnassignIpv6AddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Ipv6Addresses !== undefined && input.Ipv6Addresses !== null) {
    const memberEntries = serializeAws_ec2Ipv6AddressList(input.Ipv6Addresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

const serializeAws_ec2UnassignPrivateIpAddressesRequest = (
  input: UnassignPrivateIpAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId !== undefined && input.NetworkInterfaceId !== null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddresses !== undefined && input.PrivateIpAddresses !== null) {
    const memberEntries = serializeAws_ec2PrivateIpAddressStringList(input.PrivateIpAddresses, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2UnmonitorInstancesRequest = (input: UnmonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds !== undefined && input.InstanceIds !== null) {
    const memberEntries = serializeAws_ec2InstanceIdStringList(input.InstanceIds, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions !== undefined && input.IpPermissions !== null) {
    const memberEntries = serializeAws_ec2IpPermissionList(input.IpPermissions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

const serializeAws_ec2UserBucket = (input: UserBucket, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3Bucket !== undefined && input.S3Bucket !== null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Key !== undefined && input.S3Key !== null) {
    entries["S3Key"] = input.S3Key;
  }
  return entries;
};

const serializeAws_ec2UserData = (input: UserData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Data !== undefined && input.Data !== null) {
    entries["Data"] = input.Data;
  }
  return entries;
};

const serializeAws_ec2UserGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2UserIdGroupPair = (input: UserIdGroupPair, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description !== undefined && input.Description !== null) {
    entries["Description"] = input.Description;
  }
  if (input.GroupId !== undefined && input.GroupId !== null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName !== undefined && input.GroupName !== null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.PeeringStatus !== undefined && input.PeeringStatus !== null) {
    entries["PeeringStatus"] = input.PeeringStatus;
  }
  if (input.UserId !== undefined && input.UserId !== null) {
    entries["UserId"] = input.UserId;
  }
  if (input.VpcId !== undefined && input.VpcId !== null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpcPeeringConnectionId !== undefined && input.VpcPeeringConnectionId !== null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

const serializeAws_ec2UserIdGroupPairList = (input: UserIdGroupPair[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2UserIdGroupPair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2UserIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ValueStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VersionStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VolumeDetail = (input: VolumeDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Size !== undefined && input.Size !== null) {
    entries["Size"] = input.Size;
  }
  return entries;
};

const serializeAws_ec2VolumeIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VolumeId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcClassicLinkIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcEndpointRouteTableIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcEndpointSecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcEndpointServiceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpcPeeringConnectionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpnConnectionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnConnectionId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpnConnectionOptionsSpecification = (
  input: VpnConnectionOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.EnableAcceleration !== undefined && input.EnableAcceleration !== null) {
    entries["EnableAcceleration"] = input.EnableAcceleration;
  }
  if (input.StaticRoutesOnly !== undefined && input.StaticRoutesOnly !== null) {
    entries["StaticRoutesOnly"] = input.StaticRoutesOnly;
  }
  if (input.TunnelInsideIpVersion !== undefined && input.TunnelInsideIpVersion !== null) {
    entries["TunnelInsideIpVersion"] = input.TunnelInsideIpVersion;
  }
  if (input.TunnelOptions !== undefined && input.TunnelOptions !== null) {
    const memberEntries = serializeAws_ec2VpnTunnelOptionsSpecificationsList(input.TunnelOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LocalIpv4NetworkCidr !== undefined && input.LocalIpv4NetworkCidr !== null) {
    entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
  }
  if (input.RemoteIpv4NetworkCidr !== undefined && input.RemoteIpv4NetworkCidr !== null) {
    entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
  }
  if (input.LocalIpv6NetworkCidr !== undefined && input.LocalIpv6NetworkCidr !== null) {
    entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
  }
  if (input.RemoteIpv6NetworkCidr !== undefined && input.RemoteIpv6NetworkCidr !== null) {
    entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
  }
  return entries;
};

const serializeAws_ec2VpnGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2VpnTunnelOptionsSpecification = (
  input: VpnTunnelOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TunnelInsideCidr !== undefined && input.TunnelInsideCidr !== null) {
    entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
  }
  if (input.TunnelInsideIpv6Cidr !== undefined && input.TunnelInsideIpv6Cidr !== null) {
    entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
  }
  if (input.PreSharedKey !== undefined && input.PreSharedKey !== null) {
    entries["PreSharedKey"] = input.PreSharedKey;
  }
  if (input.Phase1LifetimeSeconds !== undefined && input.Phase1LifetimeSeconds !== null) {
    entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
  }
  if (input.Phase2LifetimeSeconds !== undefined && input.Phase2LifetimeSeconds !== null) {
    entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
  }
  if (input.RekeyMarginTimeSeconds !== undefined && input.RekeyMarginTimeSeconds !== null) {
    entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
  }
  if (input.RekeyFuzzPercentage !== undefined && input.RekeyFuzzPercentage !== null) {
    entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
  }
  if (input.ReplayWindowSize !== undefined && input.ReplayWindowSize !== null) {
    entries["ReplayWindowSize"] = input.ReplayWindowSize;
  }
  if (input.DPDTimeoutSeconds !== undefined && input.DPDTimeoutSeconds !== null) {
    entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
  }
  if (input.DPDTimeoutAction !== undefined && input.DPDTimeoutAction !== null) {
    entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
  }
  if (input.Phase1EncryptionAlgorithms !== undefined && input.Phase1EncryptionAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase1EncryptionAlgorithmsRequestList(
      input.Phase1EncryptionAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2EncryptionAlgorithms !== undefined && input.Phase2EncryptionAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase2EncryptionAlgorithmsRequestList(
      input.Phase2EncryptionAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1IntegrityAlgorithms !== undefined && input.Phase1IntegrityAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase1IntegrityAlgorithmsRequestList(
      input.Phase1IntegrityAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2IntegrityAlgorithms !== undefined && input.Phase2IntegrityAlgorithms !== null) {
    const memberEntries = serializeAws_ec2Phase2IntegrityAlgorithmsRequestList(
      input.Phase2IntegrityAlgorithms,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1DHGroupNumbers !== undefined && input.Phase1DHGroupNumbers !== null) {
    const memberEntries = serializeAws_ec2Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2DHGroupNumbers !== undefined && input.Phase2DHGroupNumbers !== null) {
    const memberEntries = serializeAws_ec2Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IKEVersions !== undefined && input.IKEVersions !== null) {
    const memberEntries = serializeAws_ec2IKEVersionsRequestList(input.IKEVersions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartupAction !== undefined && input.StartupAction !== null) {
    entries["StartupAction"] = input.StartupAction;
  }
  return entries;
};

const serializeAws_ec2VpnTunnelOptionsSpecificationsList = (
  input: VpnTunnelOptionsSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = serializeAws_ec2VpnTunnelOptionsSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

const serializeAws_ec2WithdrawByoipCidrRequest = (input: WithdrawByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr !== undefined && input.Cidr !== null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun !== undefined && input.DryRun !== null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

const serializeAws_ec2ZoneIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const serializeAws_ec2ZoneNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (let entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

const deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): AcceptReservedInstancesExchangeQuoteResult => {
  let contents: any = {
    ExchangeId: undefined,
  };
  if (output["exchangeId"] !== undefined) {
    contents.ExchangeId = output["exchangeId"];
  }
  return contents;
};

const deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayMulticastDomainAssociationsResult => {
  let contents: any = {
    Associations: undefined,
  };
  if (output["associations"] !== undefined) {
    contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(
      output["associations"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayPeeringAttachmentResult => {
  let contents: any = {
    TransitGatewayPeeringAttachment: undefined,
  };
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayVpcAttachmentResult => {
  let contents: any = {
    TransitGatewayVpcAttachment: undefined,
  };
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AcceptVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcEndpointConnectionsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AcceptVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcPeeringConnectionResult => {
  let contents: any = {
    VpcPeeringConnection: undefined,
  };
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2AccountAttribute = (output: any, context: __SerdeContext): AccountAttribute => {
  let contents: any = {
    AttributeName: undefined,
    AttributeValues: undefined,
  };
  if (output["attributeName"] !== undefined) {
    contents.AttributeName = output["attributeName"];
  }
  if (output.attributeValueSet === "") {
    contents.AttributeValues = [];
  }
  if (output["attributeValueSet"] !== undefined && output["attributeValueSet"]["item"] !== undefined) {
    contents.AttributeValues = deserializeAws_ec2AccountAttributeValueList(
      __getArrayIfSingleItem(output["attributeValueSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AccountAttributeList = (output: any, context: __SerdeContext): AccountAttribute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AccountAttribute(entry, context);
    });
};

const deserializeAws_ec2AccountAttributeValue = (output: any, context: __SerdeContext): AccountAttributeValue => {
  let contents: any = {
    AttributeValue: undefined,
  };
  if (output["attributeValue"] !== undefined) {
    contents.AttributeValue = output["attributeValue"];
  }
  return contents;
};

const deserializeAws_ec2AccountAttributeValueList = (output: any, context: __SerdeContext): AccountAttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AccountAttributeValue(entry, context);
    });
};

const deserializeAws_ec2ActiveInstance = (output: any, context: __SerdeContext): ActiveInstance => {
  let contents: any = {
    InstanceId: undefined,
    InstanceType: undefined,
    SpotInstanceRequestId: undefined,
    InstanceHealth: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = output["spotInstanceRequestId"];
  }
  if (output["instanceHealth"] !== undefined) {
    contents.InstanceHealth = output["instanceHealth"];
  }
  return contents;
};

const deserializeAws_ec2ActiveInstanceSet = (output: any, context: __SerdeContext): ActiveInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ActiveInstance(entry, context);
    });
};

const deserializeAws_ec2Address = (output: any, context: __SerdeContext): Address => {
  let contents: any = {
    InstanceId: undefined,
    PublicIp: undefined,
    AllocationId: undefined,
    AssociationId: undefined,
    Domain: undefined,
    NetworkInterfaceId: undefined,
    NetworkInterfaceOwnerId: undefined,
    PrivateIpAddress: undefined,
    Tags: undefined,
    PublicIpv4Pool: undefined,
    NetworkBorderGroup: undefined,
    CustomerOwnedIp: undefined,
    CustomerOwnedIpv4Pool: undefined,
    CarrierIp: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["domain"] !== undefined) {
    contents.Domain = output["domain"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["networkInterfaceOwnerId"] !== undefined) {
    contents.NetworkInterfaceOwnerId = output["networkInterfaceOwnerId"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["publicIpv4Pool"] !== undefined) {
    contents.PublicIpv4Pool = output["publicIpv4Pool"];
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = output["networkBorderGroup"];
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = output["customerOwnedIp"];
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = output["customerOwnedIpv4Pool"];
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = output["carrierIp"];
  }
  return contents;
};

const deserializeAws_ec2AddressList = (output: any, context: __SerdeContext): Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Address(entry, context);
    });
};

const deserializeAws_ec2AdvertiseByoipCidrResult = (output: any, context: __SerdeContext): AdvertiseByoipCidrResult => {
  let contents: any = {
    ByoipCidr: undefined,
  };
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

const deserializeAws_ec2AllocateAddressResult = (output: any, context: __SerdeContext): AllocateAddressResult => {
  let contents: any = {
    PublicIp: undefined,
    AllocationId: undefined,
    PublicIpv4Pool: undefined,
    NetworkBorderGroup: undefined,
    Domain: undefined,
    CustomerOwnedIp: undefined,
    CustomerOwnedIpv4Pool: undefined,
    CarrierIp: undefined,
  };
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["publicIpv4Pool"] !== undefined) {
    contents.PublicIpv4Pool = output["publicIpv4Pool"];
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = output["networkBorderGroup"];
  }
  if (output["domain"] !== undefined) {
    contents.Domain = output["domain"];
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = output["customerOwnedIp"];
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = output["customerOwnedIpv4Pool"];
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = output["carrierIp"];
  }
  return contents;
};

const deserializeAws_ec2AllocateHostsResult = (output: any, context: __SerdeContext): AllocateHostsResult => {
  let contents: any = {
    HostIds: undefined,
  };
  if (output.hostIdSet === "") {
    contents.HostIds = [];
  }
  if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIds = deserializeAws_ec2ResponseHostIdList(
      __getArrayIfSingleItem(output["hostIdSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AllowedPrincipal = (output: any, context: __SerdeContext): AllowedPrincipal => {
  let contents: any = {
    PrincipalType: undefined,
    Principal: undefined,
  };
  if (output["principalType"] !== undefined) {
    contents.PrincipalType = output["principalType"];
  }
  if (output["principal"] !== undefined) {
    contents.Principal = output["principal"];
  }
  return contents;
};

const deserializeAws_ec2AllowedPrincipalSet = (output: any, context: __SerdeContext): AllowedPrincipal[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AllowedPrincipal(entry, context);
    });
};

const deserializeAws_ec2AlternatePathHint = (output: any, context: __SerdeContext): AlternatePathHint => {
  let contents: any = {
    ComponentId: undefined,
    ComponentArn: undefined,
  };
  if (output["componentId"] !== undefined) {
    contents.ComponentId = output["componentId"];
  }
  if (output["componentArn"] !== undefined) {
    contents.ComponentArn = output["componentArn"];
  }
  return contents;
};

const deserializeAws_ec2AlternatePathHintList = (output: any, context: __SerdeContext): AlternatePathHint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AlternatePathHint(entry, context);
    });
};

const deserializeAws_ec2AnalysisAclRule = (output: any, context: __SerdeContext): AnalysisAclRule => {
  let contents: any = {
    Cidr: undefined,
    Egress: undefined,
    PortRange: undefined,
    Protocol: undefined,
    RuleAction: undefined,
    RuleNumber: undefined,
  };
  if (output["cidr"] !== undefined) {
    contents.Cidr = output["cidr"];
  }
  if (output["egress"] !== undefined) {
    contents.Egress = output["egress"] == "true";
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = output["ruleAction"];
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = parseInt(output["ruleNumber"]);
  }
  return contents;
};

const deserializeAws_ec2AnalysisComponent = (output: any, context: __SerdeContext): AnalysisComponent => {
  let contents: any = {
    Id: undefined,
    Arn: undefined,
  };
  if (output["id"] !== undefined) {
    contents.Id = output["id"];
  }
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  return contents;
};

const deserializeAws_ec2AnalysisComponentList = (output: any, context: __SerdeContext): AnalysisComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AnalysisComponent(entry, context);
    });
};

const deserializeAws_ec2AnalysisLoadBalancerListener = (
  output: any,
  context: __SerdeContext
): AnalysisLoadBalancerListener => {
  let contents: any = {
    LoadBalancerPort: undefined,
    InstancePort: undefined,
  };
  if (output["loadBalancerPort"] !== undefined) {
    contents.LoadBalancerPort = parseInt(output["loadBalancerPort"]);
  }
  if (output["instancePort"] !== undefined) {
    contents.InstancePort = parseInt(output["instancePort"]);
  }
  return contents;
};

const deserializeAws_ec2AnalysisLoadBalancerTarget = (
  output: any,
  context: __SerdeContext
): AnalysisLoadBalancerTarget => {
  let contents: any = {
    Address: undefined,
    AvailabilityZone: undefined,
    Instance: undefined,
    Port: undefined,
  };
  if (output["address"] !== undefined) {
    contents.Address = output["address"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["instance"] !== undefined) {
    contents.Instance = deserializeAws_ec2AnalysisComponent(output["instance"], context);
  }
  if (output["port"] !== undefined) {
    contents.Port = parseInt(output["port"]);
  }
  return contents;
};

const deserializeAws_ec2AnalysisPacketHeader = (output: any, context: __SerdeContext): AnalysisPacketHeader => {
  let contents: any = {
    DestinationAddresses: undefined,
    DestinationPortRanges: undefined,
    Protocol: undefined,
    SourceAddresses: undefined,
    SourcePortRanges: undefined,
  };
  if (output.destinationAddressSet === "") {
    contents.DestinationAddresses = [];
  }
  if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
    contents.DestinationAddresses = deserializeAws_ec2IpAddressList(
      __getArrayIfSingleItem(output["destinationAddressSet"]["item"]),
      context
    );
  }
  if (output.destinationPortRangeSet === "") {
    contents.DestinationPortRanges = [];
  }
  if (output["destinationPortRangeSet"] !== undefined && output["destinationPortRangeSet"]["item"] !== undefined) {
    contents.DestinationPortRanges = deserializeAws_ec2PortRangeList(
      __getArrayIfSingleItem(output["destinationPortRangeSet"]["item"]),
      context
    );
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  if (output.sourceAddressSet === "") {
    contents.SourceAddresses = [];
  }
  if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
    contents.SourceAddresses = deserializeAws_ec2IpAddressList(
      __getArrayIfSingleItem(output["sourceAddressSet"]["item"]),
      context
    );
  }
  if (output.sourcePortRangeSet === "") {
    contents.SourcePortRanges = [];
  }
  if (output["sourcePortRangeSet"] !== undefined && output["sourcePortRangeSet"]["item"] !== undefined) {
    contents.SourcePortRanges = deserializeAws_ec2PortRangeList(
      __getArrayIfSingleItem(output["sourcePortRangeSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AnalysisRouteTableRoute = (output: any, context: __SerdeContext): AnalysisRouteTableRoute => {
  let contents: any = {
    DestinationCidr: undefined,
    DestinationPrefixListId: undefined,
    EgressOnlyInternetGatewayId: undefined,
    GatewayId: undefined,
    InstanceId: undefined,
    NatGatewayId: undefined,
    NetworkInterfaceId: undefined,
    Origin: undefined,
    TransitGatewayId: undefined,
    VpcPeeringConnectionId: undefined,
  };
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = output["destinationCidr"];
  }
  if (output["destinationPrefixListId"] !== undefined) {
    contents.DestinationPrefixListId = output["destinationPrefixListId"];
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = output["egressOnlyInternetGatewayId"];
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = output["gatewayId"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = output["natGatewayId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["origin"] !== undefined) {
    contents.Origin = output["origin"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = output["vpcPeeringConnectionId"];
  }
  return contents;
};

const deserializeAws_ec2AnalysisSecurityGroupRule = (
  output: any,
  context: __SerdeContext
): AnalysisSecurityGroupRule => {
  let contents: any = {
    Cidr: undefined,
    Direction: undefined,
    SecurityGroupId: undefined,
    PortRange: undefined,
    PrefixListId: undefined,
    Protocol: undefined,
  };
  if (output["cidr"] !== undefined) {
    contents.Cidr = output["cidr"];
  }
  if (output["direction"] !== undefined) {
    contents.Direction = output["direction"];
  }
  if (output["securityGroupId"] !== undefined) {
    contents.SecurityGroupId = output["securityGroupId"];
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  return contents;
};

const deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): ApplySecurityGroupsToClientVpnTargetNetworkResult => {
  let contents: any = {
    SecurityGroupIds: undefined,
  };
  if (output.securityGroupIds === "") {
    contents.SecurityGroupIds = [];
  }
  if (output["securityGroupIds"] !== undefined && output["securityGroupIds"]["item"] !== undefined) {
    contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet(
      __getArrayIfSingleItem(output["securityGroupIds"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ArchitectureTypeList = (
  output: any,
  context: __SerdeContext
): (ArchitectureType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2ArnList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2AssignedPrivateIpAddress = (output: any, context: __SerdeContext): AssignedPrivateIpAddress => {
  let contents: any = {
    PrivateIpAddress: undefined,
  };
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2AssignedPrivateIpAddressList = (
  output: any,
  context: __SerdeContext
): AssignedPrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AssignedPrivateIpAddress(entry, context);
    });
};

const deserializeAws_ec2AssignIpv6AddressesResult = (
  output: any,
  context: __SerdeContext
): AssignIpv6AddressesResult => {
  let contents: any = {
    AssignedIpv6Addresses: undefined,
    NetworkInterfaceId: undefined,
  };
  if (output.assignedIpv6Addresses === "") {
    contents.AssignedIpv6Addresses = [];
  }
  if (output["assignedIpv6Addresses"] !== undefined && output["assignedIpv6Addresses"]["item"] !== undefined) {
    contents.AssignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList(
      __getArrayIfSingleItem(output["assignedIpv6Addresses"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  return contents;
};

const deserializeAws_ec2AssignPrivateIpAddressesResult = (
  output: any,
  context: __SerdeContext
): AssignPrivateIpAddressesResult => {
  let contents: any = {
    NetworkInterfaceId: undefined,
    AssignedPrivateIpAddresses: undefined,
  };
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output.assignedPrivateIpAddressesSet === "") {
    contents.AssignedPrivateIpAddresses = [];
  }
  if (
    output["assignedPrivateIpAddressesSet"] !== undefined &&
    output["assignedPrivateIpAddressesSet"]["item"] !== undefined
  ) {
    contents.AssignedPrivateIpAddresses = deserializeAws_ec2AssignedPrivateIpAddressList(
      __getArrayIfSingleItem(output["assignedPrivateIpAddressesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AssociateAddressResult = (output: any, context: __SerdeContext): AssociateAddressResult => {
  let contents: any = {
    AssociationId: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  return contents;
};

const deserializeAws_ec2AssociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): AssociateClientVpnTargetNetworkResult => {
  let contents: any = {
    AssociationId: undefined,
    Status: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2AssociatedRole = (output: any, context: __SerdeContext): AssociatedRole => {
  let contents: any = {
    AssociatedRoleArn: undefined,
    CertificateS3BucketName: undefined,
    CertificateS3ObjectKey: undefined,
    EncryptionKmsKeyId: undefined,
  };
  if (output["associatedRoleArn"] !== undefined) {
    contents.AssociatedRoleArn = output["associatedRoleArn"];
  }
  if (output["certificateS3BucketName"] !== undefined) {
    contents.CertificateS3BucketName = output["certificateS3BucketName"];
  }
  if (output["certificateS3ObjectKey"] !== undefined) {
    contents.CertificateS3ObjectKey = output["certificateS3ObjectKey"];
  }
  if (output["encryptionKmsKeyId"] !== undefined) {
    contents.EncryptionKmsKeyId = output["encryptionKmsKeyId"];
  }
  return contents;
};

const deserializeAws_ec2AssociatedRolesList = (output: any, context: __SerdeContext): AssociatedRole[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AssociatedRole(entry, context);
    });
};

const deserializeAws_ec2AssociatedTargetNetwork = (output: any, context: __SerdeContext): AssociatedTargetNetwork => {
  let contents: any = {
    NetworkId: undefined,
    NetworkType: undefined,
  };
  if (output["networkId"] !== undefined) {
    contents.NetworkId = output["networkId"];
  }
  if (output["networkType"] !== undefined) {
    contents.NetworkType = output["networkType"];
  }
  return contents;
};

const deserializeAws_ec2AssociatedTargetNetworkSet = (
  output: any,
  context: __SerdeContext
): AssociatedTargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AssociatedTargetNetwork(entry, context);
    });
};

const deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): AssociateEnclaveCertificateIamRoleResult => {
  let contents: any = {
    CertificateS3BucketName: undefined,
    CertificateS3ObjectKey: undefined,
    EncryptionKmsKeyId: undefined,
  };
  if (output["certificateS3BucketName"] !== undefined) {
    contents.CertificateS3BucketName = output["certificateS3BucketName"];
  }
  if (output["certificateS3ObjectKey"] !== undefined) {
    contents.CertificateS3ObjectKey = output["certificateS3ObjectKey"];
  }
  if (output["encryptionKmsKeyId"] !== undefined) {
    contents.EncryptionKmsKeyId = output["encryptionKmsKeyId"];
  }
  return contents;
};

const deserializeAws_ec2AssociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): AssociateIamInstanceProfileResult => {
  let contents: any = {
    IamInstanceProfileAssociation: undefined,
  };
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AssociateRouteTableResult = (
  output: any,
  context: __SerdeContext
): AssociateRouteTableResult => {
  let contents: any = {
    AssociationId: undefined,
    AssociationState: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

const deserializeAws_ec2AssociateSubnetCidrBlockResult = (
  output: any,
  context: __SerdeContext
): AssociateSubnetCidrBlockResult => {
  let contents: any = {
    Ipv6CidrBlockAssociation: undefined,
    SubnetId: undefined,
  };
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(
      output["ipv6CidrBlockAssociation"],
      context
    );
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  return contents;
};

const deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayMulticastDomainResult => {
  let contents: any = {
    Associations: undefined,
  };
  if (output["associations"] !== undefined) {
    contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(
      output["associations"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2AssociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayRouteTableResult => {
  let contents: any = {
    Association: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
  }
  return contents;
};

const deserializeAws_ec2AssociateVpcCidrBlockResult = (
  output: any,
  context: __SerdeContext
): AssociateVpcCidrBlockResult => {
  let contents: any = {
    Ipv6CidrBlockAssociation: undefined,
    CidrBlockAssociation: undefined,
    VpcId: undefined,
  };
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(
      output["ipv6CidrBlockAssociation"],
      context
    );
  }
  if (output["cidrBlockAssociation"] !== undefined) {
    contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2AssociationStatus = (output: any, context: __SerdeContext): AssociationStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2AttachClassicLinkVpcResult = (
  output: any,
  context: __SerdeContext
): AttachClassicLinkVpcResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2AttachNetworkInterfaceResult = (
  output: any,
  context: __SerdeContext
): AttachNetworkInterfaceResult => {
  let contents: any = {
    AttachmentId: undefined,
    NetworkCardIndex: undefined,
  };
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = output["attachmentId"];
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["networkCardIndex"]);
  }
  return contents;
};

const deserializeAws_ec2AttachVpnGatewayResult = (output: any, context: __SerdeContext): AttachVpnGatewayResult => {
  let contents: any = {
    VpcAttachment: undefined,
  };
  if (output["attachment"] !== undefined) {
    contents.VpcAttachment = deserializeAws_ec2VpcAttachment(output["attachment"], context);
  }
  return contents;
};

const deserializeAws_ec2AttributeBooleanValue = (output: any, context: __SerdeContext): AttributeBooleanValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"] == "true";
  }
  return contents;
};

const deserializeAws_ec2AttributeValue = (output: any, context: __SerdeContext): AttributeValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2AuthorizationRule = (output: any, context: __SerdeContext): AuthorizationRule => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    Description: undefined,
    GroupId: undefined,
    AccessAll: undefined,
    DestinationCidr: undefined,
    Status: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output["accessAll"] !== undefined) {
    contents.AccessAll = output["accessAll"] == "true";
  }
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = output["destinationCidr"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2AuthorizationRuleSet = (output: any, context: __SerdeContext): AuthorizationRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AuthorizationRule(entry, context);
    });
};

const deserializeAws_ec2AuthorizeClientVpnIngressResult = (
  output: any,
  context: __SerdeContext
): AuthorizeClientVpnIngressResult => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2AvailabilityZone = (output: any, context: __SerdeContext): AvailabilityZone => {
  let contents: any = {
    State: undefined,
    OptInStatus: undefined,
    Messages: undefined,
    RegionName: undefined,
    ZoneName: undefined,
    ZoneId: undefined,
    GroupName: undefined,
    NetworkBorderGroup: undefined,
    ZoneType: undefined,
    ParentZoneName: undefined,
    ParentZoneId: undefined,
  };
  if (output["zoneState"] !== undefined) {
    contents.State = output["zoneState"];
  }
  if (output["optInStatus"] !== undefined) {
    contents.OptInStatus = output["optInStatus"];
  }
  if (output.messageSet === "") {
    contents.Messages = [];
  }
  if (output["messageSet"] !== undefined && output["messageSet"]["item"] !== undefined) {
    contents.Messages = deserializeAws_ec2AvailabilityZoneMessageList(
      __getArrayIfSingleItem(output["messageSet"]["item"]),
      context
    );
  }
  if (output["regionName"] !== undefined) {
    contents.RegionName = output["regionName"];
  }
  if (output["zoneName"] !== undefined) {
    contents.ZoneName = output["zoneName"];
  }
  if (output["zoneId"] !== undefined) {
    contents.ZoneId = output["zoneId"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = output["networkBorderGroup"];
  }
  if (output["zoneType"] !== undefined) {
    contents.ZoneType = output["zoneType"];
  }
  if (output["parentZoneName"] !== undefined) {
    contents.ParentZoneName = output["parentZoneName"];
  }
  if (output["parentZoneId"] !== undefined) {
    contents.ParentZoneId = output["parentZoneId"];
  }
  return contents;
};

const deserializeAws_ec2AvailabilityZoneList = (output: any, context: __SerdeContext): AvailabilityZone[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AvailabilityZone(entry, context);
    });
};

const deserializeAws_ec2AvailabilityZoneMessage = (output: any, context: __SerdeContext): AvailabilityZoneMessage => {
  let contents: any = {
    Message: undefined,
  };
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2AvailabilityZoneMessageList = (
  output: any,
  context: __SerdeContext
): AvailabilityZoneMessage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AvailabilityZoneMessage(entry, context);
    });
};

const deserializeAws_ec2AvailableCapacity = (output: any, context: __SerdeContext): AvailableCapacity => {
  let contents: any = {
    AvailableInstanceCapacity: undefined,
    AvailableVCpus: undefined,
  };
  if (output.availableInstanceCapacity === "") {
    contents.AvailableInstanceCapacity = [];
  }
  if (output["availableInstanceCapacity"] !== undefined && output["availableInstanceCapacity"]["item"] !== undefined) {
    contents.AvailableInstanceCapacity = deserializeAws_ec2AvailableInstanceCapacityList(
      __getArrayIfSingleItem(output["availableInstanceCapacity"]["item"]),
      context
    );
  }
  if (output["availableVCpus"] !== undefined) {
    contents.AvailableVCpus = parseInt(output["availableVCpus"]);
  }
  return contents;
};

const deserializeAws_ec2AvailableInstanceCapacityList = (output: any, context: __SerdeContext): InstanceCapacity[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceCapacity(entry, context);
    });
};

const deserializeAws_ec2BlockDeviceMapping = (output: any, context: __SerdeContext): BlockDeviceMapping => {
  let contents: any = {
    DeviceName: undefined,
    VirtualName: undefined,
    Ebs: undefined,
    NoDevice: undefined,
  };
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = output["deviceName"];
  }
  if (output["virtualName"] !== undefined) {
    contents.VirtualName = output["virtualName"];
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = deserializeAws_ec2EbsBlockDevice(output["ebs"], context);
  }
  if (output["noDevice"] !== undefined) {
    contents.NoDevice = output["noDevice"];
  }
  return contents;
};

const deserializeAws_ec2BlockDeviceMappingList = (output: any, context: __SerdeContext): BlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2BlockDeviceMapping(entry, context);
    });
};

const deserializeAws_ec2BundleInstanceResult = (output: any, context: __SerdeContext): BundleInstanceResult => {
  let contents: any = {
    BundleTask: undefined,
  };
  if (output["bundleInstanceTask"] !== undefined) {
    contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
  }
  return contents;
};

const deserializeAws_ec2BundleTask = (output: any, context: __SerdeContext): BundleTask => {
  let contents: any = {
    BundleId: undefined,
    BundleTaskError: undefined,
    InstanceId: undefined,
    Progress: undefined,
    StartTime: undefined,
    State: undefined,
    Storage: undefined,
    UpdateTime: undefined,
  };
  if (output["bundleId"] !== undefined) {
    contents.BundleId = output["bundleId"];
  }
  if (output["error"] !== undefined) {
    contents.BundleTaskError = deserializeAws_ec2BundleTaskError(output["error"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["storage"] !== undefined) {
    contents.Storage = deserializeAws_ec2Storage(output["storage"], context);
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = new Date(output["updateTime"]);
  }
  return contents;
};

const deserializeAws_ec2BundleTaskError = (output: any, context: __SerdeContext): BundleTaskError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2BundleTaskList = (output: any, context: __SerdeContext): BundleTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2BundleTask(entry, context);
    });
};

const deserializeAws_ec2ByoipCidr = (output: any, context: __SerdeContext): ByoipCidr => {
  let contents: any = {
    Cidr: undefined,
    Description: undefined,
    StatusMessage: undefined,
    State: undefined,
  };
  if (output["cidr"] !== undefined) {
    contents.Cidr = output["cidr"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2ByoipCidrSet = (output: any, context: __SerdeContext): ByoipCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ByoipCidr(entry, context);
    });
};

const deserializeAws_ec2CancelBundleTaskResult = (output: any, context: __SerdeContext): CancelBundleTaskResult => {
  let contents: any = {
    BundleTask: undefined,
  };
  if (output["bundleInstanceTask"] !== undefined) {
    contents.BundleTask = deserializeAws_ec2BundleTask(output["bundleInstanceTask"], context);
  }
  return contents;
};

const deserializeAws_ec2CancelCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): CancelCapacityReservationResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2CancelImportTaskResult = (output: any, context: __SerdeContext): CancelImportTaskResult => {
  let contents: any = {
    ImportTaskId: undefined,
    PreviousState: undefined,
    State: undefined,
  };
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = output["importTaskId"];
  }
  if (output["previousState"] !== undefined) {
    contents.PreviousState = output["previousState"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2CancelledSpotInstanceRequest = (
  output: any,
  context: __SerdeContext
): CancelledSpotInstanceRequest => {
  let contents: any = {
    SpotInstanceRequestId: undefined,
    State: undefined,
  };
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = output["spotInstanceRequestId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2CancelledSpotInstanceRequestList = (
  output: any,
  context: __SerdeContext
): CancelledSpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CancelledSpotInstanceRequest(entry, context);
    });
};

const deserializeAws_ec2CancelReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CancelReservedInstancesListingResult => {
  let contents: any = {
    ReservedInstancesListings: undefined,
  };
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  }
  if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CancelSpotFleetRequestsError = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2CancelSpotFleetRequestsErrorItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem => {
  let contents: any = {
    Error: undefined,
    SpotFleetRequestId: undefined,
  };
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2CancelSpotFleetRequestsError(output["error"], context);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  return contents;
};

const deserializeAws_ec2CancelSpotFleetRequestsErrorSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CancelSpotFleetRequestsErrorItem(entry, context);
    });
};

const deserializeAws_ec2CancelSpotFleetRequestsResponse = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsResponse => {
  let contents: any = {
    SuccessfulFleetRequests: undefined,
    UnsuccessfulFleetRequests: undefined,
  };
  if (output.successfulFleetRequestSet === "") {
    contents.SuccessfulFleetRequests = [];
  }
  if (output["successfulFleetRequestSet"] !== undefined && output["successfulFleetRequestSet"]["item"] !== undefined) {
    contents.SuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsSuccessSet(
      __getArrayIfSingleItem(output["successfulFleetRequestSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulFleetRequestSet === "") {
    contents.UnsuccessfulFleetRequests = [];
  }
  if (
    output["unsuccessfulFleetRequestSet"] !== undefined &&
    output["unsuccessfulFleetRequestSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulFleetRequests = deserializeAws_ec2CancelSpotFleetRequestsErrorSet(
      __getArrayIfSingleItem(output["unsuccessfulFleetRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CancelSpotFleetRequestsSuccessItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem => {
  let contents: any = {
    CurrentSpotFleetRequestState: undefined,
    PreviousSpotFleetRequestState: undefined,
    SpotFleetRequestId: undefined,
  };
  if (output["currentSpotFleetRequestState"] !== undefined) {
    contents.CurrentSpotFleetRequestState = output["currentSpotFleetRequestState"];
  }
  if (output["previousSpotFleetRequestState"] !== undefined) {
    contents.PreviousSpotFleetRequestState = output["previousSpotFleetRequestState"];
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  return contents;
};

const deserializeAws_ec2CancelSpotFleetRequestsSuccessSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};

const deserializeAws_ec2CancelSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): CancelSpotInstanceRequestsResult => {
  let contents: any = {
    CancelledSpotInstanceRequests: undefined,
  };
  if (output.spotInstanceRequestSet === "") {
    contents.CancelledSpotInstanceRequests = [];
  }
  if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.CancelledSpotInstanceRequests = deserializeAws_ec2CancelledSpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CapacityReservation = (output: any, context: __SerdeContext): CapacityReservation => {
  let contents: any = {
    CapacityReservationId: undefined,
    OwnerId: undefined,
    CapacityReservationArn: undefined,
    AvailabilityZoneId: undefined,
    InstanceType: undefined,
    InstancePlatform: undefined,
    AvailabilityZone: undefined,
    Tenancy: undefined,
    TotalInstanceCount: undefined,
    AvailableInstanceCount: undefined,
    EbsOptimized: undefined,
    EphemeralStorage: undefined,
    State: undefined,
    StartDate: undefined,
    EndDate: undefined,
    EndDateType: undefined,
    InstanceMatchCriteria: undefined,
    CreateDate: undefined,
    Tags: undefined,
  };
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = output["capacityReservationId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["capacityReservationArn"] !== undefined) {
    contents.CapacityReservationArn = output["capacityReservationArn"];
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = output["availabilityZoneId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["instancePlatform"] !== undefined) {
    contents.InstancePlatform = output["instancePlatform"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = output["tenancy"];
  }
  if (output["totalInstanceCount"] !== undefined) {
    contents.TotalInstanceCount = parseInt(output["totalInstanceCount"]);
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = parseInt(output["availableInstanceCount"]);
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = output["ebsOptimized"] == "true";
  }
  if (output["ephemeralStorage"] !== undefined) {
    contents.EphemeralStorage = output["ephemeralStorage"] == "true";
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["startDate"] !== undefined) {
    contents.StartDate = new Date(output["startDate"]);
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = new Date(output["endDate"]);
  }
  if (output["endDateType"] !== undefined) {
    contents.EndDateType = output["endDateType"];
  }
  if (output["instanceMatchCriteria"] !== undefined) {
    contents.InstanceMatchCriteria = output["instanceMatchCriteria"];
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = new Date(output["createDate"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CapacityReservationGroup = (output: any, context: __SerdeContext): CapacityReservationGroup => {
  let contents: any = {
    GroupArn: undefined,
    OwnerId: undefined,
  };
  if (output["groupArn"] !== undefined) {
    contents.GroupArn = output["groupArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2CapacityReservationGroupSet = (
  output: any,
  context: __SerdeContext
): CapacityReservationGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CapacityReservationGroup(entry, context);
    });
};

const deserializeAws_ec2CapacityReservationOptions = (
  output: any,
  context: __SerdeContext
): CapacityReservationOptions => {
  let contents: any = {
    UsageStrategy: undefined,
  };
  if (output["usageStrategy"] !== undefined) {
    contents.UsageStrategy = output["usageStrategy"];
  }
  return contents;
};

const deserializeAws_ec2CapacityReservationSet = (output: any, context: __SerdeContext): CapacityReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CapacityReservation(entry, context);
    });
};

const deserializeAws_ec2CapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationSpecificationResponse => {
  let contents: any = {
    CapacityReservationPreference: undefined,
    CapacityReservationTarget: undefined,
  };
  if (output["capacityReservationPreference"] !== undefined) {
    contents.CapacityReservationPreference = output["capacityReservationPreference"];
  }
  if (output["capacityReservationTarget"] !== undefined) {
    contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(
      output["capacityReservationTarget"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CapacityReservationTargetResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationTargetResponse => {
  let contents: any = {
    CapacityReservationId: undefined,
    CapacityReservationResourceGroupArn: undefined,
  };
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = output["capacityReservationId"];
  }
  if (output["capacityReservationResourceGroupArn"] !== undefined) {
    contents.CapacityReservationResourceGroupArn = output["capacityReservationResourceGroupArn"];
  }
  return contents;
};

const deserializeAws_ec2CarrierGateway = (output: any, context: __SerdeContext): CarrierGateway => {
  let contents: any = {
    CarrierGatewayId: undefined,
    VpcId: undefined,
    State: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output["carrierGatewayId"] !== undefined) {
    contents.CarrierGatewayId = output["carrierGatewayId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CarrierGatewaySet = (output: any, context: __SerdeContext): CarrierGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CarrierGateway(entry, context);
    });
};

const deserializeAws_ec2CertificateAuthentication = (
  output: any,
  context: __SerdeContext
): CertificateAuthentication => {
  let contents: any = {
    ClientRootCertificateChain: undefined,
  };
  if (output["clientRootCertificateChain"] !== undefined) {
    contents.ClientRootCertificateChain = output["clientRootCertificateChain"];
  }
  return contents;
};

const deserializeAws_ec2CidrBlock = (output: any, context: __SerdeContext): CidrBlock => {
  let contents: any = {
    CidrBlock: undefined,
  };
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  return contents;
};

const deserializeAws_ec2CidrBlockSet = (output: any, context: __SerdeContext): CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CidrBlock(entry, context);
    });
};

const deserializeAws_ec2ClassicLinkDnsSupport = (output: any, context: __SerdeContext): ClassicLinkDnsSupport => {
  let contents: any = {
    ClassicLinkDnsSupported: undefined,
    VpcId: undefined,
  };
  if (output["classicLinkDnsSupported"] !== undefined) {
    contents.ClassicLinkDnsSupported = output["classicLinkDnsSupported"] == "true";
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2ClassicLinkDnsSupportList = (output: any, context: __SerdeContext): ClassicLinkDnsSupport[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClassicLinkDnsSupport(entry, context);
    });
};

const deserializeAws_ec2ClassicLinkInstance = (output: any, context: __SerdeContext): ClassicLinkInstance => {
  let contents: any = {
    Groups: undefined,
    InstanceId: undefined,
    Tags: undefined,
    VpcId: undefined,
  };
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2ClassicLinkInstanceList = (output: any, context: __SerdeContext): ClassicLinkInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClassicLinkInstance(entry, context);
    });
};

const deserializeAws_ec2ClassicLoadBalancer = (output: any, context: __SerdeContext): ClassicLoadBalancer => {
  let contents: any = {
    Name: undefined,
  };
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  return contents;
};

const deserializeAws_ec2ClassicLoadBalancers = (output: any, context: __SerdeContext): ClassicLoadBalancer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClassicLoadBalancer(entry, context);
    });
};

const deserializeAws_ec2ClassicLoadBalancersConfig = (
  output: any,
  context: __SerdeContext
): ClassicLoadBalancersConfig => {
  let contents: any = {
    ClassicLoadBalancers: undefined,
  };
  if (output.classicLoadBalancers === "") {
    contents.ClassicLoadBalancers = [];
  }
  if (output["classicLoadBalancers"] !== undefined && output["classicLoadBalancers"]["item"] !== undefined) {
    contents.ClassicLoadBalancers = deserializeAws_ec2ClassicLoadBalancers(
      __getArrayIfSingleItem(output["classicLoadBalancers"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ClientCertificateRevocationListStatus = (
  output: any,
  context: __SerdeContext
): ClientCertificateRevocationListStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientConnectResponseOptions = (
  output: any,
  context: __SerdeContext
): ClientConnectResponseOptions => {
  let contents: any = {
    Enabled: undefined,
    LambdaFunctionArn: undefined,
    Status: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  if (output["lambdaFunctionArn"] !== undefined) {
    contents.LambdaFunctionArn = output["lambdaFunctionArn"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnEndpointAttributeStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2ClientVpnAuthentication = (output: any, context: __SerdeContext): ClientVpnAuthentication => {
  let contents: any = {
    Type: undefined,
    ActiveDirectory: undefined,
    MutualAuthentication: undefined,
    FederatedAuthentication: undefined,
  };
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["activeDirectory"] !== undefined) {
    contents.ActiveDirectory = deserializeAws_ec2DirectoryServiceAuthentication(output["activeDirectory"], context);
  }
  if (output["mutualAuthentication"] !== undefined) {
    contents.MutualAuthentication = deserializeAws_ec2CertificateAuthentication(
      output["mutualAuthentication"],
      context
    );
  }
  if (output["federatedAuthentication"] !== undefined) {
    contents.FederatedAuthentication = deserializeAws_ec2FederatedAuthentication(
      output["federatedAuthentication"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ClientVpnAuthenticationList = (
  output: any,
  context: __SerdeContext
): ClientVpnAuthentication[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClientVpnAuthentication(entry, context);
    });
};

const deserializeAws_ec2ClientVpnAuthorizationRuleStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnAuthorizationRuleStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnConnection = (output: any, context: __SerdeContext): ClientVpnConnection => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    Timestamp: undefined,
    ConnectionId: undefined,
    Username: undefined,
    ConnectionEstablishedTime: undefined,
    IngressBytes: undefined,
    EgressBytes: undefined,
    IngressPackets: undefined,
    EgressPackets: undefined,
    ClientIp: undefined,
    CommonName: undefined,
    Status: undefined,
    ConnectionEndTime: undefined,
    PostureComplianceStatuses: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = output["timestamp"];
  }
  if (output["connectionId"] !== undefined) {
    contents.ConnectionId = output["connectionId"];
  }
  if (output["username"] !== undefined) {
    contents.Username = output["username"];
  }
  if (output["connectionEstablishedTime"] !== undefined) {
    contents.ConnectionEstablishedTime = output["connectionEstablishedTime"];
  }
  if (output["ingressBytes"] !== undefined) {
    contents.IngressBytes = output["ingressBytes"];
  }
  if (output["egressBytes"] !== undefined) {
    contents.EgressBytes = output["egressBytes"];
  }
  if (output["ingressPackets"] !== undefined) {
    contents.IngressPackets = output["ingressPackets"];
  }
  if (output["egressPackets"] !== undefined) {
    contents.EgressPackets = output["egressPackets"];
  }
  if (output["clientIp"] !== undefined) {
    contents.ClientIp = output["clientIp"];
  }
  if (output["commonName"] !== undefined) {
    contents.CommonName = output["commonName"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnConnectionStatus(output["status"], context);
  }
  if (output["connectionEndTime"] !== undefined) {
    contents.ConnectionEndTime = output["connectionEndTime"];
  }
  if (output.postureComplianceStatusSet === "") {
    contents.PostureComplianceStatuses = [];
  }
  if (
    output["postureComplianceStatusSet"] !== undefined &&
    output["postureComplianceStatusSet"]["item"] !== undefined
  ) {
    contents.PostureComplianceStatuses = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["postureComplianceStatusSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ClientVpnConnectionSet = (output: any, context: __SerdeContext): ClientVpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClientVpnConnection(entry, context);
    });
};

const deserializeAws_ec2ClientVpnConnectionStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnConnectionStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnEndpoint = (output: any, context: __SerdeContext): ClientVpnEndpoint => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    Description: undefined,
    Status: undefined,
    CreationTime: undefined,
    DeletionTime: undefined,
    DnsName: undefined,
    ClientCidrBlock: undefined,
    DnsServers: undefined,
    SplitTunnel: undefined,
    VpnProtocol: undefined,
    TransportProtocol: undefined,
    VpnPort: undefined,
    AssociatedTargetNetworks: undefined,
    ServerCertificateArn: undefined,
    AuthenticationOptions: undefined,
    ConnectionLogOptions: undefined,
    Tags: undefined,
    SecurityGroupIds: undefined,
    VpcId: undefined,
    SelfServicePortalUrl: undefined,
    ClientConnectOptions: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = output["creationTime"];
  }
  if (output["deletionTime"] !== undefined) {
    contents.DeletionTime = output["deletionTime"];
  }
  if (output["dnsName"] !== undefined) {
    contents.DnsName = output["dnsName"];
  }
  if (output["clientCidrBlock"] !== undefined) {
    contents.ClientCidrBlock = output["clientCidrBlock"];
  }
  if (output.dnsServer === "") {
    contents.DnsServers = [];
  }
  if (output["dnsServer"] !== undefined && output["dnsServer"]["item"] !== undefined) {
    contents.DnsServers = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["dnsServer"]["item"]),
      context
    );
  }
  if (output["splitTunnel"] !== undefined) {
    contents.SplitTunnel = output["splitTunnel"] == "true";
  }
  if (output["vpnProtocol"] !== undefined) {
    contents.VpnProtocol = output["vpnProtocol"];
  }
  if (output["transportProtocol"] !== undefined) {
    contents.TransportProtocol = output["transportProtocol"];
  }
  if (output["vpnPort"] !== undefined) {
    contents.VpnPort = parseInt(output["vpnPort"]);
  }
  if (output.associatedTargetNetwork === "") {
    contents.AssociatedTargetNetworks = [];
  }
  if (output["associatedTargetNetwork"] !== undefined && output["associatedTargetNetwork"]["item"] !== undefined) {
    contents.AssociatedTargetNetworks = deserializeAws_ec2AssociatedTargetNetworkSet(
      __getArrayIfSingleItem(output["associatedTargetNetwork"]["item"]),
      context
    );
  }
  if (output["serverCertificateArn"] !== undefined) {
    contents.ServerCertificateArn = output["serverCertificateArn"];
  }
  if (output.authenticationOptions === "") {
    contents.AuthenticationOptions = [];
  }
  if (output["authenticationOptions"] !== undefined && output["authenticationOptions"]["item"] !== undefined) {
    contents.AuthenticationOptions = deserializeAws_ec2ClientVpnAuthenticationList(
      __getArrayIfSingleItem(output["authenticationOptions"]["item"]),
      context
    );
  }
  if (output["connectionLogOptions"] !== undefined) {
    contents.ConnectionLogOptions = deserializeAws_ec2ConnectionLogResponseOptions(
      output["connectionLogOptions"],
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  }
  if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = deserializeAws_ec2ClientVpnSecurityGroupIdSet(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["selfServicePortalUrl"] !== undefined) {
    contents.SelfServicePortalUrl = output["selfServicePortalUrl"];
  }
  if (output["clientConnectOptions"] !== undefined) {
    contents.ClientConnectOptions = deserializeAws_ec2ClientConnectResponseOptions(
      output["clientConnectOptions"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ClientVpnEndpointAttributeStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnEndpointAttributeStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnEndpointStatus = (output: any, context: __SerdeContext): ClientVpnEndpointStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnRoute = (output: any, context: __SerdeContext): ClientVpnRoute => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    DestinationCidr: undefined,
    TargetSubnet: undefined,
    Type: undefined,
    Origin: undefined,
    Status: undefined,
    Description: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = output["destinationCidr"];
  }
  if (output["targetSubnet"] !== undefined) {
    contents.TargetSubnet = output["targetSubnet"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["origin"] !== undefined) {
    contents.Origin = output["origin"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnRouteSet = (output: any, context: __SerdeContext): ClientVpnRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClientVpnRoute(entry, context);
    });
};

const deserializeAws_ec2ClientVpnRouteStatus = (output: any, context: __SerdeContext): ClientVpnRouteStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ClientVpnSecurityGroupIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2CoipAddressUsage = (output: any, context: __SerdeContext): CoipAddressUsage => {
  let contents: any = {
    AllocationId: undefined,
    AwsAccountId: undefined,
    AwsService: undefined,
    CoIp: undefined,
  };
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["awsAccountId"] !== undefined) {
    contents.AwsAccountId = output["awsAccountId"];
  }
  if (output["awsService"] !== undefined) {
    contents.AwsService = output["awsService"];
  }
  if (output["coIp"] !== undefined) {
    contents.CoIp = output["coIp"];
  }
  return contents;
};

const deserializeAws_ec2CoipAddressUsageSet = (output: any, context: __SerdeContext): CoipAddressUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CoipAddressUsage(entry, context);
    });
};

const deserializeAws_ec2CoipPool = (output: any, context: __SerdeContext): CoipPool => {
  let contents: any = {
    PoolId: undefined,
    PoolCidrs: undefined,
    LocalGatewayRouteTableId: undefined,
    Tags: undefined,
    PoolArn: undefined,
  };
  if (output["poolId"] !== undefined) {
    contents.PoolId = output["poolId"];
  }
  if (output.poolCidrSet === "") {
    contents.PoolCidrs = [];
  }
  if (output["poolCidrSet"] !== undefined && output["poolCidrSet"]["item"] !== undefined) {
    contents.PoolCidrs = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["poolCidrSet"]["item"]),
      context
    );
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["poolArn"] !== undefined) {
    contents.PoolArn = output["poolArn"];
  }
  return contents;
};

const deserializeAws_ec2CoipPoolSet = (output: any, context: __SerdeContext): CoipPool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CoipPool(entry, context);
    });
};

const deserializeAws_ec2ConfirmProductInstanceResult = (
  output: any,
  context: __SerdeContext
): ConfirmProductInstanceResult => {
  let contents: any = {
    OwnerId: undefined,
    Return: undefined,
  };
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ConnectionLogResponseOptions = (
  output: any,
  context: __SerdeContext
): ConnectionLogResponseOptions => {
  let contents: any = {
    Enabled: undefined,
    CloudwatchLogGroup: undefined,
    CloudwatchLogStream: undefined,
  };
  if (output["Enabled"] !== undefined) {
    contents.Enabled = output["Enabled"] == "true";
  }
  if (output["CloudwatchLogGroup"] !== undefined) {
    contents.CloudwatchLogGroup = output["CloudwatchLogGroup"];
  }
  if (output["CloudwatchLogStream"] !== undefined) {
    contents.CloudwatchLogStream = output["CloudwatchLogStream"];
  }
  return contents;
};

const deserializeAws_ec2ConnectionNotification = (output: any, context: __SerdeContext): ConnectionNotification => {
  let contents: any = {
    ConnectionNotificationId: undefined,
    ServiceId: undefined,
    VpcEndpointId: undefined,
    ConnectionNotificationType: undefined,
    ConnectionNotificationArn: undefined,
    ConnectionEvents: undefined,
    ConnectionNotificationState: undefined,
  };
  if (output["connectionNotificationId"] !== undefined) {
    contents.ConnectionNotificationId = output["connectionNotificationId"];
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = output["serviceId"];
  }
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = output["vpcEndpointId"];
  }
  if (output["connectionNotificationType"] !== undefined) {
    contents.ConnectionNotificationType = output["connectionNotificationType"];
  }
  if (output["connectionNotificationArn"] !== undefined) {
    contents.ConnectionNotificationArn = output["connectionNotificationArn"];
  }
  if (output.connectionEvents === "") {
    contents.ConnectionEvents = [];
  }
  if (output["connectionEvents"] !== undefined && output["connectionEvents"]["item"] !== undefined) {
    contents.ConnectionEvents = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["connectionEvents"]["item"]),
      context
    );
  }
  if (output["connectionNotificationState"] !== undefined) {
    contents.ConnectionNotificationState = output["connectionNotificationState"];
  }
  return contents;
};

const deserializeAws_ec2ConnectionNotificationSet = (
  output: any,
  context: __SerdeContext
): ConnectionNotification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ConnectionNotification(entry, context);
    });
};

const deserializeAws_ec2ConversionTask = (output: any, context: __SerdeContext): ConversionTask => {
  let contents: any = {
    ConversionTaskId: undefined,
    ExpirationTime: undefined,
    ImportInstance: undefined,
    ImportVolume: undefined,
    State: undefined,
    StatusMessage: undefined,
    Tags: undefined,
  };
  if (output["conversionTaskId"] !== undefined) {
    contents.ConversionTaskId = output["conversionTaskId"];
  }
  if (output["expirationTime"] !== undefined) {
    contents.ExpirationTime = output["expirationTime"];
  }
  if (output["importInstance"] !== undefined) {
    contents.ImportInstance = deserializeAws_ec2ImportInstanceTaskDetails(output["importInstance"], context);
  }
  if (output["importVolume"] !== undefined) {
    contents.ImportVolume = deserializeAws_ec2ImportVolumeTaskDetails(output["importVolume"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CopyFpgaImageResult = (output: any, context: __SerdeContext): CopyFpgaImageResult => {
  let contents: any = {
    FpgaImageId: undefined,
  };
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = output["fpgaImageId"];
  }
  return contents;
};

const deserializeAws_ec2CopyImageResult = (output: any, context: __SerdeContext): CopyImageResult => {
  let contents: any = {
    ImageId: undefined,
  };
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  return contents;
};

const deserializeAws_ec2CopySnapshotResult = (output: any, context: __SerdeContext): CopySnapshotResult => {
  let contents: any = {
    SnapshotId: undefined,
    Tags: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CoreCountList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return parseInt(entry);
    });
};

const deserializeAws_ec2CpuOptions = (output: any, context: __SerdeContext): CpuOptions => {
  let contents: any = {
    CoreCount: undefined,
    ThreadsPerCore: undefined,
  };
  if (output["coreCount"] !== undefined) {
    contents.CoreCount = parseInt(output["coreCount"]);
  }
  if (output["threadsPerCore"] !== undefined) {
    contents.ThreadsPerCore = parseInt(output["threadsPerCore"]);
  }
  return contents;
};

const deserializeAws_ec2CreateCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): CreateCapacityReservationResult => {
  let contents: any = {
    CapacityReservation: undefined,
  };
  if (output["capacityReservation"] !== undefined) {
    contents.CapacityReservation = deserializeAws_ec2CapacityReservation(output["capacityReservation"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateCarrierGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateCarrierGatewayResult => {
  let contents: any = {
    CarrierGateway: undefined,
  };
  if (output["carrierGateway"] !== undefined) {
    contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateClientVpnEndpointResult = (
  output: any,
  context: __SerdeContext
): CreateClientVpnEndpointResult => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    Status: undefined,
    DnsName: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
  }
  if (output["dnsName"] !== undefined) {
    contents.DnsName = output["dnsName"];
  }
  return contents;
};

const deserializeAws_ec2CreateClientVpnRouteResult = (
  output: any,
  context: __SerdeContext
): CreateClientVpnRouteResult => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateCustomerGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateCustomerGatewayResult => {
  let contents: any = {
    CustomerGateway: undefined,
  };
  if (output["customerGateway"] !== undefined) {
    contents.CustomerGateway = deserializeAws_ec2CustomerGateway(output["customerGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateDefaultSubnetResult = (
  output: any,
  context: __SerdeContext
): CreateDefaultSubnetResult => {
  let contents: any = {
    Subnet: undefined,
  };
  if (output["subnet"] !== undefined) {
    contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateDefaultVpcResult = (output: any, context: __SerdeContext): CreateDefaultVpcResult => {
  let contents: any = {
    Vpc: undefined,
  };
  if (output["vpc"] !== undefined) {
    contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateDhcpOptionsResult = (output: any, context: __SerdeContext): CreateDhcpOptionsResult => {
  let contents: any = {
    DhcpOptions: undefined,
  };
  if (output["dhcpOptions"] !== undefined) {
    contents.DhcpOptions = deserializeAws_ec2DhcpOptions(output["dhcpOptions"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateEgressOnlyInternetGatewayResult => {
  let contents: any = {
    ClientToken: undefined,
    EgressOnlyInternetGateway: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["egressOnlyInternetGateway"] !== undefined) {
    contents.EgressOnlyInternetGateway = deserializeAws_ec2EgressOnlyInternetGateway(
      output["egressOnlyInternetGateway"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateFleetError = (output: any, context: __SerdeContext): CreateFleetError => {
  let contents: any = {
    LaunchTemplateAndOverrides: undefined,
    Lifecycle: undefined,
    ErrorCode: undefined,
    ErrorMessage: undefined,
  };
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = output["lifecycle"];
  }
  if (output["errorCode"] !== undefined) {
    contents.ErrorCode = output["errorCode"];
  }
  if (output["errorMessage"] !== undefined) {
    contents.ErrorMessage = output["errorMessage"];
  }
  return contents;
};

const deserializeAws_ec2CreateFleetErrorsSet = (output: any, context: __SerdeContext): CreateFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CreateFleetError(entry, context);
    });
};

const deserializeAws_ec2CreateFleetInstance = (output: any, context: __SerdeContext): CreateFleetInstance => {
  let contents: any = {
    LaunchTemplateAndOverrides: undefined,
    Lifecycle: undefined,
    InstanceIds: undefined,
    InstanceType: undefined,
    Platform: undefined,
  };
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = output["lifecycle"];
  }
  if (output.instanceIds === "") {
    contents.InstanceIds = [];
  }
  if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
    contents.InstanceIds = deserializeAws_ec2InstanceIdsSet(
      __getArrayIfSingleItem(output["instanceIds"]["item"]),
      context
    );
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  return contents;
};

const deserializeAws_ec2CreateFleetInstancesSet = (output: any, context: __SerdeContext): CreateFleetInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CreateFleetInstance(entry, context);
    });
};

const deserializeAws_ec2CreateFleetResult = (output: any, context: __SerdeContext): CreateFleetResult => {
  let contents: any = {
    FleetId: undefined,
    Errors: undefined,
    Instances: undefined,
  };
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  if (output.errorSet === "") {
    contents.Errors = [];
  }
  if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = deserializeAws_ec2CreateFleetErrorsSet(
      __getArrayIfSingleItem(output["errorSet"]["item"]),
      context
    );
  }
  if (output.fleetInstanceSet === "") {
    contents.Instances = [];
  }
  if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
    contents.Instances = deserializeAws_ec2CreateFleetInstancesSet(
      __getArrayIfSingleItem(output["fleetInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateFlowLogsResult = (output: any, context: __SerdeContext): CreateFlowLogsResult => {
  let contents: any = {
    ClientToken: undefined,
    FlowLogIds: undefined,
    Unsuccessful: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output.flowLogIdSet === "") {
    contents.FlowLogIds = [];
  }
  if (output["flowLogIdSet"] !== undefined && output["flowLogIdSet"]["item"] !== undefined) {
    contents.FlowLogIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["flowLogIdSet"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateFpgaImageResult = (output: any, context: __SerdeContext): CreateFpgaImageResult => {
  let contents: any = {
    FpgaImageId: undefined,
    FpgaImageGlobalId: undefined,
  };
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = output["fpgaImageId"];
  }
  if (output["fpgaImageGlobalId"] !== undefined) {
    contents.FpgaImageGlobalId = output["fpgaImageGlobalId"];
  }
  return contents;
};

const deserializeAws_ec2CreateImageResult = (output: any, context: __SerdeContext): CreateImageResult => {
  let contents: any = {
    ImageId: undefined,
  };
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  return contents;
};

const deserializeAws_ec2CreateInstanceExportTaskResult = (
  output: any,
  context: __SerdeContext
): CreateInstanceExportTaskResult => {
  let contents: any = {
    ExportTask: undefined,
  };
  if (output["exportTask"] !== undefined) {
    contents.ExportTask = deserializeAws_ec2ExportTask(output["exportTask"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateInternetGatewayResult => {
  let contents: any = {
    InternetGateway: undefined,
  };
  if (output["internetGateway"] !== undefined) {
    contents.InternetGateway = deserializeAws_ec2InternetGateway(output["internetGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateLaunchTemplateResult = (
  output: any,
  context: __SerdeContext
): CreateLaunchTemplateResult => {
  let contents: any = {
    LaunchTemplate: undefined,
    Warning: undefined,
  };
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
  }
  if (output["warning"] !== undefined) {
    contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateLaunchTemplateVersionResult = (
  output: any,
  context: __SerdeContext
): CreateLaunchTemplateVersionResult => {
  let contents: any = {
    LaunchTemplateVersion: undefined,
    Warning: undefined,
  };
  if (output["launchTemplateVersion"] !== undefined) {
    contents.LaunchTemplateVersion = deserializeAws_ec2LaunchTemplateVersion(output["launchTemplateVersion"], context);
  }
  if (output["warning"] !== undefined) {
    contents.Warning = deserializeAws_ec2ValidationWarning(output["warning"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateLocalGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteResult => {
  let contents: any = {
    Route: undefined,
  };
  if (output["route"] !== undefined) {
    contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableVpcAssociationResult => {
  let contents: any = {
    LocalGatewayRouteTableVpcAssociation: undefined,
  };
  if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(
      output["localGatewayRouteTableVpcAssociation"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateManagedPrefixListResult = (
  output: any,
  context: __SerdeContext
): CreateManagedPrefixListResult => {
  let contents: any = {
    PrefixList: undefined,
  };
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateNatGatewayResult = (output: any, context: __SerdeContext): CreateNatGatewayResult => {
  let contents: any = {
    ClientToken: undefined,
    NatGateway: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["natGateway"] !== undefined) {
    contents.NatGateway = deserializeAws_ec2NatGateway(output["natGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateNetworkAclResult = (output: any, context: __SerdeContext): CreateNetworkAclResult => {
  let contents: any = {
    NetworkAcl: undefined,
  };
  if (output["networkAcl"] !== undefined) {
    contents.NetworkAcl = deserializeAws_ec2NetworkAcl(output["networkAcl"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateNetworkInsightsPathResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInsightsPathResult => {
  let contents: any = {
    NetworkInsightsPath: undefined,
  };
  if (output["networkInsightsPath"] !== undefined) {
    contents.NetworkInsightsPath = deserializeAws_ec2NetworkInsightsPath(output["networkInsightsPath"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInterfacePermissionResult => {
  let contents: any = {
    InterfacePermission: undefined,
  };
  if (output["interfacePermission"] !== undefined) {
    contents.InterfacePermission = deserializeAws_ec2NetworkInterfacePermission(output["interfacePermission"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateNetworkInterfaceResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInterfaceResult => {
  let contents: any = {
    NetworkInterface: undefined,
  };
  if (output["networkInterface"] !== undefined) {
    contents.NetworkInterface = deserializeAws_ec2NetworkInterface(output["networkInterface"], context);
  }
  return contents;
};

const deserializeAws_ec2CreatePlacementGroupResult = (
  output: any,
  context: __SerdeContext
): CreatePlacementGroupResult => {
  let contents: any = {
    PlacementGroup: undefined,
  };
  if (output["placementGroup"] !== undefined) {
    contents.PlacementGroup = deserializeAws_ec2PlacementGroup(output["placementGroup"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CreateReservedInstancesListingResult => {
  let contents: any = {
    ReservedInstancesListings: undefined,
  };
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  }
  if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateRouteResult = (output: any, context: __SerdeContext): CreateRouteResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2CreateRouteTableResult = (output: any, context: __SerdeContext): CreateRouteTableResult => {
  let contents: any = {
    RouteTable: undefined,
  };
  if (output["routeTable"] !== undefined) {
    contents.RouteTable = deserializeAws_ec2RouteTable(output["routeTable"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateSecurityGroupResult = (
  output: any,
  context: __SerdeContext
): CreateSecurityGroupResult => {
  let contents: any = {
    GroupId: undefined,
    Tags: undefined,
  };
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CreateSnapshotsResult = (output: any, context: __SerdeContext): CreateSnapshotsResult => {
  let contents: any = {
    Snapshots: undefined,
  };
  if (output.snapshotSet === "") {
    contents.Snapshots = [];
  }
  if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
    contents.Snapshots = deserializeAws_ec2SnapshotSet(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CreateSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): CreateSpotDatafeedSubscriptionResult => {
  let contents: any = {
    SpotDatafeedSubscription: undefined,
  };
  if (output["spotDatafeedSubscription"] !== undefined) {
    contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(
      output["spotDatafeedSubscription"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateSubnetResult = (output: any, context: __SerdeContext): CreateSubnetResult => {
  let contents: any = {
    Subnet: undefined,
  };
  if (output["subnet"] !== undefined) {
    contents.Subnet = deserializeAws_ec2Subnet(output["subnet"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateTrafficMirrorFilterResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorFilterResult => {
  let contents: any = {
    TrafficMirrorFilter: undefined,
    ClientToken: undefined,
  };
  if (output["trafficMirrorFilter"] !== undefined) {
    contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorFilterRuleResult => {
  let contents: any = {
    TrafficMirrorFilterRule: undefined,
    ClientToken: undefined,
  };
  if (output["trafficMirrorFilterRule"] !== undefined) {
    contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(
      output["trafficMirrorFilterRule"],
      context
    );
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorSessionResult => {
  let contents: any = {
    TrafficMirrorSession: undefined,
    ClientToken: undefined,
  };
  if (output["trafficMirrorSession"] !== undefined) {
    contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateTrafficMirrorTargetResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorTargetResult => {
  let contents: any = {
    TrafficMirrorTarget: undefined,
    ClientToken: undefined,
  };
  if (output["trafficMirrorTarget"] !== undefined) {
    contents.TrafficMirrorTarget = deserializeAws_ec2TrafficMirrorTarget(output["trafficMirrorTarget"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectPeerResult => {
  let contents: any = {
    TransitGatewayConnectPeer: undefined,
  };
  if (output["transitGatewayConnectPeer"] !== undefined) {
    contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(
      output["transitGatewayConnectPeer"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectResult => {
  let contents: any = {
    TransitGatewayConnect: undefined,
  };
  if (output["transitGatewayConnect"] !== undefined) {
    contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayMulticastDomainResult => {
  let contents: any = {
    TransitGatewayMulticastDomain: undefined,
  };
  if (output["transitGatewayMulticastDomain"] !== undefined) {
    contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(
      output["transitGatewayMulticastDomain"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPeeringAttachmentResult => {
  let contents: any = {
    TransitGatewayPeeringAttachment: undefined,
  };
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPrefixListReferenceResult => {
  let contents: any = {
    TransitGatewayPrefixListReference: undefined,
  };
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayResult => {
  let contents: any = {
    TransitGateway: undefined,
  };
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteResult => {
  let contents: any = {
    Route: undefined,
  };
  if (output["route"] !== undefined) {
    contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteTableResult => {
  let contents: any = {
    TransitGatewayRouteTable: undefined,
  };
  if (output["transitGatewayRouteTable"] !== undefined) {
    contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(
      output["transitGatewayRouteTable"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayVpcAttachmentResult => {
  let contents: any = {
    TransitGatewayVpcAttachment: undefined,
  };
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2CreateVolumePermission = (output: any, context: __SerdeContext): CreateVolumePermission => {
  let contents: any = {
    Group: undefined,
    UserId: undefined,
  };
  if (output["group"] !== undefined) {
    contents.Group = output["group"];
  }
  if (output["userId"] !== undefined) {
    contents.UserId = output["userId"];
  }
  return contents;
};

const deserializeAws_ec2CreateVolumePermissionList = (
  output: any,
  context: __SerdeContext
): CreateVolumePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CreateVolumePermission(entry, context);
    });
};

const deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointConnectionNotificationResult => {
  let contents: any = {
    ConnectionNotification: undefined,
    ClientToken: undefined,
  };
  if (output["connectionNotification"] !== undefined) {
    contents.ConnectionNotification = deserializeAws_ec2ConnectionNotification(
      output["connectionNotification"],
      context
    );
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateVpcEndpointResult = (output: any, context: __SerdeContext): CreateVpcEndpointResult => {
  let contents: any = {
    VpcEndpoint: undefined,
    ClientToken: undefined,
  };
  if (output["vpcEndpoint"] !== undefined) {
    contents.VpcEndpoint = deserializeAws_ec2VpcEndpoint(output["vpcEndpoint"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointServiceConfigurationResult => {
  let contents: any = {
    ServiceConfiguration: undefined,
    ClientToken: undefined,
  };
  if (output["serviceConfiguration"] !== undefined) {
    contents.ServiceConfiguration = deserializeAws_ec2ServiceConfiguration(output["serviceConfiguration"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  return contents;
};

const deserializeAws_ec2CreateVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): CreateVpcPeeringConnectionResult => {
  let contents: any = {
    VpcPeeringConnection: undefined,
  };
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = deserializeAws_ec2VpcPeeringConnection(output["vpcPeeringConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateVpcResult = (output: any, context: __SerdeContext): CreateVpcResult => {
  let contents: any = {
    Vpc: undefined,
  };
  if (output["vpc"] !== undefined) {
    contents.Vpc = deserializeAws_ec2Vpc(output["vpc"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateVpnConnectionResult = (
  output: any,
  context: __SerdeContext
): CreateVpnConnectionResult => {
  let contents: any = {
    VpnConnection: undefined,
  };
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2CreateVpnGatewayResult = (output: any, context: __SerdeContext): CreateVpnGatewayResult => {
  let contents: any = {
    VpnGateway: undefined,
  };
  if (output["vpnGateway"] !== undefined) {
    contents.VpnGateway = deserializeAws_ec2VpnGateway(output["vpnGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2CreditSpecification = (output: any, context: __SerdeContext): CreditSpecification => {
  let contents: any = {
    CpuCredits: undefined,
  };
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = output["cpuCredits"];
  }
  return contents;
};

const deserializeAws_ec2CustomerGateway = (output: any, context: __SerdeContext): CustomerGateway => {
  let contents: any = {
    BgpAsn: undefined,
    CustomerGatewayId: undefined,
    IpAddress: undefined,
    CertificateArn: undefined,
    State: undefined,
    Type: undefined,
    DeviceName: undefined,
    Tags: undefined,
  };
  if (output["bgpAsn"] !== undefined) {
    contents.BgpAsn = output["bgpAsn"];
  }
  if (output["customerGatewayId"] !== undefined) {
    contents.CustomerGatewayId = output["customerGatewayId"];
  }
  if (output["ipAddress"] !== undefined) {
    contents.IpAddress = output["ipAddress"];
  }
  if (output["certificateArn"] !== undefined) {
    contents.CertificateArn = output["certificateArn"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = output["deviceName"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2CustomerGatewayList = (output: any, context: __SerdeContext): CustomerGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2CustomerGateway(entry, context);
    });
};

const deserializeAws_ec2DeleteCarrierGatewayResult = (
  output: any,
  context: __SerdeContext
): DeleteCarrierGatewayResult => {
  let contents: any = {
    CarrierGateway: undefined,
  };
  if (output["carrierGateway"] !== undefined) {
    contents.CarrierGateway = deserializeAws_ec2CarrierGateway(output["carrierGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteClientVpnEndpointResult = (
  output: any,
  context: __SerdeContext
): DeleteClientVpnEndpointResult => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnEndpointStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteClientVpnRouteResult = (
  output: any,
  context: __SerdeContext
): DeleteClientVpnRouteResult => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnRouteStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): DeleteEgressOnlyInternetGatewayResult => {
  let contents: any = {
    ReturnCode: undefined,
  };
  if (output["returnCode"] !== undefined) {
    contents.ReturnCode = output["returnCode"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DeleteFleetError = (output: any, context: __SerdeContext): DeleteFleetError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2DeleteFleetErrorItem = (output: any, context: __SerdeContext): DeleteFleetErrorItem => {
  let contents: any = {
    Error: undefined,
    FleetId: undefined,
  };
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2DeleteFleetError(output["error"], context);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteFleetErrorSet = (output: any, context: __SerdeContext): DeleteFleetErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DeleteFleetErrorItem(entry, context);
    });
};

const deserializeAws_ec2DeleteFleetsResult = (output: any, context: __SerdeContext): DeleteFleetsResult => {
  let contents: any = {
    SuccessfulFleetDeletions: undefined,
    UnsuccessfulFleetDeletions: undefined,
  };
  if (output.successfulFleetDeletionSet === "") {
    contents.SuccessfulFleetDeletions = [];
  }
  if (
    output["successfulFleetDeletionSet"] !== undefined &&
    output["successfulFleetDeletionSet"]["item"] !== undefined
  ) {
    contents.SuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetSuccessSet(
      __getArrayIfSingleItem(output["successfulFleetDeletionSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulFleetDeletionSet === "") {
    contents.UnsuccessfulFleetDeletions = [];
  }
  if (
    output["unsuccessfulFleetDeletionSet"] !== undefined &&
    output["unsuccessfulFleetDeletionSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulFleetDeletions = deserializeAws_ec2DeleteFleetErrorSet(
      __getArrayIfSingleItem(output["unsuccessfulFleetDeletionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteFleetSuccessItem = (output: any, context: __SerdeContext): DeleteFleetSuccessItem => {
  let contents: any = {
    CurrentFleetState: undefined,
    PreviousFleetState: undefined,
    FleetId: undefined,
  };
  if (output["currentFleetState"] !== undefined) {
    contents.CurrentFleetState = output["currentFleetState"];
  }
  if (output["previousFleetState"] !== undefined) {
    contents.PreviousFleetState = output["previousFleetState"];
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteFleetSuccessSet = (output: any, context: __SerdeContext): DeleteFleetSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DeleteFleetSuccessItem(entry, context);
    });
};

const deserializeAws_ec2DeleteFlowLogsResult = (output: any, context: __SerdeContext): DeleteFlowLogsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteFpgaImageResult = (output: any, context: __SerdeContext): DeleteFpgaImageResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DeleteLaunchTemplateResult = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateResult => {
  let contents: any = {
    LaunchTemplate: undefined,
  };
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem => {
  let contents: any = {
    LaunchTemplateId: undefined,
    LaunchTemplateName: undefined,
    VersionNumber: undefined,
    ResponseError: undefined,
  };
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = output["launchTemplateId"];
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = output["launchTemplateName"];
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = parseInt(output["versionNumber"]);
  }
  if (output["responseError"] !== undefined) {
    contents.ResponseError = deserializeAws_ec2ResponseError(output["responseError"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem => {
  let contents: any = {
    LaunchTemplateId: undefined,
    LaunchTemplateName: undefined,
    VersionNumber: undefined,
  };
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = output["launchTemplateId"];
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = output["launchTemplateName"];
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = parseInt(output["versionNumber"]);
  }
  return contents;
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};

const deserializeAws_ec2DeleteLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResult => {
  let contents: any = {
    SuccessfullyDeletedLaunchTemplateVersions: undefined,
    UnsuccessfullyDeletedLaunchTemplateVersions: undefined,
  };
  if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
    contents.SuccessfullyDeletedLaunchTemplateVersions = [];
  }
  if (
    output["successfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
    output["successfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined
  ) {
    contents.SuccessfullyDeletedLaunchTemplateVersions = deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet(
      __getArrayIfSingleItem(output["successfullyDeletedLaunchTemplateVersionSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
    contents.UnsuccessfullyDeletedLaunchTemplateVersions = [];
  }
  if (
    output["unsuccessfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
    output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfullyDeletedLaunchTemplateVersions = deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet(
      __getArrayIfSingleItem(output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteLocalGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteResult => {
  let contents: any = {
    Route: undefined,
  };
  if (output["route"] !== undefined) {
    contents.Route = deserializeAws_ec2LocalGatewayRoute(output["route"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableVpcAssociationResult => {
  let contents: any = {
    LocalGatewayRouteTableVpcAssociation: undefined,
  };
  if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociation = deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(
      output["localGatewayRouteTableVpcAssociation"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteManagedPrefixListResult = (
  output: any,
  context: __SerdeContext
): DeleteManagedPrefixListResult => {
  let contents: any = {
    PrefixList: undefined,
  };
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteNatGatewayResult = (output: any, context: __SerdeContext): DeleteNatGatewayResult => {
  let contents: any = {
    NatGatewayId: undefined,
  };
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = output["natGatewayId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAnalysisResult => {
  let contents: any = {
    NetworkInsightsAnalysisId: undefined,
  };
  if (output["networkInsightsAnalysisId"] !== undefined) {
    contents.NetworkInsightsAnalysisId = output["networkInsightsAnalysisId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteNetworkInsightsPathResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsPathResult => {
  let contents: any = {
    NetworkInsightsPathId: undefined,
  };
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = output["networkInsightsPathId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInterfacePermissionResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DeleteQueuedReservedInstancesError = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2DeleteQueuedReservedInstancesResult = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesResult => {
  let contents: any = {
    SuccessfulQueuedPurchaseDeletions: undefined,
    FailedQueuedPurchaseDeletions: undefined,
  };
  if (output.successfulQueuedPurchaseDeletionSet === "") {
    contents.SuccessfulQueuedPurchaseDeletions = [];
  }
  if (
    output["successfulQueuedPurchaseDeletionSet"] !== undefined &&
    output["successfulQueuedPurchaseDeletionSet"]["item"] !== undefined
  ) {
    contents.SuccessfulQueuedPurchaseDeletions = deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet(
      __getArrayIfSingleItem(output["successfulQueuedPurchaseDeletionSet"]["item"]),
      context
    );
  }
  if (output.failedQueuedPurchaseDeletionSet === "") {
    contents.FailedQueuedPurchaseDeletions = [];
  }
  if (
    output["failedQueuedPurchaseDeletionSet"] !== undefined &&
    output["failedQueuedPurchaseDeletionSet"]["item"] !== undefined
  ) {
    contents.FailedQueuedPurchaseDeletions = deserializeAws_ec2FailedQueuedPurchaseDeletionSet(
      __getArrayIfSingleItem(output["failedQueuedPurchaseDeletionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTrafficMirrorFilterResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorFilterResult => {
  let contents: any = {
    TrafficMirrorFilterId: undefined,
  };
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = output["trafficMirrorFilterId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorFilterRuleResult => {
  let contents: any = {
    TrafficMirrorFilterRuleId: undefined,
  };
  if (output["trafficMirrorFilterRuleId"] !== undefined) {
    contents.TrafficMirrorFilterRuleId = output["trafficMirrorFilterRuleId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorSessionResult => {
  let contents: any = {
    TrafficMirrorSessionId: undefined,
  };
  if (output["trafficMirrorSessionId"] !== undefined) {
    contents.TrafficMirrorSessionId = output["trafficMirrorSessionId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteTrafficMirrorTargetResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorTargetResult => {
  let contents: any = {
    TrafficMirrorTargetId: undefined,
  };
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = output["trafficMirrorTargetId"];
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectPeerResult => {
  let contents: any = {
    TransitGatewayConnectPeer: undefined,
  };
  if (output["transitGatewayConnectPeer"] !== undefined) {
    contents.TransitGatewayConnectPeer = deserializeAws_ec2TransitGatewayConnectPeer(
      output["transitGatewayConnectPeer"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectResult => {
  let contents: any = {
    TransitGatewayConnect: undefined,
  };
  if (output["transitGatewayConnect"] !== undefined) {
    contents.TransitGatewayConnect = deserializeAws_ec2TransitGatewayConnect(output["transitGatewayConnect"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayMulticastDomainResult => {
  let contents: any = {
    TransitGatewayMulticastDomain: undefined,
  };
  if (output["transitGatewayMulticastDomain"] !== undefined) {
    contents.TransitGatewayMulticastDomain = deserializeAws_ec2TransitGatewayMulticastDomain(
      output["transitGatewayMulticastDomain"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPeeringAttachmentResult => {
  let contents: any = {
    TransitGatewayPeeringAttachment: undefined,
  };
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPrefixListReferenceResult => {
  let contents: any = {
    TransitGatewayPrefixListReference: undefined,
  };
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayResult => {
  let contents: any = {
    TransitGateway: undefined,
  };
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteResult => {
  let contents: any = {
    Route: undefined,
  };
  if (output["route"] !== undefined) {
    contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteTableResult => {
  let contents: any = {
    TransitGatewayRouteTable: undefined,
  };
  if (output["transitGatewayRouteTable"] !== undefined) {
    contents.TransitGatewayRouteTable = deserializeAws_ec2TransitGatewayRouteTable(
      output["transitGatewayRouteTable"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayVpcAttachmentResult => {
  let contents: any = {
    TransitGatewayVpcAttachment: undefined,
  };
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointConnectionNotificationsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointServiceConfigurationsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteVpcEndpointsResult = (output: any, context: __SerdeContext): DeleteVpcEndpointsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeleteVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcPeeringConnectionResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DeprovisionByoipCidrResult = (
  output: any,
  context: __SerdeContext
): DeprovisionByoipCidrResult => {
  let contents: any = {
    ByoipCidr: undefined,
  };
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

const deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DeregisterInstanceEventNotificationAttributesResult => {
  let contents: any = {
    InstanceTagAttribute: undefined,
  };
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(
      output["instanceTagAttribute"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupMembersResult => {
  let contents: any = {
    DeregisteredMulticastGroupMembers: undefined,
  };
  if (output["deregisteredMulticastGroupMembers"] !== undefined) {
    contents.DeregisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers(
      output["deregisteredMulticastGroupMembers"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupSourcesResult => {
  let contents: any = {
    DeregisteredMulticastGroupSources: undefined,
  };
  if (output["deregisteredMulticastGroupSources"] !== undefined) {
    contents.DeregisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources(
      output["deregisteredMulticastGroupSources"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeAccountAttributesResult = (
  output: any,
  context: __SerdeContext
): DescribeAccountAttributesResult => {
  let contents: any = {
    AccountAttributes: undefined,
  };
  if (output.accountAttributeSet === "") {
    contents.AccountAttributes = [];
  }
  if (output["accountAttributeSet"] !== undefined && output["accountAttributeSet"]["item"] !== undefined) {
    contents.AccountAttributes = deserializeAws_ec2AccountAttributeList(
      __getArrayIfSingleItem(output["accountAttributeSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeAddressesResult = (output: any, context: __SerdeContext): DescribeAddressesResult => {
  let contents: any = {
    Addresses: undefined,
  };
  if (output.addressesSet === "") {
    contents.Addresses = [];
  }
  if (output["addressesSet"] !== undefined && output["addressesSet"]["item"] !== undefined) {
    contents.Addresses = deserializeAws_ec2AddressList(__getArrayIfSingleItem(output["addressesSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeAggregateIdFormatResult = (
  output: any,
  context: __SerdeContext
): DescribeAggregateIdFormatResult => {
  let contents: any = {
    UseLongIdsAggregated: undefined,
    Statuses: undefined,
  };
  if (output["useLongIdsAggregated"] !== undefined) {
    contents.UseLongIdsAggregated = output["useLongIdsAggregated"] == "true";
  }
  if (output.statusSet === "") {
    contents.Statuses = [];
  }
  if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeAvailabilityZonesResult = (
  output: any,
  context: __SerdeContext
): DescribeAvailabilityZonesResult => {
  let contents: any = {
    AvailabilityZones: undefined,
  };
  if (output.availabilityZoneInfo === "") {
    contents.AvailabilityZones = [];
  }
  if (output["availabilityZoneInfo"] !== undefined && output["availabilityZoneInfo"]["item"] !== undefined) {
    contents.AvailabilityZones = deserializeAws_ec2AvailabilityZoneList(
      __getArrayIfSingleItem(output["availabilityZoneInfo"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeBundleTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeBundleTasksResult => {
  let contents: any = {
    BundleTasks: undefined,
  };
  if (output.bundleInstanceTasksSet === "") {
    contents.BundleTasks = [];
  }
  if (output["bundleInstanceTasksSet"] !== undefined && output["bundleInstanceTasksSet"]["item"] !== undefined) {
    contents.BundleTasks = deserializeAws_ec2BundleTaskList(
      __getArrayIfSingleItem(output["bundleInstanceTasksSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeByoipCidrsResult = (output: any, context: __SerdeContext): DescribeByoipCidrsResult => {
  let contents: any = {
    ByoipCidrs: undefined,
    NextToken: undefined,
  };
  if (output.byoipCidrSet === "") {
    contents.ByoipCidrs = [];
  }
  if (output["byoipCidrSet"] !== undefined && output["byoipCidrSet"]["item"] !== undefined) {
    contents.ByoipCidrs = deserializeAws_ec2ByoipCidrSet(
      __getArrayIfSingleItem(output["byoipCidrSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeCapacityReservationsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityReservationsResult => {
  let contents: any = {
    NextToken: undefined,
    CapacityReservations: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.capacityReservationSet === "") {
    contents.CapacityReservations = [];
  }
  if (output["capacityReservationSet"] !== undefined && output["capacityReservationSet"]["item"] !== undefined) {
    contents.CapacityReservations = deserializeAws_ec2CapacityReservationSet(
      __getArrayIfSingleItem(output["capacityReservationSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeCarrierGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeCarrierGatewaysResult => {
  let contents: any = {
    CarrierGateways: undefined,
    NextToken: undefined,
  };
  if (output.carrierGatewaySet === "") {
    contents.CarrierGateways = [];
  }
  if (output["carrierGatewaySet"] !== undefined && output["carrierGatewaySet"]["item"] !== undefined) {
    contents.CarrierGateways = deserializeAws_ec2CarrierGatewaySet(
      __getArrayIfSingleItem(output["carrierGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClassicLinkInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeClassicLinkInstancesResult => {
  let contents: any = {
    Instances: undefined,
    NextToken: undefined,
  };
  if (output.instancesSet === "") {
    contents.Instances = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.Instances = deserializeAws_ec2ClassicLinkInstanceList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnAuthorizationRulesResult => {
  let contents: any = {
    AuthorizationRules: undefined,
    NextToken: undefined,
  };
  if (output.authorizationRule === "") {
    contents.AuthorizationRules = [];
  }
  if (output["authorizationRule"] !== undefined && output["authorizationRule"]["item"] !== undefined) {
    contents.AuthorizationRules = deserializeAws_ec2AuthorizationRuleSet(
      __getArrayIfSingleItem(output["authorizationRule"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnConnectionsResult => {
  let contents: any = {
    Connections: undefined,
    NextToken: undefined,
  };
  if (output.connections === "") {
    contents.Connections = [];
  }
  if (output["connections"] !== undefined && output["connections"]["item"] !== undefined) {
    contents.Connections = deserializeAws_ec2ClientVpnConnectionSet(
      __getArrayIfSingleItem(output["connections"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClientVpnEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnEndpointsResult => {
  let contents: any = {
    ClientVpnEndpoints: undefined,
    NextToken: undefined,
  };
  if (output.clientVpnEndpoint === "") {
    contents.ClientVpnEndpoints = [];
  }
  if (output["clientVpnEndpoint"] !== undefined && output["clientVpnEndpoint"]["item"] !== undefined) {
    contents.ClientVpnEndpoints = deserializeAws_ec2EndpointSet(
      __getArrayIfSingleItem(output["clientVpnEndpoint"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClientVpnRoutesResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnRoutesResult => {
  let contents: any = {
    Routes: undefined,
    NextToken: undefined,
  };
  if (output.routes === "") {
    contents.Routes = [];
  }
  if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
    contents.Routes = deserializeAws_ec2ClientVpnRouteSet(__getArrayIfSingleItem(output["routes"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeClientVpnTargetNetworksResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnTargetNetworksResult => {
  let contents: any = {
    ClientVpnTargetNetworks: undefined,
    NextToken: undefined,
  };
  if (output.clientVpnTargetNetworks === "") {
    contents.ClientVpnTargetNetworks = [];
  }
  if (output["clientVpnTargetNetworks"] !== undefined && output["clientVpnTargetNetworks"]["item"] !== undefined) {
    contents.ClientVpnTargetNetworks = deserializeAws_ec2TargetNetworkSet(
      __getArrayIfSingleItem(output["clientVpnTargetNetworks"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeCoipPoolsResult = (output: any, context: __SerdeContext): DescribeCoipPoolsResult => {
  let contents: any = {
    CoipPools: undefined,
    NextToken: undefined,
  };
  if (output.coipPoolSet === "") {
    contents.CoipPools = [];
  }
  if (output["coipPoolSet"] !== undefined && output["coipPoolSet"]["item"] !== undefined) {
    contents.CoipPools = deserializeAws_ec2CoipPoolSet(__getArrayIfSingleItem(output["coipPoolSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeConversionTaskList = (output: any, context: __SerdeContext): ConversionTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ConversionTask(entry, context);
    });
};

const deserializeAws_ec2DescribeConversionTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeConversionTasksResult => {
  let contents: any = {
    ConversionTasks: undefined,
  };
  if (output.conversionTasks === "") {
    contents.ConversionTasks = [];
  }
  if (output["conversionTasks"] !== undefined && output["conversionTasks"]["item"] !== undefined) {
    contents.ConversionTasks = deserializeAws_ec2DescribeConversionTaskList(
      __getArrayIfSingleItem(output["conversionTasks"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeCustomerGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeCustomerGatewaysResult => {
  let contents: any = {
    CustomerGateways: undefined,
  };
  if (output.customerGatewaySet === "") {
    contents.CustomerGateways = [];
  }
  if (output["customerGatewaySet"] !== undefined && output["customerGatewaySet"]["item"] !== undefined) {
    contents.CustomerGateways = deserializeAws_ec2CustomerGatewayList(
      __getArrayIfSingleItem(output["customerGatewaySet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeDhcpOptionsResult = (
  output: any,
  context: __SerdeContext
): DescribeDhcpOptionsResult => {
  let contents: any = {
    DhcpOptions: undefined,
    NextToken: undefined,
  };
  if (output.dhcpOptionsSet === "") {
    contents.DhcpOptions = [];
  }
  if (output["dhcpOptionsSet"] !== undefined && output["dhcpOptionsSet"]["item"] !== undefined) {
    contents.DhcpOptions = deserializeAws_ec2DhcpOptionsList(
      __getArrayIfSingleItem(output["dhcpOptionsSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeEgressOnlyInternetGatewaysResult => {
  let contents: any = {
    EgressOnlyInternetGateways: undefined,
    NextToken: undefined,
  };
  if (output.egressOnlyInternetGatewaySet === "") {
    contents.EgressOnlyInternetGateways = [];
  }
  if (
    output["egressOnlyInternetGatewaySet"] !== undefined &&
    output["egressOnlyInternetGatewaySet"]["item"] !== undefined
  ) {
    contents.EgressOnlyInternetGateways = deserializeAws_ec2EgressOnlyInternetGatewayList(
      __getArrayIfSingleItem(output["egressOnlyInternetGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeElasticGpusResult = (
  output: any,
  context: __SerdeContext
): DescribeElasticGpusResult => {
  let contents: any = {
    ElasticGpuSet: undefined,
    MaxResults: undefined,
    NextToken: undefined,
  };
  if (output.elasticGpuSet === "") {
    contents.ElasticGpuSet = [];
  }
  if (output["elasticGpuSet"] !== undefined && output["elasticGpuSet"]["item"] !== undefined) {
    contents.ElasticGpuSet = deserializeAws_ec2ElasticGpuSet(
      __getArrayIfSingleItem(output["elasticGpuSet"]["item"]),
      context
    );
  }
  if (output["maxResults"] !== undefined) {
    contents.MaxResults = parseInt(output["maxResults"]);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeExportImageTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeExportImageTasksResult => {
  let contents: any = {
    ExportImageTasks: undefined,
    NextToken: undefined,
  };
  if (output.exportImageTaskSet === "") {
    contents.ExportImageTasks = [];
  }
  if (output["exportImageTaskSet"] !== undefined && output["exportImageTaskSet"]["item"] !== undefined) {
    contents.ExportImageTasks = deserializeAws_ec2ExportImageTaskList(
      __getArrayIfSingleItem(output["exportImageTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeExportTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeExportTasksResult => {
  let contents: any = {
    ExportTasks: undefined,
  };
  if (output.exportTaskSet === "") {
    contents.ExportTasks = [];
  }
  if (output["exportTaskSet"] !== undefined && output["exportTaskSet"]["item"] !== undefined) {
    contents.ExportTasks = deserializeAws_ec2ExportTaskList(
      __getArrayIfSingleItem(output["exportTaskSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoresResult => {
  let contents: any = {
    FastSnapshotRestores: undefined,
    NextToken: undefined,
  };
  if (output.fastSnapshotRestoreSet === "") {
    contents.FastSnapshotRestores = [];
  }
  if (output["fastSnapshotRestoreSet"] !== undefined && output["fastSnapshotRestoreSet"]["item"] !== undefined) {
    contents.FastSnapshotRestores = deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem => {
  let contents: any = {
    SnapshotId: undefined,
    AvailabilityZone: undefined,
    State: undefined,
    StateTransitionReason: undefined,
    OwnerId: undefined,
    OwnerAlias: undefined,
    EnablingTime: undefined,
    OptimizingTime: undefined,
    EnabledTime: undefined,
    DisablingTime: undefined,
    DisabledTime: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = output["stateTransitionReason"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = output["ownerAlias"];
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = new Date(output["enablingTime"]);
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = new Date(output["optimizingTime"]);
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = new Date(output["enabledTime"]);
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = new Date(output["disablingTime"]);
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = new Date(output["disabledTime"]);
  }
  return contents;
};

const deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};

const deserializeAws_ec2DescribeFleetError = (output: any, context: __SerdeContext): DescribeFleetError => {
  let contents: any = {
    LaunchTemplateAndOverrides: undefined,
    Lifecycle: undefined,
    ErrorCode: undefined,
    ErrorMessage: undefined,
  };
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = output["lifecycle"];
  }
  if (output["errorCode"] !== undefined) {
    contents.ErrorCode = output["errorCode"];
  }
  if (output["errorMessage"] !== undefined) {
    contents.ErrorMessage = output["errorMessage"];
  }
  return contents;
};

const deserializeAws_ec2DescribeFleetHistoryResult = (
  output: any,
  context: __SerdeContext
): DescribeFleetHistoryResult => {
  let contents: any = {
    HistoryRecords: undefined,
    LastEvaluatedTime: undefined,
    NextToken: undefined,
    FleetId: undefined,
    StartTime: undefined,
  };
  if (output.historyRecordSet === "") {
    contents.HistoryRecords = [];
  }
  if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
    contents.HistoryRecords = deserializeAws_ec2HistoryRecordSet(
      __getArrayIfSingleItem(output["historyRecordSet"]["item"]),
      context
    );
  }
  if (output["lastEvaluatedTime"] !== undefined) {
    contents.LastEvaluatedTime = new Date(output["lastEvaluatedTime"]);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  return contents;
};

const deserializeAws_ec2DescribeFleetInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeFleetInstancesResult => {
  let contents: any = {
    ActiveInstances: undefined,
    NextToken: undefined,
    FleetId: undefined,
  };
  if (output.activeInstanceSet === "") {
    contents.ActiveInstances = [];
  }
  if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
    contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet(
      __getArrayIfSingleItem(output["activeInstanceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  return contents;
};

const deserializeAws_ec2DescribeFleetsErrorSet = (output: any, context: __SerdeContext): DescribeFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DescribeFleetError(entry, context);
    });
};

const deserializeAws_ec2DescribeFleetsInstances = (output: any, context: __SerdeContext): DescribeFleetsInstances => {
  let contents: any = {
    LaunchTemplateAndOverrides: undefined,
    Lifecycle: undefined,
    InstanceIds: undefined,
    InstanceType: undefined,
    Platform: undefined,
  };
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = deserializeAws_ec2LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = output["lifecycle"];
  }
  if (output.instanceIds === "") {
    contents.InstanceIds = [];
  }
  if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
    contents.InstanceIds = deserializeAws_ec2InstanceIdsSet(
      __getArrayIfSingleItem(output["instanceIds"]["item"]),
      context
    );
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  return contents;
};

const deserializeAws_ec2DescribeFleetsInstancesSet = (
  output: any,
  context: __SerdeContext
): DescribeFleetsInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DescribeFleetsInstances(entry, context);
    });
};

const deserializeAws_ec2DescribeFleetsResult = (output: any, context: __SerdeContext): DescribeFleetsResult => {
  let contents: any = {
    NextToken: undefined,
    Fleets: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.fleetSet === "") {
    contents.Fleets = [];
  }
  if (output["fleetSet"] !== undefined && output["fleetSet"]["item"] !== undefined) {
    contents.Fleets = deserializeAws_ec2FleetSet(__getArrayIfSingleItem(output["fleetSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeFlowLogsResult = (output: any, context: __SerdeContext): DescribeFlowLogsResult => {
  let contents: any = {
    FlowLogs: undefined,
    NextToken: undefined,
  };
  if (output.flowLogSet === "") {
    contents.FlowLogs = [];
  }
  if (output["flowLogSet"] !== undefined && output["flowLogSet"]["item"] !== undefined) {
    contents.FlowLogs = deserializeAws_ec2FlowLogSet(__getArrayIfSingleItem(output["flowLogSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeFpgaImageAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeFpgaImageAttributeResult => {
  let contents: any = {
    FpgaImageAttribute: undefined,
  };
  if (output["fpgaImageAttribute"] !== undefined) {
    contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
  }
  return contents;
};

const deserializeAws_ec2DescribeFpgaImagesResult = (output: any, context: __SerdeContext): DescribeFpgaImagesResult => {
  let contents: any = {
    FpgaImages: undefined,
    NextToken: undefined,
  };
  if (output.fpgaImageSet === "") {
    contents.FpgaImages = [];
  }
  if (output["fpgaImageSet"] !== undefined && output["fpgaImageSet"]["item"] !== undefined) {
    contents.FpgaImages = deserializeAws_ec2FpgaImageList(
      __getArrayIfSingleItem(output["fpgaImageSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeHostReservationOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeHostReservationOfferingsResult => {
  let contents: any = {
    NextToken: undefined,
    OfferingSet: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.offeringSet === "") {
    contents.OfferingSet = [];
  }
  if (output["offeringSet"] !== undefined && output["offeringSet"]["item"] !== undefined) {
    contents.OfferingSet = deserializeAws_ec2HostOfferingSet(
      __getArrayIfSingleItem(output["offeringSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeHostReservationsResult = (
  output: any,
  context: __SerdeContext
): DescribeHostReservationsResult => {
  let contents: any = {
    HostReservationSet: undefined,
    NextToken: undefined,
  };
  if (output.hostReservationSet === "") {
    contents.HostReservationSet = [];
  }
  if (output["hostReservationSet"] !== undefined && output["hostReservationSet"]["item"] !== undefined) {
    contents.HostReservationSet = deserializeAws_ec2HostReservationSet(
      __getArrayIfSingleItem(output["hostReservationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeHostsResult = (output: any, context: __SerdeContext): DescribeHostsResult => {
  let contents: any = {
    Hosts: undefined,
    NextToken: undefined,
  };
  if (output.hostSet === "") {
    contents.Hosts = [];
  }
  if (output["hostSet"] !== undefined && output["hostSet"]["item"] !== undefined) {
    contents.Hosts = deserializeAws_ec2HostList(__getArrayIfSingleItem(output["hostSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeIamInstanceProfileAssociationsResult => {
  let contents: any = {
    IamInstanceProfileAssociations: undefined,
    NextToken: undefined,
  };
  if (output.iamInstanceProfileAssociationSet === "") {
    contents.IamInstanceProfileAssociations = [];
  }
  if (
    output["iamInstanceProfileAssociationSet"] !== undefined &&
    output["iamInstanceProfileAssociationSet"]["item"] !== undefined
  ) {
    contents.IamInstanceProfileAssociations = deserializeAws_ec2IamInstanceProfileAssociationSet(
      __getArrayIfSingleItem(output["iamInstanceProfileAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeIdentityIdFormatResult = (
  output: any,
  context: __SerdeContext
): DescribeIdentityIdFormatResult => {
  let contents: any = {
    Statuses: undefined,
  };
  if (output.statusSet === "") {
    contents.Statuses = [];
  }
  if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeIdFormatResult = (output: any, context: __SerdeContext): DescribeIdFormatResult => {
  let contents: any = {
    Statuses: undefined,
  };
  if (output.statusSet === "") {
    contents.Statuses = [];
  }
  if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeImagesResult = (output: any, context: __SerdeContext): DescribeImagesResult => {
  let contents: any = {
    Images: undefined,
  };
  if (output.imagesSet === "") {
    contents.Images = [];
  }
  if (output["imagesSet"] !== undefined && output["imagesSet"]["item"] !== undefined) {
    contents.Images = deserializeAws_ec2ImageList(__getArrayIfSingleItem(output["imagesSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeImportImageTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeImportImageTasksResult => {
  let contents: any = {
    ImportImageTasks: undefined,
    NextToken: undefined,
  };
  if (output.importImageTaskSet === "") {
    contents.ImportImageTasks = [];
  }
  if (output["importImageTaskSet"] !== undefined && output["importImageTaskSet"]["item"] !== undefined) {
    contents.ImportImageTasks = deserializeAws_ec2ImportImageTaskList(
      __getArrayIfSingleItem(output["importImageTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeImportSnapshotTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeImportSnapshotTasksResult => {
  let contents: any = {
    ImportSnapshotTasks: undefined,
    NextToken: undefined,
  };
  if (output.importSnapshotTaskSet === "") {
    contents.ImportSnapshotTasks = [];
  }
  if (output["importSnapshotTaskSet"] !== undefined && output["importSnapshotTaskSet"]["item"] !== undefined) {
    contents.ImportSnapshotTasks = deserializeAws_ec2ImportSnapshotTaskList(
      __getArrayIfSingleItem(output["importSnapshotTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInstanceCreditSpecificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceCreditSpecificationsResult => {
  let contents: any = {
    InstanceCreditSpecifications: undefined,
    NextToken: undefined,
  };
  if (output.instanceCreditSpecificationSet === "") {
    contents.InstanceCreditSpecifications = [];
  }
  if (
    output["instanceCreditSpecificationSet"] !== undefined &&
    output["instanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.InstanceCreditSpecifications = deserializeAws_ec2InstanceCreditSpecificationList(
      __getArrayIfSingleItem(output["instanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceEventNotificationAttributesResult => {
  let contents: any = {
    InstanceTagAttribute: undefined,
  };
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(
      output["instanceTagAttribute"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeInstancesResult = (output: any, context: __SerdeContext): DescribeInstancesResult => {
  let contents: any = {
    Reservations: undefined,
    NextToken: undefined,
  };
  if (output.reservationSet === "") {
    contents.Reservations = [];
  }
  if (output["reservationSet"] !== undefined && output["reservationSet"]["item"] !== undefined) {
    contents.Reservations = deserializeAws_ec2ReservationList(
      __getArrayIfSingleItem(output["reservationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInstanceStatusResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceStatusResult => {
  let contents: any = {
    InstanceStatuses: undefined,
    NextToken: undefined,
  };
  if (output.instanceStatusSet === "") {
    contents.InstanceStatuses = [];
  }
  if (output["instanceStatusSet"] !== undefined && output["instanceStatusSet"]["item"] !== undefined) {
    contents.InstanceStatuses = deserializeAws_ec2InstanceStatusList(
      __getArrayIfSingleItem(output["instanceStatusSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInstanceTypeOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceTypeOfferingsResult => {
  let contents: any = {
    InstanceTypeOfferings: undefined,
    NextToken: undefined,
  };
  if (output.instanceTypeOfferingSet === "") {
    contents.InstanceTypeOfferings = [];
  }
  if (output["instanceTypeOfferingSet"] !== undefined && output["instanceTypeOfferingSet"]["item"] !== undefined) {
    contents.InstanceTypeOfferings = deserializeAws_ec2InstanceTypeOfferingsList(
      __getArrayIfSingleItem(output["instanceTypeOfferingSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInstanceTypesResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceTypesResult => {
  let contents: any = {
    InstanceTypes: undefined,
    NextToken: undefined,
  };
  if (output.instanceTypeSet === "") {
    contents.InstanceTypes = [];
  }
  if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
    contents.InstanceTypes = deserializeAws_ec2InstanceTypeInfoList(
      __getArrayIfSingleItem(output["instanceTypeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeInternetGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeInternetGatewaysResult => {
  let contents: any = {
    InternetGateways: undefined,
    NextToken: undefined,
  };
  if (output.internetGatewaySet === "") {
    contents.InternetGateways = [];
  }
  if (output["internetGatewaySet"] !== undefined && output["internetGatewaySet"]["item"] !== undefined) {
    contents.InternetGateways = deserializeAws_ec2InternetGatewayList(
      __getArrayIfSingleItem(output["internetGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeIpv6PoolsResult = (output: any, context: __SerdeContext): DescribeIpv6PoolsResult => {
  let contents: any = {
    Ipv6Pools: undefined,
    NextToken: undefined,
  };
  if (output.ipv6PoolSet === "") {
    contents.Ipv6Pools = [];
  }
  if (output["ipv6PoolSet"] !== undefined && output["ipv6PoolSet"]["item"] !== undefined) {
    contents.Ipv6Pools = deserializeAws_ec2Ipv6PoolSet(__getArrayIfSingleItem(output["ipv6PoolSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeKeyPairsResult = (output: any, context: __SerdeContext): DescribeKeyPairsResult => {
  let contents: any = {
    KeyPairs: undefined,
  };
  if (output.keySet === "") {
    contents.KeyPairs = [];
  }
  if (output["keySet"] !== undefined && output["keySet"]["item"] !== undefined) {
    contents.KeyPairs = deserializeAws_ec2KeyPairList(__getArrayIfSingleItem(output["keySet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeLaunchTemplatesResult = (
  output: any,
  context: __SerdeContext
): DescribeLaunchTemplatesResult => {
  let contents: any = {
    LaunchTemplates: undefined,
    NextToken: undefined,
  };
  if (output.launchTemplates === "") {
    contents.LaunchTemplates = [];
  }
  if (output["launchTemplates"] !== undefined && output["launchTemplates"]["item"] !== undefined) {
    contents.LaunchTemplates = deserializeAws_ec2LaunchTemplateSet(
      __getArrayIfSingleItem(output["launchTemplates"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DescribeLaunchTemplateVersionsResult => {
  let contents: any = {
    LaunchTemplateVersions: undefined,
    NextToken: undefined,
  };
  if (output.launchTemplateVersionSet === "") {
    contents.LaunchTemplateVersions = [];
  }
  if (output["launchTemplateVersionSet"] !== undefined && output["launchTemplateVersionSet"]["item"] !== undefined) {
    contents.LaunchTemplateVersions = deserializeAws_ec2LaunchTemplateVersionSet(
      __getArrayIfSingleItem(output["launchTemplateVersionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTablesResult => {
  let contents: any = {
    LocalGatewayRouteTables: undefined,
    NextToken: undefined,
  };
  if (output.localGatewayRouteTableSet === "") {
    contents.LocalGatewayRouteTables = [];
  }
  if (output["localGatewayRouteTableSet"] !== undefined && output["localGatewayRouteTableSet"]["item"] !== undefined) {
    contents.LocalGatewayRouteTables = deserializeAws_ec2LocalGatewayRouteTableSet(
      __getArrayIfSingleItem(output["localGatewayRouteTableSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult => {
  let contents: any = {
    LocalGatewayRouteTableVirtualInterfaceGroupAssociations: undefined,
    NextToken: undefined,
  };
  if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = [];
  }
  if (
    output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"] !== undefined &&
    output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(
      __getArrayIfSingleItem(output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVpcAssociationsResult => {
  let contents: any = {
    LocalGatewayRouteTableVpcAssociations: undefined,
    NextToken: undefined,
  };
  if (output.localGatewayRouteTableVpcAssociationSet === "") {
    contents.LocalGatewayRouteTableVpcAssociations = [];
  }
  if (
    output["localGatewayRouteTableVpcAssociationSet"] !== undefined &&
    output["localGatewayRouteTableVpcAssociationSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayRouteTableVpcAssociations = deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet(
      __getArrayIfSingleItem(output["localGatewayRouteTableVpcAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewaysResult => {
  let contents: any = {
    LocalGateways: undefined,
    NextToken: undefined,
  };
  if (output.localGatewaySet === "") {
    contents.LocalGateways = [];
  }
  if (output["localGatewaySet"] !== undefined && output["localGatewaySet"]["item"] !== undefined) {
    contents.LocalGateways = deserializeAws_ec2LocalGatewaySet(
      __getArrayIfSingleItem(output["localGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfaceGroupsResult => {
  let contents: any = {
    LocalGatewayVirtualInterfaceGroups: undefined,
    NextToken: undefined,
  };
  if (output.localGatewayVirtualInterfaceGroupSet === "") {
    contents.LocalGatewayVirtualInterfaceGroups = [];
  }
  if (
    output["localGatewayVirtualInterfaceGroupSet"] !== undefined &&
    output["localGatewayVirtualInterfaceGroupSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaceGroups = deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceGroupSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfacesResult => {
  let contents: any = {
    LocalGatewayVirtualInterfaces: undefined,
    NextToken: undefined,
  };
  if (output.localGatewayVirtualInterfaceSet === "") {
    contents.LocalGatewayVirtualInterfaces = [];
  }
  if (
    output["localGatewayVirtualInterfaceSet"] !== undefined &&
    output["localGatewayVirtualInterfaceSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaces = deserializeAws_ec2LocalGatewayVirtualInterfaceSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeManagedPrefixListsResult = (
  output: any,
  context: __SerdeContext
): DescribeManagedPrefixListsResult => {
  let contents: any = {
    NextToken: undefined,
    PrefixLists: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.prefixListSet === "") {
    contents.PrefixLists = [];
  }
  if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
    contents.PrefixLists = deserializeAws_ec2ManagedPrefixListSet(
      __getArrayIfSingleItem(output["prefixListSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeMovingAddressesResult = (
  output: any,
  context: __SerdeContext
): DescribeMovingAddressesResult => {
  let contents: any = {
    MovingAddressStatuses: undefined,
    NextToken: undefined,
  };
  if (output.movingAddressStatusSet === "") {
    contents.MovingAddressStatuses = [];
  }
  if (output["movingAddressStatusSet"] !== undefined && output["movingAddressStatusSet"]["item"] !== undefined) {
    contents.MovingAddressStatuses = deserializeAws_ec2MovingAddressStatusSet(
      __getArrayIfSingleItem(output["movingAddressStatusSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNatGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeNatGatewaysResult => {
  let contents: any = {
    NatGateways: undefined,
    NextToken: undefined,
  };
  if (output.natGatewaySet === "") {
    contents.NatGateways = [];
  }
  if (output["natGatewaySet"] !== undefined && output["natGatewaySet"]["item"] !== undefined) {
    contents.NatGateways = deserializeAws_ec2NatGatewayList(
      __getArrayIfSingleItem(output["natGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkAclsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkAclsResult => {
  let contents: any = {
    NetworkAcls: undefined,
    NextToken: undefined,
  };
  if (output.networkAclSet === "") {
    contents.NetworkAcls = [];
  }
  if (output["networkAclSet"] !== undefined && output["networkAclSet"]["item"] !== undefined) {
    contents.NetworkAcls = deserializeAws_ec2NetworkAclList(
      __getArrayIfSingleItem(output["networkAclSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkInsightsAnalysesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAnalysesResult => {
  let contents: any = {
    NetworkInsightsAnalyses: undefined,
    NextToken: undefined,
  };
  if (output.networkInsightsAnalysisSet === "") {
    contents.NetworkInsightsAnalyses = [];
  }
  if (
    output["networkInsightsAnalysisSet"] !== undefined &&
    output["networkInsightsAnalysisSet"]["item"] !== undefined
  ) {
    contents.NetworkInsightsAnalyses = deserializeAws_ec2NetworkInsightsAnalysisList(
      __getArrayIfSingleItem(output["networkInsightsAnalysisSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkInsightsPathsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsPathsResult => {
  let contents: any = {
    NetworkInsightsPaths: undefined,
    NextToken: undefined,
  };
  if (output.networkInsightsPathSet === "") {
    contents.NetworkInsightsPaths = [];
  }
  if (output["networkInsightsPathSet"] !== undefined && output["networkInsightsPathSet"]["item"] !== undefined) {
    contents.NetworkInsightsPaths = deserializeAws_ec2NetworkInsightsPathList(
      __getArrayIfSingleItem(output["networkInsightsPathSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkInterfaceAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfaceAttributeResult => {
  let contents: any = {
    Attachment: undefined,
    Description: undefined,
    Groups: undefined,
    NetworkInterfaceId: undefined,
    SourceDestCheck: undefined,
  };
  if (output["attachment"] !== undefined) {
    contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkInterfacePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfacePermissionsResult => {
  let contents: any = {
    NetworkInterfacePermissions: undefined,
    NextToken: undefined,
  };
  if (output.networkInterfacePermissions === "") {
    contents.NetworkInterfacePermissions = [];
  }
  if (
    output["networkInterfacePermissions"] !== undefined &&
    output["networkInterfacePermissions"]["item"] !== undefined
  ) {
    contents.NetworkInterfacePermissions = deserializeAws_ec2NetworkInterfacePermissionList(
      __getArrayIfSingleItem(output["networkInterfacePermissions"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeNetworkInterfacesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfacesResult => {
  let contents: any = {
    NetworkInterfaces: undefined,
    NextToken: undefined,
  };
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  }
  if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = deserializeAws_ec2NetworkInterfaceList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribePlacementGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribePlacementGroupsResult => {
  let contents: any = {
    PlacementGroups: undefined,
  };
  if (output.placementGroupSet === "") {
    contents.PlacementGroups = [];
  }
  if (output["placementGroupSet"] !== undefined && output["placementGroupSet"]["item"] !== undefined) {
    contents.PlacementGroups = deserializeAws_ec2PlacementGroupList(
      __getArrayIfSingleItem(output["placementGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribePrefixListsResult = (
  output: any,
  context: __SerdeContext
): DescribePrefixListsResult => {
  let contents: any = {
    NextToken: undefined,
    PrefixLists: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.prefixListSet === "") {
    contents.PrefixLists = [];
  }
  if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
    contents.PrefixLists = deserializeAws_ec2PrefixListSet(
      __getArrayIfSingleItem(output["prefixListSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribePrincipalIdFormatResult = (
  output: any,
  context: __SerdeContext
): DescribePrincipalIdFormatResult => {
  let contents: any = {
    Principals: undefined,
    NextToken: undefined,
  };
  if (output.principalSet === "") {
    contents.Principals = [];
  }
  if (output["principalSet"] !== undefined && output["principalSet"]["item"] !== undefined) {
    contents.Principals = deserializeAws_ec2PrincipalIdFormatList(
      __getArrayIfSingleItem(output["principalSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribePublicIpv4PoolsResult = (
  output: any,
  context: __SerdeContext
): DescribePublicIpv4PoolsResult => {
  let contents: any = {
    PublicIpv4Pools: undefined,
    NextToken: undefined,
  };
  if (output.publicIpv4PoolSet === "") {
    contents.PublicIpv4Pools = [];
  }
  if (output["publicIpv4PoolSet"] !== undefined && output["publicIpv4PoolSet"]["item"] !== undefined) {
    contents.PublicIpv4Pools = deserializeAws_ec2PublicIpv4PoolSet(
      __getArrayIfSingleItem(output["publicIpv4PoolSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeRegionsResult = (output: any, context: __SerdeContext): DescribeRegionsResult => {
  let contents: any = {
    Regions: undefined,
  };
  if (output.regionInfo === "") {
    contents.Regions = [];
  }
  if (output["regionInfo"] !== undefined && output["regionInfo"]["item"] !== undefined) {
    contents.Regions = deserializeAws_ec2RegionList(__getArrayIfSingleItem(output["regionInfo"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeReservedInstancesListingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesListingsResult => {
  let contents: any = {
    ReservedInstancesListings: undefined,
  };
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  }
  if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = deserializeAws_ec2ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeReservedInstancesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesModificationsResult => {
  let contents: any = {
    NextToken: undefined,
    ReservedInstancesModifications: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.reservedInstancesModificationsSet === "") {
    contents.ReservedInstancesModifications = [];
  }
  if (
    output["reservedInstancesModificationsSet"] !== undefined &&
    output["reservedInstancesModificationsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesModifications = deserializeAws_ec2ReservedInstancesModificationList(
      __getArrayIfSingleItem(output["reservedInstancesModificationsSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeReservedInstancesOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesOfferingsResult => {
  let contents: any = {
    ReservedInstancesOfferings: undefined,
    NextToken: undefined,
  };
  if (output.reservedInstancesOfferingsSet === "") {
    contents.ReservedInstancesOfferings = [];
  }
  if (
    output["reservedInstancesOfferingsSet"] !== undefined &&
    output["reservedInstancesOfferingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesOfferings = deserializeAws_ec2ReservedInstancesOfferingList(
      __getArrayIfSingleItem(output["reservedInstancesOfferingsSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeReservedInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesResult => {
  let contents: any = {
    ReservedInstances: undefined,
  };
  if (output.reservedInstancesSet === "") {
    contents.ReservedInstances = [];
  }
  if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
    contents.ReservedInstances = deserializeAws_ec2ReservedInstancesList(
      __getArrayIfSingleItem(output["reservedInstancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeRouteTablesResult => {
  let contents: any = {
    RouteTables: undefined,
    NextToken: undefined,
  };
  if (output.routeTableSet === "") {
    contents.RouteTables = [];
  }
  if (output["routeTableSet"] !== undefined && output["routeTableSet"]["item"] !== undefined) {
    contents.RouteTables = deserializeAws_ec2RouteTableList(
      __getArrayIfSingleItem(output["routeTableSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstanceAvailabilityResult => {
  let contents: any = {
    NextToken: undefined,
    ScheduledInstanceAvailabilitySet: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.scheduledInstanceAvailabilitySet === "") {
    contents.ScheduledInstanceAvailabilitySet = [];
  }
  if (
    output["scheduledInstanceAvailabilitySet"] !== undefined &&
    output["scheduledInstanceAvailabilitySet"]["item"] !== undefined
  ) {
    contents.ScheduledInstanceAvailabilitySet = deserializeAws_ec2ScheduledInstanceAvailabilitySet(
      __getArrayIfSingleItem(output["scheduledInstanceAvailabilitySet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstancesResult => {
  let contents: any = {
    NextToken: undefined,
    ScheduledInstanceSet: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.scheduledInstanceSet === "") {
    contents.ScheduledInstanceSet = [];
  }
  if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
    contents.ScheduledInstanceSet = deserializeAws_ec2ScheduledInstanceSet(
      __getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeSecurityGroupReferencesResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupReferencesResult => {
  let contents: any = {
    SecurityGroupReferenceSet: undefined,
  };
  if (output.securityGroupReferenceSet === "") {
    contents.SecurityGroupReferenceSet = [];
  }
  if (output["securityGroupReferenceSet"] !== undefined && output["securityGroupReferenceSet"]["item"] !== undefined) {
    contents.SecurityGroupReferenceSet = deserializeAws_ec2SecurityGroupReferences(
      __getArrayIfSingleItem(output["securityGroupReferenceSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeSecurityGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupsResult => {
  let contents: any = {
    SecurityGroups: undefined,
    NextToken: undefined,
  };
  if (output.securityGroupInfo === "") {
    contents.SecurityGroups = [];
  }
  if (output["securityGroupInfo"] !== undefined && output["securityGroupInfo"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2SecurityGroupList(
      __getArrayIfSingleItem(output["securityGroupInfo"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeSnapshotAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeSnapshotAttributeResult => {
  let contents: any = {
    CreateVolumePermissions: undefined,
    ProductCodes: undefined,
    SnapshotId: undefined,
  };
  if (output.createVolumePermission === "") {
    contents.CreateVolumePermissions = [];
  }
  if (output["createVolumePermission"] !== undefined && output["createVolumePermission"]["item"] !== undefined) {
    contents.CreateVolumePermissions = deserializeAws_ec2CreateVolumePermissionList(
      __getArrayIfSingleItem(output["createVolumePermission"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  return contents;
};

const deserializeAws_ec2DescribeSnapshotsResult = (output: any, context: __SerdeContext): DescribeSnapshotsResult => {
  let contents: any = {
    Snapshots: undefined,
    NextToken: undefined,
  };
  if (output.snapshotSet === "") {
    contents.Snapshots = [];
  }
  if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
    contents.Snapshots = deserializeAws_ec2SnapshotList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotDatafeedSubscriptionResult => {
  let contents: any = {
    SpotDatafeedSubscription: undefined,
  };
  if (output["spotDatafeedSubscription"] !== undefined) {
    contents.SpotDatafeedSubscription = deserializeAws_ec2SpotDatafeedSubscription(
      output["spotDatafeedSubscription"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotFleetInstancesResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetInstancesResponse => {
  let contents: any = {
    ActiveInstances: undefined,
    NextToken: undefined,
    SpotFleetRequestId: undefined,
  };
  if (output.activeInstanceSet === "") {
    contents.ActiveInstances = [];
  }
  if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
    contents.ActiveInstances = deserializeAws_ec2ActiveInstanceSet(
      __getArrayIfSingleItem(output["activeInstanceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestHistoryResponse => {
  let contents: any = {
    HistoryRecords: undefined,
    LastEvaluatedTime: undefined,
    NextToken: undefined,
    SpotFleetRequestId: undefined,
    StartTime: undefined,
  };
  if (output.historyRecordSet === "") {
    contents.HistoryRecords = [];
  }
  if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
    contents.HistoryRecords = deserializeAws_ec2HistoryRecords(
      __getArrayIfSingleItem(output["historyRecordSet"]["item"]),
      context
    );
  }
  if (output["lastEvaluatedTime"] !== undefined) {
    contents.LastEvaluatedTime = new Date(output["lastEvaluatedTime"]);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotFleetRequestsResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestsResponse => {
  let contents: any = {
    NextToken: undefined,
    SpotFleetRequestConfigs: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.spotFleetRequestConfigSet === "") {
    contents.SpotFleetRequestConfigs = [];
  }
  if (output["spotFleetRequestConfigSet"] !== undefined && output["spotFleetRequestConfigSet"]["item"] !== undefined) {
    contents.SpotFleetRequestConfigs = deserializeAws_ec2SpotFleetRequestConfigSet(
      __getArrayIfSingleItem(output["spotFleetRequestConfigSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotInstanceRequestsResult => {
  let contents: any = {
    SpotInstanceRequests: undefined,
    NextToken: undefined,
  };
  if (output.spotInstanceRequestSet === "") {
    contents.SpotInstanceRequests = [];
  }
  if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeSpotPriceHistoryResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotPriceHistoryResult => {
  let contents: any = {
    NextToken: undefined,
    SpotPriceHistory: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.spotPriceHistorySet === "") {
    contents.SpotPriceHistory = [];
  }
  if (output["spotPriceHistorySet"] !== undefined && output["spotPriceHistorySet"]["item"] !== undefined) {
    contents.SpotPriceHistory = deserializeAws_ec2SpotPriceHistoryList(
      __getArrayIfSingleItem(output["spotPriceHistorySet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeStaleSecurityGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeStaleSecurityGroupsResult => {
  let contents: any = {
    NextToken: undefined,
    StaleSecurityGroupSet: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.staleSecurityGroupSet === "") {
    contents.StaleSecurityGroupSet = [];
  }
  if (output["staleSecurityGroupSet"] !== undefined && output["staleSecurityGroupSet"]["item"] !== undefined) {
    contents.StaleSecurityGroupSet = deserializeAws_ec2StaleSecurityGroupSet(
      __getArrayIfSingleItem(output["staleSecurityGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeSubnetsResult = (output: any, context: __SerdeContext): DescribeSubnetsResult => {
  let contents: any = {
    Subnets: undefined,
    NextToken: undefined,
  };
  if (output.subnetSet === "") {
    contents.Subnets = [];
  }
  if (output["subnetSet"] !== undefined && output["subnetSet"]["item"] !== undefined) {
    contents.Subnets = deserializeAws_ec2SubnetList(__getArrayIfSingleItem(output["subnetSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTagsResult = (output: any, context: __SerdeContext): DescribeTagsResult => {
  let contents: any = {
    NextToken: undefined,
    Tags: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagDescriptionList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeTrafficMirrorFiltersResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorFiltersResult => {
  let contents: any = {
    TrafficMirrorFilters: undefined,
    NextToken: undefined,
  };
  if (output.trafficMirrorFilterSet === "") {
    contents.TrafficMirrorFilters = [];
  }
  if (output["trafficMirrorFilterSet"] !== undefined && output["trafficMirrorFilterSet"]["item"] !== undefined) {
    contents.TrafficMirrorFilters = deserializeAws_ec2TrafficMirrorFilterSet(
      __getArrayIfSingleItem(output["trafficMirrorFilterSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTrafficMirrorSessionsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorSessionsResult => {
  let contents: any = {
    TrafficMirrorSessions: undefined,
    NextToken: undefined,
  };
  if (output.trafficMirrorSessionSet === "") {
    contents.TrafficMirrorSessions = [];
  }
  if (output["trafficMirrorSessionSet"] !== undefined && output["trafficMirrorSessionSet"]["item"] !== undefined) {
    contents.TrafficMirrorSessions = deserializeAws_ec2TrafficMirrorSessionSet(
      __getArrayIfSingleItem(output["trafficMirrorSessionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTrafficMirrorTargetsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorTargetsResult => {
  let contents: any = {
    TrafficMirrorTargets: undefined,
    NextToken: undefined,
  };
  if (output.trafficMirrorTargetSet === "") {
    contents.TrafficMirrorTargets = [];
  }
  if (output["trafficMirrorTargetSet"] !== undefined && output["trafficMirrorTargetSet"]["item"] !== undefined) {
    contents.TrafficMirrorTargets = deserializeAws_ec2TrafficMirrorTargetSet(
      __getArrayIfSingleItem(output["trafficMirrorTargetSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayAttachmentsResult => {
  let contents: any = {
    TransitGatewayAttachments: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayAttachments === "") {
    contents.TransitGatewayAttachments = [];
  }
  if (output["transitGatewayAttachments"] !== undefined && output["transitGatewayAttachments"]["item"] !== undefined) {
    contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayConnectPeersResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectPeersResult => {
  let contents: any = {
    TransitGatewayConnectPeers: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayConnectPeerSet === "") {
    contents.TransitGatewayConnectPeers = [];
  }
  if (
    output["transitGatewayConnectPeerSet"] !== undefined &&
    output["transitGatewayConnectPeerSet"]["item"] !== undefined
  ) {
    contents.TransitGatewayConnectPeers = deserializeAws_ec2TransitGatewayConnectPeerList(
      __getArrayIfSingleItem(output["transitGatewayConnectPeerSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayConnectsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectsResult => {
  let contents: any = {
    TransitGatewayConnects: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayConnectSet === "") {
    contents.TransitGatewayConnects = [];
  }
  if (output["transitGatewayConnectSet"] !== undefined && output["transitGatewayConnectSet"]["item"] !== undefined) {
    contents.TransitGatewayConnects = deserializeAws_ec2TransitGatewayConnectList(
      __getArrayIfSingleItem(output["transitGatewayConnectSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayMulticastDomainsResult => {
  let contents: any = {
    TransitGatewayMulticastDomains: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayMulticastDomains === "") {
    contents.TransitGatewayMulticastDomains = [];
  }
  if (
    output["transitGatewayMulticastDomains"] !== undefined &&
    output["transitGatewayMulticastDomains"]["item"] !== undefined
  ) {
    contents.TransitGatewayMulticastDomains = deserializeAws_ec2TransitGatewayMulticastDomainList(
      __getArrayIfSingleItem(output["transitGatewayMulticastDomains"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayPeeringAttachmentsResult => {
  let contents: any = {
    TransitGatewayPeeringAttachments: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayPeeringAttachments === "") {
    contents.TransitGatewayPeeringAttachments = [];
  }
  if (
    output["transitGatewayPeeringAttachments"] !== undefined &&
    output["transitGatewayPeeringAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayPeeringAttachments = deserializeAws_ec2TransitGatewayPeeringAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayPeeringAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayRouteTablesResult => {
  let contents: any = {
    TransitGatewayRouteTables: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayRouteTables === "") {
    contents.TransitGatewayRouteTables = [];
  }
  if (output["transitGatewayRouteTables"] !== undefined && output["transitGatewayRouteTables"]["item"] !== undefined) {
    contents.TransitGatewayRouteTables = deserializeAws_ec2TransitGatewayRouteTableList(
      __getArrayIfSingleItem(output["transitGatewayRouteTables"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewaysResult => {
  let contents: any = {
    TransitGateways: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewaySet === "") {
    contents.TransitGateways = [];
  }
  if (output["transitGatewaySet"] !== undefined && output["transitGatewaySet"]["item"] !== undefined) {
    contents.TransitGateways = deserializeAws_ec2TransitGatewayList(
      __getArrayIfSingleItem(output["transitGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayVpcAttachmentsResult => {
  let contents: any = {
    TransitGatewayVpcAttachments: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayVpcAttachments === "") {
    contents.TransitGatewayVpcAttachments = [];
  }
  if (
    output["transitGatewayVpcAttachments"] !== undefined &&
    output["transitGatewayVpcAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayVpcAttachments = deserializeAws_ec2TransitGatewayVpcAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayVpcAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVolumeAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeVolumeAttributeResult => {
  let contents: any = {
    AutoEnableIO: undefined,
    ProductCodes: undefined,
    VolumeId: undefined,
  };
  if (output["autoEnableIO"] !== undefined) {
    contents.AutoEnableIO = deserializeAws_ec2AttributeBooleanValue(output["autoEnableIO"], context);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVolumesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVolumesModificationsResult => {
  let contents: any = {
    VolumesModifications: undefined,
    NextToken: undefined,
  };
  if (output.volumeModificationSet === "") {
    contents.VolumesModifications = [];
  }
  if (output["volumeModificationSet"] !== undefined && output["volumeModificationSet"]["item"] !== undefined) {
    contents.VolumesModifications = deserializeAws_ec2VolumeModificationList(
      __getArrayIfSingleItem(output["volumeModificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVolumesResult = (output: any, context: __SerdeContext): DescribeVolumesResult => {
  let contents: any = {
    Volumes: undefined,
    NextToken: undefined,
  };
  if (output.volumeSet === "") {
    contents.Volumes = [];
  }
  if (output["volumeSet"] !== undefined && output["volumeSet"]["item"] !== undefined) {
    contents.Volumes = deserializeAws_ec2VolumeList(__getArrayIfSingleItem(output["volumeSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVolumeStatusResult = (
  output: any,
  context: __SerdeContext
): DescribeVolumeStatusResult => {
  let contents: any = {
    NextToken: undefined,
    VolumeStatuses: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.volumeStatusSet === "") {
    contents.VolumeStatuses = [];
  }
  if (output["volumeStatusSet"] !== undefined && output["volumeStatusSet"]["item"] !== undefined) {
    contents.VolumeStatuses = deserializeAws_ec2VolumeStatusList(
      __getArrayIfSingleItem(output["volumeStatusSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcAttributeResult => {
  let contents: any = {
    VpcId: undefined,
    EnableDnsHostnames: undefined,
    EnableDnsSupport: undefined,
  };
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["enableDnsHostnames"] !== undefined) {
    contents.EnableDnsHostnames = deserializeAws_ec2AttributeBooleanValue(output["enableDnsHostnames"], context);
  }
  if (output["enableDnsSupport"] !== undefined) {
    contents.EnableDnsSupport = deserializeAws_ec2AttributeBooleanValue(output["enableDnsSupport"], context);
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcClassicLinkDnsSupportResult => {
  let contents: any = {
    NextToken: undefined,
    Vpcs: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.vpcs === "") {
    contents.Vpcs = [];
  }
  if (output["vpcs"] !== undefined && output["vpcs"]["item"] !== undefined) {
    contents.Vpcs = deserializeAws_ec2ClassicLinkDnsSupportList(
      __getArrayIfSingleItem(output["vpcs"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcClassicLinkResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcClassicLinkResult => {
  let contents: any = {
    Vpcs: undefined,
  };
  if (output.vpcSet === "") {
    contents.Vpcs = [];
  }
  if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
    contents.Vpcs = deserializeAws_ec2VpcClassicLinkList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionNotificationsResult => {
  let contents: any = {
    ConnectionNotificationSet: undefined,
    NextToken: undefined,
  };
  if (output.connectionNotificationSet === "") {
    contents.ConnectionNotificationSet = [];
  }
  if (output["connectionNotificationSet"] !== undefined && output["connectionNotificationSet"]["item"] !== undefined) {
    contents.ConnectionNotificationSet = deserializeAws_ec2ConnectionNotificationSet(
      __getArrayIfSingleItem(output["connectionNotificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionsResult => {
  let contents: any = {
    VpcEndpointConnections: undefined,
    NextToken: undefined,
  };
  if (output.vpcEndpointConnectionSet === "") {
    contents.VpcEndpointConnections = [];
  }
  if (output["vpcEndpointConnectionSet"] !== undefined && output["vpcEndpointConnectionSet"]["item"] !== undefined) {
    contents.VpcEndpointConnections = deserializeAws_ec2VpcEndpointConnectionSet(
      __getArrayIfSingleItem(output["vpcEndpointConnectionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServiceConfigurationsResult => {
  let contents: any = {
    ServiceConfigurations: undefined,
    NextToken: undefined,
  };
  if (output.serviceConfigurationSet === "") {
    contents.ServiceConfigurations = [];
  }
  if (output["serviceConfigurationSet"] !== undefined && output["serviceConfigurationSet"]["item"] !== undefined) {
    contents.ServiceConfigurations = deserializeAws_ec2ServiceConfigurationSet(
      __getArrayIfSingleItem(output["serviceConfigurationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicePermissionsResult => {
  let contents: any = {
    AllowedPrincipals: undefined,
    NextToken: undefined,
  };
  if (output.allowedPrincipals === "") {
    contents.AllowedPrincipals = [];
  }
  if (output["allowedPrincipals"] !== undefined && output["allowedPrincipals"]["item"] !== undefined) {
    contents.AllowedPrincipals = deserializeAws_ec2AllowedPrincipalSet(
      __getArrayIfSingleItem(output["allowedPrincipals"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointServicesResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicesResult => {
  let contents: any = {
    ServiceNames: undefined,
    ServiceDetails: undefined,
    NextToken: undefined,
  };
  if (output.serviceNameSet === "") {
    contents.ServiceNames = [];
  }
  if (output["serviceNameSet"] !== undefined && output["serviceNameSet"]["item"] !== undefined) {
    contents.ServiceNames = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["serviceNameSet"]["item"]),
      context
    );
  }
  if (output.serviceDetailSet === "") {
    contents.ServiceDetails = [];
  }
  if (output["serviceDetailSet"] !== undefined && output["serviceDetailSet"]["item"] !== undefined) {
    contents.ServiceDetails = deserializeAws_ec2ServiceDetailSet(
      __getArrayIfSingleItem(output["serviceDetailSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointsResult => {
  let contents: any = {
    VpcEndpoints: undefined,
    NextToken: undefined,
  };
  if (output.vpcEndpointSet === "") {
    contents.VpcEndpoints = [];
  }
  if (output["vpcEndpointSet"] !== undefined && output["vpcEndpointSet"]["item"] !== undefined) {
    contents.VpcEndpoints = deserializeAws_ec2VpcEndpointSet(
      __getArrayIfSingleItem(output["vpcEndpointSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcPeeringConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcPeeringConnectionsResult => {
  let contents: any = {
    VpcPeeringConnections: undefined,
    NextToken: undefined,
  };
  if (output.vpcPeeringConnectionSet === "") {
    contents.VpcPeeringConnections = [];
  }
  if (output["vpcPeeringConnectionSet"] !== undefined && output["vpcPeeringConnectionSet"]["item"] !== undefined) {
    contents.VpcPeeringConnections = deserializeAws_ec2VpcPeeringConnectionList(
      __getArrayIfSingleItem(output["vpcPeeringConnectionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpcsResult = (output: any, context: __SerdeContext): DescribeVpcsResult => {
  let contents: any = {
    Vpcs: undefined,
    NextToken: undefined,
  };
  if (output.vpcSet === "") {
    contents.Vpcs = [];
  }
  if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
    contents.Vpcs = deserializeAws_ec2VpcList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2DescribeVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpnConnectionsResult => {
  let contents: any = {
    VpnConnections: undefined,
  };
  if (output.vpnConnectionSet === "") {
    contents.VpnConnections = [];
  }
  if (output["vpnConnectionSet"] !== undefined && output["vpnConnectionSet"]["item"] !== undefined) {
    contents.VpnConnections = deserializeAws_ec2VpnConnectionList(
      __getArrayIfSingleItem(output["vpnConnectionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DescribeVpnGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeVpnGatewaysResult => {
  let contents: any = {
    VpnGateways: undefined,
  };
  if (output.vpnGatewaySet === "") {
    contents.VpnGateways = [];
  }
  if (output["vpnGatewaySet"] !== undefined && output["vpnGatewaySet"]["item"] !== undefined) {
    contents.VpnGateways = deserializeAws_ec2VpnGatewayList(
      __getArrayIfSingleItem(output["vpnGatewaySet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DetachClassicLinkVpcResult = (
  output: any,
  context: __SerdeContext
): DetachClassicLinkVpcResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DhcpConfiguration = (output: any, context: __SerdeContext): DhcpConfiguration => {
  let contents: any = {
    Key: undefined,
    Values: undefined,
  };
  if (output["key"] !== undefined) {
    contents.Key = output["key"];
  }
  if (output.valueSet === "") {
    contents.Values = [];
  }
  if (output["valueSet"] !== undefined && output["valueSet"]["item"] !== undefined) {
    contents.Values = deserializeAws_ec2DhcpConfigurationValueList(
      __getArrayIfSingleItem(output["valueSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DhcpConfigurationList = (output: any, context: __SerdeContext): DhcpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DhcpConfiguration(entry, context);
    });
};

const deserializeAws_ec2DhcpConfigurationValueList = (output: any, context: __SerdeContext): AttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2AttributeValue(entry, context);
    });
};

const deserializeAws_ec2DhcpOptions = (output: any, context: __SerdeContext): DhcpOptions => {
  let contents: any = {
    DhcpConfigurations: undefined,
    DhcpOptionsId: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output.dhcpConfigurationSet === "") {
    contents.DhcpConfigurations = [];
  }
  if (output["dhcpConfigurationSet"] !== undefined && output["dhcpConfigurationSet"]["item"] !== undefined) {
    contents.DhcpConfigurations = deserializeAws_ec2DhcpConfigurationList(
      __getArrayIfSingleItem(output["dhcpConfigurationSet"]["item"]),
      context
    );
  }
  if (output["dhcpOptionsId"] !== undefined) {
    contents.DhcpOptionsId = output["dhcpOptionsId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2DhcpOptionsList = (output: any, context: __SerdeContext): DhcpOptions[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DhcpOptions(entry, context);
    });
};

const deserializeAws_ec2DirectoryServiceAuthentication = (
  output: any,
  context: __SerdeContext
): DirectoryServiceAuthentication => {
  let contents: any = {
    DirectoryId: undefined,
  };
  if (output["directoryId"] !== undefined) {
    contents.DirectoryId = output["directoryId"];
  }
  return contents;
};

const deserializeAws_ec2DisableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): DisableEbsEncryptionByDefaultResult => {
  let contents: any = {
    EbsEncryptionByDefault: undefined,
  };
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = output["ebsEncryptionByDefault"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem => {
  let contents: any = {
    SnapshotId: undefined,
    FastSnapshotRestoreStateErrors: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents.FastSnapshotRestoreStateErrors = [];
  }
  if (
    output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
    output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined
  ) {
    contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};

const deserializeAws_ec2DisableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoresResult => {
  let contents: any = {
    Successful: undefined,
    Unsuccessful: undefined,
  };
  if (output.successful === "") {
    contents.Successful = [];
  }
  if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2DisableFastSnapshotRestoreErrorSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem => {
  let contents: any = {
    AvailabilityZone: undefined,
    Error: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2DisableFastSnapshotRestoreStateError(output["error"], context);
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

const deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem => {
  let contents: any = {
    SnapshotId: undefined,
    AvailabilityZone: undefined,
    State: undefined,
    StateTransitionReason: undefined,
    OwnerId: undefined,
    OwnerAlias: undefined,
    EnablingTime: undefined,
    OptimizingTime: undefined,
    EnabledTime: undefined,
    DisablingTime: undefined,
    DisabledTime: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = output["stateTransitionReason"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = output["ownerAlias"];
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = new Date(output["enablingTime"]);
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = new Date(output["optimizingTime"]);
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = new Date(output["enabledTime"]);
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = new Date(output["disablingTime"]);
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = new Date(output["disabledTime"]);
  }
  return contents;
};

const deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

const deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): DisableTransitGatewayRouteTablePropagationResult => {
  let contents: any = {
    Propagation: undefined,
  };
  if (output["propagation"] !== undefined) {
    contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
  }
  return contents;
};

const deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DisableVpcClassicLinkDnsSupportResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DisableVpcClassicLinkResult = (
  output: any,
  context: __SerdeContext
): DisableVpcClassicLinkResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DisassociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): DisassociateClientVpnTargetNetworkResult => {
  let contents: any = {
    AssociationId: undefined,
    Status: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): DisassociateEnclaveCertificateIamRoleResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2DisassociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): DisassociateIamInstanceProfileResult => {
  let contents: any = {
    IamInstanceProfileAssociation: undefined,
  };
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DisassociateSubnetCidrBlockResult = (
  output: any,
  context: __SerdeContext
): DisassociateSubnetCidrBlockResult => {
  let contents: any = {
    Ipv6CidrBlockAssociation: undefined,
    SubnetId: undefined,
  };
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = deserializeAws_ec2SubnetIpv6CidrBlockAssociation(
      output["ipv6CidrBlockAssociation"],
      context
    );
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  return contents;
};

const deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayMulticastDomainResult => {
  let contents: any = {
    Associations: undefined,
  };
  if (output["associations"] !== undefined) {
    contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(
      output["associations"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2DisassociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayRouteTableResult => {
  let contents: any = {
    Association: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2TransitGatewayAssociation(output["association"], context);
  }
  return contents;
};

const deserializeAws_ec2DisassociateVpcCidrBlockResult = (
  output: any,
  context: __SerdeContext
): DisassociateVpcCidrBlockResult => {
  let contents: any = {
    Ipv6CidrBlockAssociation: undefined,
    CidrBlockAssociation: undefined,
    VpcId: undefined,
  };
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = deserializeAws_ec2VpcIpv6CidrBlockAssociation(
      output["ipv6CidrBlockAssociation"],
      context
    );
  }
  if (output["cidrBlockAssociation"] !== undefined) {
    contents.CidrBlockAssociation = deserializeAws_ec2VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2DiskImageDescription = (output: any, context: __SerdeContext): DiskImageDescription => {
  let contents: any = {
    Checksum: undefined,
    Format: undefined,
    ImportManifestUrl: undefined,
    Size: undefined,
  };
  if (output["checksum"] !== undefined) {
    contents.Checksum = output["checksum"];
  }
  if (output["format"] !== undefined) {
    contents.Format = output["format"];
  }
  if (output["importManifestUrl"] !== undefined) {
    contents.ImportManifestUrl = output["importManifestUrl"];
  }
  if (output["size"] !== undefined) {
    contents.Size = parseInt(output["size"]);
  }
  return contents;
};

const deserializeAws_ec2DiskImageVolumeDescription = (
  output: any,
  context: __SerdeContext
): DiskImageVolumeDescription => {
  let contents: any = {
    Id: undefined,
    Size: undefined,
  };
  if (output["id"] !== undefined) {
    contents.Id = output["id"];
  }
  if (output["size"] !== undefined) {
    contents.Size = parseInt(output["size"]);
  }
  return contents;
};

const deserializeAws_ec2DiskInfo = (output: any, context: __SerdeContext): DiskInfo => {
  let contents: any = {
    SizeInGB: undefined,
    Count: undefined,
    Type: undefined,
  };
  if (output["sizeInGB"] !== undefined) {
    contents.SizeInGB = parseInt(output["sizeInGB"]);
  }
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  return contents;
};

const deserializeAws_ec2DiskInfoList = (output: any, context: __SerdeContext): DiskInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DiskInfo(entry, context);
    });
};

const deserializeAws_ec2DnsEntry = (output: any, context: __SerdeContext): DnsEntry => {
  let contents: any = {
    DnsName: undefined,
    HostedZoneId: undefined,
  };
  if (output["dnsName"] !== undefined) {
    contents.DnsName = output["dnsName"];
  }
  if (output["hostedZoneId"] !== undefined) {
    contents.HostedZoneId = output["hostedZoneId"];
  }
  return contents;
};

const deserializeAws_ec2DnsEntrySet = (output: any, context: __SerdeContext): DnsEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2DnsEntry(entry, context);
    });
};

const deserializeAws_ec2EbsBlockDevice = (output: any, context: __SerdeContext): EbsBlockDevice => {
  let contents: any = {
    DeleteOnTermination: undefined,
    Iops: undefined,
    SnapshotId: undefined,
    VolumeSize: undefined,
    VolumeType: undefined,
    KmsKeyId: undefined,
    Throughput: undefined,
    Encrypted: undefined,
  };
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["iops"] !== undefined) {
    contents.Iops = parseInt(output["iops"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = parseInt(output["volumeSize"]);
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = output["volumeType"];
  }
  if (output["KmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["KmsKeyId"];
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = parseInt(output["throughput"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  return contents;
};

const deserializeAws_ec2EbsInfo = (output: any, context: __SerdeContext): EbsInfo => {
  let contents: any = {
    EbsOptimizedSupport: undefined,
    EncryptionSupport: undefined,
    EbsOptimizedInfo: undefined,
    NvmeSupport: undefined,
  };
  if (output["ebsOptimizedSupport"] !== undefined) {
    contents.EbsOptimizedSupport = output["ebsOptimizedSupport"];
  }
  if (output["encryptionSupport"] !== undefined) {
    contents.EncryptionSupport = output["encryptionSupport"];
  }
  if (output["ebsOptimizedInfo"] !== undefined) {
    contents.EbsOptimizedInfo = deserializeAws_ec2EbsOptimizedInfo(output["ebsOptimizedInfo"], context);
  }
  if (output["nvmeSupport"] !== undefined) {
    contents.NvmeSupport = output["nvmeSupport"];
  }
  return contents;
};

const deserializeAws_ec2EbsInstanceBlockDevice = (output: any, context: __SerdeContext): EbsInstanceBlockDevice => {
  let contents: any = {
    AttachTime: undefined,
    DeleteOnTermination: undefined,
    Status: undefined,
    VolumeId: undefined,
  };
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = new Date(output["attachTime"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  return contents;
};

const deserializeAws_ec2EbsOptimizedInfo = (output: any, context: __SerdeContext): EbsOptimizedInfo => {
  let contents: any = {
    BaselineBandwidthInMbps: undefined,
    BaselineThroughputInMBps: undefined,
    BaselineIops: undefined,
    MaximumBandwidthInMbps: undefined,
    MaximumThroughputInMBps: undefined,
    MaximumIops: undefined,
  };
  if (output["baselineBandwidthInMbps"] !== undefined) {
    contents.BaselineBandwidthInMbps = parseInt(output["baselineBandwidthInMbps"]);
  }
  if (output["baselineThroughputInMBps"] !== undefined) {
    contents.BaselineThroughputInMBps = parseFloat(output["baselineThroughputInMBps"]);
  }
  if (output["baselineIops"] !== undefined) {
    contents.BaselineIops = parseInt(output["baselineIops"]);
  }
  if (output["maximumBandwidthInMbps"] !== undefined) {
    contents.MaximumBandwidthInMbps = parseInt(output["maximumBandwidthInMbps"]);
  }
  if (output["maximumThroughputInMBps"] !== undefined) {
    contents.MaximumThroughputInMBps = parseFloat(output["maximumThroughputInMBps"]);
  }
  if (output["maximumIops"] !== undefined) {
    contents.MaximumIops = parseInt(output["maximumIops"]);
  }
  return contents;
};

const deserializeAws_ec2EgressOnlyInternetGateway = (
  output: any,
  context: __SerdeContext
): EgressOnlyInternetGateway => {
  let contents: any = {
    Attachments: undefined,
    EgressOnlyInternetGatewayId: undefined,
    Tags: undefined,
  };
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  }
  if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList(
      __getArrayIfSingleItem(output["attachmentSet"]["item"]),
      context
    );
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = output["egressOnlyInternetGatewayId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2EgressOnlyInternetGatewayList = (
  output: any,
  context: __SerdeContext
): EgressOnlyInternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2EgressOnlyInternetGateway(entry, context);
    });
};

const deserializeAws_ec2ElasticGpuAssociation = (output: any, context: __SerdeContext): ElasticGpuAssociation => {
  let contents: any = {
    ElasticGpuId: undefined,
    ElasticGpuAssociationId: undefined,
    ElasticGpuAssociationState: undefined,
    ElasticGpuAssociationTime: undefined,
  };
  if (output["elasticGpuId"] !== undefined) {
    contents.ElasticGpuId = output["elasticGpuId"];
  }
  if (output["elasticGpuAssociationId"] !== undefined) {
    contents.ElasticGpuAssociationId = output["elasticGpuAssociationId"];
  }
  if (output["elasticGpuAssociationState"] !== undefined) {
    contents.ElasticGpuAssociationState = output["elasticGpuAssociationState"];
  }
  if (output["elasticGpuAssociationTime"] !== undefined) {
    contents.ElasticGpuAssociationTime = output["elasticGpuAssociationTime"];
  }
  return contents;
};

const deserializeAws_ec2ElasticGpuAssociationList = (output: any, context: __SerdeContext): ElasticGpuAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ElasticGpuAssociation(entry, context);
    });
};

const deserializeAws_ec2ElasticGpuHealth = (output: any, context: __SerdeContext): ElasticGpuHealth => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2ElasticGpus = (output: any, context: __SerdeContext): ElasticGpus => {
  let contents: any = {
    ElasticGpuId: undefined,
    AvailabilityZone: undefined,
    ElasticGpuType: undefined,
    ElasticGpuHealth: undefined,
    ElasticGpuState: undefined,
    InstanceId: undefined,
    Tags: undefined,
  };
  if (output["elasticGpuId"] !== undefined) {
    contents.ElasticGpuId = output["elasticGpuId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["elasticGpuType"] !== undefined) {
    contents.ElasticGpuType = output["elasticGpuType"];
  }
  if (output["elasticGpuHealth"] !== undefined) {
    contents.ElasticGpuHealth = deserializeAws_ec2ElasticGpuHealth(output["elasticGpuHealth"], context);
  }
  if (output["elasticGpuState"] !== undefined) {
    contents.ElasticGpuState = output["elasticGpuState"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ElasticGpuSet = (output: any, context: __SerdeContext): ElasticGpus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ElasticGpus(entry, context);
    });
};

const deserializeAws_ec2ElasticGpuSpecificationResponse = (
  output: any,
  context: __SerdeContext
): ElasticGpuSpecificationResponse => {
  let contents: any = {
    Type: undefined,
  };
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  return contents;
};

const deserializeAws_ec2ElasticGpuSpecificationResponseList = (
  output: any,
  context: __SerdeContext
): ElasticGpuSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ElasticGpuSpecificationResponse(entry, context);
    });
};

const deserializeAws_ec2ElasticInferenceAcceleratorAssociation = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation => {
  let contents: any = {
    ElasticInferenceAcceleratorArn: undefined,
    ElasticInferenceAcceleratorAssociationId: undefined,
    ElasticInferenceAcceleratorAssociationState: undefined,
    ElasticInferenceAcceleratorAssociationTime: undefined,
  };
  if (output["elasticInferenceAcceleratorArn"] !== undefined) {
    contents.ElasticInferenceAcceleratorArn = output["elasticInferenceAcceleratorArn"];
  }
  if (output["elasticInferenceAcceleratorAssociationId"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationId = output["elasticInferenceAcceleratorAssociationId"];
  }
  if (output["elasticInferenceAcceleratorAssociationState"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationState = output["elasticInferenceAcceleratorAssociationState"];
  }
  if (output["elasticInferenceAcceleratorAssociationTime"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationTime = new Date(
      output["elasticInferenceAcceleratorAssociationTime"]
    );
  }
  return contents;
};

const deserializeAws_ec2ElasticInferenceAcceleratorAssociationList = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ElasticInferenceAcceleratorAssociation(entry, context);
    });
};

const deserializeAws_ec2EnableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): EnableEbsEncryptionByDefaultResult => {
  let contents: any = {
    EbsEncryptionByDefault: undefined,
  };
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = output["ebsEncryptionByDefault"] == "true";
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem => {
  let contents: any = {
    SnapshotId: undefined,
    FastSnapshotRestoreStateErrors: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents.FastSnapshotRestoreStateErrors = [];
  }
  if (
    output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
    output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined
  ) {
    contents.FastSnapshotRestoreStateErrors = deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};

const deserializeAws_ec2EnableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoresResult => {
  let contents: any = {
    Successful: undefined,
    Unsuccessful: undefined,
  };
  if (output.successful === "") {
    contents.Successful = [];
  }
  if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2EnableFastSnapshotRestoreErrorSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem => {
  let contents: any = {
    AvailabilityZone: undefined,
    Error: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2EnableFastSnapshotRestoreStateError(output["error"], context);
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

const deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem => {
  let contents: any = {
    SnapshotId: undefined,
    AvailabilityZone: undefined,
    State: undefined,
    StateTransitionReason: undefined,
    OwnerId: undefined,
    OwnerAlias: undefined,
    EnablingTime: undefined,
    OptimizingTime: undefined,
    EnabledTime: undefined,
    DisablingTime: undefined,
    DisabledTime: undefined,
  };
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = output["stateTransitionReason"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = output["ownerAlias"];
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = new Date(output["enablingTime"]);
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = new Date(output["optimizingTime"]);
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = new Date(output["enabledTime"]);
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = new Date(output["disablingTime"]);
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = new Date(output["disabledTime"]);
  }
  return contents;
};

const deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

const deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): EnableTransitGatewayRouteTablePropagationResult => {
  let contents: any = {
    Propagation: undefined,
  };
  if (output["propagation"] !== undefined) {
    contents.Propagation = deserializeAws_ec2TransitGatewayPropagation(output["propagation"], context);
  }
  return contents;
};

const deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): EnableVpcClassicLinkDnsSupportResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2EnableVpcClassicLinkResult = (
  output: any,
  context: __SerdeContext
): EnableVpcClassicLinkResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2EnclaveOptions = (output: any, context: __SerdeContext): EnclaveOptions => {
  let contents: any = {
    Enabled: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  return contents;
};

const deserializeAws_ec2EndpointSet = (output: any, context: __SerdeContext): ClientVpnEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ClientVpnEndpoint(entry, context);
    });
};

const deserializeAws_ec2ErrorSet = (output: any, context: __SerdeContext): ValidationError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ValidationError(entry, context);
    });
};

const deserializeAws_ec2EventInformation = (output: any, context: __SerdeContext): EventInformation => {
  let contents: any = {
    EventDescription: undefined,
    EventSubType: undefined,
    InstanceId: undefined,
  };
  if (output["eventDescription"] !== undefined) {
    contents.EventDescription = output["eventDescription"];
  }
  if (output["eventSubType"] !== undefined) {
    contents.EventSubType = output["eventSubType"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  return contents;
};

const deserializeAws_ec2Explanation = (output: any, context: __SerdeContext): Explanation => {
  let contents: any = {
    Acl: undefined,
    AclRule: undefined,
    Address: undefined,
    Addresses: undefined,
    AttachedTo: undefined,
    AvailabilityZones: undefined,
    Cidrs: undefined,
    Component: undefined,
    CustomerGateway: undefined,
    Destination: undefined,
    DestinationVpc: undefined,
    Direction: undefined,
    ExplanationCode: undefined,
    IngressRouteTable: undefined,
    InternetGateway: undefined,
    LoadBalancerArn: undefined,
    ClassicLoadBalancerListener: undefined,
    LoadBalancerListenerPort: undefined,
    LoadBalancerTarget: undefined,
    LoadBalancerTargetGroup: undefined,
    LoadBalancerTargetGroups: undefined,
    LoadBalancerTargetPort: undefined,
    ElasticLoadBalancerListener: undefined,
    MissingComponent: undefined,
    NatGateway: undefined,
    NetworkInterface: undefined,
    PacketField: undefined,
    VpcPeeringConnection: undefined,
    Port: undefined,
    PortRanges: undefined,
    PrefixList: undefined,
    Protocols: undefined,
    RouteTableRoute: undefined,
    RouteTable: undefined,
    SecurityGroup: undefined,
    SecurityGroupRule: undefined,
    SecurityGroups: undefined,
    SourceVpc: undefined,
    State: undefined,
    Subnet: undefined,
    SubnetRouteTable: undefined,
    Vpc: undefined,
    VpcEndpoint: undefined,
    VpnConnection: undefined,
    VpnGateway: undefined,
  };
  if (output["acl"] !== undefined) {
    contents.Acl = deserializeAws_ec2AnalysisComponent(output["acl"], context);
  }
  if (output["aclRule"] !== undefined) {
    contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
  }
  if (output["address"] !== undefined) {
    contents.Address = output["address"];
  }
  if (output.addressSet === "") {
    contents.Addresses = [];
  }
  if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
    contents.Addresses = deserializeAws_ec2IpAddressList(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
  }
  if (output["attachedTo"] !== undefined) {
    contents.AttachedTo = deserializeAws_ec2AnalysisComponent(output["attachedTo"], context);
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  }
  if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output.cidrSet === "") {
    contents.Cidrs = [];
  }
  if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
    contents.Cidrs = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
  }
  if (output["component"] !== undefined) {
    contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
  }
  if (output["customerGateway"] !== undefined) {
    contents.CustomerGateway = deserializeAws_ec2AnalysisComponent(output["customerGateway"], context);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = deserializeAws_ec2AnalysisComponent(output["destination"], context);
  }
  if (output["destinationVpc"] !== undefined) {
    contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
  }
  if (output["direction"] !== undefined) {
    contents.Direction = output["direction"];
  }
  if (output["explanationCode"] !== undefined) {
    contents.ExplanationCode = output["explanationCode"];
  }
  if (output["ingressRouteTable"] !== undefined) {
    contents.IngressRouteTable = deserializeAws_ec2AnalysisComponent(output["ingressRouteTable"], context);
  }
  if (output["internetGateway"] !== undefined) {
    contents.InternetGateway = deserializeAws_ec2AnalysisComponent(output["internetGateway"], context);
  }
  if (output["loadBalancerArn"] !== undefined) {
    contents.LoadBalancerArn = output["loadBalancerArn"];
  }
  if (output["classicLoadBalancerListener"] !== undefined) {
    contents.ClassicLoadBalancerListener = deserializeAws_ec2AnalysisLoadBalancerListener(
      output["classicLoadBalancerListener"],
      context
    );
  }
  if (output["loadBalancerListenerPort"] !== undefined) {
    contents.LoadBalancerListenerPort = parseInt(output["loadBalancerListenerPort"]);
  }
  if (output["loadBalancerTarget"] !== undefined) {
    contents.LoadBalancerTarget = deserializeAws_ec2AnalysisLoadBalancerTarget(output["loadBalancerTarget"], context);
  }
  if (output["loadBalancerTargetGroup"] !== undefined) {
    contents.LoadBalancerTargetGroup = deserializeAws_ec2AnalysisComponent(output["loadBalancerTargetGroup"], context);
  }
  if (output.loadBalancerTargetGroupSet === "") {
    contents.LoadBalancerTargetGroups = [];
  }
  if (
    output["loadBalancerTargetGroupSet"] !== undefined &&
    output["loadBalancerTargetGroupSet"]["item"] !== undefined
  ) {
    contents.LoadBalancerTargetGroups = deserializeAws_ec2AnalysisComponentList(
      __getArrayIfSingleItem(output["loadBalancerTargetGroupSet"]["item"]),
      context
    );
  }
  if (output["loadBalancerTargetPort"] !== undefined) {
    contents.LoadBalancerTargetPort = parseInt(output["loadBalancerTargetPort"]);
  }
  if (output["elasticLoadBalancerListener"] !== undefined) {
    contents.ElasticLoadBalancerListener = deserializeAws_ec2AnalysisComponent(
      output["elasticLoadBalancerListener"],
      context
    );
  }
  if (output["missingComponent"] !== undefined) {
    contents.MissingComponent = output["missingComponent"];
  }
  if (output["natGateway"] !== undefined) {
    contents.NatGateway = deserializeAws_ec2AnalysisComponent(output["natGateway"], context);
  }
  if (output["networkInterface"] !== undefined) {
    contents.NetworkInterface = deserializeAws_ec2AnalysisComponent(output["networkInterface"], context);
  }
  if (output["packetField"] !== undefined) {
    contents.PacketField = output["packetField"];
  }
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = deserializeAws_ec2AnalysisComponent(output["vpcPeeringConnection"], context);
  }
  if (output["port"] !== undefined) {
    contents.Port = parseInt(output["port"]);
  }
  if (output.portRangeSet === "") {
    contents.PortRanges = [];
  }
  if (output["portRangeSet"] !== undefined && output["portRangeSet"]["item"] !== undefined) {
    contents.PortRanges = deserializeAws_ec2PortRangeList(
      __getArrayIfSingleItem(output["portRangeSet"]["item"]),
      context
    );
  }
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = deserializeAws_ec2AnalysisComponent(output["prefixList"], context);
  }
  if (output.protocolSet === "") {
    contents.Protocols = [];
  }
  if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
    contents.Protocols = deserializeAws_ec2StringList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
  }
  if (output["routeTableRoute"] !== undefined) {
    contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
  }
  if (output["routeTable"] !== undefined) {
    contents.RouteTable = deserializeAws_ec2AnalysisComponent(output["routeTable"], context);
  }
  if (output["securityGroup"] !== undefined) {
    contents.SecurityGroup = deserializeAws_ec2AnalysisComponent(output["securityGroup"], context);
  }
  if (output["securityGroupRule"] !== undefined) {
    contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
  }
  if (output.securityGroupSet === "") {
    contents.SecurityGroups = [];
  }
  if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2AnalysisComponentList(
      __getArrayIfSingleItem(output["securityGroupSet"]["item"]),
      context
    );
  }
  if (output["sourceVpc"] !== undefined) {
    contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
  }
  if (output["subnetRouteTable"] !== undefined) {
    contents.SubnetRouteTable = deserializeAws_ec2AnalysisComponent(output["subnetRouteTable"], context);
  }
  if (output["vpc"] !== undefined) {
    contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
  }
  if (output["vpcEndpoint"] !== undefined) {
    contents.VpcEndpoint = deserializeAws_ec2AnalysisComponent(output["vpcEndpoint"], context);
  }
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2AnalysisComponent(output["vpnConnection"], context);
  }
  if (output["vpnGateway"] !== undefined) {
    contents.VpnGateway = deserializeAws_ec2AnalysisComponent(output["vpnGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2ExplanationList = (output: any, context: __SerdeContext): Explanation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Explanation(entry, context);
    });
};

const deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientCertificateRevocationListResult => {
  let contents: any = {
    CertificateRevocationList: undefined,
    Status: undefined,
  };
  if (output["certificateRevocationList"] !== undefined) {
    contents.CertificateRevocationList = output["certificateRevocationList"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientCertificateRevocationListStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2ExportClientVpnClientConfigurationResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientConfigurationResult => {
  let contents: any = {
    ClientConfiguration: undefined,
  };
  if (output["clientConfiguration"] !== undefined) {
    contents.ClientConfiguration = output["clientConfiguration"];
  }
  return contents;
};

const deserializeAws_ec2ExportImageResult = (output: any, context: __SerdeContext): ExportImageResult => {
  let contents: any = {
    Description: undefined,
    DiskImageFormat: undefined,
    ExportImageTaskId: undefined,
    ImageId: undefined,
    RoleName: undefined,
    Progress: undefined,
    S3ExportLocation: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Tags: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["diskImageFormat"] !== undefined) {
    contents.DiskImageFormat = output["diskImageFormat"];
  }
  if (output["exportImageTaskId"] !== undefined) {
    contents.ExportImageTaskId = output["exportImageTaskId"];
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["roleName"] !== undefined) {
    contents.RoleName = output["roleName"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["s3ExportLocation"] !== undefined) {
    contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ExportImageTask = (output: any, context: __SerdeContext): ExportImageTask => {
  let contents: any = {
    Description: undefined,
    ExportImageTaskId: undefined,
    ImageId: undefined,
    Progress: undefined,
    S3ExportLocation: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Tags: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["exportImageTaskId"] !== undefined) {
    contents.ExportImageTaskId = output["exportImageTaskId"];
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["s3ExportLocation"] !== undefined) {
    contents.S3ExportLocation = deserializeAws_ec2ExportTaskS3Location(output["s3ExportLocation"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ExportImageTaskList = (output: any, context: __SerdeContext): ExportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ExportImageTask(entry, context);
    });
};

const deserializeAws_ec2ExportTask = (output: any, context: __SerdeContext): ExportTask => {
  let contents: any = {
    Description: undefined,
    ExportTaskId: undefined,
    ExportToS3Task: undefined,
    InstanceExportDetails: undefined,
    State: undefined,
    StatusMessage: undefined,
    Tags: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["exportTaskId"] !== undefined) {
    contents.ExportTaskId = output["exportTaskId"];
  }
  if (output["exportToS3"] !== undefined) {
    contents.ExportToS3Task = deserializeAws_ec2ExportToS3Task(output["exportToS3"], context);
  }
  if (output["instanceExport"] !== undefined) {
    contents.InstanceExportDetails = deserializeAws_ec2InstanceExportDetails(output["instanceExport"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ExportTaskList = (output: any, context: __SerdeContext): ExportTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ExportTask(entry, context);
    });
};

const deserializeAws_ec2ExportTaskS3Location = (output: any, context: __SerdeContext): ExportTaskS3Location => {
  let contents: any = {
    S3Bucket: undefined,
    S3Prefix: undefined,
  };
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = output["s3Bucket"];
  }
  if (output["s3Prefix"] !== undefined) {
    contents.S3Prefix = output["s3Prefix"];
  }
  return contents;
};

const deserializeAws_ec2ExportToS3Task = (output: any, context: __SerdeContext): ExportToS3Task => {
  let contents: any = {
    ContainerFormat: undefined,
    DiskImageFormat: undefined,
    S3Bucket: undefined,
    S3Key: undefined,
  };
  if (output["containerFormat"] !== undefined) {
    contents.ContainerFormat = output["containerFormat"];
  }
  if (output["diskImageFormat"] !== undefined) {
    contents.DiskImageFormat = output["diskImageFormat"];
  }
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = output["s3Bucket"];
  }
  if (output["s3Key"] !== undefined) {
    contents.S3Key = output["s3Key"];
  }
  return contents;
};

const deserializeAws_ec2ExportTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): ExportTransitGatewayRoutesResult => {
  let contents: any = {
    S3Location: undefined,
  };
  if (output["s3Location"] !== undefined) {
    contents.S3Location = output["s3Location"];
  }
  return contents;
};

const deserializeAws_ec2FailedQueuedPurchaseDeletion = (
  output: any,
  context: __SerdeContext
): FailedQueuedPurchaseDeletion => {
  let contents: any = {
    Error: undefined,
    ReservedInstancesId: undefined,
  };
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2DeleteQueuedReservedInstancesError(output["error"], context);
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  return contents;
};

const deserializeAws_ec2FailedQueuedPurchaseDeletionSet = (
  output: any,
  context: __SerdeContext
): FailedQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FailedQueuedPurchaseDeletion(entry, context);
    });
};

const deserializeAws_ec2FederatedAuthentication = (output: any, context: __SerdeContext): FederatedAuthentication => {
  let contents: any = {
    SamlProviderArn: undefined,
    SelfServiceSamlProviderArn: undefined,
  };
  if (output["samlProviderArn"] !== undefined) {
    contents.SamlProviderArn = output["samlProviderArn"];
  }
  if (output["selfServiceSamlProviderArn"] !== undefined) {
    contents.SelfServiceSamlProviderArn = output["selfServiceSamlProviderArn"];
  }
  return contents;
};

const deserializeAws_ec2FleetData = (output: any, context: __SerdeContext): FleetData => {
  let contents: any = {
    ActivityStatus: undefined,
    CreateTime: undefined,
    FleetId: undefined,
    FleetState: undefined,
    ClientToken: undefined,
    ExcessCapacityTerminationPolicy: undefined,
    FulfilledCapacity: undefined,
    FulfilledOnDemandCapacity: undefined,
    LaunchTemplateConfigs: undefined,
    TargetCapacitySpecification: undefined,
    TerminateInstancesWithExpiration: undefined,
    Type: undefined,
    ValidFrom: undefined,
    ValidUntil: undefined,
    ReplaceUnhealthyInstances: undefined,
    SpotOptions: undefined,
    OnDemandOptions: undefined,
    Tags: undefined,
    Errors: undefined,
    Instances: undefined,
  };
  if (output["activityStatus"] !== undefined) {
    contents.ActivityStatus = output["activityStatus"];
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = output["fleetId"];
  }
  if (output["fleetState"] !== undefined) {
    contents.FleetState = output["fleetState"];
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["excessCapacityTerminationPolicy"] !== undefined) {
    contents.ExcessCapacityTerminationPolicy = output["excessCapacityTerminationPolicy"];
  }
  if (output["fulfilledCapacity"] !== undefined) {
    contents.FulfilledCapacity = parseFloat(output["fulfilledCapacity"]);
  }
  if (output["fulfilledOnDemandCapacity"] !== undefined) {
    contents.FulfilledOnDemandCapacity = parseFloat(output["fulfilledOnDemandCapacity"]);
  }
  if (output.launchTemplateConfigs === "") {
    contents.LaunchTemplateConfigs = [];
  }
  if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
    contents.LaunchTemplateConfigs = deserializeAws_ec2FleetLaunchTemplateConfigList(
      __getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]),
      context
    );
  }
  if (output["targetCapacitySpecification"] !== undefined) {
    contents.TargetCapacitySpecification = deserializeAws_ec2TargetCapacitySpecification(
      output["targetCapacitySpecification"],
      context
    );
  }
  if (output["terminateInstancesWithExpiration"] !== undefined) {
    contents.TerminateInstancesWithExpiration = output["terminateInstancesWithExpiration"] == "true";
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = new Date(output["validFrom"]);
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = new Date(output["validUntil"]);
  }
  if (output["replaceUnhealthyInstances"] !== undefined) {
    contents.ReplaceUnhealthyInstances = output["replaceUnhealthyInstances"] == "true";
  }
  if (output["spotOptions"] !== undefined) {
    contents.SpotOptions = deserializeAws_ec2SpotOptions(output["spotOptions"], context);
  }
  if (output["onDemandOptions"] !== undefined) {
    contents.OnDemandOptions = deserializeAws_ec2OnDemandOptions(output["onDemandOptions"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.errorSet === "") {
    contents.Errors = [];
  }
  if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = deserializeAws_ec2DescribeFleetsErrorSet(
      __getArrayIfSingleItem(output["errorSet"]["item"]),
      context
    );
  }
  if (output.fleetInstanceSet === "") {
    contents.Instances = [];
  }
  if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
    contents.Instances = deserializeAws_ec2DescribeFleetsInstancesSet(
      __getArrayIfSingleItem(output["fleetInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2FleetLaunchTemplateConfig = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateConfig => {
  let contents: any = {
    LaunchTemplateSpecification: undefined,
    Overrides: undefined,
  };
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output.overrides === "") {
    contents.Overrides = [];
  }
  if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
    contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverridesList(
      __getArrayIfSingleItem(output["overrides"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2FleetLaunchTemplateConfigList = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FleetLaunchTemplateConfig(entry, context);
    });
};

const deserializeAws_ec2FleetLaunchTemplateOverrides = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateOverrides => {
  let contents: any = {
    InstanceType: undefined,
    MaxPrice: undefined,
    SubnetId: undefined,
    AvailabilityZone: undefined,
    WeightedCapacity: undefined,
    Priority: undefined,
    Placement: undefined,
  };
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["maxPrice"] !== undefined) {
    contents.MaxPrice = output["maxPrice"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = parseFloat(output["weightedCapacity"]);
  }
  if (output["priority"] !== undefined) {
    contents.Priority = parseFloat(output["priority"]);
  }
  if (output["placement"] !== undefined) {
    contents.Placement = deserializeAws_ec2PlacementResponse(output["placement"], context);
  }
  return contents;
};

const deserializeAws_ec2FleetLaunchTemplateOverridesList = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FleetLaunchTemplateOverrides(entry, context);
    });
};

const deserializeAws_ec2FleetLaunchTemplateSpecification = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateSpecification => {
  let contents: any = {
    LaunchTemplateId: undefined,
    LaunchTemplateName: undefined,
    Version: undefined,
  };
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = output["launchTemplateId"];
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = output["launchTemplateName"];
  }
  if (output["version"] !== undefined) {
    contents.Version = output["version"];
  }
  return contents;
};

const deserializeAws_ec2FleetSet = (output: any, context: __SerdeContext): FleetData[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FleetData(entry, context);
    });
};

const deserializeAws_ec2FleetSpotCapacityRebalance = (
  output: any,
  context: __SerdeContext
): FleetSpotCapacityRebalance => {
  let contents: any = {
    ReplacementStrategy: undefined,
  };
  if (output["replacementStrategy"] !== undefined) {
    contents.ReplacementStrategy = output["replacementStrategy"];
  }
  return contents;
};

const deserializeAws_ec2FleetSpotMaintenanceStrategies = (
  output: any,
  context: __SerdeContext
): FleetSpotMaintenanceStrategies => {
  let contents: any = {
    CapacityRebalance: undefined,
  };
  if (output["capacityRebalance"] !== undefined) {
    contents.CapacityRebalance = deserializeAws_ec2FleetSpotCapacityRebalance(output["capacityRebalance"], context);
  }
  return contents;
};

const deserializeAws_ec2FlowLog = (output: any, context: __SerdeContext): FlowLog => {
  let contents: any = {
    CreationTime: undefined,
    DeliverLogsErrorMessage: undefined,
    DeliverLogsPermissionArn: undefined,
    DeliverLogsStatus: undefined,
    FlowLogId: undefined,
    FlowLogStatus: undefined,
    LogGroupName: undefined,
    ResourceId: undefined,
    TrafficType: undefined,
    LogDestinationType: undefined,
    LogDestination: undefined,
    LogFormat: undefined,
    Tags: undefined,
    MaxAggregationInterval: undefined,
  };
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output["deliverLogsErrorMessage"] !== undefined) {
    contents.DeliverLogsErrorMessage = output["deliverLogsErrorMessage"];
  }
  if (output["deliverLogsPermissionArn"] !== undefined) {
    contents.DeliverLogsPermissionArn = output["deliverLogsPermissionArn"];
  }
  if (output["deliverLogsStatus"] !== undefined) {
    contents.DeliverLogsStatus = output["deliverLogsStatus"];
  }
  if (output["flowLogId"] !== undefined) {
    contents.FlowLogId = output["flowLogId"];
  }
  if (output["flowLogStatus"] !== undefined) {
    contents.FlowLogStatus = output["flowLogStatus"];
  }
  if (output["logGroupName"] !== undefined) {
    contents.LogGroupName = output["logGroupName"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["trafficType"] !== undefined) {
    contents.TrafficType = output["trafficType"];
  }
  if (output["logDestinationType"] !== undefined) {
    contents.LogDestinationType = output["logDestinationType"];
  }
  if (output["logDestination"] !== undefined) {
    contents.LogDestination = output["logDestination"];
  }
  if (output["logFormat"] !== undefined) {
    contents.LogFormat = output["logFormat"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["maxAggregationInterval"] !== undefined) {
    contents.MaxAggregationInterval = parseInt(output["maxAggregationInterval"]);
  }
  return contents;
};

const deserializeAws_ec2FlowLogSet = (output: any, context: __SerdeContext): FlowLog[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FlowLog(entry, context);
    });
};

const deserializeAws_ec2FpgaDeviceInfo = (output: any, context: __SerdeContext): FpgaDeviceInfo => {
  let contents: any = {
    Name: undefined,
    Manufacturer: undefined,
    Count: undefined,
    MemoryInfo: undefined,
  };
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = output["manufacturer"];
  }
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = deserializeAws_ec2FpgaDeviceMemoryInfo(output["memoryInfo"], context);
  }
  return contents;
};

const deserializeAws_ec2FpgaDeviceInfoList = (output: any, context: __SerdeContext): FpgaDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FpgaDeviceInfo(entry, context);
    });
};

const deserializeAws_ec2FpgaDeviceMemoryInfo = (output: any, context: __SerdeContext): FpgaDeviceMemoryInfo => {
  let contents: any = {
    SizeInMiB: undefined,
  };
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = parseInt(output["sizeInMiB"]);
  }
  return contents;
};

const deserializeAws_ec2FpgaImage = (output: any, context: __SerdeContext): FpgaImage => {
  let contents: any = {
    FpgaImageId: undefined,
    FpgaImageGlobalId: undefined,
    Name: undefined,
    Description: undefined,
    ShellVersion: undefined,
    PciId: undefined,
    State: undefined,
    CreateTime: undefined,
    UpdateTime: undefined,
    OwnerId: undefined,
    OwnerAlias: undefined,
    ProductCodes: undefined,
    Tags: undefined,
    Public: undefined,
    DataRetentionSupport: undefined,
  };
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = output["fpgaImageId"];
  }
  if (output["fpgaImageGlobalId"] !== undefined) {
    contents.FpgaImageGlobalId = output["fpgaImageGlobalId"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["shellVersion"] !== undefined) {
    contents.ShellVersion = output["shellVersion"];
  }
  if (output["pciId"] !== undefined) {
    contents.PciId = deserializeAws_ec2PciId(output["pciId"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = deserializeAws_ec2FpgaImageState(output["state"], context);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = new Date(output["updateTime"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = output["ownerAlias"];
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output.tags === "") {
    contents.Tags = [];
  }
  if (output["tags"] !== undefined && output["tags"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tags"]["item"]), context);
  }
  if (output["public"] !== undefined) {
    contents.Public = output["public"] == "true";
  }
  if (output["dataRetentionSupport"] !== undefined) {
    contents.DataRetentionSupport = output["dataRetentionSupport"] == "true";
  }
  return contents;
};

const deserializeAws_ec2FpgaImageAttribute = (output: any, context: __SerdeContext): FpgaImageAttribute => {
  let contents: any = {
    FpgaImageId: undefined,
    Name: undefined,
    Description: undefined,
    LoadPermissions: undefined,
    ProductCodes: undefined,
  };
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = output["fpgaImageId"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.loadPermissions === "") {
    contents.LoadPermissions = [];
  }
  if (output["loadPermissions"] !== undefined && output["loadPermissions"]["item"] !== undefined) {
    contents.LoadPermissions = deserializeAws_ec2LoadPermissionList(
      __getArrayIfSingleItem(output["loadPermissions"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2FpgaImageList = (output: any, context: __SerdeContext): FpgaImage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2FpgaImage(entry, context);
    });
};

const deserializeAws_ec2FpgaImageState = (output: any, context: __SerdeContext): FpgaImageState => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2FpgaInfo = (output: any, context: __SerdeContext): FpgaInfo => {
  let contents: any = {
    Fpgas: undefined,
    TotalFpgaMemoryInMiB: undefined,
  };
  if (output.fpgas === "") {
    contents.Fpgas = [];
  }
  if (output["fpgas"] !== undefined && output["fpgas"]["item"] !== undefined) {
    contents.Fpgas = deserializeAws_ec2FpgaDeviceInfoList(__getArrayIfSingleItem(output["fpgas"]["item"]), context);
  }
  if (output["totalFpgaMemoryInMiB"] !== undefined) {
    contents.TotalFpgaMemoryInMiB = parseInt(output["totalFpgaMemoryInMiB"]);
  }
  return contents;
};

const deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedEnclaveCertificateIamRolesResult => {
  let contents: any = {
    AssociatedRoles: undefined,
  };
  if (output.associatedRoleSet === "") {
    contents.AssociatedRoles = [];
  }
  if (output["associatedRoleSet"] !== undefined && output["associatedRoleSet"]["item"] !== undefined) {
    contents.AssociatedRoles = deserializeAws_ec2AssociatedRolesList(
      __getArrayIfSingleItem(output["associatedRoleSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedIpv6PoolCidrsResult => {
  let contents: any = {
    Ipv6CidrAssociations: undefined,
    NextToken: undefined,
  };
  if (output.ipv6CidrAssociationSet === "") {
    contents.Ipv6CidrAssociations = [];
  }
  if (output["ipv6CidrAssociationSet"] !== undefined && output["ipv6CidrAssociationSet"]["item"] !== undefined) {
    contents.Ipv6CidrAssociations = deserializeAws_ec2Ipv6CidrAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetCapacityReservationUsageResult = (
  output: any,
  context: __SerdeContext
): GetCapacityReservationUsageResult => {
  let contents: any = {
    NextToken: undefined,
    CapacityReservationId: undefined,
    InstanceType: undefined,
    TotalInstanceCount: undefined,
    AvailableInstanceCount: undefined,
    State: undefined,
    InstanceUsages: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = output["capacityReservationId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["totalInstanceCount"] !== undefined) {
    contents.TotalInstanceCount = parseInt(output["totalInstanceCount"]);
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = parseInt(output["availableInstanceCount"]);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.instanceUsageSet === "") {
    contents.InstanceUsages = [];
  }
  if (output["instanceUsageSet"] !== undefined && output["instanceUsageSet"]["item"] !== undefined) {
    contents.InstanceUsages = deserializeAws_ec2InstanceUsageSet(
      __getArrayIfSingleItem(output["instanceUsageSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2GetCoipPoolUsageResult = (output: any, context: __SerdeContext): GetCoipPoolUsageResult => {
  let contents: any = {
    CoipPoolId: undefined,
    CoipAddressUsages: undefined,
    LocalGatewayRouteTableId: undefined,
  };
  if (output["coipPoolId"] !== undefined) {
    contents.CoipPoolId = output["coipPoolId"];
  }
  if (output.coipAddressUsageSet === "") {
    contents.CoipAddressUsages = [];
  }
  if (output["coipAddressUsageSet"] !== undefined && output["coipAddressUsageSet"]["item"] !== undefined) {
    contents.CoipAddressUsages = deserializeAws_ec2CoipAddressUsageSet(
      __getArrayIfSingleItem(output["coipAddressUsageSet"]["item"]),
      context
    );
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  return contents;
};

const deserializeAws_ec2GetConsoleOutputResult = (output: any, context: __SerdeContext): GetConsoleOutputResult => {
  let contents: any = {
    InstanceId: undefined,
    Output: undefined,
    Timestamp: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["output"] !== undefined) {
    contents.Output = output["output"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2GetConsoleScreenshotResult = (
  output: any,
  context: __SerdeContext
): GetConsoleScreenshotResult => {
  let contents: any = {
    ImageData: undefined,
    InstanceId: undefined,
  };
  if (output["imageData"] !== undefined) {
    contents.ImageData = output["imageData"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  return contents;
};

const deserializeAws_ec2GetDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): GetDefaultCreditSpecificationResult => {
  let contents: any = {
    InstanceFamilyCreditSpecification: undefined,
  };
  if (output["instanceFamilyCreditSpecification"] !== undefined) {
    contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(
      output["instanceFamilyCreditSpecification"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2GetEbsDefaultKmsKeyIdResult = (
  output: any,
  context: __SerdeContext
): GetEbsDefaultKmsKeyIdResult => {
  let contents: any = {
    KmsKeyId: undefined,
  };
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  return contents;
};

const deserializeAws_ec2GetEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): GetEbsEncryptionByDefaultResult => {
  let contents: any = {
    EbsEncryptionByDefault: undefined,
  };
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = output["ebsEncryptionByDefault"] == "true";
  }
  return contents;
};

const deserializeAws_ec2GetGroupsForCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): GetGroupsForCapacityReservationResult => {
  let contents: any = {
    NextToken: undefined,
    CapacityReservationGroups: undefined,
  };
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  if (output.capacityReservationGroupSet === "") {
    contents.CapacityReservationGroups = [];
  }
  if (
    output["capacityReservationGroupSet"] !== undefined &&
    output["capacityReservationGroupSet"]["item"] !== undefined
  ) {
    contents.CapacityReservationGroups = deserializeAws_ec2CapacityReservationGroupSet(
      __getArrayIfSingleItem(output["capacityReservationGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2GetHostReservationPurchasePreviewResult = (
  output: any,
  context: __SerdeContext
): GetHostReservationPurchasePreviewResult => {
  let contents: any = {
    CurrencyCode: undefined,
    Purchase: undefined,
    TotalHourlyPrice: undefined,
    TotalUpfrontPrice: undefined,
  };
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output.purchase === "") {
    contents.Purchase = [];
  }
  if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
    contents.Purchase = deserializeAws_ec2PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
  }
  if (output["totalHourlyPrice"] !== undefined) {
    contents.TotalHourlyPrice = output["totalHourlyPrice"];
  }
  if (output["totalUpfrontPrice"] !== undefined) {
    contents.TotalUpfrontPrice = output["totalUpfrontPrice"];
  }
  return contents;
};

const deserializeAws_ec2GetLaunchTemplateDataResult = (
  output: any,
  context: __SerdeContext
): GetLaunchTemplateDataResult => {
  let contents: any = {
    LaunchTemplateData: undefined,
  };
  if (output["launchTemplateData"] !== undefined) {
    contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
  }
  return contents;
};

const deserializeAws_ec2GetManagedPrefixListAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListAssociationsResult => {
  let contents: any = {
    PrefixListAssociations: undefined,
    NextToken: undefined,
  };
  if (output.prefixListAssociationSet === "") {
    contents.PrefixListAssociations = [];
  }
  if (output["prefixListAssociationSet"] !== undefined && output["prefixListAssociationSet"]["item"] !== undefined) {
    contents.PrefixListAssociations = deserializeAws_ec2PrefixListAssociationSet(
      __getArrayIfSingleItem(output["prefixListAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetManagedPrefixListEntriesResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListEntriesResult => {
  let contents: any = {
    Entries: undefined,
    NextToken: undefined,
  };
  if (output.entrySet === "") {
    contents.Entries = [];
  }
  if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
    contents.Entries = deserializeAws_ec2PrefixListEntrySet(
      __getArrayIfSingleItem(output["entrySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetPasswordDataResult = (output: any, context: __SerdeContext): GetPasswordDataResult => {
  let contents: any = {
    InstanceId: undefined,
    PasswordData: undefined,
    Timestamp: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["passwordData"] !== undefined) {
    contents.PasswordData = output["passwordData"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2GetReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): GetReservedInstancesExchangeQuoteResult => {
  let contents: any = {
    CurrencyCode: undefined,
    IsValidExchange: undefined,
    OutputReservedInstancesWillExpireAt: undefined,
    PaymentDue: undefined,
    ReservedInstanceValueRollup: undefined,
    ReservedInstanceValueSet: undefined,
    TargetConfigurationValueRollup: undefined,
    TargetConfigurationValueSet: undefined,
    ValidationFailureReason: undefined,
  };
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["isValidExchange"] !== undefined) {
    contents.IsValidExchange = output["isValidExchange"] == "true";
  }
  if (output["outputReservedInstancesWillExpireAt"] !== undefined) {
    contents.OutputReservedInstancesWillExpireAt = new Date(output["outputReservedInstancesWillExpireAt"]);
  }
  if (output["paymentDue"] !== undefined) {
    contents.PaymentDue = output["paymentDue"];
  }
  if (output["reservedInstanceValueRollup"] !== undefined) {
    contents.ReservedInstanceValueRollup = deserializeAws_ec2ReservationValue(
      output["reservedInstanceValueRollup"],
      context
    );
  }
  if (output.reservedInstanceValueSet === "") {
    contents.ReservedInstanceValueSet = [];
  }
  if (output["reservedInstanceValueSet"] !== undefined && output["reservedInstanceValueSet"]["item"] !== undefined) {
    contents.ReservedInstanceValueSet = deserializeAws_ec2ReservedInstanceReservationValueSet(
      __getArrayIfSingleItem(output["reservedInstanceValueSet"]["item"]),
      context
    );
  }
  if (output["targetConfigurationValueRollup"] !== undefined) {
    contents.TargetConfigurationValueRollup = deserializeAws_ec2ReservationValue(
      output["targetConfigurationValueRollup"],
      context
    );
  }
  if (output.targetConfigurationValueSet === "") {
    contents.TargetConfigurationValueSet = [];
  }
  if (
    output["targetConfigurationValueSet"] !== undefined &&
    output["targetConfigurationValueSet"]["item"] !== undefined
  ) {
    contents.TargetConfigurationValueSet = deserializeAws_ec2TargetReservationValueSet(
      __getArrayIfSingleItem(output["targetConfigurationValueSet"]["item"]),
      context
    );
  }
  if (output["validationFailureReason"] !== undefined) {
    contents.ValidationFailureReason = output["validationFailureReason"];
  }
  return contents;
};

const deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayAttachmentPropagationsResult => {
  let contents: any = {
    TransitGatewayAttachmentPropagations: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayAttachmentPropagations === "") {
    contents.TransitGatewayAttachmentPropagations = [];
  }
  if (
    output["transitGatewayAttachmentPropagations"] !== undefined &&
    output["transitGatewayAttachmentPropagations"]["item"] !== undefined
  ) {
    contents.TransitGatewayAttachmentPropagations = deserializeAws_ec2TransitGatewayAttachmentPropagationList(
      __getArrayIfSingleItem(output["transitGatewayAttachmentPropagations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayMulticastDomainAssociationsResult => {
  let contents: any = {
    MulticastDomainAssociations: undefined,
    NextToken: undefined,
  };
  if (output.multicastDomainAssociations === "") {
    contents.MulticastDomainAssociations = [];
  }
  if (
    output["multicastDomainAssociations"] !== undefined &&
    output["multicastDomainAssociations"]["item"] !== undefined
  ) {
    contents.MulticastDomainAssociations = deserializeAws_ec2TransitGatewayMulticastDomainAssociationList(
      __getArrayIfSingleItem(output["multicastDomainAssociations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPrefixListReferencesResult => {
  let contents: any = {
    TransitGatewayPrefixListReferences: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayPrefixListReferenceSet === "") {
    contents.TransitGatewayPrefixListReferences = [];
  }
  if (
    output["transitGatewayPrefixListReferenceSet"] !== undefined &&
    output["transitGatewayPrefixListReferenceSet"]["item"] !== undefined
  ) {
    contents.TransitGatewayPrefixListReferences = deserializeAws_ec2TransitGatewayPrefixListReferenceSet(
      __getArrayIfSingleItem(output["transitGatewayPrefixListReferenceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTableAssociationsResult => {
  let contents: any = {
    Associations: undefined,
    NextToken: undefined,
  };
  if (output.associations === "") {
    contents.Associations = [];
  }
  if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
    contents.Associations = deserializeAws_ec2TransitGatewayRouteTableAssociationList(
      __getArrayIfSingleItem(output["associations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTablePropagationsResult => {
  let contents: any = {
    TransitGatewayRouteTablePropagations: undefined,
    NextToken: undefined,
  };
  if (output.transitGatewayRouteTablePropagations === "") {
    contents.TransitGatewayRouteTablePropagations = [];
  }
  if (
    output["transitGatewayRouteTablePropagations"] !== undefined &&
    output["transitGatewayRouteTablePropagations"]["item"] !== undefined
  ) {
    contents.TransitGatewayRouteTablePropagations = deserializeAws_ec2TransitGatewayRouteTablePropagationList(
      __getArrayIfSingleItem(output["transitGatewayRouteTablePropagations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2GpuDeviceInfo = (output: any, context: __SerdeContext): GpuDeviceInfo => {
  let contents: any = {
    Name: undefined,
    Manufacturer: undefined,
    Count: undefined,
    MemoryInfo: undefined,
  };
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = output["manufacturer"];
  }
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = deserializeAws_ec2GpuDeviceMemoryInfo(output["memoryInfo"], context);
  }
  return contents;
};

const deserializeAws_ec2GpuDeviceInfoList = (output: any, context: __SerdeContext): GpuDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2GpuDeviceInfo(entry, context);
    });
};

const deserializeAws_ec2GpuDeviceMemoryInfo = (output: any, context: __SerdeContext): GpuDeviceMemoryInfo => {
  let contents: any = {
    SizeInMiB: undefined,
  };
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = parseInt(output["sizeInMiB"]);
  }
  return contents;
};

const deserializeAws_ec2GpuInfo = (output: any, context: __SerdeContext): GpuInfo => {
  let contents: any = {
    Gpus: undefined,
    TotalGpuMemoryInMiB: undefined,
  };
  if (output.gpus === "") {
    contents.Gpus = [];
  }
  if (output["gpus"] !== undefined && output["gpus"]["item"] !== undefined) {
    contents.Gpus = deserializeAws_ec2GpuDeviceInfoList(__getArrayIfSingleItem(output["gpus"]["item"]), context);
  }
  if (output["totalGpuMemoryInMiB"] !== undefined) {
    contents.TotalGpuMemoryInMiB = parseInt(output["totalGpuMemoryInMiB"]);
  }
  return contents;
};

const deserializeAws_ec2GroupIdentifier = (output: any, context: __SerdeContext): GroupIdentifier => {
  let contents: any = {
    GroupName: undefined,
    GroupId: undefined,
  };
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  return contents;
};

const deserializeAws_ec2GroupIdentifierList = (output: any, context: __SerdeContext): GroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2GroupIdentifier(entry, context);
    });
};

const deserializeAws_ec2GroupIdentifierSet = (output: any, context: __SerdeContext): SecurityGroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SecurityGroupIdentifier(entry, context);
    });
};

const deserializeAws_ec2GroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2HibernationOptions = (output: any, context: __SerdeContext): HibernationOptions => {
  let contents: any = {
    Configured: undefined,
  };
  if (output["configured"] !== undefined) {
    contents.Configured = output["configured"] == "true";
  }
  return contents;
};

const deserializeAws_ec2HistoryRecord = (output: any, context: __SerdeContext): HistoryRecord => {
  let contents: any = {
    EventInformation: undefined,
    EventType: undefined,
    Timestamp: undefined,
  };
  if (output["eventInformation"] !== undefined) {
    contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = output["eventType"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2HistoryRecordEntry = (output: any, context: __SerdeContext): HistoryRecordEntry => {
  let contents: any = {
    EventInformation: undefined,
    EventType: undefined,
    Timestamp: undefined,
  };
  if (output["eventInformation"] !== undefined) {
    contents.EventInformation = deserializeAws_ec2EventInformation(output["eventInformation"], context);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = output["eventType"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2HistoryRecords = (output: any, context: __SerdeContext): HistoryRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2HistoryRecord(entry, context);
    });
};

const deserializeAws_ec2HistoryRecordSet = (output: any, context: __SerdeContext): HistoryRecordEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2HistoryRecordEntry(entry, context);
    });
};

const deserializeAws_ec2Host = (output: any, context: __SerdeContext): Host => {
  let contents: any = {
    AutoPlacement: undefined,
    AvailabilityZone: undefined,
    AvailableCapacity: undefined,
    ClientToken: undefined,
    HostId: undefined,
    HostProperties: undefined,
    HostReservationId: undefined,
    Instances: undefined,
    State: undefined,
    AllocationTime: undefined,
    ReleaseTime: undefined,
    Tags: undefined,
    HostRecovery: undefined,
    AllowsMultipleInstanceTypes: undefined,
    OwnerId: undefined,
    AvailabilityZoneId: undefined,
    MemberOfServiceLinkedResourceGroup: undefined,
  };
  if (output["autoPlacement"] !== undefined) {
    contents.AutoPlacement = output["autoPlacement"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["availableCapacity"] !== undefined) {
    contents.AvailableCapacity = deserializeAws_ec2AvailableCapacity(output["availableCapacity"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = output["hostId"];
  }
  if (output["hostProperties"] !== undefined) {
    contents.HostProperties = deserializeAws_ec2HostProperties(output["hostProperties"], context);
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = output["hostReservationId"];
  }
  if (output.instances === "") {
    contents.Instances = [];
  }
  if (output["instances"] !== undefined && output["instances"]["item"] !== undefined) {
    contents.Instances = deserializeAws_ec2HostInstanceList(
      __getArrayIfSingleItem(output["instances"]["item"]),
      context
    );
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["allocationTime"] !== undefined) {
    contents.AllocationTime = new Date(output["allocationTime"]);
  }
  if (output["releaseTime"] !== undefined) {
    contents.ReleaseTime = new Date(output["releaseTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["hostRecovery"] !== undefined) {
    contents.HostRecovery = output["hostRecovery"];
  }
  if (output["allowsMultipleInstanceTypes"] !== undefined) {
    contents.AllowsMultipleInstanceTypes = output["allowsMultipleInstanceTypes"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = output["availabilityZoneId"];
  }
  if (output["memberOfServiceLinkedResourceGroup"] !== undefined) {
    contents.MemberOfServiceLinkedResourceGroup = output["memberOfServiceLinkedResourceGroup"] == "true";
  }
  return contents;
};

const deserializeAws_ec2HostInstance = (output: any, context: __SerdeContext): HostInstance => {
  let contents: any = {
    InstanceId: undefined,
    InstanceType: undefined,
    OwnerId: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2HostInstanceList = (output: any, context: __SerdeContext): HostInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2HostInstance(entry, context);
    });
};

const deserializeAws_ec2HostList = (output: any, context: __SerdeContext): Host[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Host(entry, context);
    });
};

const deserializeAws_ec2HostOffering = (output: any, context: __SerdeContext): HostOffering => {
  let contents: any = {
    CurrencyCode: undefined,
    Duration: undefined,
    HourlyPrice: undefined,
    InstanceFamily: undefined,
    OfferingId: undefined,
    PaymentOption: undefined,
    UpfrontPrice: undefined,
  };
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["duration"] !== undefined) {
    contents.Duration = parseInt(output["duration"]);
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = output["instanceFamily"];
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = output["offeringId"];
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = output["paymentOption"];
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = output["upfrontPrice"];
  }
  return contents;
};

const deserializeAws_ec2HostOfferingSet = (output: any, context: __SerdeContext): HostOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2HostOffering(entry, context);
    });
};

const deserializeAws_ec2HostProperties = (output: any, context: __SerdeContext): HostProperties => {
  let contents: any = {
    Cores: undefined,
    InstanceType: undefined,
    InstanceFamily: undefined,
    Sockets: undefined,
    TotalVCpus: undefined,
  };
  if (output["cores"] !== undefined) {
    contents.Cores = parseInt(output["cores"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = output["instanceFamily"];
  }
  if (output["sockets"] !== undefined) {
    contents.Sockets = parseInt(output["sockets"]);
  }
  if (output["totalVCpus"] !== undefined) {
    contents.TotalVCpus = parseInt(output["totalVCpus"]);
  }
  return contents;
};

const deserializeAws_ec2HostReservation = (output: any, context: __SerdeContext): HostReservation => {
  let contents: any = {
    Count: undefined,
    CurrencyCode: undefined,
    Duration: undefined,
    End: undefined,
    HostIdSet: undefined,
    HostReservationId: undefined,
    HourlyPrice: undefined,
    InstanceFamily: undefined,
    OfferingId: undefined,
    PaymentOption: undefined,
    Start: undefined,
    State: undefined,
    UpfrontPrice: undefined,
    Tags: undefined,
  };
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["duration"] !== undefined) {
    contents.Duration = parseInt(output["duration"]);
  }
  if (output["end"] !== undefined) {
    contents.End = new Date(output["end"]);
  }
  if (output.hostIdSet === "") {
    contents.HostIdSet = [];
  }
  if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet(
      __getArrayIfSingleItem(output["hostIdSet"]["item"]),
      context
    );
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = output["hostReservationId"];
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = output["instanceFamily"];
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = output["offeringId"];
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = output["paymentOption"];
  }
  if (output["start"] !== undefined) {
    contents.Start = new Date(output["start"]);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = output["upfrontPrice"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2HostReservationSet = (output: any, context: __SerdeContext): HostReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2HostReservation(entry, context);
    });
};

const deserializeAws_ec2IamInstanceProfile = (output: any, context: __SerdeContext): IamInstanceProfile => {
  let contents: any = {
    Arn: undefined,
    Id: undefined,
  };
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  if (output["id"] !== undefined) {
    contents.Id = output["id"];
  }
  return contents;
};

const deserializeAws_ec2IamInstanceProfileAssociation = (
  output: any,
  context: __SerdeContext
): IamInstanceProfileAssociation => {
  let contents: any = {
    AssociationId: undefined,
    InstanceId: undefined,
    IamInstanceProfile: undefined,
    State: undefined,
    Timestamp: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2IamInstanceProfileAssociationSet = (
  output: any,
  context: __SerdeContext
): IamInstanceProfileAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2IamInstanceProfileAssociation(entry, context);
    });
};

const deserializeAws_ec2IamInstanceProfileSpecification = (
  output: any,
  context: __SerdeContext
): IamInstanceProfileSpecification => {
  let contents: any = {
    Arn: undefined,
    Name: undefined,
  };
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  return contents;
};

const deserializeAws_ec2IcmpTypeCode = (output: any, context: __SerdeContext): IcmpTypeCode => {
  let contents: any = {
    Code: undefined,
    Type: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = parseInt(output["code"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = parseInt(output["type"]);
  }
  return contents;
};

const deserializeAws_ec2IdFormat = (output: any, context: __SerdeContext): IdFormat => {
  let contents: any = {
    Deadline: undefined,
    Resource: undefined,
    UseLongIds: undefined,
  };
  if (output["deadline"] !== undefined) {
    contents.Deadline = new Date(output["deadline"]);
  }
  if (output["resource"] !== undefined) {
    contents.Resource = output["resource"];
  }
  if (output["useLongIds"] !== undefined) {
    contents.UseLongIds = output["useLongIds"] == "true";
  }
  return contents;
};

const deserializeAws_ec2IdFormatList = (output: any, context: __SerdeContext): IdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2IdFormat(entry, context);
    });
};

const deserializeAws_ec2IKEVersionsList = (output: any, context: __SerdeContext): IKEVersionsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2IKEVersionsListValue(entry, context);
    });
};

const deserializeAws_ec2IKEVersionsListValue = (output: any, context: __SerdeContext): IKEVersionsListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2Image = (output: any, context: __SerdeContext): Image => {
  let contents: any = {
    Architecture: undefined,
    CreationDate: undefined,
    ImageId: undefined,
    ImageLocation: undefined,
    ImageType: undefined,
    Public: undefined,
    KernelId: undefined,
    OwnerId: undefined,
    Platform: undefined,
    PlatformDetails: undefined,
    UsageOperation: undefined,
    ProductCodes: undefined,
    RamdiskId: undefined,
    State: undefined,
    BlockDeviceMappings: undefined,
    Description: undefined,
    EnaSupport: undefined,
    Hypervisor: undefined,
    ImageOwnerAlias: undefined,
    Name: undefined,
    RootDeviceName: undefined,
    RootDeviceType: undefined,
    SriovNetSupport: undefined,
    StateReason: undefined,
    Tags: undefined,
    VirtualizationType: undefined,
  };
  if (output["architecture"] !== undefined) {
    contents.Architecture = output["architecture"];
  }
  if (output["creationDate"] !== undefined) {
    contents.CreationDate = output["creationDate"];
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["imageLocation"] !== undefined) {
    contents.ImageLocation = output["imageLocation"];
  }
  if (output["imageType"] !== undefined) {
    contents.ImageType = output["imageType"];
  }
  if (output["isPublic"] !== undefined) {
    contents.Public = output["isPublic"] == "true";
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = output["kernelId"];
  }
  if (output["imageOwnerId"] !== undefined) {
    contents.OwnerId = output["imageOwnerId"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["platformDetails"] !== undefined) {
    contents.PlatformDetails = output["platformDetails"];
  }
  if (output["usageOperation"] !== undefined) {
    contents.UsageOperation = output["usageOperation"];
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = output["ramdiskId"];
  }
  if (output["imageState"] !== undefined) {
    contents.State = output["imageState"];
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = output["enaSupport"] == "true";
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = output["hypervisor"];
  }
  if (output["imageOwnerAlias"] !== undefined) {
    contents.ImageOwnerAlias = output["imageOwnerAlias"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = output["rootDeviceName"];
  }
  if (output["rootDeviceType"] !== undefined) {
    contents.RootDeviceType = output["rootDeviceType"];
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = output["sriovNetSupport"];
  }
  if (output["stateReason"] !== undefined) {
    contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["virtualizationType"] !== undefined) {
    contents.VirtualizationType = output["virtualizationType"];
  }
  return contents;
};

const deserializeAws_ec2ImageAttribute = (output: any, context: __SerdeContext): ImageAttribute => {
  let contents: any = {
    BlockDeviceMappings: undefined,
    ImageId: undefined,
    LaunchPermissions: undefined,
    ProductCodes: undefined,
    Description: undefined,
    KernelId: undefined,
    RamdiskId: undefined,
    SriovNetSupport: undefined,
  };
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output.launchPermission === "") {
    contents.LaunchPermissions = [];
  }
  if (output["launchPermission"] !== undefined && output["launchPermission"]["item"] !== undefined) {
    contents.LaunchPermissions = deserializeAws_ec2LaunchPermissionList(
      __getArrayIfSingleItem(output["launchPermission"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["description"] !== undefined) {
    contents.Description = deserializeAws_ec2AttributeValue(output["description"], context);
  }
  if (output["kernel"] !== undefined) {
    contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
  }
  if (output["ramdisk"] !== undefined) {
    contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
  }
  return contents;
};

const deserializeAws_ec2ImageList = (output: any, context: __SerdeContext): Image[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Image(entry, context);
    });
};

const deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ImportClientVpnClientCertificateRevocationListResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ImportImageLicenseConfigurationResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse => {
  let contents: any = {
    LicenseConfigurationArn: undefined,
  };
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = output["licenseConfigurationArn"];
  }
  return contents;
};

const deserializeAws_ec2ImportImageLicenseSpecificationListResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ImportImageLicenseConfigurationResponse(entry, context);
    });
};

const deserializeAws_ec2ImportImageResult = (output: any, context: __SerdeContext): ImportImageResult => {
  let contents: any = {
    Architecture: undefined,
    Description: undefined,
    Encrypted: undefined,
    Hypervisor: undefined,
    ImageId: undefined,
    ImportTaskId: undefined,
    KmsKeyId: undefined,
    LicenseType: undefined,
    Platform: undefined,
    Progress: undefined,
    SnapshotDetails: undefined,
    Status: undefined,
    StatusMessage: undefined,
    LicenseSpecifications: undefined,
    Tags: undefined,
  };
  if (output["architecture"] !== undefined) {
    contents.Architecture = output["architecture"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = output["hypervisor"];
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = output["importTaskId"];
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["licenseType"] !== undefined) {
    contents.LicenseType = output["licenseType"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output.snapshotDetailSet === "") {
    contents.SnapshotDetails = [];
  }
  if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
    contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList(
      __getArrayIfSingleItem(output["snapshotDetailSet"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.licenseSpecifications === "") {
    contents.LicenseSpecifications = [];
  }
  if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
    contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse(
      __getArrayIfSingleItem(output["licenseSpecifications"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ImportImageTask = (output: any, context: __SerdeContext): ImportImageTask => {
  let contents: any = {
    Architecture: undefined,
    Description: undefined,
    Encrypted: undefined,
    Hypervisor: undefined,
    ImageId: undefined,
    ImportTaskId: undefined,
    KmsKeyId: undefined,
    LicenseType: undefined,
    Platform: undefined,
    Progress: undefined,
    SnapshotDetails: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Tags: undefined,
    LicenseSpecifications: undefined,
  };
  if (output["architecture"] !== undefined) {
    contents.Architecture = output["architecture"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = output["hypervisor"];
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = output["importTaskId"];
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["licenseType"] !== undefined) {
    contents.LicenseType = output["licenseType"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output.snapshotDetailSet === "") {
    contents.SnapshotDetails = [];
  }
  if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
    contents.SnapshotDetails = deserializeAws_ec2SnapshotDetailList(
      __getArrayIfSingleItem(output["snapshotDetailSet"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.licenseSpecifications === "") {
    contents.LicenseSpecifications = [];
  }
  if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
    contents.LicenseSpecifications = deserializeAws_ec2ImportImageLicenseSpecificationListResponse(
      __getArrayIfSingleItem(output["licenseSpecifications"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ImportImageTaskList = (output: any, context: __SerdeContext): ImportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ImportImageTask(entry, context);
    });
};

const deserializeAws_ec2ImportInstanceResult = (output: any, context: __SerdeContext): ImportInstanceResult => {
  let contents: any = {
    ConversionTask: undefined,
  };
  if (output["conversionTask"] !== undefined) {
    contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
  }
  return contents;
};

const deserializeAws_ec2ImportInstanceTaskDetails = (
  output: any,
  context: __SerdeContext
): ImportInstanceTaskDetails => {
  let contents: any = {
    Description: undefined,
    InstanceId: undefined,
    Platform: undefined,
    Volumes: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output.volumes === "") {
    contents.Volumes = [];
  }
  if (output["volumes"] !== undefined && output["volumes"]["item"] !== undefined) {
    contents.Volumes = deserializeAws_ec2ImportInstanceVolumeDetailSet(
      __getArrayIfSingleItem(output["volumes"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ImportInstanceVolumeDetailItem = (
  output: any,
  context: __SerdeContext
): ImportInstanceVolumeDetailItem => {
  let contents: any = {
    AvailabilityZone: undefined,
    BytesConverted: undefined,
    Description: undefined,
    Image: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Volume: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["bytesConverted"] !== undefined) {
    contents.BytesConverted = parseInt(output["bytesConverted"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["image"] !== undefined) {
    contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["volume"] !== undefined) {
    contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
  }
  return contents;
};

const deserializeAws_ec2ImportInstanceVolumeDetailSet = (
  output: any,
  context: __SerdeContext
): ImportInstanceVolumeDetailItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ImportInstanceVolumeDetailItem(entry, context);
    });
};

const deserializeAws_ec2ImportKeyPairResult = (output: any, context: __SerdeContext): ImportKeyPairResult => {
  let contents: any = {
    KeyFingerprint: undefined,
    KeyName: undefined,
    KeyPairId: undefined,
    Tags: undefined,
  };
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = output["keyFingerprint"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = output["keyPairId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ImportSnapshotResult = (output: any, context: __SerdeContext): ImportSnapshotResult => {
  let contents: any = {
    Description: undefined,
    ImportTaskId: undefined,
    SnapshotTaskDetail: undefined,
    Tags: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = output["importTaskId"];
  }
  if (output["snapshotTaskDetail"] !== undefined) {
    contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ImportSnapshotTask = (output: any, context: __SerdeContext): ImportSnapshotTask => {
  let contents: any = {
    Description: undefined,
    ImportTaskId: undefined,
    SnapshotTaskDetail: undefined,
    Tags: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = output["importTaskId"];
  }
  if (output["snapshotTaskDetail"] !== undefined) {
    contents.SnapshotTaskDetail = deserializeAws_ec2SnapshotTaskDetail(output["snapshotTaskDetail"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ImportSnapshotTaskList = (output: any, context: __SerdeContext): ImportSnapshotTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ImportSnapshotTask(entry, context);
    });
};

const deserializeAws_ec2ImportVolumeResult = (output: any, context: __SerdeContext): ImportVolumeResult => {
  let contents: any = {
    ConversionTask: undefined,
  };
  if (output["conversionTask"] !== undefined) {
    contents.ConversionTask = deserializeAws_ec2ConversionTask(output["conversionTask"], context);
  }
  return contents;
};

const deserializeAws_ec2ImportVolumeTaskDetails = (output: any, context: __SerdeContext): ImportVolumeTaskDetails => {
  let contents: any = {
    AvailabilityZone: undefined,
    BytesConverted: undefined,
    Description: undefined,
    Image: undefined,
    Volume: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["bytesConverted"] !== undefined) {
    contents.BytesConverted = parseInt(output["bytesConverted"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["image"] !== undefined) {
    contents.Image = deserializeAws_ec2DiskImageDescription(output["image"], context);
  }
  if (output["volume"] !== undefined) {
    contents.Volume = deserializeAws_ec2DiskImageVolumeDescription(output["volume"], context);
  }
  return contents;
};

const deserializeAws_ec2InferenceAcceleratorInfo = (output: any, context: __SerdeContext): InferenceAcceleratorInfo => {
  let contents: any = {
    Accelerators: undefined,
  };
  if (output.accelerators === "") {
    contents.Accelerators = [];
  }
  if (output["accelerators"] !== undefined && output["accelerators"]["member"] !== undefined) {
    contents.Accelerators = deserializeAws_ec2InferenceDeviceInfoList(
      __getArrayIfSingleItem(output["accelerators"]["member"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2InferenceDeviceInfo = (output: any, context: __SerdeContext): InferenceDeviceInfo => {
  let contents: any = {
    Count: undefined,
    Name: undefined,
    Manufacturer: undefined,
  };
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = output["manufacturer"];
  }
  return contents;
};

const deserializeAws_ec2InferenceDeviceInfoList = (output: any, context: __SerdeContext): InferenceDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InferenceDeviceInfo(entry, context);
    });
};

const deserializeAws_ec2InsideCidrBlocksStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Instance = (output: any, context: __SerdeContext): Instance => {
  let contents: any = {
    AmiLaunchIndex: undefined,
    ImageId: undefined,
    InstanceId: undefined,
    InstanceType: undefined,
    KernelId: undefined,
    KeyName: undefined,
    LaunchTime: undefined,
    Monitoring: undefined,
    Placement: undefined,
    Platform: undefined,
    PrivateDnsName: undefined,
    PrivateIpAddress: undefined,
    ProductCodes: undefined,
    PublicDnsName: undefined,
    PublicIpAddress: undefined,
    RamdiskId: undefined,
    State: undefined,
    StateTransitionReason: undefined,
    SubnetId: undefined,
    VpcId: undefined,
    Architecture: undefined,
    BlockDeviceMappings: undefined,
    ClientToken: undefined,
    EbsOptimized: undefined,
    EnaSupport: undefined,
    Hypervisor: undefined,
    IamInstanceProfile: undefined,
    InstanceLifecycle: undefined,
    ElasticGpuAssociations: undefined,
    ElasticInferenceAcceleratorAssociations: undefined,
    NetworkInterfaces: undefined,
    OutpostArn: undefined,
    RootDeviceName: undefined,
    RootDeviceType: undefined,
    SecurityGroups: undefined,
    SourceDestCheck: undefined,
    SpotInstanceRequestId: undefined,
    SriovNetSupport: undefined,
    StateReason: undefined,
    Tags: undefined,
    VirtualizationType: undefined,
    CpuOptions: undefined,
    CapacityReservationId: undefined,
    CapacityReservationSpecification: undefined,
    HibernationOptions: undefined,
    Licenses: undefined,
    MetadataOptions: undefined,
    EnclaveOptions: undefined,
  };
  if (output["amiLaunchIndex"] !== undefined) {
    contents.AmiLaunchIndex = parseInt(output["amiLaunchIndex"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = output["kernelId"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output["launchTime"] !== undefined) {
    contents.LaunchTime = new Date(output["launchTime"]);
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
  }
  if (output["placement"] !== undefined) {
    contents.Placement = deserializeAws_ec2Placement(output["placement"], context);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["dnsName"] !== undefined) {
    contents.PublicDnsName = output["dnsName"];
  }
  if (output["ipAddress"] !== undefined) {
    contents.PublicIpAddress = output["ipAddress"];
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = output["ramdiskId"];
  }
  if (output["instanceState"] !== undefined) {
    contents.State = deserializeAws_ec2InstanceState(output["instanceState"], context);
  }
  if (output["reason"] !== undefined) {
    contents.StateTransitionReason = output["reason"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["architecture"] !== undefined) {
    contents.Architecture = output["architecture"];
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = output["ebsOptimized"] == "true";
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = output["enaSupport"] == "true";
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = output["hypervisor"];
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfile(output["iamInstanceProfile"], context);
  }
  if (output["instanceLifecycle"] !== undefined) {
    contents.InstanceLifecycle = output["instanceLifecycle"];
  }
  if (output.elasticGpuAssociationSet === "") {
    contents.ElasticGpuAssociations = [];
  }
  if (output["elasticGpuAssociationSet"] !== undefined && output["elasticGpuAssociationSet"]["item"] !== undefined) {
    contents.ElasticGpuAssociations = deserializeAws_ec2ElasticGpuAssociationList(
      __getArrayIfSingleItem(output["elasticGpuAssociationSet"]["item"]),
      context
    );
  }
  if (output.elasticInferenceAcceleratorAssociationSet === "") {
    contents.ElasticInferenceAcceleratorAssociations = [];
  }
  if (
    output["elasticInferenceAcceleratorAssociationSet"] !== undefined &&
    output["elasticInferenceAcceleratorAssociationSet"]["item"] !== undefined
  ) {
    contents.ElasticInferenceAcceleratorAssociations = deserializeAws_ec2ElasticInferenceAcceleratorAssociationList(
      __getArrayIfSingleItem(output["elasticInferenceAcceleratorAssociationSet"]["item"]),
      context
    );
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  }
  if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = output["rootDeviceName"];
  }
  if (output["rootDeviceType"] !== undefined) {
    contents.RootDeviceType = output["rootDeviceType"];
  }
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = output["sourceDestCheck"] == "true";
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = output["spotInstanceRequestId"];
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = output["sriovNetSupport"];
  }
  if (output["stateReason"] !== undefined) {
    contents.StateReason = deserializeAws_ec2StateReason(output["stateReason"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["virtualizationType"] !== undefined) {
    contents.VirtualizationType = output["virtualizationType"];
  }
  if (output["cpuOptions"] !== undefined) {
    contents.CpuOptions = deserializeAws_ec2CpuOptions(output["cpuOptions"], context);
  }
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = output["capacityReservationId"];
  }
  if (output["capacityReservationSpecification"] !== undefined) {
    contents.CapacityReservationSpecification = deserializeAws_ec2CapacityReservationSpecificationResponse(
      output["capacityReservationSpecification"],
      context
    );
  }
  if (output["hibernationOptions"] !== undefined) {
    contents.HibernationOptions = deserializeAws_ec2HibernationOptions(output["hibernationOptions"], context);
  }
  if (output.licenseSet === "") {
    contents.Licenses = [];
  }
  if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
    contents.Licenses = deserializeAws_ec2LicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
  }
  if (output["metadataOptions"] !== undefined) {
    contents.MetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(output["metadataOptions"], context);
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceAttribute = (output: any, context: __SerdeContext): InstanceAttribute => {
  let contents: any = {
    Groups: undefined,
    BlockDeviceMappings: undefined,
    DisableApiTermination: undefined,
    EnaSupport: undefined,
    EnclaveOptions: undefined,
    EbsOptimized: undefined,
    InstanceId: undefined,
    InstanceInitiatedShutdownBehavior: undefined,
    InstanceType: undefined,
    KernelId: undefined,
    ProductCodes: undefined,
    RamdiskId: undefined,
    RootDeviceName: undefined,
    SourceDestCheck: undefined,
    SriovNetSupport: undefined,
    UserData: undefined,
  };
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2InstanceBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["disableApiTermination"] !== undefined) {
    contents.DisableApiTermination = deserializeAws_ec2AttributeBooleanValue(output["disableApiTermination"], context);
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = deserializeAws_ec2AttributeBooleanValue(output["enaSupport"], context);
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = deserializeAws_ec2EnclaveOptions(output["enclaveOptions"], context);
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = deserializeAws_ec2AttributeBooleanValue(output["ebsOptimized"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
    contents.InstanceInitiatedShutdownBehavior = deserializeAws_ec2AttributeValue(
      output["instanceInitiatedShutdownBehavior"],
      context
    );
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = deserializeAws_ec2AttributeValue(output["instanceType"], context);
  }
  if (output["kernel"] !== undefined) {
    contents.KernelId = deserializeAws_ec2AttributeValue(output["kernel"], context);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  }
  if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = deserializeAws_ec2ProductCodeList(
      __getArrayIfSingleItem(output["productCodes"]["item"]),
      context
    );
  }
  if (output["ramdisk"] !== undefined) {
    contents.RamdiskId = deserializeAws_ec2AttributeValue(output["ramdisk"], context);
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = deserializeAws_ec2AttributeValue(output["rootDeviceName"], context);
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = deserializeAws_ec2AttributeBooleanValue(output["sourceDestCheck"], context);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = deserializeAws_ec2AttributeValue(output["sriovNetSupport"], context);
  }
  if (output["userData"] !== undefined) {
    contents.UserData = deserializeAws_ec2AttributeValue(output["userData"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceBlockDeviceMapping = (
  output: any,
  context: __SerdeContext
): InstanceBlockDeviceMapping => {
  let contents: any = {
    DeviceName: undefined,
    Ebs: undefined,
  };
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = output["deviceName"];
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = deserializeAws_ec2EbsInstanceBlockDevice(output["ebs"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceBlockDeviceMappingList = (
  output: any,
  context: __SerdeContext
): InstanceBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceBlockDeviceMapping(entry, context);
    });
};

const deserializeAws_ec2InstanceCapacity = (output: any, context: __SerdeContext): InstanceCapacity => {
  let contents: any = {
    AvailableCapacity: undefined,
    InstanceType: undefined,
    TotalCapacity: undefined,
  };
  if (output["availableCapacity"] !== undefined) {
    contents.AvailableCapacity = parseInt(output["availableCapacity"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["totalCapacity"] !== undefined) {
    contents.TotalCapacity = parseInt(output["totalCapacity"]);
  }
  return contents;
};

const deserializeAws_ec2InstanceCount = (output: any, context: __SerdeContext): InstanceCount => {
  let contents: any = {
    InstanceCount: undefined,
    State: undefined,
  };
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = parseInt(output["instanceCount"]);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2InstanceCountList = (output: any, context: __SerdeContext): InstanceCount[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceCount(entry, context);
    });
};

const deserializeAws_ec2InstanceCreditSpecification = (
  output: any,
  context: __SerdeContext
): InstanceCreditSpecification => {
  let contents: any = {
    InstanceId: undefined,
    CpuCredits: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = output["cpuCredits"];
  }
  return contents;
};

const deserializeAws_ec2InstanceCreditSpecificationList = (
  output: any,
  context: __SerdeContext
): InstanceCreditSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceCreditSpecification(entry, context);
    });
};

const deserializeAws_ec2InstanceExportDetails = (output: any, context: __SerdeContext): InstanceExportDetails => {
  let contents: any = {
    InstanceId: undefined,
    TargetEnvironment: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["targetEnvironment"] !== undefined) {
    contents.TargetEnvironment = output["targetEnvironment"];
  }
  return contents;
};

const deserializeAws_ec2InstanceFamilyCreditSpecification = (
  output: any,
  context: __SerdeContext
): InstanceFamilyCreditSpecification => {
  let contents: any = {
    InstanceFamily: undefined,
    CpuCredits: undefined,
  };
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = output["instanceFamily"];
  }
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = output["cpuCredits"];
  }
  return contents;
};

const deserializeAws_ec2InstanceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2InstanceIdsSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2InstanceIpv6Address = (output: any, context: __SerdeContext): InstanceIpv6Address => {
  let contents: any = {
    Ipv6Address: undefined,
  };
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = output["ipv6Address"];
  }
  return contents;
};

const deserializeAws_ec2InstanceIpv6AddressList = (output: any, context: __SerdeContext): InstanceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceIpv6Address(entry, context);
    });
};

const deserializeAws_ec2InstanceList = (output: any, context: __SerdeContext): Instance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Instance(entry, context);
    });
};

const deserializeAws_ec2InstanceMetadataOptionsResponse = (
  output: any,
  context: __SerdeContext
): InstanceMetadataOptionsResponse => {
  let contents: any = {
    State: undefined,
    HttpTokens: undefined,
    HttpPutResponseHopLimit: undefined,
    HttpEndpoint: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["httpTokens"] !== undefined) {
    contents.HttpTokens = output["httpTokens"];
  }
  if (output["httpPutResponseHopLimit"] !== undefined) {
    contents.HttpPutResponseHopLimit = parseInt(output["httpPutResponseHopLimit"]);
  }
  if (output["httpEndpoint"] !== undefined) {
    contents.HttpEndpoint = output["httpEndpoint"];
  }
  return contents;
};

const deserializeAws_ec2InstanceMonitoring = (output: any, context: __SerdeContext): InstanceMonitoring => {
  let contents: any = {
    InstanceId: undefined,
    Monitoring: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = deserializeAws_ec2Monitoring(output["monitoring"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceMonitoringList = (output: any, context: __SerdeContext): InstanceMonitoring[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceMonitoring(entry, context);
    });
};

const deserializeAws_ec2InstanceNetworkInterface = (output: any, context: __SerdeContext): InstanceNetworkInterface => {
  let contents: any = {
    Association: undefined,
    Attachment: undefined,
    Description: undefined,
    Groups: undefined,
    Ipv6Addresses: undefined,
    MacAddress: undefined,
    NetworkInterfaceId: undefined,
    OwnerId: undefined,
    PrivateDnsName: undefined,
    PrivateIpAddress: undefined,
    PrivateIpAddresses: undefined,
    SourceDestCheck: undefined,
    Status: undefined,
    SubnetId: undefined,
    VpcId: undefined,
    InterfaceType: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
  }
  if (output["attachment"] !== undefined) {
    contents.Attachment = deserializeAws_ec2InstanceNetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  }
  if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["macAddress"] !== undefined) {
    contents.MacAddress = output["macAddress"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  }
  if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = deserializeAws_ec2InstancePrivateIpAddressList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = output["sourceDestCheck"] == "true";
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = output["interfaceType"];
  }
  return contents;
};

const deserializeAws_ec2InstanceNetworkInterfaceAssociation = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAssociation => {
  let contents: any = {
    CarrierIp: undefined,
    IpOwnerId: undefined,
    PublicDnsName: undefined,
    PublicIp: undefined,
  };
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = output["carrierIp"];
  }
  if (output["ipOwnerId"] !== undefined) {
    contents.IpOwnerId = output["ipOwnerId"];
  }
  if (output["publicDnsName"] !== undefined) {
    contents.PublicDnsName = output["publicDnsName"];
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  return contents;
};

const deserializeAws_ec2InstanceNetworkInterfaceAttachment = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAttachment => {
  let contents: any = {
    AttachTime: undefined,
    AttachmentId: undefined,
    DeleteOnTermination: undefined,
    DeviceIndex: undefined,
    Status: undefined,
    NetworkCardIndex: undefined,
  };
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = new Date(output["attachTime"]);
  }
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = output["attachmentId"];
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = parseInt(output["deviceIndex"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["networkCardIndex"]);
  }
  return contents;
};

const deserializeAws_ec2InstanceNetworkInterfaceList = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceNetworkInterface(entry, context);
    });
};

const deserializeAws_ec2InstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification => {
  let contents: any = {
    AssociatePublicIpAddress: undefined,
    DeleteOnTermination: undefined,
    Description: undefined,
    DeviceIndex: undefined,
    Groups: undefined,
    Ipv6AddressCount: undefined,
    Ipv6Addresses: undefined,
    NetworkInterfaceId: undefined,
    PrivateIpAddress: undefined,
    PrivateIpAddresses: undefined,
    SecondaryPrivateIpAddressCount: undefined,
    SubnetId: undefined,
    AssociateCarrierIpAddress: undefined,
    InterfaceType: undefined,
    NetworkCardIndex: undefined,
  };
  if (output["associatePublicIpAddress"] !== undefined) {
    contents.AssociatePublicIpAddress = output["associatePublicIpAddress"] == "true";
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = parseInt(output["deviceIndex"]);
  }
  if (output.SecurityGroupId === "") {
    contents.Groups = [];
  }
  if (output["SecurityGroupId"] !== undefined && output["SecurityGroupId"]["SecurityGroupId"] !== undefined) {
    contents.Groups = deserializeAws_ec2SecurityGroupIdStringList(
      __getArrayIfSingleItem(output["SecurityGroupId"]["SecurityGroupId"]),
      context
    );
  }
  if (output["ipv6AddressCount"] !== undefined) {
    contents.Ipv6AddressCount = parseInt(output["ipv6AddressCount"]);
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  }
  if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  }
  if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["secondaryPrivateIpAddressCount"] !== undefined) {
    contents.SecondaryPrivateIpAddressCount = parseInt(output["secondaryPrivateIpAddressCount"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["AssociateCarrierIpAddress"] !== undefined) {
    contents.AssociateCarrierIpAddress = output["AssociateCarrierIpAddress"] == "true";
  }
  if (output["InterfaceType"] !== undefined) {
    contents.InterfaceType = output["InterfaceType"];
  }
  if (output["NetworkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["NetworkCardIndex"]);
  }
  return contents;
};

const deserializeAws_ec2InstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceNetworkInterfaceSpecification(entry, context);
    });
};

const deserializeAws_ec2InstancePrivateIpAddress = (output: any, context: __SerdeContext): InstancePrivateIpAddress => {
  let contents: any = {
    Association: undefined,
    Primary: undefined,
    PrivateDnsName: undefined,
    PrivateIpAddress: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2InstanceNetworkInterfaceAssociation(output["association"], context);
  }
  if (output["primary"] !== undefined) {
    contents.Primary = output["primary"] == "true";
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2InstancePrivateIpAddressList = (
  output: any,
  context: __SerdeContext
): InstancePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstancePrivateIpAddress(entry, context);
    });
};

const deserializeAws_ec2InstanceState = (output: any, context: __SerdeContext): InstanceState => {
  let contents: any = {
    Code: undefined,
    Name: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = parseInt(output["code"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  return contents;
};

const deserializeAws_ec2InstanceStateChange = (output: any, context: __SerdeContext): InstanceStateChange => {
  let contents: any = {
    CurrentState: undefined,
    InstanceId: undefined,
    PreviousState: undefined,
  };
  if (output["currentState"] !== undefined) {
    contents.CurrentState = deserializeAws_ec2InstanceState(output["currentState"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["previousState"] !== undefined) {
    contents.PreviousState = deserializeAws_ec2InstanceState(output["previousState"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceStateChangeList = (output: any, context: __SerdeContext): InstanceStateChange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceStateChange(entry, context);
    });
};

const deserializeAws_ec2InstanceStatus = (output: any, context: __SerdeContext): InstanceStatus => {
  let contents: any = {
    AvailabilityZone: undefined,
    OutpostArn: undefined,
    Events: undefined,
    InstanceId: undefined,
    InstanceState: undefined,
    InstanceStatus: undefined,
    SystemStatus: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output.eventsSet === "") {
    contents.Events = [];
  }
  if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
    contents.Events = deserializeAws_ec2InstanceStatusEventList(
      __getArrayIfSingleItem(output["eventsSet"]["item"]),
      context
    );
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceState"] !== undefined) {
    contents.InstanceState = deserializeAws_ec2InstanceState(output["instanceState"], context);
  }
  if (output["instanceStatus"] !== undefined) {
    contents.InstanceStatus = deserializeAws_ec2InstanceStatusSummary(output["instanceStatus"], context);
  }
  if (output["systemStatus"] !== undefined) {
    contents.SystemStatus = deserializeAws_ec2InstanceStatusSummary(output["systemStatus"], context);
  }
  return contents;
};

const deserializeAws_ec2InstanceStatusDetails = (output: any, context: __SerdeContext): InstanceStatusDetails => {
  let contents: any = {
    ImpairedSince: undefined,
    Name: undefined,
    Status: undefined,
  };
  if (output["impairedSince"] !== undefined) {
    contents.ImpairedSince = new Date(output["impairedSince"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2InstanceStatusDetailsList = (output: any, context: __SerdeContext): InstanceStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceStatusDetails(entry, context);
    });
};

const deserializeAws_ec2InstanceStatusEvent = (output: any, context: __SerdeContext): InstanceStatusEvent => {
  let contents: any = {
    InstanceEventId: undefined,
    Code: undefined,
    Description: undefined,
    NotAfter: undefined,
    NotBefore: undefined,
    NotBeforeDeadline: undefined,
  };
  if (output["instanceEventId"] !== undefined) {
    contents.InstanceEventId = output["instanceEventId"];
  }
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["notAfter"] !== undefined) {
    contents.NotAfter = new Date(output["notAfter"]);
  }
  if (output["notBefore"] !== undefined) {
    contents.NotBefore = new Date(output["notBefore"]);
  }
  if (output["notBeforeDeadline"] !== undefined) {
    contents.NotBeforeDeadline = new Date(output["notBeforeDeadline"]);
  }
  return contents;
};

const deserializeAws_ec2InstanceStatusEventList = (output: any, context: __SerdeContext): InstanceStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceStatusEvent(entry, context);
    });
};

const deserializeAws_ec2InstanceStatusList = (output: any, context: __SerdeContext): InstanceStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceStatus(entry, context);
    });
};

const deserializeAws_ec2InstanceStatusSummary = (output: any, context: __SerdeContext): InstanceStatusSummary => {
  let contents: any = {
    Details: undefined,
    Status: undefined,
  };
  if (output.details === "") {
    contents.Details = [];
  }
  if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
    contents.Details = deserializeAws_ec2InstanceStatusDetailsList(
      __getArrayIfSingleItem(output["details"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2InstanceStorageInfo = (output: any, context: __SerdeContext): InstanceStorageInfo => {
  let contents: any = {
    TotalSizeInGB: undefined,
    Disks: undefined,
    NvmeSupport: undefined,
  };
  if (output["totalSizeInGB"] !== undefined) {
    contents.TotalSizeInGB = parseInt(output["totalSizeInGB"]);
  }
  if (output.disks === "") {
    contents.Disks = [];
  }
  if (output["disks"] !== undefined && output["disks"]["item"] !== undefined) {
    contents.Disks = deserializeAws_ec2DiskInfoList(__getArrayIfSingleItem(output["disks"]["item"]), context);
  }
  if (output["nvmeSupport"] !== undefined) {
    contents.NvmeSupport = output["nvmeSupport"];
  }
  return contents;
};

const deserializeAws_ec2InstanceTagKeySet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2InstanceTagNotificationAttribute = (
  output: any,
  context: __SerdeContext
): InstanceTagNotificationAttribute => {
  let contents: any = {
    InstanceTagKeys: undefined,
    IncludeAllTagsOfInstance: undefined,
  };
  if (output.instanceTagKeySet === "") {
    contents.InstanceTagKeys = [];
  }
  if (output["instanceTagKeySet"] !== undefined && output["instanceTagKeySet"]["item"] !== undefined) {
    contents.InstanceTagKeys = deserializeAws_ec2InstanceTagKeySet(
      __getArrayIfSingleItem(output["instanceTagKeySet"]["item"]),
      context
    );
  }
  if (output["includeAllTagsOfInstance"] !== undefined) {
    contents.IncludeAllTagsOfInstance = output["includeAllTagsOfInstance"] == "true";
  }
  return contents;
};

const deserializeAws_ec2InstanceTypeInfo = (output: any, context: __SerdeContext): InstanceTypeInfo => {
  let contents: any = {
    InstanceType: undefined,
    CurrentGeneration: undefined,
    FreeTierEligible: undefined,
    SupportedUsageClasses: undefined,
    SupportedRootDeviceTypes: undefined,
    SupportedVirtualizationTypes: undefined,
    BareMetal: undefined,
    Hypervisor: undefined,
    ProcessorInfo: undefined,
    VCpuInfo: undefined,
    MemoryInfo: undefined,
    InstanceStorageSupported: undefined,
    InstanceStorageInfo: undefined,
    EbsInfo: undefined,
    NetworkInfo: undefined,
    GpuInfo: undefined,
    FpgaInfo: undefined,
    PlacementGroupInfo: undefined,
    InferenceAcceleratorInfo: undefined,
    HibernationSupported: undefined,
    BurstablePerformanceSupported: undefined,
    DedicatedHostsSupported: undefined,
    AutoRecoverySupported: undefined,
  };
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["currentGeneration"] !== undefined) {
    contents.CurrentGeneration = output["currentGeneration"] == "true";
  }
  if (output["freeTierEligible"] !== undefined) {
    contents.FreeTierEligible = output["freeTierEligible"] == "true";
  }
  if (output.supportedUsageClasses === "") {
    contents.SupportedUsageClasses = [];
  }
  if (output["supportedUsageClasses"] !== undefined && output["supportedUsageClasses"]["item"] !== undefined) {
    contents.SupportedUsageClasses = deserializeAws_ec2UsageClassTypeList(
      __getArrayIfSingleItem(output["supportedUsageClasses"]["item"]),
      context
    );
  }
  if (output.supportedRootDeviceTypes === "") {
    contents.SupportedRootDeviceTypes = [];
  }
  if (output["supportedRootDeviceTypes"] !== undefined && output["supportedRootDeviceTypes"]["item"] !== undefined) {
    contents.SupportedRootDeviceTypes = deserializeAws_ec2RootDeviceTypeList(
      __getArrayIfSingleItem(output["supportedRootDeviceTypes"]["item"]),
      context
    );
  }
  if (output.supportedVirtualizationTypes === "") {
    contents.SupportedVirtualizationTypes = [];
  }
  if (
    output["supportedVirtualizationTypes"] !== undefined &&
    output["supportedVirtualizationTypes"]["item"] !== undefined
  ) {
    contents.SupportedVirtualizationTypes = deserializeAws_ec2VirtualizationTypeList(
      __getArrayIfSingleItem(output["supportedVirtualizationTypes"]["item"]),
      context
    );
  }
  if (output["bareMetal"] !== undefined) {
    contents.BareMetal = output["bareMetal"] == "true";
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = output["hypervisor"];
  }
  if (output["processorInfo"] !== undefined) {
    contents.ProcessorInfo = deserializeAws_ec2ProcessorInfo(output["processorInfo"], context);
  }
  if (output["vCpuInfo"] !== undefined) {
    contents.VCpuInfo = deserializeAws_ec2VCpuInfo(output["vCpuInfo"], context);
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = deserializeAws_ec2MemoryInfo(output["memoryInfo"], context);
  }
  if (output["instanceStorageSupported"] !== undefined) {
    contents.InstanceStorageSupported = output["instanceStorageSupported"] == "true";
  }
  if (output["instanceStorageInfo"] !== undefined) {
    contents.InstanceStorageInfo = deserializeAws_ec2InstanceStorageInfo(output["instanceStorageInfo"], context);
  }
  if (output["ebsInfo"] !== undefined) {
    contents.EbsInfo = deserializeAws_ec2EbsInfo(output["ebsInfo"], context);
  }
  if (output["networkInfo"] !== undefined) {
    contents.NetworkInfo = deserializeAws_ec2NetworkInfo(output["networkInfo"], context);
  }
  if (output["gpuInfo"] !== undefined) {
    contents.GpuInfo = deserializeAws_ec2GpuInfo(output["gpuInfo"], context);
  }
  if (output["fpgaInfo"] !== undefined) {
    contents.FpgaInfo = deserializeAws_ec2FpgaInfo(output["fpgaInfo"], context);
  }
  if (output["placementGroupInfo"] !== undefined) {
    contents.PlacementGroupInfo = deserializeAws_ec2PlacementGroupInfo(output["placementGroupInfo"], context);
  }
  if (output["inferenceAcceleratorInfo"] !== undefined) {
    contents.InferenceAcceleratorInfo = deserializeAws_ec2InferenceAcceleratorInfo(
      output["inferenceAcceleratorInfo"],
      context
    );
  }
  if (output["hibernationSupported"] !== undefined) {
    contents.HibernationSupported = output["hibernationSupported"] == "true";
  }
  if (output["burstablePerformanceSupported"] !== undefined) {
    contents.BurstablePerformanceSupported = output["burstablePerformanceSupported"] == "true";
  }
  if (output["dedicatedHostsSupported"] !== undefined) {
    contents.DedicatedHostsSupported = output["dedicatedHostsSupported"] == "true";
  }
  if (output["autoRecoverySupported"] !== undefined) {
    contents.AutoRecoverySupported = output["autoRecoverySupported"] == "true";
  }
  return contents;
};

const deserializeAws_ec2InstanceTypeInfoList = (output: any, context: __SerdeContext): InstanceTypeInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceTypeInfo(entry, context);
    });
};

const deserializeAws_ec2InstanceTypeOffering = (output: any, context: __SerdeContext): InstanceTypeOffering => {
  let contents: any = {
    InstanceType: undefined,
    LocationType: undefined,
    Location: undefined,
  };
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["locationType"] !== undefined) {
    contents.LocationType = output["locationType"];
  }
  if (output["location"] !== undefined) {
    contents.Location = output["location"];
  }
  return contents;
};

const deserializeAws_ec2InstanceTypeOfferingsList = (output: any, context: __SerdeContext): InstanceTypeOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceTypeOffering(entry, context);
    });
};

const deserializeAws_ec2InstanceUsage = (output: any, context: __SerdeContext): InstanceUsage => {
  let contents: any = {
    AccountId: undefined,
    UsedInstanceCount: undefined,
  };
  if (output["accountId"] !== undefined) {
    contents.AccountId = output["accountId"];
  }
  if (output["usedInstanceCount"] !== undefined) {
    contents.UsedInstanceCount = parseInt(output["usedInstanceCount"]);
  }
  return contents;
};

const deserializeAws_ec2InstanceUsageSet = (output: any, context: __SerdeContext): InstanceUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InstanceUsage(entry, context);
    });
};

const deserializeAws_ec2InternetGateway = (output: any, context: __SerdeContext): InternetGateway => {
  let contents: any = {
    Attachments: undefined,
    InternetGatewayId: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  }
  if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = deserializeAws_ec2InternetGatewayAttachmentList(
      __getArrayIfSingleItem(output["attachmentSet"]["item"]),
      context
    );
  }
  if (output["internetGatewayId"] !== undefined) {
    contents.InternetGatewayId = output["internetGatewayId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2InternetGatewayAttachment = (
  output: any,
  context: __SerdeContext
): InternetGatewayAttachment => {
  let contents: any = {
    State: undefined,
    VpcId: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2InternetGatewayAttachmentList = (
  output: any,
  context: __SerdeContext
): InternetGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InternetGatewayAttachment(entry, context);
    });
};

const deserializeAws_ec2InternetGatewayList = (output: any, context: __SerdeContext): InternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2InternetGateway(entry, context);
    });
};

const deserializeAws_ec2IpAddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2IpPermission = (output: any, context: __SerdeContext): IpPermission => {
  let contents: any = {
    FromPort: undefined,
    IpProtocol: undefined,
    IpRanges: undefined,
    Ipv6Ranges: undefined,
    PrefixListIds: undefined,
    ToPort: undefined,
    UserIdGroupPairs: undefined,
  };
  if (output["fromPort"] !== undefined) {
    contents.FromPort = parseInt(output["fromPort"]);
  }
  if (output["ipProtocol"] !== undefined) {
    contents.IpProtocol = output["ipProtocol"];
  }
  if (output.ipRanges === "") {
    contents.IpRanges = [];
  }
  if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
    contents.IpRanges = deserializeAws_ec2IpRangeList(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
  }
  if (output.ipv6Ranges === "") {
    contents.Ipv6Ranges = [];
  }
  if (output["ipv6Ranges"] !== undefined && output["ipv6Ranges"]["item"] !== undefined) {
    contents.Ipv6Ranges = deserializeAws_ec2Ipv6RangeList(
      __getArrayIfSingleItem(output["ipv6Ranges"]["item"]),
      context
    );
  }
  if (output.prefixListIds === "") {
    contents.PrefixListIds = [];
  }
  if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
    contents.PrefixListIds = deserializeAws_ec2PrefixListIdList(
      __getArrayIfSingleItem(output["prefixListIds"]["item"]),
      context
    );
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = parseInt(output["toPort"]);
  }
  if (output.groups === "") {
    contents.UserIdGroupPairs = [];
  }
  if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
    contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairList(
      __getArrayIfSingleItem(output["groups"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2IpPermissionList = (output: any, context: __SerdeContext): IpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2IpPermission(entry, context);
    });
};

const deserializeAws_ec2IpRange = (output: any, context: __SerdeContext): IpRange => {
  let contents: any = {
    CidrIp: undefined,
    Description: undefined,
  };
  if (output["cidrIp"] !== undefined) {
    contents.CidrIp = output["cidrIp"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  return contents;
};

const deserializeAws_ec2IpRangeList = (output: any, context: __SerdeContext): IpRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2IpRange(entry, context);
    });
};

const deserializeAws_ec2IpRanges = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Ipv6AddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Ipv6CidrAssociation = (output: any, context: __SerdeContext): Ipv6CidrAssociation => {
  let contents: any = {
    Ipv6Cidr: undefined,
    AssociatedResource: undefined,
  };
  if (output["ipv6Cidr"] !== undefined) {
    contents.Ipv6Cidr = output["ipv6Cidr"];
  }
  if (output["associatedResource"] !== undefined) {
    contents.AssociatedResource = output["associatedResource"];
  }
  return contents;
};

const deserializeAws_ec2Ipv6CidrAssociationSet = (output: any, context: __SerdeContext): Ipv6CidrAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Ipv6CidrAssociation(entry, context);
    });
};

const deserializeAws_ec2Ipv6CidrBlock = (output: any, context: __SerdeContext): Ipv6CidrBlock => {
  let contents: any = {
    Ipv6CidrBlock: undefined,
  };
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = output["ipv6CidrBlock"];
  }
  return contents;
};

const deserializeAws_ec2Ipv6CidrBlockSet = (output: any, context: __SerdeContext): Ipv6CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Ipv6CidrBlock(entry, context);
    });
};

const deserializeAws_ec2Ipv6Pool = (output: any, context: __SerdeContext): Ipv6Pool => {
  let contents: any = {
    PoolId: undefined,
    Description: undefined,
    PoolCidrBlocks: undefined,
    Tags: undefined,
  };
  if (output["poolId"] !== undefined) {
    contents.PoolId = output["poolId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.poolCidrBlockSet === "") {
    contents.PoolCidrBlocks = [];
  }
  if (output["poolCidrBlockSet"] !== undefined && output["poolCidrBlockSet"]["item"] !== undefined) {
    contents.PoolCidrBlocks = deserializeAws_ec2PoolCidrBlocksSet(
      __getArrayIfSingleItem(output["poolCidrBlockSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2Ipv6PoolSet = (output: any, context: __SerdeContext): Ipv6Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Ipv6Pool(entry, context);
    });
};

const deserializeAws_ec2Ipv6Range = (output: any, context: __SerdeContext): Ipv6Range => {
  let contents: any = {
    CidrIpv6: undefined,
    Description: undefined,
  };
  if (output["cidrIpv6"] !== undefined) {
    contents.CidrIpv6 = output["cidrIpv6"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  return contents;
};

const deserializeAws_ec2Ipv6RangeList = (output: any, context: __SerdeContext): Ipv6Range[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Ipv6Range(entry, context);
    });
};

const deserializeAws_ec2KeyPair = (output: any, context: __SerdeContext): KeyPair => {
  let contents: any = {
    KeyFingerprint: undefined,
    KeyMaterial: undefined,
    KeyName: undefined,
    KeyPairId: undefined,
    Tags: undefined,
  };
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = output["keyFingerprint"];
  }
  if (output["keyMaterial"] !== undefined) {
    contents.KeyMaterial = output["keyMaterial"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = output["keyPairId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2KeyPairInfo = (output: any, context: __SerdeContext): KeyPairInfo => {
  let contents: any = {
    KeyPairId: undefined,
    KeyFingerprint: undefined,
    KeyName: undefined,
    Tags: undefined,
  };
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = output["keyPairId"];
  }
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = output["keyFingerprint"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2KeyPairList = (output: any, context: __SerdeContext): KeyPairInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2KeyPairInfo(entry, context);
    });
};

const deserializeAws_ec2LastError = (output: any, context: __SerdeContext): LastError => {
  let contents: any = {
    Message: undefined,
    Code: undefined,
  };
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  return contents;
};

const deserializeAws_ec2LaunchPermission = (output: any, context: __SerdeContext): LaunchPermission => {
  let contents: any = {
    Group: undefined,
    UserId: undefined,
  };
  if (output["group"] !== undefined) {
    contents.Group = output["group"];
  }
  if (output["userId"] !== undefined) {
    contents.UserId = output["userId"];
  }
  return contents;
};

const deserializeAws_ec2LaunchPermissionList = (output: any, context: __SerdeContext): LaunchPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchPermission(entry, context);
    });
};

const deserializeAws_ec2LaunchSpecification = (output: any, context: __SerdeContext): LaunchSpecification => {
  let contents: any = {
    UserData: undefined,
    SecurityGroups: undefined,
    AddressingType: undefined,
    BlockDeviceMappings: undefined,
    EbsOptimized: undefined,
    IamInstanceProfile: undefined,
    ImageId: undefined,
    InstanceType: undefined,
    KernelId: undefined,
    KeyName: undefined,
    NetworkInterfaces: undefined,
    Placement: undefined,
    RamdiskId: undefined,
    SubnetId: undefined,
    Monitoring: undefined,
  };
  if (output["userData"] !== undefined) {
    contents.UserData = output["userData"];
  }
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["addressingType"] !== undefined) {
    contents.AddressingType = output["addressingType"];
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = output["ebsOptimized"] == "true";
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(
      output["iamInstanceProfile"],
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = output["kernelId"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  }
  if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["placement"] !== undefined) {
    contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = output["ramdiskId"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = deserializeAws_ec2RunInstancesMonitoringEnabled(output["monitoring"], context);
  }
  return contents;
};

const deserializeAws_ec2LaunchSpecsList = (output: any, context: __SerdeContext): SpotFleetLaunchSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SpotFleetLaunchSpecification(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplate = (output: any, context: __SerdeContext): LaunchTemplate => {
  let contents: any = {
    LaunchTemplateId: undefined,
    LaunchTemplateName: undefined,
    CreateTime: undefined,
    CreatedBy: undefined,
    DefaultVersionNumber: undefined,
    LatestVersionNumber: undefined,
    Tags: undefined,
  };
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = output["launchTemplateId"];
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = output["launchTemplateName"];
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["createdBy"] !== undefined) {
    contents.CreatedBy = output["createdBy"];
  }
  if (output["defaultVersionNumber"] !== undefined) {
    contents.DefaultVersionNumber = parseInt(output["defaultVersionNumber"]);
  }
  if (output["latestVersionNumber"] !== undefined) {
    contents.LatestVersionNumber = parseInt(output["latestVersionNumber"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateAndOverridesResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateAndOverridesResponse => {
  let contents: any = {
    LaunchTemplateSpecification: undefined,
    Overrides: undefined,
  };
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output["overrides"] !== undefined) {
    contents.Overrides = deserializeAws_ec2FleetLaunchTemplateOverrides(output["overrides"], context);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateBlockDeviceMapping = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping => {
  let contents: any = {
    DeviceName: undefined,
    VirtualName: undefined,
    Ebs: undefined,
    NoDevice: undefined,
  };
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = output["deviceName"];
  }
  if (output["virtualName"] !== undefined) {
    contents.VirtualName = output["virtualName"];
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = deserializeAws_ec2LaunchTemplateEbsBlockDevice(output["ebs"], context);
  }
  if (output["noDevice"] !== undefined) {
    contents.NoDevice = output["noDevice"];
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateBlockDeviceMappingList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateBlockDeviceMapping(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateCapacityReservationSpecificationResponse => {
  let contents: any = {
    CapacityReservationPreference: undefined,
    CapacityReservationTarget: undefined,
  };
  if (output["capacityReservationPreference"] !== undefined) {
    contents.CapacityReservationPreference = output["capacityReservationPreference"];
  }
  if (output["capacityReservationTarget"] !== undefined) {
    contents.CapacityReservationTarget = deserializeAws_ec2CapacityReservationTargetResponse(
      output["capacityReservationTarget"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateConfig = (output: any, context: __SerdeContext): LaunchTemplateConfig => {
  let contents: any = {
    LaunchTemplateSpecification: undefined,
    Overrides: undefined,
  };
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = deserializeAws_ec2FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output.overrides === "") {
    contents.Overrides = [];
  }
  if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
    contents.Overrides = deserializeAws_ec2LaunchTemplateOverridesList(
      __getArrayIfSingleItem(output["overrides"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateConfigList = (output: any, context: __SerdeContext): LaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateConfig(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateCpuOptions = (output: any, context: __SerdeContext): LaunchTemplateCpuOptions => {
  let contents: any = {
    CoreCount: undefined,
    ThreadsPerCore: undefined,
  };
  if (output["coreCount"] !== undefined) {
    contents.CoreCount = parseInt(output["coreCount"]);
  }
  if (output["threadsPerCore"] !== undefined) {
    contents.ThreadsPerCore = parseInt(output["threadsPerCore"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateEbsBlockDevice = (
  output: any,
  context: __SerdeContext
): LaunchTemplateEbsBlockDevice => {
  let contents: any = {
    Encrypted: undefined,
    DeleteOnTermination: undefined,
    Iops: undefined,
    KmsKeyId: undefined,
    SnapshotId: undefined,
    VolumeSize: undefined,
    VolumeType: undefined,
    Throughput: undefined,
  };
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["iops"] !== undefined) {
    contents.Iops = parseInt(output["iops"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = parseInt(output["volumeSize"]);
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = output["volumeType"];
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = parseInt(output["throughput"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse => {
  let contents: any = {
    Type: undefined,
    Count: undefined,
  };
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateEnclaveOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateEnclaveOptions => {
  let contents: any = {
    Enabled: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateHibernationOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateHibernationOptions => {
  let contents: any = {
    Configured: undefined,
  };
  if (output["configured"] !== undefined) {
    contents.Configured = output["configured"] == "true";
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateIamInstanceProfileSpecification => {
  let contents: any = {
    Arn: undefined,
    Name: undefined,
  };
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateInstanceMarketOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMarketOptions => {
  let contents: any = {
    MarketType: undefined,
    SpotOptions: undefined,
  };
  if (output["marketType"] !== undefined) {
    contents.MarketType = output["marketType"];
  }
  if (output["spotOptions"] !== undefined) {
    contents.SpotOptions = deserializeAws_ec2LaunchTemplateSpotMarketOptions(output["spotOptions"], context);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateInstanceMetadataOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMetadataOptions => {
  let contents: any = {
    State: undefined,
    HttpTokens: undefined,
    HttpPutResponseHopLimit: undefined,
    HttpEndpoint: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["httpTokens"] !== undefined) {
    contents.HttpTokens = output["httpTokens"];
  }
  if (output["httpPutResponseHopLimit"] !== undefined) {
    contents.HttpPutResponseHopLimit = parseInt(output["httpPutResponseHopLimit"]);
  }
  if (output["httpEndpoint"] !== undefined) {
    contents.HttpEndpoint = output["httpEndpoint"];
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification => {
  let contents: any = {
    AssociateCarrierIpAddress: undefined,
    AssociatePublicIpAddress: undefined,
    DeleteOnTermination: undefined,
    Description: undefined,
    DeviceIndex: undefined,
    Groups: undefined,
    InterfaceType: undefined,
    Ipv6AddressCount: undefined,
    Ipv6Addresses: undefined,
    NetworkInterfaceId: undefined,
    PrivateIpAddress: undefined,
    PrivateIpAddresses: undefined,
    SecondaryPrivateIpAddressCount: undefined,
    SubnetId: undefined,
    NetworkCardIndex: undefined,
  };
  if (output["associateCarrierIpAddress"] !== undefined) {
    contents.AssociateCarrierIpAddress = output["associateCarrierIpAddress"] == "true";
  }
  if (output["associatePublicIpAddress"] !== undefined) {
    contents.AssociatePublicIpAddress = output["associatePublicIpAddress"] == "true";
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = parseInt(output["deviceIndex"]);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["groupId"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdStringList(
      __getArrayIfSingleItem(output["groupSet"]["groupId"]),
      context
    );
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = output["interfaceType"];
  }
  if (output["ipv6AddressCount"] !== undefined) {
    contents.Ipv6AddressCount = parseInt(output["ipv6AddressCount"]);
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  }
  if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = deserializeAws_ec2InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  }
  if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = deserializeAws_ec2PrivateIpAddressSpecificationList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["secondaryPrivateIpAddressCount"] !== undefined) {
    contents.SecondaryPrivateIpAddressCount = parseInt(output["secondaryPrivateIpAddressCount"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["networkCardIndex"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateLicenseConfiguration = (
  output: any,
  context: __SerdeContext
): LaunchTemplateLicenseConfiguration => {
  let contents: any = {
    LicenseConfigurationArn: undefined,
  };
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = output["licenseConfigurationArn"];
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateLicenseList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateLicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateLicenseConfiguration(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateOverrides = (output: any, context: __SerdeContext): LaunchTemplateOverrides => {
  let contents: any = {
    InstanceType: undefined,
    SpotPrice: undefined,
    SubnetId: undefined,
    AvailabilityZone: undefined,
    WeightedCapacity: undefined,
    Priority: undefined,
  };
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = output["spotPrice"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = parseFloat(output["weightedCapacity"]);
  }
  if (output["priority"] !== undefined) {
    contents.Priority = parseFloat(output["priority"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateOverridesList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateOverrides(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplatePlacement = (output: any, context: __SerdeContext): LaunchTemplatePlacement => {
  let contents: any = {
    AvailabilityZone: undefined,
    Affinity: undefined,
    GroupName: undefined,
    HostId: undefined,
    Tenancy: undefined,
    SpreadDomain: undefined,
    HostResourceGroupArn: undefined,
    PartitionNumber: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["affinity"] !== undefined) {
    contents.Affinity = output["affinity"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = output["hostId"];
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = output["tenancy"];
  }
  if (output["spreadDomain"] !== undefined) {
    contents.SpreadDomain = output["spreadDomain"];
  }
  if (output["hostResourceGroupArn"] !== undefined) {
    contents.HostResourceGroupArn = output["hostResourceGroupArn"];
  }
  if (output["partitionNumber"] !== undefined) {
    contents.PartitionNumber = parseInt(output["partitionNumber"]);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateSet = (output: any, context: __SerdeContext): LaunchTemplate[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplate(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplatesMonitoring = (
  output: any,
  context: __SerdeContext
): LaunchTemplatesMonitoring => {
  let contents: any = {
    Enabled: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateSpotMarketOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateSpotMarketOptions => {
  let contents: any = {
    MaxPrice: undefined,
    SpotInstanceType: undefined,
    BlockDurationMinutes: undefined,
    ValidUntil: undefined,
    InstanceInterruptionBehavior: undefined,
  };
  if (output["maxPrice"] !== undefined) {
    contents.MaxPrice = output["maxPrice"];
  }
  if (output["spotInstanceType"] !== undefined) {
    contents.SpotInstanceType = output["spotInstanceType"];
  }
  if (output["blockDurationMinutes"] !== undefined) {
    contents.BlockDurationMinutes = parseInt(output["blockDurationMinutes"]);
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = new Date(output["validUntil"]);
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = output["instanceInterruptionBehavior"];
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateTagSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateTagSpecification => {
  let contents: any = {
    ResourceType: undefined,
    Tags: undefined,
  };
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateTagSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateTagSpecification(entry, context);
    });
};

const deserializeAws_ec2LaunchTemplateVersion = (output: any, context: __SerdeContext): LaunchTemplateVersion => {
  let contents: any = {
    LaunchTemplateId: undefined,
    LaunchTemplateName: undefined,
    VersionNumber: undefined,
    VersionDescription: undefined,
    CreateTime: undefined,
    CreatedBy: undefined,
    DefaultVersion: undefined,
    LaunchTemplateData: undefined,
  };
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = output["launchTemplateId"];
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = output["launchTemplateName"];
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = parseInt(output["versionNumber"]);
  }
  if (output["versionDescription"] !== undefined) {
    contents.VersionDescription = output["versionDescription"];
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["createdBy"] !== undefined) {
    contents.CreatedBy = output["createdBy"];
  }
  if (output["defaultVersion"] !== undefined) {
    contents.DefaultVersion = output["defaultVersion"] == "true";
  }
  if (output["launchTemplateData"] !== undefined) {
    contents.LaunchTemplateData = deserializeAws_ec2ResponseLaunchTemplateData(output["launchTemplateData"], context);
  }
  return contents;
};

const deserializeAws_ec2LaunchTemplateVersionSet = (output: any, context: __SerdeContext): LaunchTemplateVersion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LaunchTemplateVersion(entry, context);
    });
};

const deserializeAws_ec2LicenseConfiguration = (output: any, context: __SerdeContext): LicenseConfiguration => {
  let contents: any = {
    LicenseConfigurationArn: undefined,
  };
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = output["licenseConfigurationArn"];
  }
  return contents;
};

const deserializeAws_ec2LicenseList = (output: any, context: __SerdeContext): LicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LicenseConfiguration(entry, context);
    });
};

const deserializeAws_ec2LoadBalancersConfig = (output: any, context: __SerdeContext): LoadBalancersConfig => {
  let contents: any = {
    ClassicLoadBalancersConfig: undefined,
    TargetGroupsConfig: undefined,
  };
  if (output["classicLoadBalancersConfig"] !== undefined) {
    contents.ClassicLoadBalancersConfig = deserializeAws_ec2ClassicLoadBalancersConfig(
      output["classicLoadBalancersConfig"],
      context
    );
  }
  if (output["targetGroupsConfig"] !== undefined) {
    contents.TargetGroupsConfig = deserializeAws_ec2TargetGroupsConfig(output["targetGroupsConfig"], context);
  }
  return contents;
};

const deserializeAws_ec2LoadPermission = (output: any, context: __SerdeContext): LoadPermission => {
  let contents: any = {
    UserId: undefined,
    Group: undefined,
  };
  if (output["userId"] !== undefined) {
    contents.UserId = output["userId"];
  }
  if (output["group"] !== undefined) {
    contents.Group = output["group"];
  }
  return contents;
};

const deserializeAws_ec2LoadPermissionList = (output: any, context: __SerdeContext): LoadPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LoadPermission(entry, context);
    });
};

const deserializeAws_ec2LocalGateway = (output: any, context: __SerdeContext): LocalGateway => {
  let contents: any = {
    LocalGatewayId: undefined,
    OutpostArn: undefined,
    OwnerId: undefined,
    State: undefined,
    Tags: undefined,
  };
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayRoute = (output: any, context: __SerdeContext): LocalGatewayRoute => {
  let contents: any = {
    DestinationCidrBlock: undefined,
    LocalGatewayVirtualInterfaceGroupId: undefined,
    Type: undefined,
    State: undefined,
    LocalGatewayRouteTableId: undefined,
    LocalGatewayRouteTableArn: undefined,
    OwnerId: undefined,
  };
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = output["destinationCidrBlock"];
  }
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = output["localGatewayVirtualInterfaceGroupId"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = output["localGatewayRouteTableArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayRouteList = (output: any, context: __SerdeContext): LocalGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayRoute(entry, context);
    });
};

const deserializeAws_ec2LocalGatewayRouteTable = (output: any, context: __SerdeContext): LocalGatewayRouteTable => {
  let contents: any = {
    LocalGatewayRouteTableId: undefined,
    LocalGatewayRouteTableArn: undefined,
    LocalGatewayId: undefined,
    OutpostArn: undefined,
    OwnerId: undefined,
    State: undefined,
    Tags: undefined,
  };
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = output["localGatewayRouteTableArn"];
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayRouteTableSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayRouteTable(entry, context);
    });
};

const deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation => {
  let contents: any = {
    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: undefined,
    LocalGatewayVirtualInterfaceGroupId: undefined,
    LocalGatewayId: undefined,
    LocalGatewayRouteTableId: undefined,
    LocalGatewayRouteTableArn: undefined,
    OwnerId: undefined,
    State: undefined,
    Tags: undefined,
  };
  if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"] !== undefined) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId =
      output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"];
  }
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = output["localGatewayVirtualInterfaceGroupId"];
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = output["localGatewayRouteTableArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};

const deserializeAws_ec2LocalGatewayRouteTableVpcAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation => {
  let contents: any = {
    LocalGatewayRouteTableVpcAssociationId: undefined,
    LocalGatewayRouteTableId: undefined,
    LocalGatewayRouteTableArn: undefined,
    LocalGatewayId: undefined,
    VpcId: undefined,
    OwnerId: undefined,
    State: undefined,
    Tags: undefined,
  };
  if (output["localGatewayRouteTableVpcAssociationId"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociationId = output["localGatewayRouteTableVpcAssociationId"];
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = output["localGatewayRouteTableId"];
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = output["localGatewayRouteTableArn"];
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};

const deserializeAws_ec2LocalGatewaySet = (output: any, context: __SerdeContext): LocalGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGateway(entry, context);
    });
};

const deserializeAws_ec2LocalGatewayVirtualInterface = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterface => {
  let contents: any = {
    LocalGatewayVirtualInterfaceId: undefined,
    LocalGatewayId: undefined,
    Vlan: undefined,
    LocalAddress: undefined,
    PeerAddress: undefined,
    LocalBgpAsn: undefined,
    PeerBgpAsn: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output["localGatewayVirtualInterfaceId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceId = output["localGatewayVirtualInterfaceId"];
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["vlan"] !== undefined) {
    contents.Vlan = parseInt(output["vlan"]);
  }
  if (output["localAddress"] !== undefined) {
    contents.LocalAddress = output["localAddress"];
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = output["peerAddress"];
  }
  if (output["localBgpAsn"] !== undefined) {
    contents.LocalBgpAsn = parseInt(output["localBgpAsn"]);
  }
  if (output["peerBgpAsn"] !== undefined) {
    contents.PeerBgpAsn = parseInt(output["peerBgpAsn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayVirtualInterfaceGroup = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup => {
  let contents: any = {
    LocalGatewayVirtualInterfaceGroupId: undefined,
    LocalGatewayVirtualInterfaceIds: undefined,
    LocalGatewayId: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = output["localGatewayVirtualInterfaceGroupId"];
  }
  if (output.localGatewayVirtualInterfaceIdSet === "") {
    contents.LocalGatewayVirtualInterfaceIds = [];
  }
  if (
    output["localGatewayVirtualInterfaceIdSet"] !== undefined &&
    output["localGatewayVirtualInterfaceIdSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaceIds = deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceIdSet"]["item"]),
      context
    );
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};

const deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2LocalGatewayVirtualInterfaceSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2LocalGatewayVirtualInterface(entry, context);
    });
};

const deserializeAws_ec2ManagedPrefixList = (output: any, context: __SerdeContext): ManagedPrefixList => {
  let contents: any = {
    PrefixListId: undefined,
    AddressFamily: undefined,
    State: undefined,
    StateMessage: undefined,
    PrefixListArn: undefined,
    PrefixListName: undefined,
    MaxEntries: undefined,
    Version: undefined,
    Tags: undefined,
    OwnerId: undefined,
  };
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  if (output["addressFamily"] !== undefined) {
    contents.AddressFamily = output["addressFamily"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["stateMessage"] !== undefined) {
    contents.StateMessage = output["stateMessage"];
  }
  if (output["prefixListArn"] !== undefined) {
    contents.PrefixListArn = output["prefixListArn"];
  }
  if (output["prefixListName"] !== undefined) {
    contents.PrefixListName = output["prefixListName"];
  }
  if (output["maxEntries"] !== undefined) {
    contents.MaxEntries = parseInt(output["maxEntries"]);
  }
  if (output["version"] !== undefined) {
    contents.Version = parseInt(output["version"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2ManagedPrefixListSet = (output: any, context: __SerdeContext): ManagedPrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ManagedPrefixList(entry, context);
    });
};

const deserializeAws_ec2MemoryInfo = (output: any, context: __SerdeContext): MemoryInfo => {
  let contents: any = {
    SizeInMiB: undefined,
  };
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = parseInt(output["sizeInMiB"]);
  }
  return contents;
};

const deserializeAws_ec2ModifyAvailabilityZoneGroupResult = (
  output: any,
  context: __SerdeContext
): ModifyAvailabilityZoneGroupResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): ModifyCapacityReservationResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyClientVpnEndpointResult = (
  output: any,
  context: __SerdeContext
): ModifyClientVpnEndpointResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyDefaultCreditSpecificationResult => {
  let contents: any = {
    InstanceFamilyCreditSpecification: undefined,
  };
  if (output["instanceFamilyCreditSpecification"] !== undefined) {
    contents.InstanceFamilyCreditSpecification = deserializeAws_ec2InstanceFamilyCreditSpecification(
      output["instanceFamilyCreditSpecification"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult = (
  output: any,
  context: __SerdeContext
): ModifyEbsDefaultKmsKeyIdResult => {
  let contents: any = {
    KmsKeyId: undefined,
  };
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  return contents;
};

const deserializeAws_ec2ModifyFleetResult = (output: any, context: __SerdeContext): ModifyFleetResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyFpgaImageAttributeResult = (
  output: any,
  context: __SerdeContext
): ModifyFpgaImageAttributeResult => {
  let contents: any = {
    FpgaImageAttribute: undefined,
  };
  if (output["fpgaImageAttribute"] !== undefined) {
    contents.FpgaImageAttribute = deserializeAws_ec2FpgaImageAttribute(output["fpgaImageAttribute"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyHostsResult = (output: any, context: __SerdeContext): ModifyHostsResult => {
  let contents: any = {
    Successful: undefined,
    Unsuccessful: undefined,
  };
  if (output.successful === "") {
    contents.Successful = [];
  }
  if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = deserializeAws_ec2ResponseHostIdList(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCapacityReservationAttributesResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyInstanceCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCreditSpecificationResult => {
  let contents: any = {
    SuccessfulInstanceCreditSpecifications: undefined,
    UnsuccessfulInstanceCreditSpecifications: undefined,
  };
  if (output.successfulInstanceCreditSpecificationSet === "") {
    contents.SuccessfulInstanceCreditSpecifications = [];
  }
  if (
    output["successfulInstanceCreditSpecificationSet"] !== undefined &&
    output["successfulInstanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.SuccessfulInstanceCreditSpecifications = deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet(
      __getArrayIfSingleItem(output["successfulInstanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
    contents.UnsuccessfulInstanceCreditSpecifications = [];
  }
  if (
    output["unsuccessfulInstanceCreditSpecificationSet"] !== undefined &&
    output["unsuccessfulInstanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulInstanceCreditSpecifications = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet(
      __getArrayIfSingleItem(output["unsuccessfulInstanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyInstanceEventStartTimeResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceEventStartTimeResult => {
  let contents: any = {
    Event: undefined,
  };
  if (output["event"] !== undefined) {
    contents.Event = deserializeAws_ec2InstanceStatusEvent(output["event"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyInstanceMetadataOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceMetadataOptionsResult => {
  let contents: any = {
    InstanceId: undefined,
    InstanceMetadataOptions: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceMetadataOptions"] !== undefined) {
    contents.InstanceMetadataOptions = deserializeAws_ec2InstanceMetadataOptionsResponse(
      output["instanceMetadataOptions"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyInstancePlacementResult = (
  output: any,
  context: __SerdeContext
): ModifyInstancePlacementResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyLaunchTemplateResult = (
  output: any,
  context: __SerdeContext
): ModifyLaunchTemplateResult => {
  let contents: any = {
    LaunchTemplate: undefined,
  };
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = deserializeAws_ec2LaunchTemplate(output["launchTemplate"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyManagedPrefixListResult = (
  output: any,
  context: __SerdeContext
): ModifyManagedPrefixListResult => {
  let contents: any = {
    PrefixList: undefined,
  };
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyReservedInstancesResult = (
  output: any,
  context: __SerdeContext
): ModifyReservedInstancesResult => {
  let contents: any = {
    ReservedInstancesModificationId: undefined,
  };
  if (output["reservedInstancesModificationId"] !== undefined) {
    contents.ReservedInstancesModificationId = output["reservedInstancesModificationId"];
  }
  return contents;
};

const deserializeAws_ec2ModifySpotFleetRequestResponse = (
  output: any,
  context: __SerdeContext
): ModifySpotFleetRequestResponse => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterNetworkServicesResult => {
  let contents: any = {
    TrafficMirrorFilter: undefined,
  };
  if (output["trafficMirrorFilter"] !== undefined) {
    contents.TrafficMirrorFilter = deserializeAws_ec2TrafficMirrorFilter(output["trafficMirrorFilter"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterRuleResult => {
  let contents: any = {
    TrafficMirrorFilterRule: undefined,
  };
  if (output["trafficMirrorFilterRule"] !== undefined) {
    contents.TrafficMirrorFilterRule = deserializeAws_ec2TrafficMirrorFilterRule(
      output["trafficMirrorFilterRule"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorSessionResult => {
  let contents: any = {
    TrafficMirrorSession: undefined,
  };
  if (output["trafficMirrorSession"] !== undefined) {
    contents.TrafficMirrorSession = deserializeAws_ec2TrafficMirrorSession(output["trafficMirrorSession"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayPrefixListReferenceResult => {
  let contents: any = {
    TransitGatewayPrefixListReference: undefined,
  };
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = deserializeAws_ec2TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyTransitGatewayResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayResult => {
  let contents: any = {
    TransitGateway: undefined,
  };
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = deserializeAws_ec2TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayVpcAttachmentResult => {
  let contents: any = {
    TransitGatewayVpcAttachment: undefined,
  };
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyVolumeResult = (output: any, context: __SerdeContext): ModifyVolumeResult => {
  let contents: any = {
    VolumeModification: undefined,
  };
  if (output["volumeModification"] !== undefined) {
    contents.VolumeModification = deserializeAws_ec2VolumeModification(output["volumeModification"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointConnectionNotificationResult => {
  let contents: any = {
    ReturnValue: undefined,
  };
  if (output["return"] !== undefined) {
    contents.ReturnValue = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcEndpointResult = (output: any, context: __SerdeContext): ModifyVpcEndpointResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServiceConfigurationResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServicePermissionsResult => {
  let contents: any = {
    ReturnValue: undefined,
  };
  if (output["return"] !== undefined) {
    contents.ReturnValue = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcPeeringConnectionOptionsResult => {
  let contents: any = {
    AccepterPeeringConnectionOptions: undefined,
    RequesterPeeringConnectionOptions: undefined,
  };
  if (output["accepterPeeringConnectionOptions"] !== undefined) {
    contents.AccepterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(
      output["accepterPeeringConnectionOptions"],
      context
    );
  }
  if (output["requesterPeeringConnectionOptions"] !== undefined) {
    contents.RequesterPeeringConnectionOptions = deserializeAws_ec2PeeringConnectionOptions(
      output["requesterPeeringConnectionOptions"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ModifyVpcTenancyResult = (output: any, context: __SerdeContext): ModifyVpcTenancyResult => {
  let contents: any = {
    ReturnValue: undefined,
  };
  if (output["return"] !== undefined) {
    contents.ReturnValue = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ModifyVpnConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnConnectionOptionsResult => {
  let contents: any = {
    VpnConnection: undefined,
  };
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyVpnConnectionResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnConnectionResult => {
  let contents: any = {
    VpnConnection: undefined,
  };
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyVpnTunnelCertificateResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnTunnelCertificateResult => {
  let contents: any = {
    VpnConnection: undefined,
  };
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2ModifyVpnTunnelOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnTunnelOptionsResult => {
  let contents: any = {
    VpnConnection: undefined,
  };
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = deserializeAws_ec2VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

const deserializeAws_ec2Monitoring = (output: any, context: __SerdeContext): Monitoring => {
  let contents: any = {
    State: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2MonitorInstancesResult = (output: any, context: __SerdeContext): MonitorInstancesResult => {
  let contents: any = {
    InstanceMonitorings: undefined,
  };
  if (output.instancesSet === "") {
    contents.InstanceMonitorings = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2MoveAddressToVpcResult = (output: any, context: __SerdeContext): MoveAddressToVpcResult => {
  let contents: any = {
    AllocationId: undefined,
    Status: undefined,
  };
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2MovingAddressStatus = (output: any, context: __SerdeContext): MovingAddressStatus => {
  let contents: any = {
    MoveStatus: undefined,
    PublicIp: undefined,
  };
  if (output["moveStatus"] !== undefined) {
    contents.MoveStatus = output["moveStatus"];
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  return contents;
};

const deserializeAws_ec2MovingAddressStatusSet = (output: any, context: __SerdeContext): MovingAddressStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2MovingAddressStatus(entry, context);
    });
};

const deserializeAws_ec2NatGateway = (output: any, context: __SerdeContext): NatGateway => {
  let contents: any = {
    CreateTime: undefined,
    DeleteTime: undefined,
    FailureCode: undefined,
    FailureMessage: undefined,
    NatGatewayAddresses: undefined,
    NatGatewayId: undefined,
    ProvisionedBandwidth: undefined,
    State: undefined,
    SubnetId: undefined,
    VpcId: undefined,
    Tags: undefined,
  };
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["deleteTime"] !== undefined) {
    contents.DeleteTime = new Date(output["deleteTime"]);
  }
  if (output["failureCode"] !== undefined) {
    contents.FailureCode = output["failureCode"];
  }
  if (output["failureMessage"] !== undefined) {
    contents.FailureMessage = output["failureMessage"];
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  }
  if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = deserializeAws_ec2NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = output["natGatewayId"];
  }
  if (output["provisionedBandwidth"] !== undefined) {
    contents.ProvisionedBandwidth = deserializeAws_ec2ProvisionedBandwidth(output["provisionedBandwidth"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2NatGatewayAddress = (output: any, context: __SerdeContext): NatGatewayAddress => {
  let contents: any = {
    AllocationId: undefined,
    NetworkInterfaceId: undefined,
    PrivateIp: undefined,
    PublicIp: undefined,
  };
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["privateIp"] !== undefined) {
    contents.PrivateIp = output["privateIp"];
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  return contents;
};

const deserializeAws_ec2NatGatewayAddressList = (output: any, context: __SerdeContext): NatGatewayAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NatGatewayAddress(entry, context);
    });
};

const deserializeAws_ec2NatGatewayList = (output: any, context: __SerdeContext): NatGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NatGateway(entry, context);
    });
};

const deserializeAws_ec2NetworkAcl = (output: any, context: __SerdeContext): NetworkAcl => {
  let contents: any = {
    Associations: undefined,
    Entries: undefined,
    IsDefault: undefined,
    NetworkAclId: undefined,
    Tags: undefined,
    VpcId: undefined,
    OwnerId: undefined,
  };
  if (output.associationSet === "") {
    contents.Associations = [];
  }
  if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
    contents.Associations = deserializeAws_ec2NetworkAclAssociationList(
      __getArrayIfSingleItem(output["associationSet"]["item"]),
      context
    );
  }
  if (output.entrySet === "") {
    contents.Entries = [];
  }
  if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
    contents.Entries = deserializeAws_ec2NetworkAclEntryList(
      __getArrayIfSingleItem(output["entrySet"]["item"]),
      context
    );
  }
  if (output["default"] !== undefined) {
    contents.IsDefault = output["default"] == "true";
  }
  if (output["networkAclId"] !== undefined) {
    contents.NetworkAclId = output["networkAclId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2NetworkAclAssociation = (output: any, context: __SerdeContext): NetworkAclAssociation => {
  let contents: any = {
    NetworkAclAssociationId: undefined,
    NetworkAclId: undefined,
    SubnetId: undefined,
  };
  if (output["networkAclAssociationId"] !== undefined) {
    contents.NetworkAclAssociationId = output["networkAclAssociationId"];
  }
  if (output["networkAclId"] !== undefined) {
    contents.NetworkAclId = output["networkAclId"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  return contents;
};

const deserializeAws_ec2NetworkAclAssociationList = (output: any, context: __SerdeContext): NetworkAclAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkAclAssociation(entry, context);
    });
};

const deserializeAws_ec2NetworkAclEntry = (output: any, context: __SerdeContext): NetworkAclEntry => {
  let contents: any = {
    CidrBlock: undefined,
    Egress: undefined,
    IcmpTypeCode: undefined,
    Ipv6CidrBlock: undefined,
    PortRange: undefined,
    Protocol: undefined,
    RuleAction: undefined,
    RuleNumber: undefined,
  };
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  if (output["egress"] !== undefined) {
    contents.Egress = output["egress"] == "true";
  }
  if (output["icmpTypeCode"] !== undefined) {
    contents.IcmpTypeCode = deserializeAws_ec2IcmpTypeCode(output["icmpTypeCode"], context);
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = output["ipv6CidrBlock"];
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = deserializeAws_ec2PortRange(output["portRange"], context);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = output["ruleAction"];
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = parseInt(output["ruleNumber"]);
  }
  return contents;
};

const deserializeAws_ec2NetworkAclEntryList = (output: any, context: __SerdeContext): NetworkAclEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkAclEntry(entry, context);
    });
};

const deserializeAws_ec2NetworkAclList = (output: any, context: __SerdeContext): NetworkAcl[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkAcl(entry, context);
    });
};

const deserializeAws_ec2NetworkCardInfo = (output: any, context: __SerdeContext): NetworkCardInfo => {
  let contents: any = {
    NetworkCardIndex: undefined,
    NetworkPerformance: undefined,
    MaximumNetworkInterfaces: undefined,
  };
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["networkCardIndex"]);
  }
  if (output["networkPerformance"] !== undefined) {
    contents.NetworkPerformance = output["networkPerformance"];
  }
  if (output["maximumNetworkInterfaces"] !== undefined) {
    contents.MaximumNetworkInterfaces = parseInt(output["maximumNetworkInterfaces"]);
  }
  return contents;
};

const deserializeAws_ec2NetworkCardInfoList = (output: any, context: __SerdeContext): NetworkCardInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkCardInfo(entry, context);
    });
};

const deserializeAws_ec2NetworkInfo = (output: any, context: __SerdeContext): NetworkInfo => {
  let contents: any = {
    NetworkPerformance: undefined,
    MaximumNetworkInterfaces: undefined,
    MaximumNetworkCards: undefined,
    DefaultNetworkCardIndex: undefined,
    NetworkCards: undefined,
    Ipv4AddressesPerInterface: undefined,
    Ipv6AddressesPerInterface: undefined,
    Ipv6Supported: undefined,
    EnaSupport: undefined,
    EfaSupported: undefined,
  };
  if (output["networkPerformance"] !== undefined) {
    contents.NetworkPerformance = output["networkPerformance"];
  }
  if (output["maximumNetworkInterfaces"] !== undefined) {
    contents.MaximumNetworkInterfaces = parseInt(output["maximumNetworkInterfaces"]);
  }
  if (output["maximumNetworkCards"] !== undefined) {
    contents.MaximumNetworkCards = parseInt(output["maximumNetworkCards"]);
  }
  if (output["defaultNetworkCardIndex"] !== undefined) {
    contents.DefaultNetworkCardIndex = parseInt(output["defaultNetworkCardIndex"]);
  }
  if (output.networkCards === "") {
    contents.NetworkCards = [];
  }
  if (output["networkCards"] !== undefined && output["networkCards"]["item"] !== undefined) {
    contents.NetworkCards = deserializeAws_ec2NetworkCardInfoList(
      __getArrayIfSingleItem(output["networkCards"]["item"]),
      context
    );
  }
  if (output["ipv4AddressesPerInterface"] !== undefined) {
    contents.Ipv4AddressesPerInterface = parseInt(output["ipv4AddressesPerInterface"]);
  }
  if (output["ipv6AddressesPerInterface"] !== undefined) {
    contents.Ipv6AddressesPerInterface = parseInt(output["ipv6AddressesPerInterface"]);
  }
  if (output["ipv6Supported"] !== undefined) {
    contents.Ipv6Supported = output["ipv6Supported"] == "true";
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = output["enaSupport"];
  }
  if (output["efaSupported"] !== undefined) {
    contents.EfaSupported = output["efaSupported"] == "true";
  }
  return contents;
};

const deserializeAws_ec2NetworkInsightsAnalysis = (output: any, context: __SerdeContext): NetworkInsightsAnalysis => {
  let contents: any = {
    NetworkInsightsAnalysisId: undefined,
    NetworkInsightsAnalysisArn: undefined,
    NetworkInsightsPathId: undefined,
    FilterInArns: undefined,
    StartDate: undefined,
    Status: undefined,
    StatusMessage: undefined,
    NetworkPathFound: undefined,
    ForwardPathComponents: undefined,
    ReturnPathComponents: undefined,
    Explanations: undefined,
    AlternatePathHints: undefined,
    Tags: undefined,
  };
  if (output["networkInsightsAnalysisId"] !== undefined) {
    contents.NetworkInsightsAnalysisId = output["networkInsightsAnalysisId"];
  }
  if (output["networkInsightsAnalysisArn"] !== undefined) {
    contents.NetworkInsightsAnalysisArn = output["networkInsightsAnalysisArn"];
  }
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = output["networkInsightsPathId"];
  }
  if (output.filterInArnSet === "") {
    contents.FilterInArns = [];
  }
  if (output["filterInArnSet"] !== undefined && output["filterInArnSet"]["item"] !== undefined) {
    contents.FilterInArns = deserializeAws_ec2ArnList(
      __getArrayIfSingleItem(output["filterInArnSet"]["item"]),
      context
    );
  }
  if (output["startDate"] !== undefined) {
    contents.StartDate = new Date(output["startDate"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["networkPathFound"] !== undefined) {
    contents.NetworkPathFound = output["networkPathFound"] == "true";
  }
  if (output.forwardPathComponentSet === "") {
    contents.ForwardPathComponents = [];
  }
  if (output["forwardPathComponentSet"] !== undefined && output["forwardPathComponentSet"]["item"] !== undefined) {
    contents.ForwardPathComponents = deserializeAws_ec2PathComponentList(
      __getArrayIfSingleItem(output["forwardPathComponentSet"]["item"]),
      context
    );
  }
  if (output.returnPathComponentSet === "") {
    contents.ReturnPathComponents = [];
  }
  if (output["returnPathComponentSet"] !== undefined && output["returnPathComponentSet"]["item"] !== undefined) {
    contents.ReturnPathComponents = deserializeAws_ec2PathComponentList(
      __getArrayIfSingleItem(output["returnPathComponentSet"]["item"]),
      context
    );
  }
  if (output.explanationSet === "") {
    contents.Explanations = [];
  }
  if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
    contents.Explanations = deserializeAws_ec2ExplanationList(
      __getArrayIfSingleItem(output["explanationSet"]["item"]),
      context
    );
  }
  if (output.alternatePathHintSet === "") {
    contents.AlternatePathHints = [];
  }
  if (output["alternatePathHintSet"] !== undefined && output["alternatePathHintSet"]["item"] !== undefined) {
    contents.AlternatePathHints = deserializeAws_ec2AlternatePathHintList(
      __getArrayIfSingleItem(output["alternatePathHintSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2NetworkInsightsAnalysisList = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAnalysis[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInsightsAnalysis(entry, context);
    });
};

const deserializeAws_ec2NetworkInsightsPath = (output: any, context: __SerdeContext): NetworkInsightsPath => {
  let contents: any = {
    NetworkInsightsPathId: undefined,
    NetworkInsightsPathArn: undefined,
    CreatedDate: undefined,
    Source: undefined,
    Destination: undefined,
    SourceIp: undefined,
    DestinationIp: undefined,
    Protocol: undefined,
    DestinationPort: undefined,
    Tags: undefined,
  };
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = output["networkInsightsPathId"];
  }
  if (output["networkInsightsPathArn"] !== undefined) {
    contents.NetworkInsightsPathArn = output["networkInsightsPathArn"];
  }
  if (output["createdDate"] !== undefined) {
    contents.CreatedDate = new Date(output["createdDate"]);
  }
  if (output["source"] !== undefined) {
    contents.Source = output["source"];
  }
  if (output["destination"] !== undefined) {
    contents.Destination = output["destination"];
  }
  if (output["sourceIp"] !== undefined) {
    contents.SourceIp = output["sourceIp"];
  }
  if (output["destinationIp"] !== undefined) {
    contents.DestinationIp = output["destinationIp"];
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  if (output["destinationPort"] !== undefined) {
    contents.DestinationPort = parseInt(output["destinationPort"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2NetworkInsightsPathList = (output: any, context: __SerdeContext): NetworkInsightsPath[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInsightsPath(entry, context);
    });
};

const deserializeAws_ec2NetworkInterface = (output: any, context: __SerdeContext): NetworkInterface => {
  let contents: any = {
    Association: undefined,
    Attachment: undefined,
    AvailabilityZone: undefined,
    Description: undefined,
    Groups: undefined,
    InterfaceType: undefined,
    Ipv6Addresses: undefined,
    MacAddress: undefined,
    NetworkInterfaceId: undefined,
    OutpostArn: undefined,
    OwnerId: undefined,
    PrivateDnsName: undefined,
    PrivateIpAddress: undefined,
    PrivateIpAddresses: undefined,
    RequesterId: undefined,
    RequesterManaged: undefined,
    SourceDestCheck: undefined,
    Status: undefined,
    SubnetId: undefined,
    TagSet: undefined,
    VpcId: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
  }
  if (output["attachment"] !== undefined) {
    contents.Attachment = deserializeAws_ec2NetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = output["interfaceType"];
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  }
  if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = deserializeAws_ec2NetworkInterfaceIpv6AddressesList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["macAddress"] !== undefined) {
    contents.MacAddress = output["macAddress"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  }
  if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = deserializeAws_ec2NetworkInterfacePrivateIpAddressList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["requesterId"] !== undefined) {
    contents.RequesterId = output["requesterId"];
  }
  if (output["requesterManaged"] !== undefined) {
    contents.RequesterManaged = output["requesterManaged"] == "true";
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = output["sourceDestCheck"] == "true";
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output.tagSet === "") {
    contents.TagSet = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.TagSet = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfaceAssociation = (
  output: any,
  context: __SerdeContext
): NetworkInterfaceAssociation => {
  let contents: any = {
    AllocationId: undefined,
    AssociationId: undefined,
    IpOwnerId: undefined,
    PublicDnsName: undefined,
    PublicIp: undefined,
    CustomerOwnedIp: undefined,
    CarrierIp: undefined,
  };
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = output["allocationId"];
  }
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["ipOwnerId"] !== undefined) {
    contents.IpOwnerId = output["ipOwnerId"];
  }
  if (output["publicDnsName"] !== undefined) {
    contents.PublicDnsName = output["publicDnsName"];
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = output["customerOwnedIp"];
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = output["carrierIp"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfaceAttachment = (
  output: any,
  context: __SerdeContext
): NetworkInterfaceAttachment => {
  let contents: any = {
    AttachTime: undefined,
    AttachmentId: undefined,
    DeleteOnTermination: undefined,
    DeviceIndex: undefined,
    NetworkCardIndex: undefined,
    InstanceId: undefined,
    InstanceOwnerId: undefined,
    Status: undefined,
  };
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = new Date(output["attachTime"]);
  }
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = output["attachmentId"];
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = parseInt(output["deviceIndex"]);
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = parseInt(output["networkCardIndex"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceOwnerId"] !== undefined) {
    contents.InstanceOwnerId = output["instanceOwnerId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfaceIpv6Address = (
  output: any,
  context: __SerdeContext
): NetworkInterfaceIpv6Address => {
  let contents: any = {
    Ipv6Address: undefined,
  };
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = output["ipv6Address"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfaceIpv6AddressesList = (
  output: any,
  context: __SerdeContext
): NetworkInterfaceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInterfaceIpv6Address(entry, context);
    });
};

const deserializeAws_ec2NetworkInterfaceList = (output: any, context: __SerdeContext): NetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInterface(entry, context);
    });
};

const deserializeAws_ec2NetworkInterfacePermission = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePermission => {
  let contents: any = {
    NetworkInterfacePermissionId: undefined,
    NetworkInterfaceId: undefined,
    AwsAccountId: undefined,
    AwsService: undefined,
    Permission: undefined,
    PermissionState: undefined,
  };
  if (output["networkInterfacePermissionId"] !== undefined) {
    contents.NetworkInterfacePermissionId = output["networkInterfacePermissionId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["awsAccountId"] !== undefined) {
    contents.AwsAccountId = output["awsAccountId"];
  }
  if (output["awsService"] !== undefined) {
    contents.AwsService = output["awsService"];
  }
  if (output["permission"] !== undefined) {
    contents.Permission = output["permission"];
  }
  if (output["permissionState"] !== undefined) {
    contents.PermissionState = deserializeAws_ec2NetworkInterfacePermissionState(output["permissionState"], context);
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfacePermissionList = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInterfacePermission(entry, context);
    });
};

const deserializeAws_ec2NetworkInterfacePermissionState = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePermissionState => {
  let contents: any = {
    State: undefined,
    StatusMessage: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfacePrivateIpAddress = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress => {
  let contents: any = {
    Association: undefined,
    Primary: undefined,
    PrivateDnsName: undefined,
    PrivateIpAddress: undefined,
  };
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2NetworkInterfaceAssociation(output["association"], context);
  }
  if (output["primary"] !== undefined) {
    contents.Primary = output["primary"] == "true";
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2NetworkInterfacePrivateIpAddressList = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2NetworkInterfacePrivateIpAddress(entry, context);
    });
};

const deserializeAws_ec2OccurrenceDaySet = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return parseInt(entry);
    });
};

const deserializeAws_ec2OnDemandOptions = (output: any, context: __SerdeContext): OnDemandOptions => {
  let contents: any = {
    AllocationStrategy: undefined,
    CapacityReservationOptions: undefined,
    SingleInstanceType: undefined,
    SingleAvailabilityZone: undefined,
    MinTargetCapacity: undefined,
    MaxTotalPrice: undefined,
  };
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = output["allocationStrategy"];
  }
  if (output["capacityReservationOptions"] !== undefined) {
    contents.CapacityReservationOptions = deserializeAws_ec2CapacityReservationOptions(
      output["capacityReservationOptions"],
      context
    );
  }
  if (output["singleInstanceType"] !== undefined) {
    contents.SingleInstanceType = output["singleInstanceType"] == "true";
  }
  if (output["singleAvailabilityZone"] !== undefined) {
    contents.SingleAvailabilityZone = output["singleAvailabilityZone"] == "true";
  }
  if (output["minTargetCapacity"] !== undefined) {
    contents.MinTargetCapacity = parseInt(output["minTargetCapacity"]);
  }
  if (output["maxTotalPrice"] !== undefined) {
    contents.MaxTotalPrice = output["maxTotalPrice"];
  }
  return contents;
};

const deserializeAws_ec2PathComponent = (output: any, context: __SerdeContext): PathComponent => {
  let contents: any = {
    SequenceNumber: undefined,
    AclRule: undefined,
    Component: undefined,
    DestinationVpc: undefined,
    OutboundHeader: undefined,
    InboundHeader: undefined,
    RouteTableRoute: undefined,
    SecurityGroupRule: undefined,
    SourceVpc: undefined,
    Subnet: undefined,
    Vpc: undefined,
  };
  if (output["sequenceNumber"] !== undefined) {
    contents.SequenceNumber = parseInt(output["sequenceNumber"]);
  }
  if (output["aclRule"] !== undefined) {
    contents.AclRule = deserializeAws_ec2AnalysisAclRule(output["aclRule"], context);
  }
  if (output["component"] !== undefined) {
    contents.Component = deserializeAws_ec2AnalysisComponent(output["component"], context);
  }
  if (output["destinationVpc"] !== undefined) {
    contents.DestinationVpc = deserializeAws_ec2AnalysisComponent(output["destinationVpc"], context);
  }
  if (output["outboundHeader"] !== undefined) {
    contents.OutboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["outboundHeader"], context);
  }
  if (output["inboundHeader"] !== undefined) {
    contents.InboundHeader = deserializeAws_ec2AnalysisPacketHeader(output["inboundHeader"], context);
  }
  if (output["routeTableRoute"] !== undefined) {
    contents.RouteTableRoute = deserializeAws_ec2AnalysisRouteTableRoute(output["routeTableRoute"], context);
  }
  if (output["securityGroupRule"] !== undefined) {
    contents.SecurityGroupRule = deserializeAws_ec2AnalysisSecurityGroupRule(output["securityGroupRule"], context);
  }
  if (output["sourceVpc"] !== undefined) {
    contents.SourceVpc = deserializeAws_ec2AnalysisComponent(output["sourceVpc"], context);
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = deserializeAws_ec2AnalysisComponent(output["subnet"], context);
  }
  if (output["vpc"] !== undefined) {
    contents.Vpc = deserializeAws_ec2AnalysisComponent(output["vpc"], context);
  }
  return contents;
};

const deserializeAws_ec2PathComponentList = (output: any, context: __SerdeContext): PathComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PathComponent(entry, context);
    });
};

const deserializeAws_ec2PciId = (output: any, context: __SerdeContext): PciId => {
  let contents: any = {
    DeviceId: undefined,
    VendorId: undefined,
    SubsystemId: undefined,
    SubsystemVendorId: undefined,
  };
  if (output["DeviceId"] !== undefined) {
    contents.DeviceId = output["DeviceId"];
  }
  if (output["VendorId"] !== undefined) {
    contents.VendorId = output["VendorId"];
  }
  if (output["SubsystemId"] !== undefined) {
    contents.SubsystemId = output["SubsystemId"];
  }
  if (output["SubsystemVendorId"] !== undefined) {
    contents.SubsystemVendorId = output["SubsystemVendorId"];
  }
  return contents;
};

const deserializeAws_ec2PeeringAttachmentStatus = (output: any, context: __SerdeContext): PeeringAttachmentStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2PeeringConnectionOptions = (output: any, context: __SerdeContext): PeeringConnectionOptions => {
  let contents: any = {
    AllowDnsResolutionFromRemoteVpc: undefined,
    AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
    AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
  };
  if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
    contents.AllowDnsResolutionFromRemoteVpc = output["allowDnsResolutionFromRemoteVpc"] == "true";
  }
  if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
    contents.AllowEgressFromLocalClassicLinkToRemoteVpc =
      output["allowEgressFromLocalClassicLinkToRemoteVpc"] == "true";
  }
  if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
    contents.AllowEgressFromLocalVpcToRemoteClassicLink =
      output["allowEgressFromLocalVpcToRemoteClassicLink"] == "true";
  }
  return contents;
};

const deserializeAws_ec2PeeringTgwInfo = (output: any, context: __SerdeContext): PeeringTgwInfo => {
  let contents: any = {
    TransitGatewayId: undefined,
    OwnerId: undefined,
    Region: undefined,
  };
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["region"] !== undefined) {
    contents.Region = output["region"];
  }
  return contents;
};

const deserializeAws_ec2Phase1DHGroupNumbersList = (
  output: any,
  context: __SerdeContext
): Phase1DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase1DHGroupNumbersListValue(entry, context);
    });
};

const deserializeAws_ec2Phase1DHGroupNumbersListValue = (
  output: any,
  context: __SerdeContext
): Phase1DHGroupNumbersListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = parseInt(output["value"]);
  }
  return contents;
};

const deserializeAws_ec2Phase1EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};

const deserializeAws_ec2Phase1EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2Phase1IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};

const deserializeAws_ec2Phase1IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2Phase2DHGroupNumbersList = (
  output: any,
  context: __SerdeContext
): Phase2DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase2DHGroupNumbersListValue(entry, context);
    });
};

const deserializeAws_ec2Phase2DHGroupNumbersListValue = (
  output: any,
  context: __SerdeContext
): Phase2DHGroupNumbersListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = parseInt(output["value"]);
  }
  return contents;
};

const deserializeAws_ec2Phase2EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};

const deserializeAws_ec2Phase2EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2Phase2IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};

const deserializeAws_ec2Phase2IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue => {
  let contents: any = {
    Value: undefined,
  };
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2Placement = (output: any, context: __SerdeContext): Placement => {
  let contents: any = {
    AvailabilityZone: undefined,
    Affinity: undefined,
    GroupName: undefined,
    PartitionNumber: undefined,
    HostId: undefined,
    Tenancy: undefined,
    SpreadDomain: undefined,
    HostResourceGroupArn: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["affinity"] !== undefined) {
    contents.Affinity = output["affinity"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["partitionNumber"] !== undefined) {
    contents.PartitionNumber = parseInt(output["partitionNumber"]);
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = output["hostId"];
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = output["tenancy"];
  }
  if (output["spreadDomain"] !== undefined) {
    contents.SpreadDomain = output["spreadDomain"];
  }
  if (output["hostResourceGroupArn"] !== undefined) {
    contents.HostResourceGroupArn = output["hostResourceGroupArn"];
  }
  return contents;
};

const deserializeAws_ec2PlacementGroup = (output: any, context: __SerdeContext): PlacementGroup => {
  let contents: any = {
    GroupName: undefined,
    State: undefined,
    Strategy: undefined,
    PartitionCount: undefined,
    GroupId: undefined,
    Tags: undefined,
  };
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["strategy"] !== undefined) {
    contents.Strategy = output["strategy"];
  }
  if (output["partitionCount"] !== undefined) {
    contents.PartitionCount = parseInt(output["partitionCount"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2PlacementGroupInfo = (output: any, context: __SerdeContext): PlacementGroupInfo => {
  let contents: any = {
    SupportedStrategies: undefined,
  };
  if (output.supportedStrategies === "") {
    contents.SupportedStrategies = [];
  }
  if (output["supportedStrategies"] !== undefined && output["supportedStrategies"]["item"] !== undefined) {
    contents.SupportedStrategies = deserializeAws_ec2PlacementGroupStrategyList(
      __getArrayIfSingleItem(output["supportedStrategies"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2PlacementGroupList = (output: any, context: __SerdeContext): PlacementGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PlacementGroup(entry, context);
    });
};

const deserializeAws_ec2PlacementGroupStrategyList = (
  output: any,
  context: __SerdeContext
): (PlacementGroupStrategy | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2PlacementResponse = (output: any, context: __SerdeContext): PlacementResponse => {
  let contents: any = {
    GroupName: undefined,
  };
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  return contents;
};

const deserializeAws_ec2PoolCidrBlock = (output: any, context: __SerdeContext): PoolCidrBlock => {
  let contents: any = {
    Cidr: undefined,
  };
  if (output["poolCidrBlock"] !== undefined) {
    contents.Cidr = output["poolCidrBlock"];
  }
  return contents;
};

const deserializeAws_ec2PoolCidrBlocksSet = (output: any, context: __SerdeContext): PoolCidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PoolCidrBlock(entry, context);
    });
};

const deserializeAws_ec2PortRange = (output: any, context: __SerdeContext): PortRange => {
  let contents: any = {
    From: undefined,
    To: undefined,
  };
  if (output["from"] !== undefined) {
    contents.From = parseInt(output["from"]);
  }
  if (output["to"] !== undefined) {
    contents.To = parseInt(output["to"]);
  }
  return contents;
};

const deserializeAws_ec2PortRangeList = (output: any, context: __SerdeContext): PortRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PortRange(entry, context);
    });
};

const deserializeAws_ec2PrefixList = (output: any, context: __SerdeContext): PrefixList => {
  let contents: any = {
    Cidrs: undefined,
    PrefixListId: undefined,
    PrefixListName: undefined,
  };
  if (output.cidrSet === "") {
    contents.Cidrs = [];
  }
  if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
    contents.Cidrs = deserializeAws_ec2ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  if (output["prefixListName"] !== undefined) {
    contents.PrefixListName = output["prefixListName"];
  }
  return contents;
};

const deserializeAws_ec2PrefixListAssociation = (output: any, context: __SerdeContext): PrefixListAssociation => {
  let contents: any = {
    ResourceId: undefined,
    ResourceOwner: undefined,
  };
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceOwner"] !== undefined) {
    contents.ResourceOwner = output["resourceOwner"];
  }
  return contents;
};

const deserializeAws_ec2PrefixListAssociationSet = (output: any, context: __SerdeContext): PrefixListAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrefixListAssociation(entry, context);
    });
};

const deserializeAws_ec2PrefixListEntry = (output: any, context: __SerdeContext): PrefixListEntry => {
  let contents: any = {
    Cidr: undefined,
    Description: undefined,
  };
  if (output["cidr"] !== undefined) {
    contents.Cidr = output["cidr"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  return contents;
};

const deserializeAws_ec2PrefixListEntrySet = (output: any, context: __SerdeContext): PrefixListEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrefixListEntry(entry, context);
    });
};

const deserializeAws_ec2PrefixListId = (output: any, context: __SerdeContext): PrefixListId => {
  let contents: any = {
    Description: undefined,
    PrefixListId: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  return contents;
};

const deserializeAws_ec2PrefixListIdList = (output: any, context: __SerdeContext): PrefixListId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrefixListId(entry, context);
    });
};

const deserializeAws_ec2PrefixListIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2PrefixListSet = (output: any, context: __SerdeContext): PrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrefixList(entry, context);
    });
};

const deserializeAws_ec2PriceSchedule = (output: any, context: __SerdeContext): PriceSchedule => {
  let contents: any = {
    Active: undefined,
    CurrencyCode: undefined,
    Price: undefined,
    Term: undefined,
  };
  if (output["active"] !== undefined) {
    contents.Active = output["active"] == "true";
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["price"] !== undefined) {
    contents.Price = parseFloat(output["price"]);
  }
  if (output["term"] !== undefined) {
    contents.Term = parseInt(output["term"]);
  }
  return contents;
};

const deserializeAws_ec2PriceScheduleList = (output: any, context: __SerdeContext): PriceSchedule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PriceSchedule(entry, context);
    });
};

const deserializeAws_ec2PricingDetail = (output: any, context: __SerdeContext): PricingDetail => {
  let contents: any = {
    Count: undefined,
    Price: undefined,
  };
  if (output["count"] !== undefined) {
    contents.Count = parseInt(output["count"]);
  }
  if (output["price"] !== undefined) {
    contents.Price = parseFloat(output["price"]);
  }
  return contents;
};

const deserializeAws_ec2PricingDetailsList = (output: any, context: __SerdeContext): PricingDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PricingDetail(entry, context);
    });
};

const deserializeAws_ec2PrincipalIdFormat = (output: any, context: __SerdeContext): PrincipalIdFormat => {
  let contents: any = {
    Arn: undefined,
    Statuses: undefined,
  };
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  if (output.statusSet === "") {
    contents.Statuses = [];
  }
  if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = deserializeAws_ec2IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2PrincipalIdFormatList = (output: any, context: __SerdeContext): PrincipalIdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrincipalIdFormat(entry, context);
    });
};

const deserializeAws_ec2PrivateDnsDetails = (output: any, context: __SerdeContext): PrivateDnsDetails => {
  let contents: any = {
    PrivateDnsName: undefined,
  };
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  return contents;
};

const deserializeAws_ec2PrivateDnsDetailsSet = (output: any, context: __SerdeContext): PrivateDnsDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrivateDnsDetails(entry, context);
    });
};

const deserializeAws_ec2PrivateDnsNameConfiguration = (
  output: any,
  context: __SerdeContext
): PrivateDnsNameConfiguration => {
  let contents: any = {
    State: undefined,
    Type: undefined,
    Value: undefined,
    Name: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  return contents;
};

const deserializeAws_ec2PrivateIpAddressSpecification = (
  output: any,
  context: __SerdeContext
): PrivateIpAddressSpecification => {
  let contents: any = {
    Primary: undefined,
    PrivateIpAddress: undefined,
  };
  if (output["primary"] !== undefined) {
    contents.Primary = output["primary"] == "true";
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = output["privateIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2PrivateIpAddressSpecificationList = (
  output: any,
  context: __SerdeContext
): PrivateIpAddressSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PrivateIpAddressSpecification(entry, context);
    });
};

const deserializeAws_ec2ProcessorInfo = (output: any, context: __SerdeContext): ProcessorInfo => {
  let contents: any = {
    SupportedArchitectures: undefined,
    SustainedClockSpeedInGhz: undefined,
  };
  if (output.supportedArchitectures === "") {
    contents.SupportedArchitectures = [];
  }
  if (output["supportedArchitectures"] !== undefined && output["supportedArchitectures"]["item"] !== undefined) {
    contents.SupportedArchitectures = deserializeAws_ec2ArchitectureTypeList(
      __getArrayIfSingleItem(output["supportedArchitectures"]["item"]),
      context
    );
  }
  if (output["sustainedClockSpeedInGhz"] !== undefined) {
    contents.SustainedClockSpeedInGhz = parseFloat(output["sustainedClockSpeedInGhz"]);
  }
  return contents;
};

const deserializeAws_ec2ProductCode = (output: any, context: __SerdeContext): ProductCode => {
  let contents: any = {
    ProductCodeId: undefined,
    ProductCodeType: undefined,
  };
  if (output["productCode"] !== undefined) {
    contents.ProductCodeId = output["productCode"];
  }
  if (output["type"] !== undefined) {
    contents.ProductCodeType = output["type"];
  }
  return contents;
};

const deserializeAws_ec2ProductCodeList = (output: any, context: __SerdeContext): ProductCode[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ProductCode(entry, context);
    });
};

const deserializeAws_ec2PropagatingVgw = (output: any, context: __SerdeContext): PropagatingVgw => {
  let contents: any = {
    GatewayId: undefined,
  };
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = output["gatewayId"];
  }
  return contents;
};

const deserializeAws_ec2PropagatingVgwList = (output: any, context: __SerdeContext): PropagatingVgw[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PropagatingVgw(entry, context);
    });
};

const deserializeAws_ec2ProvisionByoipCidrResult = (output: any, context: __SerdeContext): ProvisionByoipCidrResult => {
  let contents: any = {
    ByoipCidr: undefined,
  };
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

const deserializeAws_ec2ProvisionedBandwidth = (output: any, context: __SerdeContext): ProvisionedBandwidth => {
  let contents: any = {
    ProvisionTime: undefined,
    Provisioned: undefined,
    RequestTime: undefined,
    Requested: undefined,
    Status: undefined,
  };
  if (output["provisionTime"] !== undefined) {
    contents.ProvisionTime = new Date(output["provisionTime"]);
  }
  if (output["provisioned"] !== undefined) {
    contents.Provisioned = output["provisioned"];
  }
  if (output["requestTime"] !== undefined) {
    contents.RequestTime = new Date(output["requestTime"]);
  }
  if (output["requested"] !== undefined) {
    contents.Requested = output["requested"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2PublicIpv4Pool = (output: any, context: __SerdeContext): PublicIpv4Pool => {
  let contents: any = {
    PoolId: undefined,
    Description: undefined,
    PoolAddressRanges: undefined,
    TotalAddressCount: undefined,
    TotalAvailableAddressCount: undefined,
    NetworkBorderGroup: undefined,
    Tags: undefined,
  };
  if (output["poolId"] !== undefined) {
    contents.PoolId = output["poolId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.poolAddressRangeSet === "") {
    contents.PoolAddressRanges = [];
  }
  if (output["poolAddressRangeSet"] !== undefined && output["poolAddressRangeSet"]["item"] !== undefined) {
    contents.PoolAddressRanges = deserializeAws_ec2PublicIpv4PoolRangeSet(
      __getArrayIfSingleItem(output["poolAddressRangeSet"]["item"]),
      context
    );
  }
  if (output["totalAddressCount"] !== undefined) {
    contents.TotalAddressCount = parseInt(output["totalAddressCount"]);
  }
  if (output["totalAvailableAddressCount"] !== undefined) {
    contents.TotalAvailableAddressCount = parseInt(output["totalAvailableAddressCount"]);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = output["networkBorderGroup"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2PublicIpv4PoolRange = (output: any, context: __SerdeContext): PublicIpv4PoolRange => {
  let contents: any = {
    FirstAddress: undefined,
    LastAddress: undefined,
    AddressCount: undefined,
    AvailableAddressCount: undefined,
  };
  if (output["firstAddress"] !== undefined) {
    contents.FirstAddress = output["firstAddress"];
  }
  if (output["lastAddress"] !== undefined) {
    contents.LastAddress = output["lastAddress"];
  }
  if (output["addressCount"] !== undefined) {
    contents.AddressCount = parseInt(output["addressCount"]);
  }
  if (output["availableAddressCount"] !== undefined) {
    contents.AvailableAddressCount = parseInt(output["availableAddressCount"]);
  }
  return contents;
};

const deserializeAws_ec2PublicIpv4PoolRangeSet = (output: any, context: __SerdeContext): PublicIpv4PoolRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PublicIpv4PoolRange(entry, context);
    });
};

const deserializeAws_ec2PublicIpv4PoolSet = (output: any, context: __SerdeContext): PublicIpv4Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2PublicIpv4Pool(entry, context);
    });
};

const deserializeAws_ec2Purchase = (output: any, context: __SerdeContext): Purchase => {
  let contents: any = {
    CurrencyCode: undefined,
    Duration: undefined,
    HostIdSet: undefined,
    HostReservationId: undefined,
    HourlyPrice: undefined,
    InstanceFamily: undefined,
    PaymentOption: undefined,
    UpfrontPrice: undefined,
  };
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["duration"] !== undefined) {
    contents.Duration = parseInt(output["duration"]);
  }
  if (output.hostIdSet === "") {
    contents.HostIdSet = [];
  }
  if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIdSet = deserializeAws_ec2ResponseHostIdSet(
      __getArrayIfSingleItem(output["hostIdSet"]["item"]),
      context
    );
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = output["hostReservationId"];
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = output["instanceFamily"];
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = output["paymentOption"];
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = output["upfrontPrice"];
  }
  return contents;
};

const deserializeAws_ec2PurchasedScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};

const deserializeAws_ec2PurchaseHostReservationResult = (
  output: any,
  context: __SerdeContext
): PurchaseHostReservationResult => {
  let contents: any = {
    ClientToken: undefined,
    CurrencyCode: undefined,
    Purchase: undefined,
    TotalHourlyPrice: undefined,
    TotalUpfrontPrice: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output.purchase === "") {
    contents.Purchase = [];
  }
  if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
    contents.Purchase = deserializeAws_ec2PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
  }
  if (output["totalHourlyPrice"] !== undefined) {
    contents.TotalHourlyPrice = output["totalHourlyPrice"];
  }
  if (output["totalUpfrontPrice"] !== undefined) {
    contents.TotalUpfrontPrice = output["totalUpfrontPrice"];
  }
  return contents;
};

const deserializeAws_ec2PurchaseReservedInstancesOfferingResult = (
  output: any,
  context: __SerdeContext
): PurchaseReservedInstancesOfferingResult => {
  let contents: any = {
    ReservedInstancesId: undefined,
  };
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  return contents;
};

const deserializeAws_ec2PurchaseScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): PurchaseScheduledInstancesResult => {
  let contents: any = {
    ScheduledInstanceSet: undefined,
  };
  if (output.scheduledInstanceSet === "") {
    contents.ScheduledInstanceSet = [];
  }
  if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
    contents.ScheduledInstanceSet = deserializeAws_ec2PurchasedScheduledInstanceSet(
      __getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2PurchaseSet = (output: any, context: __SerdeContext): Purchase[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Purchase(entry, context);
    });
};

const deserializeAws_ec2RecurringCharge = (output: any, context: __SerdeContext): RecurringCharge => {
  let contents: any = {
    Amount: undefined,
    Frequency: undefined,
  };
  if (output["amount"] !== undefined) {
    contents.Amount = parseFloat(output["amount"]);
  }
  if (output["frequency"] !== undefined) {
    contents.Frequency = output["frequency"];
  }
  return contents;
};

const deserializeAws_ec2RecurringChargesList = (output: any, context: __SerdeContext): RecurringCharge[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2RecurringCharge(entry, context);
    });
};

const deserializeAws_ec2Region = (output: any, context: __SerdeContext): Region => {
  let contents: any = {
    Endpoint: undefined,
    RegionName: undefined,
    OptInStatus: undefined,
  };
  if (output["regionEndpoint"] !== undefined) {
    contents.Endpoint = output["regionEndpoint"];
  }
  if (output["regionName"] !== undefined) {
    contents.RegionName = output["regionName"];
  }
  if (output["optInStatus"] !== undefined) {
    contents.OptInStatus = output["optInStatus"];
  }
  return contents;
};

const deserializeAws_ec2RegionList = (output: any, context: __SerdeContext): Region[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Region(entry, context);
    });
};

const deserializeAws_ec2RegisterImageResult = (output: any, context: __SerdeContext): RegisterImageResult => {
  let contents: any = {
    ImageId: undefined,
  };
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  return contents;
};

const deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): RegisterInstanceEventNotificationAttributesResult => {
  let contents: any = {
    InstanceTagAttribute: undefined,
  };
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = deserializeAws_ec2InstanceTagNotificationAttribute(
      output["instanceTagAttribute"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupMembersResult => {
  let contents: any = {
    RegisteredMulticastGroupMembers: undefined,
  };
  if (output["registeredMulticastGroupMembers"] !== undefined) {
    contents.RegisteredMulticastGroupMembers = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers(
      output["registeredMulticastGroupMembers"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupSourcesResult => {
  let contents: any = {
    RegisteredMulticastGroupSources: undefined,
  };
  if (output["registeredMulticastGroupSources"] !== undefined) {
    contents.RegisteredMulticastGroupSources = deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources(
      output["registeredMulticastGroupSources"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayMulticastDomainAssociationsResult => {
  let contents: any = {
    Associations: undefined,
  };
  if (output["associations"] !== undefined) {
    contents.Associations = deserializeAws_ec2TransitGatewayMulticastDomainAssociations(
      output["associations"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayPeeringAttachmentResult => {
  let contents: any = {
    TransitGatewayPeeringAttachment: undefined,
  };
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = deserializeAws_ec2TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayVpcAttachmentResult => {
  let contents: any = {
    TransitGatewayVpcAttachment: undefined,
  };
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = deserializeAws_ec2TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RejectVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): RejectVpcEndpointConnectionsResult => {
  let contents: any = {
    Unsuccessful: undefined,
  };
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RejectVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): RejectVpcPeeringConnectionResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ReleaseHostsResult = (output: any, context: __SerdeContext): ReleaseHostsResult => {
  let contents: any = {
    Successful: undefined,
    Unsuccessful: undefined,
  };
  if (output.successful === "") {
    contents.Successful = [];
  }
  if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = deserializeAws_ec2ResponseHostIdList(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  }
  if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = deserializeAws_ec2UnsuccessfulItemList(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceIamInstanceProfileAssociationResult => {
  let contents: any = {
    IamInstanceProfileAssociation: undefined,
  };
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = deserializeAws_ec2IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ReplaceNetworkAclAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceNetworkAclAssociationResult => {
  let contents: any = {
    NewAssociationId: undefined,
  };
  if (output["newAssociationId"] !== undefined) {
    contents.NewAssociationId = output["newAssociationId"];
  }
  return contents;
};

const deserializeAws_ec2ReplaceRouteTableAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceRouteTableAssociationResult => {
  let contents: any = {
    NewAssociationId: undefined,
    AssociationState: undefined,
  };
  if (output["newAssociationId"] !== undefined) {
    contents.NewAssociationId = output["newAssociationId"];
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

const deserializeAws_ec2ReplaceTransitGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): ReplaceTransitGatewayRouteResult => {
  let contents: any = {
    Route: undefined,
  };
  if (output["route"] !== undefined) {
    contents.Route = deserializeAws_ec2TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

const deserializeAws_ec2RequestSpotFleetResponse = (output: any, context: __SerdeContext): RequestSpotFleetResponse => {
  let contents: any = {
    SpotFleetRequestId: undefined,
  };
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  return contents;
};

const deserializeAws_ec2RequestSpotInstancesResult = (
  output: any,
  context: __SerdeContext
): RequestSpotInstancesResult => {
  let contents: any = {
    SpotInstanceRequests: undefined,
  };
  if (output.spotInstanceRequestSet === "") {
    contents.SpotInstanceRequests = [];
  }
  if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.SpotInstanceRequests = deserializeAws_ec2SpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2Reservation = (output: any, context: __SerdeContext): Reservation => {
  let contents: any = {
    Groups: undefined,
    Instances: undefined,
    OwnerId: undefined,
    RequesterId: undefined,
    ReservationId: undefined,
  };
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output.instancesSet === "") {
    contents.Instances = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.Instances = deserializeAws_ec2InstanceList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["requesterId"] !== undefined) {
    contents.RequesterId = output["requesterId"];
  }
  if (output["reservationId"] !== undefined) {
    contents.ReservationId = output["reservationId"];
  }
  return contents;
};

const deserializeAws_ec2ReservationList = (output: any, context: __SerdeContext): Reservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Reservation(entry, context);
    });
};

const deserializeAws_ec2ReservationValue = (output: any, context: __SerdeContext): ReservationValue => {
  let contents: any = {
    HourlyPrice: undefined,
    RemainingTotalValue: undefined,
    RemainingUpfrontValue: undefined,
  };
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["remainingTotalValue"] !== undefined) {
    contents.RemainingTotalValue = output["remainingTotalValue"];
  }
  if (output["remainingUpfrontValue"] !== undefined) {
    contents.RemainingUpfrontValue = output["remainingUpfrontValue"];
  }
  return contents;
};

const deserializeAws_ec2ReservedInstanceReservationValue = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue => {
  let contents: any = {
    ReservationValue: undefined,
    ReservedInstanceId: undefined,
  };
  if (output["reservationValue"] !== undefined) {
    contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
  }
  if (output["reservedInstanceId"] !== undefined) {
    contents.ReservedInstanceId = output["reservedInstanceId"];
  }
  return contents;
};

const deserializeAws_ec2ReservedInstanceReservationValueSet = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstanceReservationValue(entry, context);
    });
};

const deserializeAws_ec2ReservedInstances = (output: any, context: __SerdeContext): ReservedInstances => {
  let contents: any = {
    AvailabilityZone: undefined,
    Duration: undefined,
    End: undefined,
    FixedPrice: undefined,
    InstanceCount: undefined,
    InstanceType: undefined,
    ProductDescription: undefined,
    ReservedInstancesId: undefined,
    Start: undefined,
    State: undefined,
    UsagePrice: undefined,
    CurrencyCode: undefined,
    InstanceTenancy: undefined,
    OfferingClass: undefined,
    OfferingType: undefined,
    RecurringCharges: undefined,
    Scope: undefined,
    Tags: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["duration"] !== undefined) {
    contents.Duration = parseInt(output["duration"]);
  }
  if (output["end"] !== undefined) {
    contents.End = new Date(output["end"]);
  }
  if (output["fixedPrice"] !== undefined) {
    contents.FixedPrice = parseFloat(output["fixedPrice"]);
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = parseInt(output["instanceCount"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = output["productDescription"];
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  if (output["start"] !== undefined) {
    contents.Start = new Date(output["start"]);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["usagePrice"] !== undefined) {
    contents.UsagePrice = parseFloat(output["usagePrice"]);
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = output["instanceTenancy"];
  }
  if (output["offeringClass"] !== undefined) {
    contents.OfferingClass = output["offeringClass"];
  }
  if (output["offeringType"] !== undefined) {
    contents.OfferingType = output["offeringType"];
  }
  if (output.recurringCharges === "") {
    contents.RecurringCharges = [];
  }
  if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
    contents.RecurringCharges = deserializeAws_ec2RecurringChargesList(
      __getArrayIfSingleItem(output["recurringCharges"]["item"]),
      context
    );
  }
  if (output["scope"] !== undefined) {
    contents.Scope = output["scope"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesConfiguration = (
  output: any,
  context: __SerdeContext
): ReservedInstancesConfiguration => {
  let contents: any = {
    AvailabilityZone: undefined,
    InstanceCount: undefined,
    InstanceType: undefined,
    Platform: undefined,
    Scope: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = parseInt(output["instanceCount"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["scope"] !== undefined) {
    contents.Scope = output["scope"];
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesId = (output: any, context: __SerdeContext): ReservedInstancesId => {
  let contents: any = {
    ReservedInstancesId: undefined,
  };
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesList = (output: any, context: __SerdeContext): ReservedInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstances(entry, context);
    });
};

const deserializeAws_ec2ReservedInstancesListing = (output: any, context: __SerdeContext): ReservedInstancesListing => {
  let contents: any = {
    ClientToken: undefined,
    CreateDate: undefined,
    InstanceCounts: undefined,
    PriceSchedules: undefined,
    ReservedInstancesId: undefined,
    ReservedInstancesListingId: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Tags: undefined,
    UpdateDate: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = new Date(output["createDate"]);
  }
  if (output.instanceCounts === "") {
    contents.InstanceCounts = [];
  }
  if (output["instanceCounts"] !== undefined && output["instanceCounts"]["item"] !== undefined) {
    contents.InstanceCounts = deserializeAws_ec2InstanceCountList(
      __getArrayIfSingleItem(output["instanceCounts"]["item"]),
      context
    );
  }
  if (output.priceSchedules === "") {
    contents.PriceSchedules = [];
  }
  if (output["priceSchedules"] !== undefined && output["priceSchedules"]["item"] !== undefined) {
    contents.PriceSchedules = deserializeAws_ec2PriceScheduleList(
      __getArrayIfSingleItem(output["priceSchedules"]["item"]),
      context
    );
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  if (output["reservedInstancesListingId"] !== undefined) {
    contents.ReservedInstancesListingId = output["reservedInstancesListingId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["updateDate"] !== undefined) {
    contents.UpdateDate = new Date(output["updateDate"]);
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesListingList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesListing[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstancesListing(entry, context);
    });
};

const deserializeAws_ec2ReservedInstancesModification = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModification => {
  let contents: any = {
    ClientToken: undefined,
    CreateDate: undefined,
    EffectiveDate: undefined,
    ModificationResults: undefined,
    ReservedInstancesIds: undefined,
    ReservedInstancesModificationId: undefined,
    Status: undefined,
    StatusMessage: undefined,
    UpdateDate: undefined,
  };
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = new Date(output["createDate"]);
  }
  if (output["effectiveDate"] !== undefined) {
    contents.EffectiveDate = new Date(output["effectiveDate"]);
  }
  if (output.modificationResultSet === "") {
    contents.ModificationResults = [];
  }
  if (output["modificationResultSet"] !== undefined && output["modificationResultSet"]["item"] !== undefined) {
    contents.ModificationResults = deserializeAws_ec2ReservedInstancesModificationResultList(
      __getArrayIfSingleItem(output["modificationResultSet"]["item"]),
      context
    );
  }
  if (output.reservedInstancesSet === "") {
    contents.ReservedInstancesIds = [];
  }
  if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
    contents.ReservedInstancesIds = deserializeAws_ec2ReservedIntancesIds(
      __getArrayIfSingleItem(output["reservedInstancesSet"]["item"]),
      context
    );
  }
  if (output["reservedInstancesModificationId"] !== undefined) {
    contents.ReservedInstancesModificationId = output["reservedInstancesModificationId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["updateDate"] !== undefined) {
    contents.UpdateDate = new Date(output["updateDate"]);
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesModificationList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstancesModification(entry, context);
    });
};

const deserializeAws_ec2ReservedInstancesModificationResult = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult => {
  let contents: any = {
    ReservedInstancesId: undefined,
    TargetConfiguration: undefined,
  };
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  if (output["targetConfiguration"] !== undefined) {
    contents.TargetConfiguration = deserializeAws_ec2ReservedInstancesConfiguration(
      output["targetConfiguration"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesModificationResultList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstancesModificationResult(entry, context);
    });
};

const deserializeAws_ec2ReservedInstancesOffering = (
  output: any,
  context: __SerdeContext
): ReservedInstancesOffering => {
  let contents: any = {
    AvailabilityZone: undefined,
    Duration: undefined,
    FixedPrice: undefined,
    InstanceType: undefined,
    ProductDescription: undefined,
    ReservedInstancesOfferingId: undefined,
    UsagePrice: undefined,
    CurrencyCode: undefined,
    InstanceTenancy: undefined,
    Marketplace: undefined,
    OfferingClass: undefined,
    OfferingType: undefined,
    PricingDetails: undefined,
    RecurringCharges: undefined,
    Scope: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["duration"] !== undefined) {
    contents.Duration = parseInt(output["duration"]);
  }
  if (output["fixedPrice"] !== undefined) {
    contents.FixedPrice = parseFloat(output["fixedPrice"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = output["productDescription"];
  }
  if (output["reservedInstancesOfferingId"] !== undefined) {
    contents.ReservedInstancesOfferingId = output["reservedInstancesOfferingId"];
  }
  if (output["usagePrice"] !== undefined) {
    contents.UsagePrice = parseFloat(output["usagePrice"]);
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = output["currencyCode"];
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = output["instanceTenancy"];
  }
  if (output["marketplace"] !== undefined) {
    contents.Marketplace = output["marketplace"] == "true";
  }
  if (output["offeringClass"] !== undefined) {
    contents.OfferingClass = output["offeringClass"];
  }
  if (output["offeringType"] !== undefined) {
    contents.OfferingType = output["offeringType"];
  }
  if (output.pricingDetailsSet === "") {
    contents.PricingDetails = [];
  }
  if (output["pricingDetailsSet"] !== undefined && output["pricingDetailsSet"]["item"] !== undefined) {
    contents.PricingDetails = deserializeAws_ec2PricingDetailsList(
      __getArrayIfSingleItem(output["pricingDetailsSet"]["item"]),
      context
    );
  }
  if (output.recurringCharges === "") {
    contents.RecurringCharges = [];
  }
  if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
    contents.RecurringCharges = deserializeAws_ec2RecurringChargesList(
      __getArrayIfSingleItem(output["recurringCharges"]["item"]),
      context
    );
  }
  if (output["scope"] !== undefined) {
    contents.Scope = output["scope"];
  }
  return contents;
};

const deserializeAws_ec2ReservedInstancesOfferingList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstancesOffering(entry, context);
    });
};

const deserializeAws_ec2ReservedIntancesIds = (output: any, context: __SerdeContext): ReservedInstancesId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ReservedInstancesId(entry, context);
    });
};

const deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult = (
  output: any,
  context: __SerdeContext
): ResetEbsDefaultKmsKeyIdResult => {
  let contents: any = {
    KmsKeyId: undefined,
  };
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  return contents;
};

const deserializeAws_ec2ResetFpgaImageAttributeResult = (
  output: any,
  context: __SerdeContext
): ResetFpgaImageAttributeResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2ResponseError = (output: any, context: __SerdeContext): ResponseError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ResponseHostIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2ResponseHostIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2ResponseLaunchTemplateData = (
  output: any,
  context: __SerdeContext
): ResponseLaunchTemplateData => {
  let contents: any = {
    KernelId: undefined,
    EbsOptimized: undefined,
    IamInstanceProfile: undefined,
    BlockDeviceMappings: undefined,
    NetworkInterfaces: undefined,
    ImageId: undefined,
    InstanceType: undefined,
    KeyName: undefined,
    Monitoring: undefined,
    Placement: undefined,
    RamDiskId: undefined,
    DisableApiTermination: undefined,
    InstanceInitiatedShutdownBehavior: undefined,
    UserData: undefined,
    TagSpecifications: undefined,
    ElasticGpuSpecifications: undefined,
    ElasticInferenceAccelerators: undefined,
    SecurityGroupIds: undefined,
    SecurityGroups: undefined,
    InstanceMarketOptions: undefined,
    CreditSpecification: undefined,
    CpuOptions: undefined,
    CapacityReservationSpecification: undefined,
    LicenseSpecifications: undefined,
    HibernationOptions: undefined,
    MetadataOptions: undefined,
    EnclaveOptions: undefined,
  };
  if (output["kernelId"] !== undefined) {
    contents.KernelId = output["kernelId"];
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = output["ebsOptimized"] == "true";
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification(
      output["iamInstanceProfile"],
      context
    );
  }
  if (output.blockDeviceMappingSet === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMappingSet"] !== undefined && output["blockDeviceMappingSet"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2LaunchTemplateBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMappingSet"]["item"]),
      context
    );
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  }
  if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = deserializeAws_ec2LaunchTemplatesMonitoring(output["monitoring"], context);
  }
  if (output["placement"] !== undefined) {
    contents.Placement = deserializeAws_ec2LaunchTemplatePlacement(output["placement"], context);
  }
  if (output["ramDiskId"] !== undefined) {
    contents.RamDiskId = output["ramDiskId"];
  }
  if (output["disableApiTermination"] !== undefined) {
    contents.DisableApiTermination = output["disableApiTermination"] == "true";
  }
  if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
    contents.InstanceInitiatedShutdownBehavior = output["instanceInitiatedShutdownBehavior"];
  }
  if (output["userData"] !== undefined) {
    contents.UserData = output["userData"];
  }
  if (output.tagSpecificationSet === "") {
    contents.TagSpecifications = [];
  }
  if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
    contents.TagSpecifications = deserializeAws_ec2LaunchTemplateTagSpecificationList(
      __getArrayIfSingleItem(output["tagSpecificationSet"]["item"]),
      context
    );
  }
  if (output.elasticGpuSpecificationSet === "") {
    contents.ElasticGpuSpecifications = [];
  }
  if (
    output["elasticGpuSpecificationSet"] !== undefined &&
    output["elasticGpuSpecificationSet"]["item"] !== undefined
  ) {
    contents.ElasticGpuSpecifications = deserializeAws_ec2ElasticGpuSpecificationResponseList(
      __getArrayIfSingleItem(output["elasticGpuSpecificationSet"]["item"]),
      context
    );
  }
  if (output.elasticInferenceAcceleratorSet === "") {
    contents.ElasticInferenceAccelerators = [];
  }
  if (
    output["elasticInferenceAcceleratorSet"] !== undefined &&
    output["elasticInferenceAcceleratorSet"]["item"] !== undefined
  ) {
    contents.ElasticInferenceAccelerators = deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList(
      __getArrayIfSingleItem(output["elasticInferenceAcceleratorSet"]["item"]),
      context
    );
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  }
  if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output.securityGroupSet === "") {
    contents.SecurityGroups = [];
  }
  if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["securityGroupSet"]["item"]),
      context
    );
  }
  if (output["instanceMarketOptions"] !== undefined) {
    contents.InstanceMarketOptions = deserializeAws_ec2LaunchTemplateInstanceMarketOptions(
      output["instanceMarketOptions"],
      context
    );
  }
  if (output["creditSpecification"] !== undefined) {
    contents.CreditSpecification = deserializeAws_ec2CreditSpecification(output["creditSpecification"], context);
  }
  if (output["cpuOptions"] !== undefined) {
    contents.CpuOptions = deserializeAws_ec2LaunchTemplateCpuOptions(output["cpuOptions"], context);
  }
  if (output["capacityReservationSpecification"] !== undefined) {
    contents.CapacityReservationSpecification = deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse(
      output["capacityReservationSpecification"],
      context
    );
  }
  if (output.licenseSet === "") {
    contents.LicenseSpecifications = [];
  }
  if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
    contents.LicenseSpecifications = deserializeAws_ec2LaunchTemplateLicenseList(
      __getArrayIfSingleItem(output["licenseSet"]["item"]),
      context
    );
  }
  if (output["hibernationOptions"] !== undefined) {
    contents.HibernationOptions = deserializeAws_ec2LaunchTemplateHibernationOptions(
      output["hibernationOptions"],
      context
    );
  }
  if (output["metadataOptions"] !== undefined) {
    contents.MetadataOptions = deserializeAws_ec2LaunchTemplateInstanceMetadataOptions(
      output["metadataOptions"],
      context
    );
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = deserializeAws_ec2LaunchTemplateEnclaveOptions(output["enclaveOptions"], context);
  }
  return contents;
};

const deserializeAws_ec2RestoreAddressToClassicResult = (
  output: any,
  context: __SerdeContext
): RestoreAddressToClassicResult => {
  let contents: any = {
    PublicIp: undefined,
    Status: undefined,
  };
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = output["publicIp"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2RestoreManagedPrefixListVersionResult = (
  output: any,
  context: __SerdeContext
): RestoreManagedPrefixListVersionResult => {
  let contents: any = {
    PrefixList: undefined,
  };
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = deserializeAws_ec2ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

const deserializeAws_ec2RevokeClientVpnIngressResult = (
  output: any,
  context: __SerdeContext
): RevokeClientVpnIngressResult => {
  let contents: any = {
    Status: undefined,
  };
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

const deserializeAws_ec2RevokeSecurityGroupEgressResult = (
  output: any,
  context: __SerdeContext
): RevokeSecurityGroupEgressResult => {
  let contents: any = {
    Return: undefined,
    UnknownIpPermissions: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  if (output.unknownIpPermissionSet === "") {
    contents.UnknownIpPermissions = [];
  }
  if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
    contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList(
      __getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RevokeSecurityGroupIngressResult = (
  output: any,
  context: __SerdeContext
): RevokeSecurityGroupIngressResult => {
  let contents: any = {
    Return: undefined,
    UnknownIpPermissions: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  if (output.unknownIpPermissionSet === "") {
    contents.UnknownIpPermissions = [];
  }
  if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
    contents.UnknownIpPermissions = deserializeAws_ec2IpPermissionList(
      __getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2RootDeviceTypeList = (output: any, context: __SerdeContext): (RootDeviceType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Route = (output: any, context: __SerdeContext): Route => {
  let contents: any = {
    DestinationCidrBlock: undefined,
    DestinationIpv6CidrBlock: undefined,
    DestinationPrefixListId: undefined,
    EgressOnlyInternetGatewayId: undefined,
    GatewayId: undefined,
    InstanceId: undefined,
    InstanceOwnerId: undefined,
    NatGatewayId: undefined,
    TransitGatewayId: undefined,
    LocalGatewayId: undefined,
    CarrierGatewayId: undefined,
    NetworkInterfaceId: undefined,
    Origin: undefined,
    State: undefined,
    VpcPeeringConnectionId: undefined,
  };
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = output["destinationCidrBlock"];
  }
  if (output["destinationIpv6CidrBlock"] !== undefined) {
    contents.DestinationIpv6CidrBlock = output["destinationIpv6CidrBlock"];
  }
  if (output["destinationPrefixListId"] !== undefined) {
    contents.DestinationPrefixListId = output["destinationPrefixListId"];
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = output["egressOnlyInternetGatewayId"];
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = output["gatewayId"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["instanceOwnerId"] !== undefined) {
    contents.InstanceOwnerId = output["instanceOwnerId"];
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = output["natGatewayId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = output["localGatewayId"];
  }
  if (output["carrierGatewayId"] !== undefined) {
    contents.CarrierGatewayId = output["carrierGatewayId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["origin"] !== undefined) {
    contents.Origin = output["origin"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = output["vpcPeeringConnectionId"];
  }
  return contents;
};

const deserializeAws_ec2RouteList = (output: any, context: __SerdeContext): Route[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Route(entry, context);
    });
};

const deserializeAws_ec2RouteTable = (output: any, context: __SerdeContext): RouteTable => {
  let contents: any = {
    Associations: undefined,
    PropagatingVgws: undefined,
    RouteTableId: undefined,
    Routes: undefined,
    Tags: undefined,
    VpcId: undefined,
    OwnerId: undefined,
  };
  if (output.associationSet === "") {
    contents.Associations = [];
  }
  if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
    contents.Associations = deserializeAws_ec2RouteTableAssociationList(
      __getArrayIfSingleItem(output["associationSet"]["item"]),
      context
    );
  }
  if (output.propagatingVgwSet === "") {
    contents.PropagatingVgws = [];
  }
  if (output["propagatingVgwSet"] !== undefined && output["propagatingVgwSet"]["item"] !== undefined) {
    contents.PropagatingVgws = deserializeAws_ec2PropagatingVgwList(
      __getArrayIfSingleItem(output["propagatingVgwSet"]["item"]),
      context
    );
  }
  if (output["routeTableId"] !== undefined) {
    contents.RouteTableId = output["routeTableId"];
  }
  if (output.routeSet === "") {
    contents.Routes = [];
  }
  if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = deserializeAws_ec2RouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  return contents;
};

const deserializeAws_ec2RouteTableAssociation = (output: any, context: __SerdeContext): RouteTableAssociation => {
  let contents: any = {
    Main: undefined,
    RouteTableAssociationId: undefined,
    RouteTableId: undefined,
    SubnetId: undefined,
    GatewayId: undefined,
    AssociationState: undefined,
  };
  if (output["main"] !== undefined) {
    contents.Main = output["main"] == "true";
  }
  if (output["routeTableAssociationId"] !== undefined) {
    contents.RouteTableAssociationId = output["routeTableAssociationId"];
  }
  if (output["routeTableId"] !== undefined) {
    contents.RouteTableId = output["routeTableId"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = output["gatewayId"];
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = deserializeAws_ec2RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

const deserializeAws_ec2RouteTableAssociationList = (output: any, context: __SerdeContext): RouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2RouteTableAssociation(entry, context);
    });
};

const deserializeAws_ec2RouteTableAssociationState = (
  output: any,
  context: __SerdeContext
): RouteTableAssociationState => {
  let contents: any = {
    State: undefined,
    StatusMessage: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  return contents;
};

const deserializeAws_ec2RouteTableList = (output: any, context: __SerdeContext): RouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2RouteTable(entry, context);
    });
};

const deserializeAws_ec2RunInstancesMonitoringEnabled = (
  output: any,
  context: __SerdeContext
): RunInstancesMonitoringEnabled => {
  let contents: any = {
    Enabled: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  return contents;
};

const deserializeAws_ec2RunScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): RunScheduledInstancesResult => {
  let contents: any = {
    InstanceIdSet: undefined,
  };
  if (output.instanceIdSet === "") {
    contents.InstanceIdSet = [];
  }
  if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
    contents.InstanceIdSet = deserializeAws_ec2InstanceIdSet(
      __getArrayIfSingleItem(output["instanceIdSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2S3Storage = (output: any, context: __SerdeContext): S3Storage => {
  let contents: any = {
    AWSAccessKeyId: undefined,
    Bucket: undefined,
    Prefix: undefined,
    UploadPolicy: undefined,
    UploadPolicySignature: undefined,
  };
  if (output["AWSAccessKeyId"] !== undefined) {
    contents.AWSAccessKeyId = output["AWSAccessKeyId"];
  }
  if (output["bucket"] !== undefined) {
    contents.Bucket = output["bucket"];
  }
  if (output["prefix"] !== undefined) {
    contents.Prefix = output["prefix"];
  }
  if (output["uploadPolicy"] !== undefined) {
    contents.UploadPolicy = context.base64Decoder(output["uploadPolicy"]);
  }
  if (output["uploadPolicySignature"] !== undefined) {
    contents.UploadPolicySignature = output["uploadPolicySignature"];
  }
  return contents;
};

const deserializeAws_ec2ScheduledInstance = (output: any, context: __SerdeContext): ScheduledInstance => {
  let contents: any = {
    AvailabilityZone: undefined,
    CreateDate: undefined,
    HourlyPrice: undefined,
    InstanceCount: undefined,
    InstanceType: undefined,
    NetworkPlatform: undefined,
    NextSlotStartTime: undefined,
    Platform: undefined,
    PreviousSlotEndTime: undefined,
    Recurrence: undefined,
    ScheduledInstanceId: undefined,
    SlotDurationInHours: undefined,
    TermEndDate: undefined,
    TermStartDate: undefined,
    TotalScheduledInstanceHours: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = new Date(output["createDate"]);
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = parseInt(output["instanceCount"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["networkPlatform"] !== undefined) {
    contents.NetworkPlatform = output["networkPlatform"];
  }
  if (output["nextSlotStartTime"] !== undefined) {
    contents.NextSlotStartTime = new Date(output["nextSlotStartTime"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["previousSlotEndTime"] !== undefined) {
    contents.PreviousSlotEndTime = new Date(output["previousSlotEndTime"]);
  }
  if (output["recurrence"] !== undefined) {
    contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
  }
  if (output["scheduledInstanceId"] !== undefined) {
    contents.ScheduledInstanceId = output["scheduledInstanceId"];
  }
  if (output["slotDurationInHours"] !== undefined) {
    contents.SlotDurationInHours = parseInt(output["slotDurationInHours"]);
  }
  if (output["termEndDate"] !== undefined) {
    contents.TermEndDate = new Date(output["termEndDate"]);
  }
  if (output["termStartDate"] !== undefined) {
    contents.TermStartDate = new Date(output["termStartDate"]);
  }
  if (output["totalScheduledInstanceHours"] !== undefined) {
    contents.TotalScheduledInstanceHours = parseInt(output["totalScheduledInstanceHours"]);
  }
  return contents;
};

const deserializeAws_ec2ScheduledInstanceAvailability = (
  output: any,
  context: __SerdeContext
): ScheduledInstanceAvailability => {
  let contents: any = {
    AvailabilityZone: undefined,
    AvailableInstanceCount: undefined,
    FirstSlotStartTime: undefined,
    HourlyPrice: undefined,
    InstanceType: undefined,
    MaxTermDurationInDays: undefined,
    MinTermDurationInDays: undefined,
    NetworkPlatform: undefined,
    Platform: undefined,
    PurchaseToken: undefined,
    Recurrence: undefined,
    SlotDurationInHours: undefined,
    TotalScheduledInstanceHours: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = parseInt(output["availableInstanceCount"]);
  }
  if (output["firstSlotStartTime"] !== undefined) {
    contents.FirstSlotStartTime = new Date(output["firstSlotStartTime"]);
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = output["hourlyPrice"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["maxTermDurationInDays"] !== undefined) {
    contents.MaxTermDurationInDays = parseInt(output["maxTermDurationInDays"]);
  }
  if (output["minTermDurationInDays"] !== undefined) {
    contents.MinTermDurationInDays = parseInt(output["minTermDurationInDays"]);
  }
  if (output["networkPlatform"] !== undefined) {
    contents.NetworkPlatform = output["networkPlatform"];
  }
  if (output["platform"] !== undefined) {
    contents.Platform = output["platform"];
  }
  if (output["purchaseToken"] !== undefined) {
    contents.PurchaseToken = output["purchaseToken"];
  }
  if (output["recurrence"] !== undefined) {
    contents.Recurrence = deserializeAws_ec2ScheduledInstanceRecurrence(output["recurrence"], context);
  }
  if (output["slotDurationInHours"] !== undefined) {
    contents.SlotDurationInHours = parseInt(output["slotDurationInHours"]);
  }
  if (output["totalScheduledInstanceHours"] !== undefined) {
    contents.TotalScheduledInstanceHours = parseInt(output["totalScheduledInstanceHours"]);
  }
  return contents;
};

const deserializeAws_ec2ScheduledInstanceAvailabilitySet = (
  output: any,
  context: __SerdeContext
): ScheduledInstanceAvailability[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ScheduledInstanceAvailability(entry, context);
    });
};

const deserializeAws_ec2ScheduledInstanceRecurrence = (
  output: any,
  context: __SerdeContext
): ScheduledInstanceRecurrence => {
  let contents: any = {
    Frequency: undefined,
    Interval: undefined,
    OccurrenceDaySet: undefined,
    OccurrenceRelativeToEnd: undefined,
    OccurrenceUnit: undefined,
  };
  if (output["frequency"] !== undefined) {
    contents.Frequency = output["frequency"];
  }
  if (output["interval"] !== undefined) {
    contents.Interval = parseInt(output["interval"]);
  }
  if (output.occurrenceDaySet === "") {
    contents.OccurrenceDaySet = [];
  }
  if (output["occurrenceDaySet"] !== undefined && output["occurrenceDaySet"]["item"] !== undefined) {
    contents.OccurrenceDaySet = deserializeAws_ec2OccurrenceDaySet(
      __getArrayIfSingleItem(output["occurrenceDaySet"]["item"]),
      context
    );
  }
  if (output["occurrenceRelativeToEnd"] !== undefined) {
    contents.OccurrenceRelativeToEnd = output["occurrenceRelativeToEnd"] == "true";
  }
  if (output["occurrenceUnit"] !== undefined) {
    contents.OccurrenceUnit = output["occurrenceUnit"];
  }
  return contents;
};

const deserializeAws_ec2ScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ScheduledInstance(entry, context);
    });
};

const deserializeAws_ec2SearchLocalGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): SearchLocalGatewayRoutesResult => {
  let contents: any = {
    Routes: undefined,
    NextToken: undefined,
  };
  if (output.routeSet === "") {
    contents.Routes = [];
  }
  if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = deserializeAws_ec2LocalGatewayRouteList(
      __getArrayIfSingleItem(output["routeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayMulticastGroupsResult => {
  let contents: any = {
    MulticastGroups: undefined,
    NextToken: undefined,
  };
  if (output.multicastGroups === "") {
    contents.MulticastGroups = [];
  }
  if (output["multicastGroups"] !== undefined && output["multicastGroups"]["item"] !== undefined) {
    contents.MulticastGroups = deserializeAws_ec2TransitGatewayMulticastGroupList(
      __getArrayIfSingleItem(output["multicastGroups"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = output["nextToken"];
  }
  return contents;
};

const deserializeAws_ec2SearchTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayRoutesResult => {
  let contents: any = {
    Routes: undefined,
    AdditionalRoutesAvailable: undefined,
  };
  if (output.routeSet === "") {
    contents.Routes = [];
  }
  if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = deserializeAws_ec2TransitGatewayRouteList(
      __getArrayIfSingleItem(output["routeSet"]["item"]),
      context
    );
  }
  if (output["additionalRoutesAvailable"] !== undefined) {
    contents.AdditionalRoutesAvailable = output["additionalRoutesAvailable"] == "true";
  }
  return contents;
};

const deserializeAws_ec2SecurityGroup = (output: any, context: __SerdeContext): SecurityGroup => {
  let contents: any = {
    Description: undefined,
    GroupName: undefined,
    IpPermissions: undefined,
    OwnerId: undefined,
    GroupId: undefined,
    IpPermissionsEgress: undefined,
    Tags: undefined,
    VpcId: undefined,
  };
  if (output["groupDescription"] !== undefined) {
    contents.Description = output["groupDescription"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output.ipPermissions === "") {
    contents.IpPermissions = [];
  }
  if (output["ipPermissions"] !== undefined && output["ipPermissions"]["item"] !== undefined) {
    contents.IpPermissions = deserializeAws_ec2IpPermissionList(
      __getArrayIfSingleItem(output["ipPermissions"]["item"]),
      context
    );
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output.ipPermissionsEgress === "") {
    contents.IpPermissionsEgress = [];
  }
  if (output["ipPermissionsEgress"] !== undefined && output["ipPermissionsEgress"]["item"] !== undefined) {
    contents.IpPermissionsEgress = deserializeAws_ec2IpPermissionList(
      __getArrayIfSingleItem(output["ipPermissionsEgress"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2SecurityGroupIdentifier = (output: any, context: __SerdeContext): SecurityGroupIdentifier => {
  let contents: any = {
    GroupId: undefined,
    GroupName: undefined,
  };
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  return contents;
};

const deserializeAws_ec2SecurityGroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2SecurityGroupList = (output: any, context: __SerdeContext): SecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SecurityGroup(entry, context);
    });
};

const deserializeAws_ec2SecurityGroupReference = (output: any, context: __SerdeContext): SecurityGroupReference => {
  let contents: any = {
    GroupId: undefined,
    ReferencingVpcId: undefined,
    VpcPeeringConnectionId: undefined,
  };
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output["referencingVpcId"] !== undefined) {
    contents.ReferencingVpcId = output["referencingVpcId"];
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = output["vpcPeeringConnectionId"];
  }
  return contents;
};

const deserializeAws_ec2SecurityGroupReferences = (output: any, context: __SerdeContext): SecurityGroupReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SecurityGroupReference(entry, context);
    });
};

const deserializeAws_ec2ServiceConfiguration = (output: any, context: __SerdeContext): ServiceConfiguration => {
  let contents: any = {
    ServiceType: undefined,
    ServiceId: undefined,
    ServiceName: undefined,
    ServiceState: undefined,
    AvailabilityZones: undefined,
    AcceptanceRequired: undefined,
    ManagesVpcEndpoints: undefined,
    NetworkLoadBalancerArns: undefined,
    GatewayLoadBalancerArns: undefined,
    BaseEndpointDnsNames: undefined,
    PrivateDnsName: undefined,
    PrivateDnsNameConfiguration: undefined,
    Tags: undefined,
  };
  if (output.serviceType === "") {
    contents.ServiceType = [];
  }
  if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
    contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet(
      __getArrayIfSingleItem(output["serviceType"]["item"]),
      context
    );
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = output["serviceId"];
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = output["serviceName"];
  }
  if (output["serviceState"] !== undefined) {
    contents.ServiceState = output["serviceState"];
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  }
  if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output["acceptanceRequired"] !== undefined) {
    contents.AcceptanceRequired = output["acceptanceRequired"] == "true";
  }
  if (output["managesVpcEndpoints"] !== undefined) {
    contents.ManagesVpcEndpoints = output["managesVpcEndpoints"] == "true";
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents.NetworkLoadBalancerArns = [];
  }
  if (output["networkLoadBalancerArnSet"] !== undefined && output["networkLoadBalancerArnSet"]["item"] !== undefined) {
    contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents.GatewayLoadBalancerArns = [];
  }
  if (output["gatewayLoadBalancerArnSet"] !== undefined && output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
    contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents.BaseEndpointDnsNames = [];
  }
  if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
    contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]),
      context
    );
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output["privateDnsNameConfiguration"] !== undefined) {
    contents.PrivateDnsNameConfiguration = deserializeAws_ec2PrivateDnsNameConfiguration(
      output["privateDnsNameConfiguration"],
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ServiceConfigurationSet = (output: any, context: __SerdeContext): ServiceConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ServiceConfiguration(entry, context);
    });
};

const deserializeAws_ec2ServiceDetail = (output: any, context: __SerdeContext): ServiceDetail => {
  let contents: any = {
    ServiceName: undefined,
    ServiceId: undefined,
    ServiceType: undefined,
    AvailabilityZones: undefined,
    Owner: undefined,
    BaseEndpointDnsNames: undefined,
    PrivateDnsName: undefined,
    PrivateDnsNames: undefined,
    VpcEndpointPolicySupported: undefined,
    AcceptanceRequired: undefined,
    ManagesVpcEndpoints: undefined,
    Tags: undefined,
    PrivateDnsNameVerificationState: undefined,
  };
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = output["serviceName"];
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = output["serviceId"];
  }
  if (output.serviceType === "") {
    contents.ServiceType = [];
  }
  if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
    contents.ServiceType = deserializeAws_ec2ServiceTypeDetailSet(
      __getArrayIfSingleItem(output["serviceType"]["item"]),
      context
    );
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  }
  if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output["owner"] !== undefined) {
    contents.Owner = output["owner"];
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents.BaseEndpointDnsNames = [];
  }
  if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
    contents.BaseEndpointDnsNames = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]),
      context
    );
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = output["privateDnsName"];
  }
  if (output.privateDnsNameSet === "") {
    contents.PrivateDnsNames = [];
  }
  if (output["privateDnsNameSet"] !== undefined && output["privateDnsNameSet"]["item"] !== undefined) {
    contents.PrivateDnsNames = deserializeAws_ec2PrivateDnsDetailsSet(
      __getArrayIfSingleItem(output["privateDnsNameSet"]["item"]),
      context
    );
  }
  if (output["vpcEndpointPolicySupported"] !== undefined) {
    contents.VpcEndpointPolicySupported = output["vpcEndpointPolicySupported"] == "true";
  }
  if (output["acceptanceRequired"] !== undefined) {
    contents.AcceptanceRequired = output["acceptanceRequired"] == "true";
  }
  if (output["managesVpcEndpoints"] !== undefined) {
    contents.ManagesVpcEndpoints = output["managesVpcEndpoints"] == "true";
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["privateDnsNameVerificationState"] !== undefined) {
    contents.PrivateDnsNameVerificationState = output["privateDnsNameVerificationState"];
  }
  return contents;
};

const deserializeAws_ec2ServiceDetailSet = (output: any, context: __SerdeContext): ServiceDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ServiceDetail(entry, context);
    });
};

const deserializeAws_ec2ServiceTypeDetail = (output: any, context: __SerdeContext): ServiceTypeDetail => {
  let contents: any = {
    ServiceType: undefined,
  };
  if (output["serviceType"] !== undefined) {
    contents.ServiceType = output["serviceType"];
  }
  return contents;
};

const deserializeAws_ec2ServiceTypeDetailSet = (output: any, context: __SerdeContext): ServiceTypeDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2ServiceTypeDetail(entry, context);
    });
};

const deserializeAws_ec2Snapshot = (output: any, context: __SerdeContext): Snapshot => {
  let contents: any = {
    DataEncryptionKeyId: undefined,
    Description: undefined,
    Encrypted: undefined,
    KmsKeyId: undefined,
    OwnerId: undefined,
    Progress: undefined,
    SnapshotId: undefined,
    StartTime: undefined,
    State: undefined,
    StateMessage: undefined,
    VolumeId: undefined,
    VolumeSize: undefined,
    OwnerAlias: undefined,
    Tags: undefined,
  };
  if (output["dataEncryptionKeyId"] !== undefined) {
    contents.DataEncryptionKeyId = output["dataEncryptionKeyId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  if (output["status"] !== undefined) {
    contents.State = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StateMessage = output["statusMessage"];
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = parseInt(output["volumeSize"]);
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = output["ownerAlias"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2SnapshotDetail = (output: any, context: __SerdeContext): SnapshotDetail => {
  let contents: any = {
    Description: undefined,
    DeviceName: undefined,
    DiskImageSize: undefined,
    Format: undefined,
    Progress: undefined,
    SnapshotId: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Url: undefined,
    UserBucket: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = output["deviceName"];
  }
  if (output["diskImageSize"] !== undefined) {
    contents.DiskImageSize = parseFloat(output["diskImageSize"]);
  }
  if (output["format"] !== undefined) {
    contents.Format = output["format"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["url"] !== undefined) {
    contents.Url = output["url"];
  }
  if (output["userBucket"] !== undefined) {
    contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
  }
  return contents;
};

const deserializeAws_ec2SnapshotDetailList = (output: any, context: __SerdeContext): SnapshotDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SnapshotDetail(entry, context);
    });
};

const deserializeAws_ec2SnapshotInfo = (output: any, context: __SerdeContext): SnapshotInfo => {
  let contents: any = {
    Description: undefined,
    Tags: undefined,
    Encrypted: undefined,
    VolumeId: undefined,
    State: undefined,
    VolumeSize: undefined,
    StartTime: undefined,
    Progress: undefined,
    OwnerId: undefined,
    SnapshotId: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = parseInt(output["volumeSize"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  return contents;
};

const deserializeAws_ec2SnapshotList = (output: any, context: __SerdeContext): Snapshot[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Snapshot(entry, context);
    });
};

const deserializeAws_ec2SnapshotSet = (output: any, context: __SerdeContext): SnapshotInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SnapshotInfo(entry, context);
    });
};

const deserializeAws_ec2SnapshotTaskDetail = (output: any, context: __SerdeContext): SnapshotTaskDetail => {
  let contents: any = {
    Description: undefined,
    DiskImageSize: undefined,
    Encrypted: undefined,
    Format: undefined,
    KmsKeyId: undefined,
    Progress: undefined,
    SnapshotId: undefined,
    Status: undefined,
    StatusMessage: undefined,
    Url: undefined,
    UserBucket: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["diskImageSize"] !== undefined) {
    contents.DiskImageSize = parseFloat(output["diskImageSize"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["format"] !== undefined) {
    contents.Format = output["format"];
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["progress"] !== undefined) {
    contents.Progress = output["progress"];
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["url"] !== undefined) {
    contents.Url = output["url"];
  }
  if (output["userBucket"] !== undefined) {
    contents.UserBucket = deserializeAws_ec2UserBucketDetails(output["userBucket"], context);
  }
  return contents;
};

const deserializeAws_ec2SpotCapacityRebalance = (output: any, context: __SerdeContext): SpotCapacityRebalance => {
  let contents: any = {
    ReplacementStrategy: undefined,
  };
  if (output["replacementStrategy"] !== undefined) {
    contents.ReplacementStrategy = output["replacementStrategy"];
  }
  return contents;
};

const deserializeAws_ec2SpotDatafeedSubscription = (output: any, context: __SerdeContext): SpotDatafeedSubscription => {
  let contents: any = {
    Bucket: undefined,
    Fault: undefined,
    OwnerId: undefined,
    Prefix: undefined,
    State: undefined,
  };
  if (output["bucket"] !== undefined) {
    contents.Bucket = output["bucket"];
  }
  if (output["fault"] !== undefined) {
    contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["prefix"] !== undefined) {
    contents.Prefix = output["prefix"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2SpotFleetLaunchSpecification = (
  output: any,
  context: __SerdeContext
): SpotFleetLaunchSpecification => {
  let contents: any = {
    SecurityGroups: undefined,
    AddressingType: undefined,
    BlockDeviceMappings: undefined,
    EbsOptimized: undefined,
    IamInstanceProfile: undefined,
    ImageId: undefined,
    InstanceType: undefined,
    KernelId: undefined,
    KeyName: undefined,
    Monitoring: undefined,
    NetworkInterfaces: undefined,
    Placement: undefined,
    RamdiskId: undefined,
    SpotPrice: undefined,
    SubnetId: undefined,
    UserData: undefined,
    WeightedCapacity: undefined,
    TagSpecifications: undefined,
  };
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2GroupIdentifierList(
      __getArrayIfSingleItem(output["groupSet"]["item"]),
      context
    );
  }
  if (output["addressingType"] !== undefined) {
    contents.AddressingType = output["addressingType"];
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  }
  if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = deserializeAws_ec2BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = output["ebsOptimized"] == "true";
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = deserializeAws_ec2IamInstanceProfileSpecification(
      output["iamInstanceProfile"],
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = output["imageId"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = output["kernelId"];
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = output["keyName"];
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = deserializeAws_ec2SpotFleetMonitoring(output["monitoring"], context);
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  }
  if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = deserializeAws_ec2InstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["placement"] !== undefined) {
    contents.Placement = deserializeAws_ec2SpotPlacement(output["placement"], context);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = output["ramdiskId"];
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = output["spotPrice"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["userData"] !== undefined) {
    contents.UserData = output["userData"];
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = parseFloat(output["weightedCapacity"]);
  }
  if (output.tagSpecificationSet === "") {
    contents.TagSpecifications = [];
  }
  if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
    contents.TagSpecifications = deserializeAws_ec2SpotFleetTagSpecificationList(
      __getArrayIfSingleItem(output["tagSpecificationSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2SpotFleetMonitoring = (output: any, context: __SerdeContext): SpotFleetMonitoring => {
  let contents: any = {
    Enabled: undefined,
  };
  if (output["enabled"] !== undefined) {
    contents.Enabled = output["enabled"] == "true";
  }
  return contents;
};

const deserializeAws_ec2SpotFleetRequestConfig = (output: any, context: __SerdeContext): SpotFleetRequestConfig => {
  let contents: any = {
    ActivityStatus: undefined,
    CreateTime: undefined,
    SpotFleetRequestConfig: undefined,
    SpotFleetRequestId: undefined,
    SpotFleetRequestState: undefined,
    Tags: undefined,
  };
  if (output["activityStatus"] !== undefined) {
    contents.ActivityStatus = output["activityStatus"];
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["spotFleetRequestConfig"] !== undefined) {
    contents.SpotFleetRequestConfig = deserializeAws_ec2SpotFleetRequestConfigData(
      output["spotFleetRequestConfig"],
      context
    );
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = output["spotFleetRequestId"];
  }
  if (output["spotFleetRequestState"] !== undefined) {
    contents.SpotFleetRequestState = output["spotFleetRequestState"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2SpotFleetRequestConfigData = (
  output: any,
  context: __SerdeContext
): SpotFleetRequestConfigData => {
  let contents: any = {
    AllocationStrategy: undefined,
    OnDemandAllocationStrategy: undefined,
    SpotMaintenanceStrategies: undefined,
    ClientToken: undefined,
    ExcessCapacityTerminationPolicy: undefined,
    FulfilledCapacity: undefined,
    OnDemandFulfilledCapacity: undefined,
    IamFleetRole: undefined,
    LaunchSpecifications: undefined,
    LaunchTemplateConfigs: undefined,
    SpotPrice: undefined,
    TargetCapacity: undefined,
    OnDemandTargetCapacity: undefined,
    OnDemandMaxTotalPrice: undefined,
    SpotMaxTotalPrice: undefined,
    TerminateInstancesWithExpiration: undefined,
    Type: undefined,
    ValidFrom: undefined,
    ValidUntil: undefined,
    ReplaceUnhealthyInstances: undefined,
    InstanceInterruptionBehavior: undefined,
    LoadBalancersConfig: undefined,
    InstancePoolsToUseCount: undefined,
    TagSpecifications: undefined,
  };
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = output["allocationStrategy"];
  }
  if (output["onDemandAllocationStrategy"] !== undefined) {
    contents.OnDemandAllocationStrategy = output["onDemandAllocationStrategy"];
  }
  if (output["spotMaintenanceStrategies"] !== undefined) {
    contents.SpotMaintenanceStrategies = deserializeAws_ec2SpotMaintenanceStrategies(
      output["spotMaintenanceStrategies"],
      context
    );
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = output["clientToken"];
  }
  if (output["excessCapacityTerminationPolicy"] !== undefined) {
    contents.ExcessCapacityTerminationPolicy = output["excessCapacityTerminationPolicy"];
  }
  if (output["fulfilledCapacity"] !== undefined) {
    contents.FulfilledCapacity = parseFloat(output["fulfilledCapacity"]);
  }
  if (output["onDemandFulfilledCapacity"] !== undefined) {
    contents.OnDemandFulfilledCapacity = parseFloat(output["onDemandFulfilledCapacity"]);
  }
  if (output["iamFleetRole"] !== undefined) {
    contents.IamFleetRole = output["iamFleetRole"];
  }
  if (output.launchSpecifications === "") {
    contents.LaunchSpecifications = [];
  }
  if (output["launchSpecifications"] !== undefined && output["launchSpecifications"]["item"] !== undefined) {
    contents.LaunchSpecifications = deserializeAws_ec2LaunchSpecsList(
      __getArrayIfSingleItem(output["launchSpecifications"]["item"]),
      context
    );
  }
  if (output.launchTemplateConfigs === "") {
    contents.LaunchTemplateConfigs = [];
  }
  if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
    contents.LaunchTemplateConfigs = deserializeAws_ec2LaunchTemplateConfigList(
      __getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]),
      context
    );
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = output["spotPrice"];
  }
  if (output["targetCapacity"] !== undefined) {
    contents.TargetCapacity = parseInt(output["targetCapacity"]);
  }
  if (output["onDemandTargetCapacity"] !== undefined) {
    contents.OnDemandTargetCapacity = parseInt(output["onDemandTargetCapacity"]);
  }
  if (output["onDemandMaxTotalPrice"] !== undefined) {
    contents.OnDemandMaxTotalPrice = output["onDemandMaxTotalPrice"];
  }
  if (output["spotMaxTotalPrice"] !== undefined) {
    contents.SpotMaxTotalPrice = output["spotMaxTotalPrice"];
  }
  if (output["terminateInstancesWithExpiration"] !== undefined) {
    contents.TerminateInstancesWithExpiration = output["terminateInstancesWithExpiration"] == "true";
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = new Date(output["validFrom"]);
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = new Date(output["validUntil"]);
  }
  if (output["replaceUnhealthyInstances"] !== undefined) {
    contents.ReplaceUnhealthyInstances = output["replaceUnhealthyInstances"] == "true";
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = output["instanceInterruptionBehavior"];
  }
  if (output["loadBalancersConfig"] !== undefined) {
    contents.LoadBalancersConfig = deserializeAws_ec2LoadBalancersConfig(output["loadBalancersConfig"], context);
  }
  if (output["instancePoolsToUseCount"] !== undefined) {
    contents.InstancePoolsToUseCount = parseInt(output["instancePoolsToUseCount"]);
  }
  if (output.TagSpecification === "") {
    contents.TagSpecifications = [];
  }
  if (output["TagSpecification"] !== undefined && output["TagSpecification"]["item"] !== undefined) {
    contents.TagSpecifications = deserializeAws_ec2TagSpecificationList(
      __getArrayIfSingleItem(output["TagSpecification"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2SpotFleetRequestConfigSet = (
  output: any,
  context: __SerdeContext
): SpotFleetRequestConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SpotFleetRequestConfig(entry, context);
    });
};

const deserializeAws_ec2SpotFleetTagSpecification = (
  output: any,
  context: __SerdeContext
): SpotFleetTagSpecification => {
  let contents: any = {
    ResourceType: undefined,
    Tags: undefined,
  };
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output.tag === "") {
    contents.Tags = [];
  }
  if (output["tag"] !== undefined && output["tag"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tag"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2SpotFleetTagSpecificationList = (
  output: any,
  context: __SerdeContext
): SpotFleetTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SpotFleetTagSpecification(entry, context);
    });
};

const deserializeAws_ec2SpotInstanceRequest = (output: any, context: __SerdeContext): SpotInstanceRequest => {
  let contents: any = {
    ActualBlockHourlyPrice: undefined,
    AvailabilityZoneGroup: undefined,
    BlockDurationMinutes: undefined,
    CreateTime: undefined,
    Fault: undefined,
    InstanceId: undefined,
    LaunchGroup: undefined,
    LaunchSpecification: undefined,
    LaunchedAvailabilityZone: undefined,
    ProductDescription: undefined,
    SpotInstanceRequestId: undefined,
    SpotPrice: undefined,
    State: undefined,
    Status: undefined,
    Tags: undefined,
    Type: undefined,
    ValidFrom: undefined,
    ValidUntil: undefined,
    InstanceInterruptionBehavior: undefined,
  };
  if (output["actualBlockHourlyPrice"] !== undefined) {
    contents.ActualBlockHourlyPrice = output["actualBlockHourlyPrice"];
  }
  if (output["availabilityZoneGroup"] !== undefined) {
    contents.AvailabilityZoneGroup = output["availabilityZoneGroup"];
  }
  if (output["blockDurationMinutes"] !== undefined) {
    contents.BlockDurationMinutes = parseInt(output["blockDurationMinutes"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["fault"] !== undefined) {
    contents.Fault = deserializeAws_ec2SpotInstanceStateFault(output["fault"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["launchGroup"] !== undefined) {
    contents.LaunchGroup = output["launchGroup"];
  }
  if (output["launchSpecification"] !== undefined) {
    contents.LaunchSpecification = deserializeAws_ec2LaunchSpecification(output["launchSpecification"], context);
  }
  if (output["launchedAvailabilityZone"] !== undefined) {
    contents.LaunchedAvailabilityZone = output["launchedAvailabilityZone"];
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = output["productDescription"];
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = output["spotInstanceRequestId"];
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = output["spotPrice"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2SpotInstanceStatus(output["status"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = new Date(output["validFrom"]);
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = new Date(output["validUntil"]);
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = output["instanceInterruptionBehavior"];
  }
  return contents;
};

const deserializeAws_ec2SpotInstanceRequestList = (output: any, context: __SerdeContext): SpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SpotInstanceRequest(entry, context);
    });
};

const deserializeAws_ec2SpotInstanceStateFault = (output: any, context: __SerdeContext): SpotInstanceStateFault => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2SpotInstanceStatus = (output: any, context: __SerdeContext): SpotInstanceStatus => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
    UpdateTime: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = new Date(output["updateTime"]);
  }
  return contents;
};

const deserializeAws_ec2SpotMaintenanceStrategies = (
  output: any,
  context: __SerdeContext
): SpotMaintenanceStrategies => {
  let contents: any = {
    CapacityRebalance: undefined,
  };
  if (output["capacityRebalance"] !== undefined) {
    contents.CapacityRebalance = deserializeAws_ec2SpotCapacityRebalance(output["capacityRebalance"], context);
  }
  return contents;
};

const deserializeAws_ec2SpotOptions = (output: any, context: __SerdeContext): SpotOptions => {
  let contents: any = {
    AllocationStrategy: undefined,
    MaintenanceStrategies: undefined,
    InstanceInterruptionBehavior: undefined,
    InstancePoolsToUseCount: undefined,
    SingleInstanceType: undefined,
    SingleAvailabilityZone: undefined,
    MinTargetCapacity: undefined,
    MaxTotalPrice: undefined,
  };
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = output["allocationStrategy"];
  }
  if (output["maintenanceStrategies"] !== undefined) {
    contents.MaintenanceStrategies = deserializeAws_ec2FleetSpotMaintenanceStrategies(
      output["maintenanceStrategies"],
      context
    );
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = output["instanceInterruptionBehavior"];
  }
  if (output["instancePoolsToUseCount"] !== undefined) {
    contents.InstancePoolsToUseCount = parseInt(output["instancePoolsToUseCount"]);
  }
  if (output["singleInstanceType"] !== undefined) {
    contents.SingleInstanceType = output["singleInstanceType"] == "true";
  }
  if (output["singleAvailabilityZone"] !== undefined) {
    contents.SingleAvailabilityZone = output["singleAvailabilityZone"] == "true";
  }
  if (output["minTargetCapacity"] !== undefined) {
    contents.MinTargetCapacity = parseInt(output["minTargetCapacity"]);
  }
  if (output["maxTotalPrice"] !== undefined) {
    contents.MaxTotalPrice = output["maxTotalPrice"];
  }
  return contents;
};

const deserializeAws_ec2SpotPlacement = (output: any, context: __SerdeContext): SpotPlacement => {
  let contents: any = {
    AvailabilityZone: undefined,
    GroupName: undefined,
    Tenancy: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = output["tenancy"];
  }
  return contents;
};

const deserializeAws_ec2SpotPrice = (output: any, context: __SerdeContext): SpotPrice => {
  let contents: any = {
    AvailabilityZone: undefined,
    InstanceType: undefined,
    ProductDescription: undefined,
    SpotPrice: undefined,
    Timestamp: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = output["instanceType"];
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = output["productDescription"];
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = output["spotPrice"];
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = new Date(output["timestamp"]);
  }
  return contents;
};

const deserializeAws_ec2SpotPriceHistoryList = (output: any, context: __SerdeContext): SpotPrice[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SpotPrice(entry, context);
    });
};

const deserializeAws_ec2StaleIpPermission = (output: any, context: __SerdeContext): StaleIpPermission => {
  let contents: any = {
    FromPort: undefined,
    IpProtocol: undefined,
    IpRanges: undefined,
    PrefixListIds: undefined,
    ToPort: undefined,
    UserIdGroupPairs: undefined,
  };
  if (output["fromPort"] !== undefined) {
    contents.FromPort = parseInt(output["fromPort"]);
  }
  if (output["ipProtocol"] !== undefined) {
    contents.IpProtocol = output["ipProtocol"];
  }
  if (output.ipRanges === "") {
    contents.IpRanges = [];
  }
  if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
    contents.IpRanges = deserializeAws_ec2IpRanges(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
  }
  if (output.prefixListIds === "") {
    contents.PrefixListIds = [];
  }
  if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
    contents.PrefixListIds = deserializeAws_ec2PrefixListIdSet(
      __getArrayIfSingleItem(output["prefixListIds"]["item"]),
      context
    );
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = parseInt(output["toPort"]);
  }
  if (output.groups === "") {
    contents.UserIdGroupPairs = [];
  }
  if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
    contents.UserIdGroupPairs = deserializeAws_ec2UserIdGroupPairSet(
      __getArrayIfSingleItem(output["groups"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2StaleIpPermissionSet = (output: any, context: __SerdeContext): StaleIpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2StaleIpPermission(entry, context);
    });
};

const deserializeAws_ec2StaleSecurityGroup = (output: any, context: __SerdeContext): StaleSecurityGroup => {
  let contents: any = {
    Description: undefined,
    GroupId: undefined,
    GroupName: undefined,
    StaleIpPermissions: undefined,
    StaleIpPermissionsEgress: undefined,
    VpcId: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output.staleIpPermissions === "") {
    contents.StaleIpPermissions = [];
  }
  if (output["staleIpPermissions"] !== undefined && output["staleIpPermissions"]["item"] !== undefined) {
    contents.StaleIpPermissions = deserializeAws_ec2StaleIpPermissionSet(
      __getArrayIfSingleItem(output["staleIpPermissions"]["item"]),
      context
    );
  }
  if (output.staleIpPermissionsEgress === "") {
    contents.StaleIpPermissionsEgress = [];
  }
  if (output["staleIpPermissionsEgress"] !== undefined && output["staleIpPermissionsEgress"]["item"] !== undefined) {
    contents.StaleIpPermissionsEgress = deserializeAws_ec2StaleIpPermissionSet(
      __getArrayIfSingleItem(output["staleIpPermissionsEgress"]["item"]),
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2StaleSecurityGroupSet = (output: any, context: __SerdeContext): StaleSecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2StaleSecurityGroup(entry, context);
    });
};

const deserializeAws_ec2StartInstancesResult = (output: any, context: __SerdeContext): StartInstancesResult => {
  let contents: any = {
    StartingInstances: undefined,
  };
  if (output.instancesSet === "") {
    contents.StartingInstances = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.StartingInstances = deserializeAws_ec2InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2StartNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): StartNetworkInsightsAnalysisResult => {
  let contents: any = {
    NetworkInsightsAnalysis: undefined,
  };
  if (output["networkInsightsAnalysis"] !== undefined) {
    contents.NetworkInsightsAnalysis = deserializeAws_ec2NetworkInsightsAnalysis(
      output["networkInsightsAnalysis"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult = (
  output: any,
  context: __SerdeContext
): StartVpcEndpointServicePrivateDnsVerificationResult => {
  let contents: any = {
    ReturnValue: undefined,
  };
  if (output["return"] !== undefined) {
    contents.ReturnValue = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2StateReason = (output: any, context: __SerdeContext): StateReason => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2StopInstancesResult = (output: any, context: __SerdeContext): StopInstancesResult => {
  let contents: any = {
    StoppingInstances: undefined,
  };
  if (output.instancesSet === "") {
    contents.StoppingInstances = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.StoppingInstances = deserializeAws_ec2InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2Storage = (output: any, context: __SerdeContext): Storage => {
  let contents: any = {
    S3: undefined,
  };
  if (output["S3"] !== undefined) {
    contents.S3 = deserializeAws_ec2S3Storage(output["S3"], context);
  }
  return contents;
};

const deserializeAws_ec2StringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Subnet = (output: any, context: __SerdeContext): Subnet => {
  let contents: any = {
    AvailabilityZone: undefined,
    AvailabilityZoneId: undefined,
    AvailableIpAddressCount: undefined,
    CidrBlock: undefined,
    DefaultForAz: undefined,
    MapPublicIpOnLaunch: undefined,
    MapCustomerOwnedIpOnLaunch: undefined,
    CustomerOwnedIpv4Pool: undefined,
    State: undefined,
    SubnetId: undefined,
    VpcId: undefined,
    OwnerId: undefined,
    AssignIpv6AddressOnCreation: undefined,
    Ipv6CidrBlockAssociationSet: undefined,
    Tags: undefined,
    SubnetArn: undefined,
    OutpostArn: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = output["availabilityZoneId"];
  }
  if (output["availableIpAddressCount"] !== undefined) {
    contents.AvailableIpAddressCount = parseInt(output["availableIpAddressCount"]);
  }
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  if (output["defaultForAz"] !== undefined) {
    contents.DefaultForAz = output["defaultForAz"] == "true";
  }
  if (output["mapPublicIpOnLaunch"] !== undefined) {
    contents.MapPublicIpOnLaunch = output["mapPublicIpOnLaunch"] == "true";
  }
  if (output["mapCustomerOwnedIpOnLaunch"] !== undefined) {
    contents.MapCustomerOwnedIpOnLaunch = output["mapCustomerOwnedIpOnLaunch"] == "true";
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = output["customerOwnedIpv4Pool"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["assignIpv6AddressOnCreation"] !== undefined) {
    contents.AssignIpv6AddressOnCreation = output["assignIpv6AddressOnCreation"] == "true";
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents.Ipv6CidrBlockAssociationSet = [];
  }
  if (
    output["ipv6CidrBlockAssociationSet"] !== undefined &&
    output["ipv6CidrBlockAssociationSet"]["item"] !== undefined
  ) {
    contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["subnetArn"] !== undefined) {
    contents.SubnetArn = output["subnetArn"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  return contents;
};

const deserializeAws_ec2SubnetAssociation = (output: any, context: __SerdeContext): SubnetAssociation => {
  let contents: any = {
    SubnetId: undefined,
    State: undefined,
  };
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2SubnetAssociationList = (output: any, context: __SerdeContext): SubnetAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SubnetAssociation(entry, context);
    });
};

const deserializeAws_ec2SubnetCidrBlockState = (output: any, context: __SerdeContext): SubnetCidrBlockState => {
  let contents: any = {
    State: undefined,
    StatusMessage: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  return contents;
};

const deserializeAws_ec2SubnetIpv6CidrBlockAssociation = (
  output: any,
  context: __SerdeContext
): SubnetIpv6CidrBlockAssociation => {
  let contents: any = {
    AssociationId: undefined,
    Ipv6CidrBlock: undefined,
    Ipv6CidrBlockState: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = output["ipv6CidrBlock"];
  }
  if (output["ipv6CidrBlockState"] !== undefined) {
    contents.Ipv6CidrBlockState = deserializeAws_ec2SubnetCidrBlockState(output["ipv6CidrBlockState"], context);
  }
  return contents;
};

const deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet = (
  output: any,
  context: __SerdeContext
): SubnetIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SubnetIpv6CidrBlockAssociation(entry, context);
    });
};

const deserializeAws_ec2SubnetList = (output: any, context: __SerdeContext): Subnet[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Subnet(entry, context);
    });
};

const deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem => {
  let contents: any = {
    InstanceId: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  return contents;
};

const deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

const deserializeAws_ec2SuccessfulQueuedPurchaseDeletion = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion => {
  let contents: any = {
    ReservedInstancesId: undefined,
  };
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = output["reservedInstancesId"];
  }
  return contents;
};

const deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};

const deserializeAws_ec2Tag = (output: any, context: __SerdeContext): Tag => {
  let contents: any = {
    Key: undefined,
    Value: undefined,
  };
  if (output["key"] !== undefined) {
    contents.Key = output["key"];
  }
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2TagDescription = (output: any, context: __SerdeContext): TagDescription => {
  let contents: any = {
    Key: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    Value: undefined,
  };
  if (output["key"] !== undefined) {
    contents.Key = output["key"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["value"] !== undefined) {
    contents.Value = output["value"];
  }
  return contents;
};

const deserializeAws_ec2TagDescriptionList = (output: any, context: __SerdeContext): TagDescription[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TagDescription(entry, context);
    });
};

const deserializeAws_ec2TagList = (output: any, context: __SerdeContext): Tag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Tag(entry, context);
    });
};

const deserializeAws_ec2TagSpecification = (output: any, context: __SerdeContext): TagSpecification => {
  let contents: any = {
    ResourceType: undefined,
    Tags: undefined,
  };
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output.Tag === "") {
    contents.Tags = [];
  }
  if (output["Tag"] !== undefined && output["Tag"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["Tag"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TagSpecificationList = (output: any, context: __SerdeContext): TagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TagSpecification(entry, context);
    });
};

const deserializeAws_ec2TargetCapacitySpecification = (
  output: any,
  context: __SerdeContext
): TargetCapacitySpecification => {
  let contents: any = {
    TotalTargetCapacity: undefined,
    OnDemandTargetCapacity: undefined,
    SpotTargetCapacity: undefined,
    DefaultTargetCapacityType: undefined,
  };
  if (output["totalTargetCapacity"] !== undefined) {
    contents.TotalTargetCapacity = parseInt(output["totalTargetCapacity"]);
  }
  if (output["onDemandTargetCapacity"] !== undefined) {
    contents.OnDemandTargetCapacity = parseInt(output["onDemandTargetCapacity"]);
  }
  if (output["spotTargetCapacity"] !== undefined) {
    contents.SpotTargetCapacity = parseInt(output["spotTargetCapacity"]);
  }
  if (output["defaultTargetCapacityType"] !== undefined) {
    contents.DefaultTargetCapacityType = output["defaultTargetCapacityType"];
  }
  return contents;
};

const deserializeAws_ec2TargetConfiguration = (output: any, context: __SerdeContext): TargetConfiguration => {
  let contents: any = {
    InstanceCount: undefined,
    OfferingId: undefined,
  };
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = parseInt(output["instanceCount"]);
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = output["offeringId"];
  }
  return contents;
};

const deserializeAws_ec2TargetGroup = (output: any, context: __SerdeContext): TargetGroup => {
  let contents: any = {
    Arn: undefined,
  };
  if (output["arn"] !== undefined) {
    contents.Arn = output["arn"];
  }
  return contents;
};

const deserializeAws_ec2TargetGroups = (output: any, context: __SerdeContext): TargetGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TargetGroup(entry, context);
    });
};

const deserializeAws_ec2TargetGroupsConfig = (output: any, context: __SerdeContext): TargetGroupsConfig => {
  let contents: any = {
    TargetGroups: undefined,
  };
  if (output.targetGroups === "") {
    contents.TargetGroups = [];
  }
  if (output["targetGroups"] !== undefined && output["targetGroups"]["item"] !== undefined) {
    contents.TargetGroups = deserializeAws_ec2TargetGroups(
      __getArrayIfSingleItem(output["targetGroups"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TargetNetwork = (output: any, context: __SerdeContext): TargetNetwork => {
  let contents: any = {
    AssociationId: undefined,
    VpcId: undefined,
    TargetNetworkId: undefined,
    ClientVpnEndpointId: undefined,
    Status: undefined,
    SecurityGroups: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["targetNetworkId"] !== undefined) {
    contents.TargetNetworkId = output["targetNetworkId"];
  }
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2AssociationStatus(output["status"], context);
  }
  if (output.securityGroups === "") {
    contents.SecurityGroups = [];
  }
  if (output["securityGroups"] !== undefined && output["securityGroups"]["item"] !== undefined) {
    contents.SecurityGroups = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["securityGroups"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TargetNetworkSet = (output: any, context: __SerdeContext): TargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TargetNetwork(entry, context);
    });
};

const deserializeAws_ec2TargetReservationValue = (output: any, context: __SerdeContext): TargetReservationValue => {
  let contents: any = {
    ReservationValue: undefined,
    TargetConfiguration: undefined,
  };
  if (output["reservationValue"] !== undefined) {
    contents.ReservationValue = deserializeAws_ec2ReservationValue(output["reservationValue"], context);
  }
  if (output["targetConfiguration"] !== undefined) {
    contents.TargetConfiguration = deserializeAws_ec2TargetConfiguration(output["targetConfiguration"], context);
  }
  return contents;
};

const deserializeAws_ec2TargetReservationValueSet = (
  output: any,
  context: __SerdeContext
): TargetReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TargetReservationValue(entry, context);
    });
};

const deserializeAws_ec2TerminateClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): TerminateClientVpnConnectionsResult => {
  let contents: any = {
    ClientVpnEndpointId: undefined,
    Username: undefined,
    ConnectionStatuses: undefined,
  };
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = output["clientVpnEndpointId"];
  }
  if (output["username"] !== undefined) {
    contents.Username = output["username"];
  }
  if (output.connectionStatuses === "") {
    contents.ConnectionStatuses = [];
  }
  if (output["connectionStatuses"] !== undefined && output["connectionStatuses"]["item"] !== undefined) {
    contents.ConnectionStatuses = deserializeAws_ec2TerminateConnectionStatusSet(
      __getArrayIfSingleItem(output["connectionStatuses"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TerminateConnectionStatus = (
  output: any,
  context: __SerdeContext
): TerminateConnectionStatus => {
  let contents: any = {
    ConnectionId: undefined,
    PreviousStatus: undefined,
    CurrentStatus: undefined,
  };
  if (output["connectionId"] !== undefined) {
    contents.ConnectionId = output["connectionId"];
  }
  if (output["previousStatus"] !== undefined) {
    contents.PreviousStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["previousStatus"], context);
  }
  if (output["currentStatus"] !== undefined) {
    contents.CurrentStatus = deserializeAws_ec2ClientVpnConnectionStatus(output["currentStatus"], context);
  }
  return contents;
};

const deserializeAws_ec2TerminateConnectionStatusSet = (
  output: any,
  context: __SerdeContext
): TerminateConnectionStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TerminateConnectionStatus(entry, context);
    });
};

const deserializeAws_ec2TerminateInstancesResult = (output: any, context: __SerdeContext): TerminateInstancesResult => {
  let contents: any = {
    TerminatingInstances: undefined,
  };
  if (output.instancesSet === "") {
    contents.TerminatingInstances = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.TerminatingInstances = deserializeAws_ec2InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2ThreadsPerCoreList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return parseInt(entry);
    });
};

const deserializeAws_ec2TrafficMirrorFilter = (output: any, context: __SerdeContext): TrafficMirrorFilter => {
  let contents: any = {
    TrafficMirrorFilterId: undefined,
    IngressFilterRules: undefined,
    EgressFilterRules: undefined,
    NetworkServices: undefined,
    Description: undefined,
    Tags: undefined,
  };
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = output["trafficMirrorFilterId"];
  }
  if (output.ingressFilterRuleSet === "") {
    contents.IngressFilterRules = [];
  }
  if (output["ingressFilterRuleSet"] !== undefined && output["ingressFilterRuleSet"]["item"] !== undefined) {
    contents.IngressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList(
      __getArrayIfSingleItem(output["ingressFilterRuleSet"]["item"]),
      context
    );
  }
  if (output.egressFilterRuleSet === "") {
    contents.EgressFilterRules = [];
  }
  if (output["egressFilterRuleSet"] !== undefined && output["egressFilterRuleSet"]["item"] !== undefined) {
    contents.EgressFilterRules = deserializeAws_ec2TrafficMirrorFilterRuleList(
      __getArrayIfSingleItem(output["egressFilterRuleSet"]["item"]),
      context
    );
  }
  if (output.networkServiceSet === "") {
    contents.NetworkServices = [];
  }
  if (output["networkServiceSet"] !== undefined && output["networkServiceSet"]["item"] !== undefined) {
    contents.NetworkServices = deserializeAws_ec2TrafficMirrorNetworkServiceList(
      __getArrayIfSingleItem(output["networkServiceSet"]["item"]),
      context
    );
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TrafficMirrorFilterRule = (output: any, context: __SerdeContext): TrafficMirrorFilterRule => {
  let contents: any = {
    TrafficMirrorFilterRuleId: undefined,
    TrafficMirrorFilterId: undefined,
    TrafficDirection: undefined,
    RuleNumber: undefined,
    RuleAction: undefined,
    Protocol: undefined,
    DestinationPortRange: undefined,
    SourcePortRange: undefined,
    DestinationCidrBlock: undefined,
    SourceCidrBlock: undefined,
    Description: undefined,
  };
  if (output["trafficMirrorFilterRuleId"] !== undefined) {
    contents.TrafficMirrorFilterRuleId = output["trafficMirrorFilterRuleId"];
  }
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = output["trafficMirrorFilterId"];
  }
  if (output["trafficDirection"] !== undefined) {
    contents.TrafficDirection = output["trafficDirection"];
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = parseInt(output["ruleNumber"]);
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = output["ruleAction"];
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = parseInt(output["protocol"]);
  }
  if (output["destinationPortRange"] !== undefined) {
    contents.DestinationPortRange = deserializeAws_ec2TrafficMirrorPortRange(output["destinationPortRange"], context);
  }
  if (output["sourcePortRange"] !== undefined) {
    contents.SourcePortRange = deserializeAws_ec2TrafficMirrorPortRange(output["sourcePortRange"], context);
  }
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = output["destinationCidrBlock"];
  }
  if (output["sourceCidrBlock"] !== undefined) {
    contents.SourceCidrBlock = output["sourceCidrBlock"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  return contents;
};

const deserializeAws_ec2TrafficMirrorFilterRuleList = (
  output: any,
  context: __SerdeContext
): TrafficMirrorFilterRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TrafficMirrorFilterRule(entry, context);
    });
};

const deserializeAws_ec2TrafficMirrorFilterSet = (output: any, context: __SerdeContext): TrafficMirrorFilter[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TrafficMirrorFilter(entry, context);
    });
};

const deserializeAws_ec2TrafficMirrorNetworkServiceList = (
  output: any,
  context: __SerdeContext
): (TrafficMirrorNetworkService | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2TrafficMirrorPortRange = (output: any, context: __SerdeContext): TrafficMirrorPortRange => {
  let contents: any = {
    FromPort: undefined,
    ToPort: undefined,
  };
  if (output["fromPort"] !== undefined) {
    contents.FromPort = parseInt(output["fromPort"]);
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = parseInt(output["toPort"]);
  }
  return contents;
};

const deserializeAws_ec2TrafficMirrorSession = (output: any, context: __SerdeContext): TrafficMirrorSession => {
  let contents: any = {
    TrafficMirrorSessionId: undefined,
    TrafficMirrorTargetId: undefined,
    TrafficMirrorFilterId: undefined,
    NetworkInterfaceId: undefined,
    OwnerId: undefined,
    PacketLength: undefined,
    SessionNumber: undefined,
    VirtualNetworkId: undefined,
    Description: undefined,
    Tags: undefined,
  };
  if (output["trafficMirrorSessionId"] !== undefined) {
    contents.TrafficMirrorSessionId = output["trafficMirrorSessionId"];
  }
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = output["trafficMirrorTargetId"];
  }
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = output["trafficMirrorFilterId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["packetLength"] !== undefined) {
    contents.PacketLength = parseInt(output["packetLength"]);
  }
  if (output["sessionNumber"] !== undefined) {
    contents.SessionNumber = parseInt(output["sessionNumber"]);
  }
  if (output["virtualNetworkId"] !== undefined) {
    contents.VirtualNetworkId = parseInt(output["virtualNetworkId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TrafficMirrorSessionSet = (output: any, context: __SerdeContext): TrafficMirrorSession[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TrafficMirrorSession(entry, context);
    });
};

const deserializeAws_ec2TrafficMirrorTarget = (output: any, context: __SerdeContext): TrafficMirrorTarget => {
  let contents: any = {
    TrafficMirrorTargetId: undefined,
    NetworkInterfaceId: undefined,
    NetworkLoadBalancerArn: undefined,
    Type: undefined,
    Description: undefined,
    OwnerId: undefined,
    Tags: undefined,
  };
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = output["trafficMirrorTargetId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["networkLoadBalancerArn"] !== undefined) {
    contents.NetworkLoadBalancerArn = output["networkLoadBalancerArn"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TrafficMirrorTargetSet = (output: any, context: __SerdeContext): TrafficMirrorTarget[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TrafficMirrorTarget(entry, context);
    });
};

const deserializeAws_ec2TransitGateway = (output: any, context: __SerdeContext): TransitGateway => {
  let contents: any = {
    TransitGatewayId: undefined,
    TransitGatewayArn: undefined,
    State: undefined,
    OwnerId: undefined,
    Description: undefined,
    CreationTime: undefined,
    Options: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["transitGatewayArn"] !== undefined) {
    contents.TransitGatewayArn = output["transitGatewayArn"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output["options"] !== undefined) {
    contents.Options = deserializeAws_ec2TransitGatewayOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAssociation => {
  let contents: any = {
    TransitGatewayRouteTableId: undefined,
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    State: undefined,
  };
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAttachment = (output: any, context: __SerdeContext): TransitGatewayAttachment => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    TransitGatewayId: undefined,
    TransitGatewayOwnerId: undefined,
    ResourceOwnerId: undefined,
    ResourceType: undefined,
    ResourceId: undefined,
    State: undefined,
    Association: undefined,
    CreationTime: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["transitGatewayOwnerId"] !== undefined) {
    contents.TransitGatewayOwnerId = output["transitGatewayOwnerId"];
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = output["resourceOwnerId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["association"] !== undefined) {
    contents.Association = deserializeAws_ec2TransitGatewayAttachmentAssociation(output["association"], context);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAttachmentAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentAssociation => {
  let contents: any = {
    TransitGatewayRouteTableId: undefined,
    State: undefined,
  };
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration => {
  let contents: any = {
    TransitGatewayAsn: undefined,
    PeerAsn: undefined,
    TransitGatewayAddress: undefined,
    PeerAddress: undefined,
    BgpStatus: undefined,
  };
  if (output["transitGatewayAsn"] !== undefined) {
    contents.TransitGatewayAsn = parseInt(output["transitGatewayAsn"]);
  }
  if (output["peerAsn"] !== undefined) {
    contents.PeerAsn = parseInt(output["peerAsn"]);
  }
  if (output["transitGatewayAddress"] !== undefined) {
    contents.TransitGatewayAddress = output["transitGatewayAddress"];
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = output["peerAddress"];
  }
  if (output["bgpStatus"] !== undefined) {
    contents.BgpStatus = output["bgpStatus"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayAttachment(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayAttachmentPropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation => {
  let contents: any = {
    TransitGatewayRouteTableId: undefined,
    State: undefined,
  };
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayAttachmentPropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayAttachmentPropagation(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayConnect = (output: any, context: __SerdeContext): TransitGatewayConnect => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    TransportTransitGatewayAttachmentId: undefined,
    TransitGatewayId: undefined,
    State: undefined,
    CreationTime: undefined,
    Options: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["transportTransitGatewayAttachmentId"] !== undefined) {
    contents.TransportTransitGatewayAttachmentId = output["transportTransitGatewayAttachmentId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output["options"] !== undefined) {
    contents.Options = deserializeAws_ec2TransitGatewayConnectOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayConnectList = (output: any, context: __SerdeContext): TransitGatewayConnect[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayConnect(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayConnectOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectOptions => {
  let contents: any = {
    Protocol: undefined,
  };
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayConnectPeer = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectPeer => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    TransitGatewayConnectPeerId: undefined,
    State: undefined,
    CreationTime: undefined,
    ConnectPeerConfiguration: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["transitGatewayConnectPeerId"] !== undefined) {
    contents.TransitGatewayConnectPeerId = output["transitGatewayConnectPeerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output["connectPeerConfiguration"] !== undefined) {
    contents.ConnectPeerConfiguration = deserializeAws_ec2TransitGatewayConnectPeerConfiguration(
      output["connectPeerConfiguration"],
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayConnectPeerConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectPeerConfiguration => {
  let contents: any = {
    TransitGatewayAddress: undefined,
    PeerAddress: undefined,
    InsideCidrBlocks: undefined,
    Protocol: undefined,
    BgpConfigurations: undefined,
  };
  if (output["transitGatewayAddress"] !== undefined) {
    contents.TransitGatewayAddress = output["transitGatewayAddress"];
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = output["peerAddress"];
  }
  if (output.insideCidrBlocks === "") {
    contents.InsideCidrBlocks = [];
  }
  if (output["insideCidrBlocks"] !== undefined && output["insideCidrBlocks"]["item"] !== undefined) {
    contents.InsideCidrBlocks = deserializeAws_ec2InsideCidrBlocksStringList(
      __getArrayIfSingleItem(output["insideCidrBlocks"]["item"]),
      context
    );
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = output["protocol"];
  }
  if (output.bgpConfigurations === "") {
    contents.BgpConfigurations = [];
  }
  if (output["bgpConfigurations"] !== undefined && output["bgpConfigurations"]["item"] !== undefined) {
    contents.BgpConfigurations = deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList(
      __getArrayIfSingleItem(output["bgpConfigurations"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayConnectPeerList = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectPeer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayConnectPeer(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayList = (output: any, context: __SerdeContext): TransitGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGateway(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupMembers => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    DeregisteredNetworkInterfaceIds: undefined,
    GroupIpAddress: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents.DeregisteredNetworkInterfaceIds = [];
  }
  if (
    output["deregisteredNetworkInterfaceIds"] !== undefined &&
    output["deregisteredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = output["groupIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupSources => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    DeregisteredNetworkInterfaceIds: undefined,
    GroupIpAddress: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents.DeregisteredNetworkInterfaceIds = [];
  }
  if (
    output["deregisteredNetworkInterfaceIds"] !== undefined &&
    output["deregisteredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.DeregisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = output["groupIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastDomain = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomain => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    TransitGatewayId: undefined,
    TransitGatewayMulticastDomainArn: undefined,
    OwnerId: undefined,
    Options: undefined,
    State: undefined,
    CreationTime: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["transitGatewayMulticastDomainArn"] !== undefined) {
    contents.TransitGatewayMulticastDomainArn = output["transitGatewayMulticastDomainArn"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["options"] !== undefined) {
    contents.Options = deserializeAws_ec2TransitGatewayMulticastDomainOptions(output["options"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastDomainAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    ResourceOwnerId: undefined,
    Subnet: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = output["resourceOwnerId"];
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = deserializeAws_ec2SubnetAssociation(output["subnet"], context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastDomainAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayMulticastDomainAssociation(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayMulticastDomainAssociations = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociations => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    ResourceOwnerId: undefined,
    Subnets: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = output["resourceOwnerId"];
  }
  if (output.subnets === "") {
    contents.Subnets = [];
  }
  if (output["subnets"] !== undefined && output["subnets"]["item"] !== undefined) {
    contents.Subnets = deserializeAws_ec2SubnetAssociationList(
      __getArrayIfSingleItem(output["subnets"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastDomainList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomain[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayMulticastDomain(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayMulticastDomainOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainOptions => {
  let contents: any = {
    Igmpv2Support: undefined,
    StaticSourcesSupport: undefined,
    AutoAcceptSharedAssociations: undefined,
  };
  if (output["igmpv2Support"] !== undefined) {
    contents.Igmpv2Support = output["igmpv2Support"];
  }
  if (output["staticSourcesSupport"] !== undefined) {
    contents.StaticSourcesSupport = output["staticSourcesSupport"];
  }
  if (output["autoAcceptSharedAssociations"] !== undefined) {
    contents.AutoAcceptSharedAssociations = output["autoAcceptSharedAssociations"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastGroup = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastGroup => {
  let contents: any = {
    GroupIpAddress: undefined,
    TransitGatewayAttachmentId: undefined,
    SubnetId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    ResourceOwnerId: undefined,
    NetworkInterfaceId: undefined,
    GroupMember: undefined,
    GroupSource: undefined,
    MemberType: undefined,
    SourceType: undefined,
  };
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = output["groupIpAddress"];
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = output["subnetId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = output["resourceOwnerId"];
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output["groupMember"] !== undefined) {
    contents.GroupMember = output["groupMember"] == "true";
  }
  if (output["groupSource"] !== undefined) {
    contents.GroupSource = output["groupSource"] == "true";
  }
  if (output["memberType"] !== undefined) {
    contents.MemberType = output["memberType"];
  }
  if (output["sourceType"] !== undefined) {
    contents.SourceType = output["sourceType"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastGroupList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayMulticastGroup(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupMembers => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    RegisteredNetworkInterfaceIds: undefined,
    GroupIpAddress: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents.RegisteredNetworkInterfaceIds = [];
  }
  if (
    output["registeredNetworkInterfaceIds"] !== undefined &&
    output["registeredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = output["groupIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupSources => {
  let contents: any = {
    TransitGatewayMulticastDomainId: undefined,
    RegisteredNetworkInterfaceIds: undefined,
    GroupIpAddress: undefined,
  };
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = output["transitGatewayMulticastDomainId"];
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents.RegisteredNetworkInterfaceIds = [];
  }
  if (
    output["registeredNetworkInterfaceIds"] !== undefined &&
    output["registeredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.RegisteredNetworkInterfaceIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = output["groupIpAddress"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayOptions = (output: any, context: __SerdeContext): TransitGatewayOptions => {
  let contents: any = {
    AmazonSideAsn: undefined,
    TransitGatewayCidrBlocks: undefined,
    AutoAcceptSharedAttachments: undefined,
    DefaultRouteTableAssociation: undefined,
    AssociationDefaultRouteTableId: undefined,
    DefaultRouteTablePropagation: undefined,
    PropagationDefaultRouteTableId: undefined,
    VpnEcmpSupport: undefined,
    DnsSupport: undefined,
    MulticastSupport: undefined,
  };
  if (output["amazonSideAsn"] !== undefined) {
    contents.AmazonSideAsn = parseInt(output["amazonSideAsn"]);
  }
  if (output.transitGatewayCidrBlocks === "") {
    contents.TransitGatewayCidrBlocks = [];
  }
  if (output["transitGatewayCidrBlocks"] !== undefined && output["transitGatewayCidrBlocks"]["item"] !== undefined) {
    contents.TransitGatewayCidrBlocks = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["transitGatewayCidrBlocks"]["item"]),
      context
    );
  }
  if (output["autoAcceptSharedAttachments"] !== undefined) {
    contents.AutoAcceptSharedAttachments = output["autoAcceptSharedAttachments"];
  }
  if (output["defaultRouteTableAssociation"] !== undefined) {
    contents.DefaultRouteTableAssociation = output["defaultRouteTableAssociation"];
  }
  if (output["associationDefaultRouteTableId"] !== undefined) {
    contents.AssociationDefaultRouteTableId = output["associationDefaultRouteTableId"];
  }
  if (output["defaultRouteTablePropagation"] !== undefined) {
    contents.DefaultRouteTablePropagation = output["defaultRouteTablePropagation"];
  }
  if (output["propagationDefaultRouteTableId"] !== undefined) {
    contents.PropagationDefaultRouteTableId = output["propagationDefaultRouteTableId"];
  }
  if (output["vpnEcmpSupport"] !== undefined) {
    contents.VpnEcmpSupport = output["vpnEcmpSupport"];
  }
  if (output["dnsSupport"] !== undefined) {
    contents.DnsSupport = output["dnsSupport"];
  }
  if (output["multicastSupport"] !== undefined) {
    contents.MulticastSupport = output["multicastSupport"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayPeeringAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachment => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    RequesterTgwInfo: undefined,
    AccepterTgwInfo: undefined,
    Status: undefined,
    State: undefined,
    CreationTime: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["requesterTgwInfo"] !== undefined) {
    contents.RequesterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["requesterTgwInfo"], context);
  }
  if (output["accepterTgwInfo"] !== undefined) {
    contents.AccepterTgwInfo = deserializeAws_ec2PeeringTgwInfo(output["accepterTgwInfo"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2PeeringAttachmentStatus(output["status"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayPeeringAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayPeeringAttachment(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayPrefixListAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListAttachment => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    ResourceType: undefined,
    ResourceId: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayPrefixListReference = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference => {
  let contents: any = {
    TransitGatewayRouteTableId: undefined,
    PrefixListId: undefined,
    PrefixListOwnerId: undefined,
    State: undefined,
    Blackhole: undefined,
    TransitGatewayAttachment: undefined,
  };
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  if (output["prefixListOwnerId"] !== undefined) {
    contents.PrefixListOwnerId = output["prefixListOwnerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["blackhole"] !== undefined) {
    contents.Blackhole = output["blackhole"] == "true";
  }
  if (output["transitGatewayAttachment"] !== undefined) {
    contents.TransitGatewayAttachment = deserializeAws_ec2TransitGatewayPrefixListAttachment(
      output["transitGatewayAttachment"],
      context
    );
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayPrefixListReferenceSet = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayPrefixListReference(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayPropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayPropagation => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    TransitGatewayRouteTableId: undefined,
    State: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRoute = (output: any, context: __SerdeContext): TransitGatewayRoute => {
  let contents: any = {
    DestinationCidrBlock: undefined,
    PrefixListId: undefined,
    TransitGatewayAttachments: undefined,
    Type: undefined,
    State: undefined,
  };
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = output["destinationCidrBlock"];
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = output["prefixListId"];
  }
  if (output.transitGatewayAttachments === "") {
    contents.TransitGatewayAttachments = [];
  }
  if (output["transitGatewayAttachments"] !== undefined && output["transitGatewayAttachments"]["item"] !== undefined) {
    contents.TransitGatewayAttachments = deserializeAws_ec2TransitGatewayRouteAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]),
      context
    );
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRouteAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteAttachment => {
  let contents: any = {
    ResourceId: undefined,
    TransitGatewayAttachmentId: undefined,
    ResourceType: undefined,
  };
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRouteAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayRouteAttachment(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayRouteList = (output: any, context: __SerdeContext): TransitGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayRoute(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayRouteTable = (output: any, context: __SerdeContext): TransitGatewayRouteTable => {
  let contents: any = {
    TransitGatewayRouteTableId: undefined,
    TransitGatewayId: undefined,
    State: undefined,
    DefaultAssociationRouteTable: undefined,
    DefaultPropagationRouteTable: undefined,
    CreationTime: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = output["transitGatewayRouteTableId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["defaultAssociationRouteTable"] !== undefined) {
    contents.DefaultAssociationRouteTable = output["defaultAssociationRouteTable"] == "true";
  }
  if (output["defaultPropagationRouteTable"] !== undefined) {
    contents.DefaultPropagationRouteTable = output["defaultPropagationRouteTable"] == "true";
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRouteTableAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    State: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRouteTableAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayRouteTableAssociation(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayRouteTableList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayRouteTable(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayRouteTablePropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    ResourceId: undefined,
    ResourceType: undefined,
    State: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = output["resourceType"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayRouteTablePropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayRouteTablePropagation(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayVpcAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayVpcAttachment => {
  let contents: any = {
    TransitGatewayAttachmentId: undefined,
    TransitGatewayId: undefined,
    VpcId: undefined,
    VpcOwnerId: undefined,
    State: undefined,
    SubnetIds: undefined,
    CreationTime: undefined,
    Options: undefined,
    Tags: undefined,
  };
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = output["transitGatewayAttachmentId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["vpcOwnerId"] !== undefined) {
    contents.VpcOwnerId = output["vpcOwnerId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output.subnetIds === "") {
    contents.SubnetIds = [];
  }
  if (output["subnetIds"] !== undefined && output["subnetIds"]["item"] !== undefined) {
    contents.SubnetIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["subnetIds"]["item"]),
      context
    );
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = new Date(output["creationTime"]);
  }
  if (output["options"] !== undefined) {
    contents.Options = deserializeAws_ec2TransitGatewayVpcAttachmentOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2TransitGatewayVpcAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayVpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TransitGatewayVpcAttachment(entry, context);
    });
};

const deserializeAws_ec2TransitGatewayVpcAttachmentOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayVpcAttachmentOptions => {
  let contents: any = {
    DnsSupport: undefined,
    Ipv6Support: undefined,
    ApplianceModeSupport: undefined,
  };
  if (output["dnsSupport"] !== undefined) {
    contents.DnsSupport = output["dnsSupport"];
  }
  if (output["ipv6Support"] !== undefined) {
    contents.Ipv6Support = output["ipv6Support"];
  }
  if (output["applianceModeSupport"] !== undefined) {
    contents.ApplianceModeSupport = output["applianceModeSupport"];
  }
  return contents;
};

const deserializeAws_ec2TunnelOption = (output: any, context: __SerdeContext): TunnelOption => {
  let contents: any = {
    OutsideIpAddress: undefined,
    TunnelInsideCidr: undefined,
    TunnelInsideIpv6Cidr: undefined,
    PreSharedKey: undefined,
    Phase1LifetimeSeconds: undefined,
    Phase2LifetimeSeconds: undefined,
    RekeyMarginTimeSeconds: undefined,
    RekeyFuzzPercentage: undefined,
    ReplayWindowSize: undefined,
    DpdTimeoutSeconds: undefined,
    DpdTimeoutAction: undefined,
    Phase1EncryptionAlgorithms: undefined,
    Phase2EncryptionAlgorithms: undefined,
    Phase1IntegrityAlgorithms: undefined,
    Phase2IntegrityAlgorithms: undefined,
    Phase1DHGroupNumbers: undefined,
    Phase2DHGroupNumbers: undefined,
    IkeVersions: undefined,
    StartupAction: undefined,
  };
  if (output["outsideIpAddress"] !== undefined) {
    contents.OutsideIpAddress = output["outsideIpAddress"];
  }
  if (output["tunnelInsideCidr"] !== undefined) {
    contents.TunnelInsideCidr = output["tunnelInsideCidr"];
  }
  if (output["tunnelInsideIpv6Cidr"] !== undefined) {
    contents.TunnelInsideIpv6Cidr = output["tunnelInsideIpv6Cidr"];
  }
  if (output["preSharedKey"] !== undefined) {
    contents.PreSharedKey = output["preSharedKey"];
  }
  if (output["phase1LifetimeSeconds"] !== undefined) {
    contents.Phase1LifetimeSeconds = parseInt(output["phase1LifetimeSeconds"]);
  }
  if (output["phase2LifetimeSeconds"] !== undefined) {
    contents.Phase2LifetimeSeconds = parseInt(output["phase2LifetimeSeconds"]);
  }
  if (output["rekeyMarginTimeSeconds"] !== undefined) {
    contents.RekeyMarginTimeSeconds = parseInt(output["rekeyMarginTimeSeconds"]);
  }
  if (output["rekeyFuzzPercentage"] !== undefined) {
    contents.RekeyFuzzPercentage = parseInt(output["rekeyFuzzPercentage"]);
  }
  if (output["replayWindowSize"] !== undefined) {
    contents.ReplayWindowSize = parseInt(output["replayWindowSize"]);
  }
  if (output["dpdTimeoutSeconds"] !== undefined) {
    contents.DpdTimeoutSeconds = parseInt(output["dpdTimeoutSeconds"]);
  }
  if (output["dpdTimeoutAction"] !== undefined) {
    contents.DpdTimeoutAction = output["dpdTimeoutAction"];
  }
  if (output.phase1EncryptionAlgorithmSet === "") {
    contents.Phase1EncryptionAlgorithms = [];
  }
  if (
    output["phase1EncryptionAlgorithmSet"] !== undefined &&
    output["phase1EncryptionAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase1EncryptionAlgorithms = deserializeAws_ec2Phase1EncryptionAlgorithmsList(
      __getArrayIfSingleItem(output["phase1EncryptionAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase2EncryptionAlgorithmSet === "") {
    contents.Phase2EncryptionAlgorithms = [];
  }
  if (
    output["phase2EncryptionAlgorithmSet"] !== undefined &&
    output["phase2EncryptionAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase2EncryptionAlgorithms = deserializeAws_ec2Phase2EncryptionAlgorithmsList(
      __getArrayIfSingleItem(output["phase2EncryptionAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase1IntegrityAlgorithmSet === "") {
    contents.Phase1IntegrityAlgorithms = [];
  }
  if (
    output["phase1IntegrityAlgorithmSet"] !== undefined &&
    output["phase1IntegrityAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase1IntegrityAlgorithms = deserializeAws_ec2Phase1IntegrityAlgorithmsList(
      __getArrayIfSingleItem(output["phase1IntegrityAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase2IntegrityAlgorithmSet === "") {
    contents.Phase2IntegrityAlgorithms = [];
  }
  if (
    output["phase2IntegrityAlgorithmSet"] !== undefined &&
    output["phase2IntegrityAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase2IntegrityAlgorithms = deserializeAws_ec2Phase2IntegrityAlgorithmsList(
      __getArrayIfSingleItem(output["phase2IntegrityAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase1DHGroupNumberSet === "") {
    contents.Phase1DHGroupNumbers = [];
  }
  if (output["phase1DHGroupNumberSet"] !== undefined && output["phase1DHGroupNumberSet"]["item"] !== undefined) {
    contents.Phase1DHGroupNumbers = deserializeAws_ec2Phase1DHGroupNumbersList(
      __getArrayIfSingleItem(output["phase1DHGroupNumberSet"]["item"]),
      context
    );
  }
  if (output.phase2DHGroupNumberSet === "") {
    contents.Phase2DHGroupNumbers = [];
  }
  if (output["phase2DHGroupNumberSet"] !== undefined && output["phase2DHGroupNumberSet"]["item"] !== undefined) {
    contents.Phase2DHGroupNumbers = deserializeAws_ec2Phase2DHGroupNumbersList(
      __getArrayIfSingleItem(output["phase2DHGroupNumberSet"]["item"]),
      context
    );
  }
  if (output.ikeVersionSet === "") {
    contents.IkeVersions = [];
  }
  if (output["ikeVersionSet"] !== undefined && output["ikeVersionSet"]["item"] !== undefined) {
    contents.IkeVersions = deserializeAws_ec2IKEVersionsList(
      __getArrayIfSingleItem(output["ikeVersionSet"]["item"]),
      context
    );
  }
  if (output["startupAction"] !== undefined) {
    contents.StartupAction = output["startupAction"];
  }
  return contents;
};

const deserializeAws_ec2TunnelOptionsList = (output: any, context: __SerdeContext): TunnelOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2TunnelOption(entry, context);
    });
};

const deserializeAws_ec2UnassignIpv6AddressesResult = (
  output: any,
  context: __SerdeContext
): UnassignIpv6AddressesResult => {
  let contents: any = {
    NetworkInterfaceId: undefined,
    UnassignedIpv6Addresses: undefined,
  };
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = output["networkInterfaceId"];
  }
  if (output.unassignedIpv6Addresses === "") {
    contents.UnassignedIpv6Addresses = [];
  }
  if (output["unassignedIpv6Addresses"] !== undefined && output["unassignedIpv6Addresses"]["item"] !== undefined) {
    contents.UnassignedIpv6Addresses = deserializeAws_ec2Ipv6AddressList(
      __getArrayIfSingleItem(output["unassignedIpv6Addresses"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2UnmonitorInstancesResult = (output: any, context: __SerdeContext): UnmonitorInstancesResult => {
  let contents: any = {
    InstanceMonitorings: undefined,
  };
  if (output.instancesSet === "") {
    contents.InstanceMonitorings = [];
  }
  if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.InstanceMonitorings = deserializeAws_ec2InstanceMonitoringList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem => {
  let contents: any = {
    InstanceId: undefined,
    Error: undefined,
  };
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError(output["error"], context);
  }
  return contents;
};

const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItemError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

const deserializeAws_ec2UnsuccessfulItem = (output: any, context: __SerdeContext): UnsuccessfulItem => {
  let contents: any = {
    Error: undefined,
    ResourceId: undefined,
  };
  if (output["error"] !== undefined) {
    contents.Error = deserializeAws_ec2UnsuccessfulItemError(output["error"], context);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = output["resourceId"];
  }
  return contents;
};

const deserializeAws_ec2UnsuccessfulItemError = (output: any, context: __SerdeContext): UnsuccessfulItemError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2UnsuccessfulItemList = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};

const deserializeAws_ec2UnsuccessfulItemSet = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2UnsuccessfulItem(entry, context);
    });
};

const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsEgressResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsIngressResult => {
  let contents: any = {
    Return: undefined,
  };
  if (output["return"] !== undefined) {
    contents.Return = output["return"] == "true";
  }
  return contents;
};

const deserializeAws_ec2UsageClassTypeList = (output: any, context: __SerdeContext): (UsageClassType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2UserBucketDetails = (output: any, context: __SerdeContext): UserBucketDetails => {
  let contents: any = {
    S3Bucket: undefined,
    S3Key: undefined,
  };
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = output["s3Bucket"];
  }
  if (output["s3Key"] !== undefined) {
    contents.S3Key = output["s3Key"];
  }
  return contents;
};

const deserializeAws_ec2UserIdGroupPair = (output: any, context: __SerdeContext): UserIdGroupPair => {
  let contents: any = {
    Description: undefined,
    GroupId: undefined,
    GroupName: undefined,
    PeeringStatus: undefined,
    UserId: undefined,
    VpcId: undefined,
    VpcPeeringConnectionId: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = output["groupId"];
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = output["groupName"];
  }
  if (output["peeringStatus"] !== undefined) {
    contents.PeeringStatus = output["peeringStatus"];
  }
  if (output["userId"] !== undefined) {
    contents.UserId = output["userId"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = output["vpcPeeringConnectionId"];
  }
  return contents;
};

const deserializeAws_ec2UserIdGroupPairList = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};

const deserializeAws_ec2UserIdGroupPairSet = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2UserIdGroupPair(entry, context);
    });
};

const deserializeAws_ec2ValidationError = (output: any, context: __SerdeContext): ValidationError => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2ValidationWarning = (output: any, context: __SerdeContext): ValidationWarning => {
  let contents: any = {
    Errors: undefined,
  };
  if (output.errorSet === "") {
    contents.Errors = [];
  }
  if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = deserializeAws_ec2ErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2ValueStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2VCpuInfo = (output: any, context: __SerdeContext): VCpuInfo => {
  let contents: any = {
    DefaultVCpus: undefined,
    DefaultCores: undefined,
    DefaultThreadsPerCore: undefined,
    ValidCores: undefined,
    ValidThreadsPerCore: undefined,
  };
  if (output["defaultVCpus"] !== undefined) {
    contents.DefaultVCpus = parseInt(output["defaultVCpus"]);
  }
  if (output["defaultCores"] !== undefined) {
    contents.DefaultCores = parseInt(output["defaultCores"]);
  }
  if (output["defaultThreadsPerCore"] !== undefined) {
    contents.DefaultThreadsPerCore = parseInt(output["defaultThreadsPerCore"]);
  }
  if (output.validCores === "") {
    contents.ValidCores = [];
  }
  if (output["validCores"] !== undefined && output["validCores"]["item"] !== undefined) {
    contents.ValidCores = deserializeAws_ec2CoreCountList(
      __getArrayIfSingleItem(output["validCores"]["item"]),
      context
    );
  }
  if (output.validThreadsPerCore === "") {
    contents.ValidThreadsPerCore = [];
  }
  if (output["validThreadsPerCore"] !== undefined && output["validThreadsPerCore"]["item"] !== undefined) {
    contents.ValidThreadsPerCore = deserializeAws_ec2ThreadsPerCoreList(
      __getArrayIfSingleItem(output["validThreadsPerCore"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2VgwTelemetry = (output: any, context: __SerdeContext): VgwTelemetry => {
  let contents: any = {
    AcceptedRouteCount: undefined,
    LastStatusChange: undefined,
    OutsideIpAddress: undefined,
    Status: undefined,
    StatusMessage: undefined,
    CertificateArn: undefined,
  };
  if (output["acceptedRouteCount"] !== undefined) {
    contents.AcceptedRouteCount = parseInt(output["acceptedRouteCount"]);
  }
  if (output["lastStatusChange"] !== undefined) {
    contents.LastStatusChange = new Date(output["lastStatusChange"]);
  }
  if (output["outsideIpAddress"] !== undefined) {
    contents.OutsideIpAddress = output["outsideIpAddress"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["certificateArn"] !== undefined) {
    contents.CertificateArn = output["certificateArn"];
  }
  return contents;
};

const deserializeAws_ec2VgwTelemetryList = (output: any, context: __SerdeContext): VgwTelemetry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VgwTelemetry(entry, context);
    });
};

const deserializeAws_ec2VirtualizationTypeList = (
  output: any,
  context: __SerdeContext
): (VirtualizationType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_ec2Volume = (output: any, context: __SerdeContext): Volume => {
  let contents: any = {
    Attachments: undefined,
    AvailabilityZone: undefined,
    CreateTime: undefined,
    Encrypted: undefined,
    KmsKeyId: undefined,
    OutpostArn: undefined,
    Size: undefined,
    SnapshotId: undefined,
    State: undefined,
    VolumeId: undefined,
    Iops: undefined,
    Tags: undefined,
    VolumeType: undefined,
    FastRestored: undefined,
    MultiAttachEnabled: undefined,
    Throughput: undefined,
  };
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  }
  if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = deserializeAws_ec2VolumeAttachmentList(
      __getArrayIfSingleItem(output["attachmentSet"]["item"]),
      context
    );
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = new Date(output["createTime"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = output["encrypted"] == "true";
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = output["kmsKeyId"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output["size"] !== undefined) {
    contents.Size = parseInt(output["size"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = output["snapshotId"];
  }
  if (output["status"] !== undefined) {
    contents.State = output["status"];
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["iops"] !== undefined) {
    contents.Iops = parseInt(output["iops"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = output["volumeType"];
  }
  if (output["fastRestored"] !== undefined) {
    contents.FastRestored = output["fastRestored"] == "true";
  }
  if (output["multiAttachEnabled"] !== undefined) {
    contents.MultiAttachEnabled = output["multiAttachEnabled"] == "true";
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = parseInt(output["throughput"]);
  }
  return contents;
};

const deserializeAws_ec2VolumeAttachment = (output: any, context: __SerdeContext): VolumeAttachment => {
  let contents: any = {
    AttachTime: undefined,
    Device: undefined,
    InstanceId: undefined,
    State: undefined,
    VolumeId: undefined,
    DeleteOnTermination: undefined,
  };
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = new Date(output["attachTime"]);
  }
  if (output["device"] !== undefined) {
    contents.Device = output["device"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  if (output["status"] !== undefined) {
    contents.State = output["status"];
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = output["deleteOnTermination"] == "true";
  }
  return contents;
};

const deserializeAws_ec2VolumeAttachmentList = (output: any, context: __SerdeContext): VolumeAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeAttachment(entry, context);
    });
};

const deserializeAws_ec2VolumeList = (output: any, context: __SerdeContext): Volume[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Volume(entry, context);
    });
};

const deserializeAws_ec2VolumeModification = (output: any, context: __SerdeContext): VolumeModification => {
  let contents: any = {
    VolumeId: undefined,
    ModificationState: undefined,
    StatusMessage: undefined,
    TargetSize: undefined,
    TargetIops: undefined,
    TargetVolumeType: undefined,
    TargetThroughput: undefined,
    TargetMultiAttachEnabled: undefined,
    OriginalSize: undefined,
    OriginalIops: undefined,
    OriginalVolumeType: undefined,
    OriginalThroughput: undefined,
    OriginalMultiAttachEnabled: undefined,
    Progress: undefined,
    StartTime: undefined,
    EndTime: undefined,
  };
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["modificationState"] !== undefined) {
    contents.ModificationState = output["modificationState"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  if (output["targetSize"] !== undefined) {
    contents.TargetSize = parseInt(output["targetSize"]);
  }
  if (output["targetIops"] !== undefined) {
    contents.TargetIops = parseInt(output["targetIops"]);
  }
  if (output["targetVolumeType"] !== undefined) {
    contents.TargetVolumeType = output["targetVolumeType"];
  }
  if (output["targetThroughput"] !== undefined) {
    contents.TargetThroughput = parseInt(output["targetThroughput"]);
  }
  if (output["targetMultiAttachEnabled"] !== undefined) {
    contents.TargetMultiAttachEnabled = output["targetMultiAttachEnabled"] == "true";
  }
  if (output["originalSize"] !== undefined) {
    contents.OriginalSize = parseInt(output["originalSize"]);
  }
  if (output["originalIops"] !== undefined) {
    contents.OriginalIops = parseInt(output["originalIops"]);
  }
  if (output["originalVolumeType"] !== undefined) {
    contents.OriginalVolumeType = output["originalVolumeType"];
  }
  if (output["originalThroughput"] !== undefined) {
    contents.OriginalThroughput = parseInt(output["originalThroughput"]);
  }
  if (output["originalMultiAttachEnabled"] !== undefined) {
    contents.OriginalMultiAttachEnabled = output["originalMultiAttachEnabled"] == "true";
  }
  if (output["progress"] !== undefined) {
    contents.Progress = parseInt(output["progress"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = new Date(output["startTime"]);
  }
  if (output["endTime"] !== undefined) {
    contents.EndTime = new Date(output["endTime"]);
  }
  return contents;
};

const deserializeAws_ec2VolumeModificationList = (output: any, context: __SerdeContext): VolumeModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeModification(entry, context);
    });
};

const deserializeAws_ec2VolumeStatusAction = (output: any, context: __SerdeContext): VolumeStatusAction => {
  let contents: any = {
    Code: undefined,
    Description: undefined,
    EventId: undefined,
    EventType: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["eventId"] !== undefined) {
    contents.EventId = output["eventId"];
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = output["eventType"];
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusActionsList = (output: any, context: __SerdeContext): VolumeStatusAction[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeStatusAction(entry, context);
    });
};

const deserializeAws_ec2VolumeStatusAttachmentStatus = (
  output: any,
  context: __SerdeContext
): VolumeStatusAttachmentStatus => {
  let contents: any = {
    IoPerformance: undefined,
    InstanceId: undefined,
  };
  if (output["ioPerformance"] !== undefined) {
    contents.IoPerformance = output["ioPerformance"];
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusAttachmentStatusList = (
  output: any,
  context: __SerdeContext
): VolumeStatusAttachmentStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeStatusAttachmentStatus(entry, context);
    });
};

const deserializeAws_ec2VolumeStatusDetails = (output: any, context: __SerdeContext): VolumeStatusDetails => {
  let contents: any = {
    Name: undefined,
    Status: undefined,
  };
  if (output["name"] !== undefined) {
    contents.Name = output["name"];
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusDetailsList = (output: any, context: __SerdeContext): VolumeStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeStatusDetails(entry, context);
    });
};

const deserializeAws_ec2VolumeStatusEvent = (output: any, context: __SerdeContext): VolumeStatusEvent => {
  let contents: any = {
    Description: undefined,
    EventId: undefined,
    EventType: undefined,
    NotAfter: undefined,
    NotBefore: undefined,
    InstanceId: undefined,
  };
  if (output["description"] !== undefined) {
    contents.Description = output["description"];
  }
  if (output["eventId"] !== undefined) {
    contents.EventId = output["eventId"];
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = output["eventType"];
  }
  if (output["notAfter"] !== undefined) {
    contents.NotAfter = new Date(output["notAfter"]);
  }
  if (output["notBefore"] !== undefined) {
    contents.NotBefore = new Date(output["notBefore"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = output["instanceId"];
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusEventsList = (output: any, context: __SerdeContext): VolumeStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeStatusEvent(entry, context);
    });
};

const deserializeAws_ec2VolumeStatusInfo = (output: any, context: __SerdeContext): VolumeStatusInfo => {
  let contents: any = {
    Details: undefined,
    Status: undefined,
  };
  if (output.details === "") {
    contents.Details = [];
  }
  if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
    contents.Details = deserializeAws_ec2VolumeStatusDetailsList(
      __getArrayIfSingleItem(output["details"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = output["status"];
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusItem = (output: any, context: __SerdeContext): VolumeStatusItem => {
  let contents: any = {
    Actions: undefined,
    AvailabilityZone: undefined,
    OutpostArn: undefined,
    Events: undefined,
    VolumeId: undefined,
    VolumeStatus: undefined,
    AttachmentStatuses: undefined,
  };
  if (output.actionsSet === "") {
    contents.Actions = [];
  }
  if (output["actionsSet"] !== undefined && output["actionsSet"]["item"] !== undefined) {
    contents.Actions = deserializeAws_ec2VolumeStatusActionsList(
      __getArrayIfSingleItem(output["actionsSet"]["item"]),
      context
    );
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = output["outpostArn"];
  }
  if (output.eventsSet === "") {
    contents.Events = [];
  }
  if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
    contents.Events = deserializeAws_ec2VolumeStatusEventsList(
      __getArrayIfSingleItem(output["eventsSet"]["item"]),
      context
    );
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = output["volumeId"];
  }
  if (output["volumeStatus"] !== undefined) {
    contents.VolumeStatus = deserializeAws_ec2VolumeStatusInfo(output["volumeStatus"], context);
  }
  if (output.attachmentStatuses === "") {
    contents.AttachmentStatuses = [];
  }
  if (output["attachmentStatuses"] !== undefined && output["attachmentStatuses"]["item"] !== undefined) {
    contents.AttachmentStatuses = deserializeAws_ec2VolumeStatusAttachmentStatusList(
      __getArrayIfSingleItem(output["attachmentStatuses"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2VolumeStatusList = (output: any, context: __SerdeContext): VolumeStatusItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VolumeStatusItem(entry, context);
    });
};

const deserializeAws_ec2Vpc = (output: any, context: __SerdeContext): Vpc => {
  let contents: any = {
    CidrBlock: undefined,
    DhcpOptionsId: undefined,
    State: undefined,
    VpcId: undefined,
    OwnerId: undefined,
    InstanceTenancy: undefined,
    Ipv6CidrBlockAssociationSet: undefined,
    CidrBlockAssociationSet: undefined,
    IsDefault: undefined,
    Tags: undefined,
  };
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  if (output["dhcpOptionsId"] !== undefined) {
    contents.DhcpOptionsId = output["dhcpOptionsId"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = output["instanceTenancy"];
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents.Ipv6CidrBlockAssociationSet = [];
  }
  if (
    output["ipv6CidrBlockAssociationSet"] !== undefined &&
    output["ipv6CidrBlockAssociationSet"]["item"] !== undefined
  ) {
    contents.Ipv6CidrBlockAssociationSet = deserializeAws_ec2VpcIpv6CidrBlockAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output.cidrBlockAssociationSet === "") {
    contents.CidrBlockAssociationSet = [];
  }
  if (output["cidrBlockAssociationSet"] !== undefined && output["cidrBlockAssociationSet"]["item"] !== undefined) {
    contents.CidrBlockAssociationSet = deserializeAws_ec2VpcCidrBlockAssociationSet(
      __getArrayIfSingleItem(output["cidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output["isDefault"] !== undefined) {
    contents.IsDefault = output["isDefault"] == "true";
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2VpcAttachment = (output: any, context: __SerdeContext): VpcAttachment => {
  let contents: any = {
    State: undefined,
    VpcId: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2VpcAttachmentList = (output: any, context: __SerdeContext): VpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcAttachment(entry, context);
    });
};

const deserializeAws_ec2VpcCidrBlockAssociation = (output: any, context: __SerdeContext): VpcCidrBlockAssociation => {
  let contents: any = {
    AssociationId: undefined,
    CidrBlock: undefined,
    CidrBlockState: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  if (output["cidrBlockState"] !== undefined) {
    contents.CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["cidrBlockState"], context);
  }
  return contents;
};

const deserializeAws_ec2VpcCidrBlockAssociationSet = (
  output: any,
  context: __SerdeContext
): VpcCidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcCidrBlockAssociation(entry, context);
    });
};

const deserializeAws_ec2VpcCidrBlockState = (output: any, context: __SerdeContext): VpcCidrBlockState => {
  let contents: any = {
    State: undefined,
    StatusMessage: undefined,
  };
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = output["statusMessage"];
  }
  return contents;
};

const deserializeAws_ec2VpcClassicLink = (output: any, context: __SerdeContext): VpcClassicLink => {
  let contents: any = {
    ClassicLinkEnabled: undefined,
    Tags: undefined,
    VpcId: undefined,
  };
  if (output["classicLinkEnabled"] !== undefined) {
    contents.ClassicLinkEnabled = output["classicLinkEnabled"] == "true";
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  return contents;
};

const deserializeAws_ec2VpcClassicLinkList = (output: any, context: __SerdeContext): VpcClassicLink[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcClassicLink(entry, context);
    });
};

const deserializeAws_ec2VpcEndpoint = (output: any, context: __SerdeContext): VpcEndpoint => {
  let contents: any = {
    VpcEndpointId: undefined,
    VpcEndpointType: undefined,
    VpcId: undefined,
    ServiceName: undefined,
    State: undefined,
    PolicyDocument: undefined,
    RouteTableIds: undefined,
    SubnetIds: undefined,
    Groups: undefined,
    PrivateDnsEnabled: undefined,
    RequesterManaged: undefined,
    NetworkInterfaceIds: undefined,
    DnsEntries: undefined,
    CreationTimestamp: undefined,
    Tags: undefined,
    OwnerId: undefined,
    LastError: undefined,
  };
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = output["vpcEndpointId"];
  }
  if (output["vpcEndpointType"] !== undefined) {
    contents.VpcEndpointType = output["vpcEndpointType"];
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = output["serviceName"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = output["policyDocument"];
  }
  if (output.routeTableIdSet === "") {
    contents.RouteTableIds = [];
  }
  if (output["routeTableIdSet"] !== undefined && output["routeTableIdSet"]["item"] !== undefined) {
    contents.RouteTableIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["routeTableIdSet"]["item"]),
      context
    );
  }
  if (output.subnetIdSet === "") {
    contents.SubnetIds = [];
  }
  if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
    contents.SubnetIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["subnetIdSet"]["item"]),
      context
    );
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  }
  if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = deserializeAws_ec2GroupIdentifierSet(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["privateDnsEnabled"] !== undefined) {
    contents.PrivateDnsEnabled = output["privateDnsEnabled"] == "true";
  }
  if (output["requesterManaged"] !== undefined) {
    contents.RequesterManaged = output["requesterManaged"] == "true";
  }
  if (output.networkInterfaceIdSet === "") {
    contents.NetworkInterfaceIds = [];
  }
  if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
    contents.NetworkInterfaceIds = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["networkInterfaceIdSet"]["item"]),
      context
    );
  }
  if (output.dnsEntrySet === "") {
    contents.DnsEntries = [];
  }
  if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
    contents.DnsEntries = deserializeAws_ec2DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
  }
  if (output["creationTimestamp"] !== undefined) {
    contents.CreationTimestamp = new Date(output["creationTimestamp"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["lastError"] !== undefined) {
    contents.LastError = deserializeAws_ec2LastError(output["lastError"], context);
  }
  return contents;
};

const deserializeAws_ec2VpcEndpointConnection = (output: any, context: __SerdeContext): VpcEndpointConnection => {
  let contents: any = {
    ServiceId: undefined,
    VpcEndpointId: undefined,
    VpcEndpointOwner: undefined,
    VpcEndpointState: undefined,
    CreationTimestamp: undefined,
    DnsEntries: undefined,
    NetworkLoadBalancerArns: undefined,
    GatewayLoadBalancerArns: undefined,
  };
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = output["serviceId"];
  }
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = output["vpcEndpointId"];
  }
  if (output["vpcEndpointOwner"] !== undefined) {
    contents.VpcEndpointOwner = output["vpcEndpointOwner"];
  }
  if (output["vpcEndpointState"] !== undefined) {
    contents.VpcEndpointState = output["vpcEndpointState"];
  }
  if (output["creationTimestamp"] !== undefined) {
    contents.CreationTimestamp = new Date(output["creationTimestamp"]);
  }
  if (output.dnsEntrySet === "") {
    contents.DnsEntries = [];
  }
  if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
    contents.DnsEntries = deserializeAws_ec2DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents.NetworkLoadBalancerArns = [];
  }
  if (output["networkLoadBalancerArnSet"] !== undefined && output["networkLoadBalancerArnSet"]["item"] !== undefined) {
    contents.NetworkLoadBalancerArns = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents.GatewayLoadBalancerArns = [];
  }
  if (output["gatewayLoadBalancerArnSet"] !== undefined && output["gatewayLoadBalancerArnSet"]["item"] !== undefined) {
    contents.GatewayLoadBalancerArns = deserializeAws_ec2ValueStringList(
      __getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2VpcEndpointConnectionSet = (output: any, context: __SerdeContext): VpcEndpointConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcEndpointConnection(entry, context);
    });
};

const deserializeAws_ec2VpcEndpointSet = (output: any, context: __SerdeContext): VpcEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcEndpoint(entry, context);
    });
};

const deserializeAws_ec2VpcIpv6CidrBlockAssociation = (
  output: any,
  context: __SerdeContext
): VpcIpv6CidrBlockAssociation => {
  let contents: any = {
    AssociationId: undefined,
    Ipv6CidrBlock: undefined,
    Ipv6CidrBlockState: undefined,
    NetworkBorderGroup: undefined,
    Ipv6Pool: undefined,
  };
  if (output["associationId"] !== undefined) {
    contents.AssociationId = output["associationId"];
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = output["ipv6CidrBlock"];
  }
  if (output["ipv6CidrBlockState"] !== undefined) {
    contents.Ipv6CidrBlockState = deserializeAws_ec2VpcCidrBlockState(output["ipv6CidrBlockState"], context);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = output["networkBorderGroup"];
  }
  if (output["ipv6Pool"] !== undefined) {
    contents.Ipv6Pool = output["ipv6Pool"];
  }
  return contents;
};

const deserializeAws_ec2VpcIpv6CidrBlockAssociationSet = (
  output: any,
  context: __SerdeContext
): VpcIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcIpv6CidrBlockAssociation(entry, context);
    });
};

const deserializeAws_ec2VpcList = (output: any, context: __SerdeContext): Vpc[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2Vpc(entry, context);
    });
};

const deserializeAws_ec2VpcPeeringConnection = (output: any, context: __SerdeContext): VpcPeeringConnection => {
  let contents: any = {
    AccepterVpcInfo: undefined,
    ExpirationTime: undefined,
    RequesterVpcInfo: undefined,
    Status: undefined,
    Tags: undefined,
    VpcPeeringConnectionId: undefined,
  };
  if (output["accepterVpcInfo"] !== undefined) {
    contents.AccepterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["accepterVpcInfo"], context);
  }
  if (output["expirationTime"] !== undefined) {
    contents.ExpirationTime = new Date(output["expirationTime"]);
  }
  if (output["requesterVpcInfo"] !== undefined) {
    contents.RequesterVpcInfo = deserializeAws_ec2VpcPeeringConnectionVpcInfo(output["requesterVpcInfo"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = deserializeAws_ec2VpcPeeringConnectionStateReason(output["status"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = output["vpcPeeringConnectionId"];
  }
  return contents;
};

const deserializeAws_ec2VpcPeeringConnectionList = (output: any, context: __SerdeContext): VpcPeeringConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpcPeeringConnection(entry, context);
    });
};

const deserializeAws_ec2VpcPeeringConnectionOptionsDescription = (
  output: any,
  context: __SerdeContext
): VpcPeeringConnectionOptionsDescription => {
  let contents: any = {
    AllowDnsResolutionFromRemoteVpc: undefined,
    AllowEgressFromLocalClassicLinkToRemoteVpc: undefined,
    AllowEgressFromLocalVpcToRemoteClassicLink: undefined,
  };
  if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
    contents.AllowDnsResolutionFromRemoteVpc = output["allowDnsResolutionFromRemoteVpc"] == "true";
  }
  if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
    contents.AllowEgressFromLocalClassicLinkToRemoteVpc =
      output["allowEgressFromLocalClassicLinkToRemoteVpc"] == "true";
  }
  if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
    contents.AllowEgressFromLocalVpcToRemoteClassicLink =
      output["allowEgressFromLocalVpcToRemoteClassicLink"] == "true";
  }
  return contents;
};

const deserializeAws_ec2VpcPeeringConnectionStateReason = (
  output: any,
  context: __SerdeContext
): VpcPeeringConnectionStateReason => {
  let contents: any = {
    Code: undefined,
    Message: undefined,
  };
  if (output["code"] !== undefined) {
    contents.Code = output["code"];
  }
  if (output["message"] !== undefined) {
    contents.Message = output["message"];
  }
  return contents;
};

const deserializeAws_ec2VpcPeeringConnectionVpcInfo = (
  output: any,
  context: __SerdeContext
): VpcPeeringConnectionVpcInfo => {
  let contents: any = {
    CidrBlock: undefined,
    Ipv6CidrBlockSet: undefined,
    CidrBlockSet: undefined,
    OwnerId: undefined,
    PeeringOptions: undefined,
    VpcId: undefined,
    Region: undefined,
  };
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = output["cidrBlock"];
  }
  if (output.ipv6CidrBlockSet === "") {
    contents.Ipv6CidrBlockSet = [];
  }
  if (output["ipv6CidrBlockSet"] !== undefined && output["ipv6CidrBlockSet"]["item"] !== undefined) {
    contents.Ipv6CidrBlockSet = deserializeAws_ec2Ipv6CidrBlockSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockSet"]["item"]),
      context
    );
  }
  if (output.cidrBlockSet === "") {
    contents.CidrBlockSet = [];
  }
  if (output["cidrBlockSet"] !== undefined && output["cidrBlockSet"]["item"] !== undefined) {
    contents.CidrBlockSet = deserializeAws_ec2CidrBlockSet(
      __getArrayIfSingleItem(output["cidrBlockSet"]["item"]),
      context
    );
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = output["ownerId"];
  }
  if (output["peeringOptions"] !== undefined) {
    contents.PeeringOptions = deserializeAws_ec2VpcPeeringConnectionOptionsDescription(
      output["peeringOptions"],
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = output["vpcId"];
  }
  if (output["region"] !== undefined) {
    contents.Region = output["region"];
  }
  return contents;
};

const deserializeAws_ec2VpnConnection = (output: any, context: __SerdeContext): VpnConnection => {
  let contents: any = {
    CustomerGatewayConfiguration: undefined,
    CustomerGatewayId: undefined,
    Category: undefined,
    State: undefined,
    Type: undefined,
    VpnConnectionId: undefined,
    VpnGatewayId: undefined,
    TransitGatewayId: undefined,
    Options: undefined,
    Routes: undefined,
    Tags: undefined,
    VgwTelemetry: undefined,
  };
  if (output["customerGatewayConfiguration"] !== undefined) {
    contents.CustomerGatewayConfiguration = output["customerGatewayConfiguration"];
  }
  if (output["customerGatewayId"] !== undefined) {
    contents.CustomerGatewayId = output["customerGatewayId"];
  }
  if (output["category"] !== undefined) {
    contents.Category = output["category"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output["vpnConnectionId"] !== undefined) {
    contents.VpnConnectionId = output["vpnConnectionId"];
  }
  if (output["vpnGatewayId"] !== undefined) {
    contents.VpnGatewayId = output["vpnGatewayId"];
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = output["transitGatewayId"];
  }
  if (output["options"] !== undefined) {
    contents.Options = deserializeAws_ec2VpnConnectionOptions(output["options"], context);
  }
  if (output.routes === "") {
    contents.Routes = [];
  }
  if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
    contents.Routes = deserializeAws_ec2VpnStaticRouteList(__getArrayIfSingleItem(output["routes"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.vgwTelemetry === "") {
    contents.VgwTelemetry = [];
  }
  if (output["vgwTelemetry"] !== undefined && output["vgwTelemetry"]["item"] !== undefined) {
    contents.VgwTelemetry = deserializeAws_ec2VgwTelemetryList(
      __getArrayIfSingleItem(output["vgwTelemetry"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2VpnConnectionList = (output: any, context: __SerdeContext): VpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpnConnection(entry, context);
    });
};

const deserializeAws_ec2VpnConnectionOptions = (output: any, context: __SerdeContext): VpnConnectionOptions => {
  let contents: any = {
    EnableAcceleration: undefined,
    StaticRoutesOnly: undefined,
    LocalIpv4NetworkCidr: undefined,
    RemoteIpv4NetworkCidr: undefined,
    LocalIpv6NetworkCidr: undefined,
    RemoteIpv6NetworkCidr: undefined,
    TunnelInsideIpVersion: undefined,
    TunnelOptions: undefined,
  };
  if (output["enableAcceleration"] !== undefined) {
    contents.EnableAcceleration = output["enableAcceleration"] == "true";
  }
  if (output["staticRoutesOnly"] !== undefined) {
    contents.StaticRoutesOnly = output["staticRoutesOnly"] == "true";
  }
  if (output["localIpv4NetworkCidr"] !== undefined) {
    contents.LocalIpv4NetworkCidr = output["localIpv4NetworkCidr"];
  }
  if (output["remoteIpv4NetworkCidr"] !== undefined) {
    contents.RemoteIpv4NetworkCidr = output["remoteIpv4NetworkCidr"];
  }
  if (output["localIpv6NetworkCidr"] !== undefined) {
    contents.LocalIpv6NetworkCidr = output["localIpv6NetworkCidr"];
  }
  if (output["remoteIpv6NetworkCidr"] !== undefined) {
    contents.RemoteIpv6NetworkCidr = output["remoteIpv6NetworkCidr"];
  }
  if (output["tunnelInsideIpVersion"] !== undefined) {
    contents.TunnelInsideIpVersion = output["tunnelInsideIpVersion"];
  }
  if (output.tunnelOptionSet === "") {
    contents.TunnelOptions = [];
  }
  if (output["tunnelOptionSet"] !== undefined && output["tunnelOptionSet"]["item"] !== undefined) {
    contents.TunnelOptions = deserializeAws_ec2TunnelOptionsList(
      __getArrayIfSingleItem(output["tunnelOptionSet"]["item"]),
      context
    );
  }
  return contents;
};

const deserializeAws_ec2VpnGateway = (output: any, context: __SerdeContext): VpnGateway => {
  let contents: any = {
    AvailabilityZone: undefined,
    State: undefined,
    Type: undefined,
    VpcAttachments: undefined,
    VpnGatewayId: undefined,
    AmazonSideAsn: undefined,
    Tags: undefined,
  };
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = output["availabilityZone"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  if (output["type"] !== undefined) {
    contents.Type = output["type"];
  }
  if (output.attachments === "") {
    contents.VpcAttachments = [];
  }
  if (output["attachments"] !== undefined && output["attachments"]["item"] !== undefined) {
    contents.VpcAttachments = deserializeAws_ec2VpcAttachmentList(
      __getArrayIfSingleItem(output["attachments"]["item"]),
      context
    );
  }
  if (output["vpnGatewayId"] !== undefined) {
    contents.VpnGatewayId = output["vpnGatewayId"];
  }
  if (output["amazonSideAsn"] !== undefined) {
    contents.AmazonSideAsn = parseInt(output["amazonSideAsn"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  }
  if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = deserializeAws_ec2TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

const deserializeAws_ec2VpnGatewayList = (output: any, context: __SerdeContext): VpnGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpnGateway(entry, context);
    });
};

const deserializeAws_ec2VpnStaticRoute = (output: any, context: __SerdeContext): VpnStaticRoute => {
  let contents: any = {
    DestinationCidrBlock: undefined,
    Source: undefined,
    State: undefined,
  };
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = output["destinationCidrBlock"];
  }
  if (output["source"] !== undefined) {
    contents.Source = output["source"];
  }
  if (output["state"] !== undefined) {
    contents.State = output["state"];
  }
  return contents;
};

const deserializeAws_ec2VpnStaticRouteList = (output: any, context: __SerdeContext): VpnStaticRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_ec2VpnStaticRoute(entry, context);
    });
};

const deserializeAws_ec2WithdrawByoipCidrResult = (output: any, context: __SerdeContext): WithdrawByoipCidrResult => {
  let contents: any = {
    ByoipCidr: undefined,
  };
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = deserializeAws_ec2ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"],
});

// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>
  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));

const buildHttpRpcRequest = async (
  context: __SerdeContext,
  headers: __HeaderBag,
  path: string,
  resolvedHostname: string | undefined,
  body: any
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port } = await context.endpoint();
  const contents: any = {
    protocol,
    hostname,
    port,
    method: "POST",
    path,
    headers,
  };
  if (resolvedHostname !== undefined) {
    contents.hostname = resolvedHostname;
  }
  if (body !== undefined) {
    contents.body = body;
  }
  return new __HttpRequest(contents);
};

const decodeEscapedXML = (str: string) =>
  str
    .replace(/&amp;/g, "&")
    .replace(/&apos;/g, "'")
    .replace(/&quot;/g, '"')
    .replace(/&gt;/g, ">")
    .replace(/&lt;/g, "<");

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parsedObj = xmlParse(encoded, {
        attributeNamePrefix: "",
        ignoreAttributes: false,
        parseNodeValue: false,
        trimValues: false,
        tagValueProcessor: (val, tagName) => (val.trim() === "" ? "" : decodeEscapedXML(val)),
      });
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });

const buildFormUrlencodedString = (formEntries: { [key: string]: string }): string =>
  Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");

const loadEc2ErrorCode = (output: __HttpResponse, data: any): string => {
  if (data.Errors.Error.Code !== undefined) {
    return data.Errors.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
  return "";
};
