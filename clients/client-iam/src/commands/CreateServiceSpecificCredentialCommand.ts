// smithy-typescript generated code
import { getEndpointPlugin } from "@smithy/middleware-endpoint";
import { getSerdePlugin } from "@smithy/middleware-serde";
import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";

import { commonParams } from "../endpoint/EndpointParameters";
import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IAMClient";
import {
  CreateServiceSpecificCredentialRequest,
  CreateServiceSpecificCredentialResponse,
  CreateServiceSpecificCredentialResponseFilterSensitiveLog,
} from "../models/models_0";
import {
  de_CreateServiceSpecificCredentialCommand,
  se_CreateServiceSpecificCredentialCommand,
} from "../protocols/Aws_query";

/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link CreateServiceSpecificCredentialCommand}.
 */
export interface CreateServiceSpecificCredentialCommandInput extends CreateServiceSpecificCredentialRequest {}
/**
 * @public
 *
 * The output of {@link CreateServiceSpecificCredentialCommand}.
 */
export interface CreateServiceSpecificCredentialCommandOutput
  extends CreateServiceSpecificCredentialResponse,
    __MetadataBearer {}

/**
 * <p>Generates a set of credentials consisting of a user name and password that can be used
 *             to access the service specified in the request. These credentials are generated by
 *             IAM, and can be used only for the specified service. </p>
 *          <p>You can have a maximum of two sets of service-specific credentials for each supported
 *             service per user.</p>
 *          <p>You can create service-specific credentials for CodeCommit and Amazon Keyspaces (for Apache
 *             Cassandra).</p>
 *          <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p>
 *          <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM
 *                 with CodeCommit: Git credentials, SSH keys, and Amazon Web Services access keys</a> in the
 *                 <i>IAM User Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { IAMClient, CreateServiceSpecificCredentialCommand } from "@aws-sdk/client-iam"; // ES Modules import
 * // const { IAMClient, CreateServiceSpecificCredentialCommand } = require("@aws-sdk/client-iam"); // CommonJS import
 * const client = new IAMClient(config);
 * const input = { // CreateServiceSpecificCredentialRequest
 *   UserName: "STRING_VALUE", // required
 *   ServiceName: "STRING_VALUE", // required
 * };
 * const command = new CreateServiceSpecificCredentialCommand(input);
 * const response = await client.send(command);
 * // { // CreateServiceSpecificCredentialResponse
 * //   ServiceSpecificCredential: { // ServiceSpecificCredential
 * //     CreateDate: new Date("TIMESTAMP"), // required
 * //     ServiceName: "STRING_VALUE", // required
 * //     ServiceUserName: "STRING_VALUE", // required
 * //     ServicePassword: "STRING_VALUE", // required
 * //     ServiceSpecificCredentialId: "STRING_VALUE", // required
 * //     UserName: "STRING_VALUE", // required
 * //     Status: "Active" || "Inactive", // required
 * //   },
 * // };
 *
 * ```
 *
 * @param CreateServiceSpecificCredentialCommandInput - {@link CreateServiceSpecificCredentialCommandInput}
 * @returns {@link CreateServiceSpecificCredentialCommandOutput}
 * @see {@link CreateServiceSpecificCredentialCommandInput} for command's `input` shape.
 * @see {@link CreateServiceSpecificCredentialCommandOutput} for command's `response` shape.
 * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
 *
 * @throws {@link LimitExceededException} (client fault)
 *  <p>The request was rejected because it attempted to create resources beyond the current
 *       Amazon Web Services account limits. The error message describes the limit exceeded.</p>
 *
 * @throws {@link NoSuchEntityException} (client fault)
 *  <p>The request was rejected because it referenced a resource entity that does not exist. The
 *       error message describes the resource.</p>
 *
 * @throws {@link ServiceNotSupportedException} (client fault)
 *  <p>The specified service does not support service-specific credentials.</p>
 *
 * @throws {@link IAMServiceException}
 * <p>Base exception class for all service exceptions from IAM service.</p>
 *
 * @public
 */
export class CreateServiceSpecificCredentialCommand extends $Command
  .classBuilder<
    CreateServiceSpecificCredentialCommandInput,
    CreateServiceSpecificCredentialCommandOutput,
    IAMClientResolvedConfig,
    ServiceInputTypes,
    ServiceOutputTypes
  >()
  .ep({
    ...commonParams,
  })
  .m(function (this: any, Command: any, cs: any, config: IAMClientResolvedConfig, o: any) {
    return [
      getSerdePlugin(config, this.serialize, this.deserialize),
      getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
  })
  .s("AWSIdentityManagementV20100508", "CreateServiceSpecificCredential", {})
  .n("IAMClient", "CreateServiceSpecificCredentialCommand")
  .f(void 0, CreateServiceSpecificCredentialResponseFilterSensitiveLog)
  .ser(se_CreateServiceSpecificCredentialCommand)
  .de(de_CreateServiceSpecificCredentialCommand)
  .build() {}
