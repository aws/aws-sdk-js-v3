// smithy-typescript generated code
import { getEndpointPlugin } from "@smithy/middleware-endpoint";
import { getSerdePlugin } from "@smithy/middleware-serde";
import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";

import { commonParams } from "../endpoint/EndpointParameters";
import { GuardDutyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../GuardDutyClient";
import { DescribeMalwareScansRequest, DescribeMalwareScansResponse } from "../models/models_0";
import { de_DescribeMalwareScansCommand, se_DescribeMalwareScansCommand } from "../protocols/Aws_restJson1";

/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link DescribeMalwareScansCommand}.
 */
export interface DescribeMalwareScansCommandInput extends DescribeMalwareScansRequest {}
/**
 * @public
 *
 * The output of {@link DescribeMalwareScansCommand}.
 */
export interface DescribeMalwareScansCommandOutput extends DescribeMalwareScansResponse, __MetadataBearer {}

/**
 * <p>Returns a list of malware scans. Each member account can view the malware scans for their
 *       own accounts. An administrator can view the malware scans for all the member accounts.</p>
 *          <p>There might be regional differences because some data sources might not be
 *       available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more
 *       information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { GuardDutyClient, DescribeMalwareScansCommand } from "@aws-sdk/client-guardduty"; // ES Modules import
 * // const { GuardDutyClient, DescribeMalwareScansCommand } = require("@aws-sdk/client-guardduty"); // CommonJS import
 * const client = new GuardDutyClient(config);
 * const input = { // DescribeMalwareScansRequest
 *   DetectorId: "STRING_VALUE", // required
 *   NextToken: "STRING_VALUE",
 *   MaxResults: Number("int"),
 *   FilterCriteria: { // FilterCriteria
 *     FilterCriterion: [ // FilterCriterionList
 *       { // FilterCriterion
 *         CriterionKey: "EC2_INSTANCE_ARN" || "SCAN_ID" || "ACCOUNT_ID" || "GUARDDUTY_FINDING_ID" || "SCAN_START_TIME" || "SCAN_STATUS" || "SCAN_TYPE",
 *         FilterCondition: { // FilterCondition
 *           EqualsValue: "STRING_VALUE",
 *           GreaterThan: Number("long"),
 *           LessThan: Number("long"),
 *         },
 *       },
 *     ],
 *   },
 *   SortCriteria: { // SortCriteria
 *     AttributeName: "STRING_VALUE",
 *     OrderBy: "ASC" || "DESC",
 *   },
 * };
 * const command = new DescribeMalwareScansCommand(input);
 * const response = await client.send(command);
 * // { // DescribeMalwareScansResponse
 * //   Scans: [ // Scans // required
 * //     { // Scan
 * //       DetectorId: "STRING_VALUE",
 * //       AdminDetectorId: "STRING_VALUE",
 * //       ScanId: "STRING_VALUE",
 * //       ScanStatus: "RUNNING" || "COMPLETED" || "FAILED" || "SKIPPED",
 * //       FailureReason: "STRING_VALUE",
 * //       ScanStartTime: new Date("TIMESTAMP"),
 * //       ScanEndTime: new Date("TIMESTAMP"),
 * //       TriggerDetails: { // TriggerDetails
 * //         GuardDutyFindingId: "STRING_VALUE",
 * //         Description: "STRING_VALUE",
 * //       },
 * //       ResourceDetails: { // ResourceDetails
 * //         InstanceArn: "STRING_VALUE",
 * //       },
 * //       ScanResultDetails: { // ScanResultDetails
 * //         ScanResult: "CLEAN" || "INFECTED",
 * //       },
 * //       AccountId: "STRING_VALUE",
 * //       TotalBytes: Number("long"),
 * //       FileCount: Number("long"),
 * //       AttachedVolumes: [ // VolumeDetails
 * //         { // VolumeDetail
 * //           VolumeArn: "STRING_VALUE",
 * //           VolumeType: "STRING_VALUE",
 * //           DeviceName: "STRING_VALUE",
 * //           VolumeSizeInGB: Number("int"),
 * //           EncryptionType: "STRING_VALUE",
 * //           SnapshotArn: "STRING_VALUE",
 * //           KmsKeyArn: "STRING_VALUE",
 * //         },
 * //       ],
 * //       ScanType: "GUARDDUTY_INITIATED" || "ON_DEMAND",
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param DescribeMalwareScansCommandInput - {@link DescribeMalwareScansCommandInput}
 * @returns {@link DescribeMalwareScansCommandOutput}
 * @see {@link DescribeMalwareScansCommandInput} for command's `input` shape.
 * @see {@link DescribeMalwareScansCommandOutput} for command's `response` shape.
 * @see {@link GuardDutyClientResolvedConfig | config} for GuardDutyClient's `config` shape.
 *
 * @throws {@link BadRequestException} (client fault)
 *  <p>A bad request exception object.</p>
 *
 * @throws {@link InternalServerErrorException} (server fault)
 *  <p>An internal server error exception object.</p>
 *
 * @throws {@link GuardDutyServiceException}
 * <p>Base exception class for all service exceptions from GuardDuty service.</p>
 *
 * @public
 */
export class DescribeMalwareScansCommand extends $Command
  .classBuilder<
    DescribeMalwareScansCommandInput,
    DescribeMalwareScansCommandOutput,
    GuardDutyClientResolvedConfig,
    ServiceInputTypes,
    ServiceOutputTypes
  >()
  .ep({
    ...commonParams,
  })
  .m(function (this: any, Command: any, cs: any, config: GuardDutyClientResolvedConfig, o: any) {
    return [
      getSerdePlugin(config, this.serialize, this.deserialize),
      getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
  })
  .s("GuardDutyAPIService", "DescribeMalwareScans", {})
  .n("GuardDutyClient", "DescribeMalwareScansCommand")
  .f(void 0, void 0)
  .ser(se_DescribeMalwareScansCommand)
  .de(de_DescribeMalwareScansCommand)
  .build() {}
