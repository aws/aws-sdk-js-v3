import {
  AcceptCertificateTransferCommandInput,
  AcceptCertificateTransferCommandOutput
} from "../commands/AcceptCertificateTransferCommand";
import {
  AddThingToBillingGroupCommandInput,
  AddThingToBillingGroupCommandOutput
} from "../commands/AddThingToBillingGroupCommand";
import {
  AddThingToThingGroupCommandInput,
  AddThingToThingGroupCommandOutput
} from "../commands/AddThingToThingGroupCommand";
import {
  AssociateTargetsWithJobCommandInput,
  AssociateTargetsWithJobCommandOutput
} from "../commands/AssociateTargetsWithJobCommand";
import {
  AttachPolicyCommandInput,
  AttachPolicyCommandOutput
} from "../commands/AttachPolicyCommand";
import {
  AttachPrincipalPolicyCommandInput,
  AttachPrincipalPolicyCommandOutput
} from "../commands/AttachPrincipalPolicyCommand";
import {
  AttachSecurityProfileCommandInput,
  AttachSecurityProfileCommandOutput
} from "../commands/AttachSecurityProfileCommand";
import {
  AttachThingPrincipalCommandInput,
  AttachThingPrincipalCommandOutput
} from "../commands/AttachThingPrincipalCommand";
import {
  CancelAuditMitigationActionsTaskCommandInput,
  CancelAuditMitigationActionsTaskCommandOutput
} from "../commands/CancelAuditMitigationActionsTaskCommand";
import {
  CancelAuditTaskCommandInput,
  CancelAuditTaskCommandOutput
} from "../commands/CancelAuditTaskCommand";
import {
  CancelCertificateTransferCommandInput,
  CancelCertificateTransferCommandOutput
} from "../commands/CancelCertificateTransferCommand";
import {
  CancelJobCommandInput,
  CancelJobCommandOutput
} from "../commands/CancelJobCommand";
import {
  CancelJobExecutionCommandInput,
  CancelJobExecutionCommandOutput
} from "../commands/CancelJobExecutionCommand";
import {
  ClearDefaultAuthorizerCommandInput,
  ClearDefaultAuthorizerCommandOutput
} from "../commands/ClearDefaultAuthorizerCommand";
import {
  ConfirmTopicRuleDestinationCommandInput,
  ConfirmTopicRuleDestinationCommandOutput
} from "../commands/ConfirmTopicRuleDestinationCommand";
import {
  CreateAuthorizerCommandInput,
  CreateAuthorizerCommandOutput
} from "../commands/CreateAuthorizerCommand";
import {
  CreateBillingGroupCommandInput,
  CreateBillingGroupCommandOutput
} from "../commands/CreateBillingGroupCommand";
import {
  CreateCertificateFromCsrCommandInput,
  CreateCertificateFromCsrCommandOutput
} from "../commands/CreateCertificateFromCsrCommand";
import {
  CreateDomainConfigurationCommandInput,
  CreateDomainConfigurationCommandOutput
} from "../commands/CreateDomainConfigurationCommand";
import {
  CreateDynamicThingGroupCommandInput,
  CreateDynamicThingGroupCommandOutput
} from "../commands/CreateDynamicThingGroupCommand";
import {
  CreateJobCommandInput,
  CreateJobCommandOutput
} from "../commands/CreateJobCommand";
import {
  CreateKeysAndCertificateCommandInput,
  CreateKeysAndCertificateCommandOutput
} from "../commands/CreateKeysAndCertificateCommand";
import {
  CreateMitigationActionCommandInput,
  CreateMitigationActionCommandOutput
} from "../commands/CreateMitigationActionCommand";
import {
  CreateOTAUpdateCommandInput,
  CreateOTAUpdateCommandOutput
} from "../commands/CreateOTAUpdateCommand";
import {
  CreatePolicyCommandInput,
  CreatePolicyCommandOutput
} from "../commands/CreatePolicyCommand";
import {
  CreatePolicyVersionCommandInput,
  CreatePolicyVersionCommandOutput
} from "../commands/CreatePolicyVersionCommand";
import {
  CreateProvisioningClaimCommandInput,
  CreateProvisioningClaimCommandOutput
} from "../commands/CreateProvisioningClaimCommand";
import {
  CreateProvisioningTemplateCommandInput,
  CreateProvisioningTemplateCommandOutput
} from "../commands/CreateProvisioningTemplateCommand";
import {
  CreateProvisioningTemplateVersionCommandInput,
  CreateProvisioningTemplateVersionCommandOutput
} from "../commands/CreateProvisioningTemplateVersionCommand";
import {
  CreateRoleAliasCommandInput,
  CreateRoleAliasCommandOutput
} from "../commands/CreateRoleAliasCommand";
import {
  CreateScheduledAuditCommandInput,
  CreateScheduledAuditCommandOutput
} from "../commands/CreateScheduledAuditCommand";
import {
  CreateSecurityProfileCommandInput,
  CreateSecurityProfileCommandOutput
} from "../commands/CreateSecurityProfileCommand";
import {
  CreateStreamCommandInput,
  CreateStreamCommandOutput
} from "../commands/CreateStreamCommand";
import {
  CreateThingCommandInput,
  CreateThingCommandOutput
} from "../commands/CreateThingCommand";
import {
  CreateThingGroupCommandInput,
  CreateThingGroupCommandOutput
} from "../commands/CreateThingGroupCommand";
import {
  CreateThingTypeCommandInput,
  CreateThingTypeCommandOutput
} from "../commands/CreateThingTypeCommand";
import {
  CreateTopicRuleCommandInput,
  CreateTopicRuleCommandOutput
} from "../commands/CreateTopicRuleCommand";
import {
  CreateTopicRuleDestinationCommandInput,
  CreateTopicRuleDestinationCommandOutput
} from "../commands/CreateTopicRuleDestinationCommand";
import {
  DeleteAccountAuditConfigurationCommandInput,
  DeleteAccountAuditConfigurationCommandOutput
} from "../commands/DeleteAccountAuditConfigurationCommand";
import {
  DeleteAuthorizerCommandInput,
  DeleteAuthorizerCommandOutput
} from "../commands/DeleteAuthorizerCommand";
import {
  DeleteBillingGroupCommandInput,
  DeleteBillingGroupCommandOutput
} from "../commands/DeleteBillingGroupCommand";
import {
  DeleteCACertificateCommandInput,
  DeleteCACertificateCommandOutput
} from "../commands/DeleteCACertificateCommand";
import {
  DeleteCertificateCommandInput,
  DeleteCertificateCommandOutput
} from "../commands/DeleteCertificateCommand";
import {
  DeleteDomainConfigurationCommandInput,
  DeleteDomainConfigurationCommandOutput
} from "../commands/DeleteDomainConfigurationCommand";
import {
  DeleteDynamicThingGroupCommandInput,
  DeleteDynamicThingGroupCommandOutput
} from "../commands/DeleteDynamicThingGroupCommand";
import {
  DeleteJobCommandInput,
  DeleteJobCommandOutput
} from "../commands/DeleteJobCommand";
import {
  DeleteJobExecutionCommandInput,
  DeleteJobExecutionCommandOutput
} from "../commands/DeleteJobExecutionCommand";
import {
  DeleteMitigationActionCommandInput,
  DeleteMitigationActionCommandOutput
} from "../commands/DeleteMitigationActionCommand";
import {
  DeleteOTAUpdateCommandInput,
  DeleteOTAUpdateCommandOutput
} from "../commands/DeleteOTAUpdateCommand";
import {
  DeletePolicyCommandInput,
  DeletePolicyCommandOutput
} from "../commands/DeletePolicyCommand";
import {
  DeletePolicyVersionCommandInput,
  DeletePolicyVersionCommandOutput
} from "../commands/DeletePolicyVersionCommand";
import {
  DeleteProvisioningTemplateCommandInput,
  DeleteProvisioningTemplateCommandOutput
} from "../commands/DeleteProvisioningTemplateCommand";
import {
  DeleteProvisioningTemplateVersionCommandInput,
  DeleteProvisioningTemplateVersionCommandOutput
} from "../commands/DeleteProvisioningTemplateVersionCommand";
import {
  DeleteRegistrationCodeCommandInput,
  DeleteRegistrationCodeCommandOutput
} from "../commands/DeleteRegistrationCodeCommand";
import {
  DeleteRoleAliasCommandInput,
  DeleteRoleAliasCommandOutput
} from "../commands/DeleteRoleAliasCommand";
import {
  DeleteScheduledAuditCommandInput,
  DeleteScheduledAuditCommandOutput
} from "../commands/DeleteScheduledAuditCommand";
import {
  DeleteSecurityProfileCommandInput,
  DeleteSecurityProfileCommandOutput
} from "../commands/DeleteSecurityProfileCommand";
import {
  DeleteStreamCommandInput,
  DeleteStreamCommandOutput
} from "../commands/DeleteStreamCommand";
import {
  DeleteThingCommandInput,
  DeleteThingCommandOutput
} from "../commands/DeleteThingCommand";
import {
  DeleteThingGroupCommandInput,
  DeleteThingGroupCommandOutput
} from "../commands/DeleteThingGroupCommand";
import {
  DeleteThingTypeCommandInput,
  DeleteThingTypeCommandOutput
} from "../commands/DeleteThingTypeCommand";
import {
  DeleteTopicRuleCommandInput,
  DeleteTopicRuleCommandOutput
} from "../commands/DeleteTopicRuleCommand";
import {
  DeleteTopicRuleDestinationCommandInput,
  DeleteTopicRuleDestinationCommandOutput
} from "../commands/DeleteTopicRuleDestinationCommand";
import {
  DeleteV2LoggingLevelCommandInput,
  DeleteV2LoggingLevelCommandOutput
} from "../commands/DeleteV2LoggingLevelCommand";
import {
  DeprecateThingTypeCommandInput,
  DeprecateThingTypeCommandOutput
} from "../commands/DeprecateThingTypeCommand";
import {
  DescribeAccountAuditConfigurationCommandInput,
  DescribeAccountAuditConfigurationCommandOutput
} from "../commands/DescribeAccountAuditConfigurationCommand";
import {
  DescribeAuditFindingCommandInput,
  DescribeAuditFindingCommandOutput
} from "../commands/DescribeAuditFindingCommand";
import {
  DescribeAuditMitigationActionsTaskCommandInput,
  DescribeAuditMitigationActionsTaskCommandOutput
} from "../commands/DescribeAuditMitigationActionsTaskCommand";
import {
  DescribeAuditTaskCommandInput,
  DescribeAuditTaskCommandOutput
} from "../commands/DescribeAuditTaskCommand";
import {
  DescribeAuthorizerCommandInput,
  DescribeAuthorizerCommandOutput
} from "../commands/DescribeAuthorizerCommand";
import {
  DescribeBillingGroupCommandInput,
  DescribeBillingGroupCommandOutput
} from "../commands/DescribeBillingGroupCommand";
import {
  DescribeCACertificateCommandInput,
  DescribeCACertificateCommandOutput
} from "../commands/DescribeCACertificateCommand";
import {
  DescribeCertificateCommandInput,
  DescribeCertificateCommandOutput
} from "../commands/DescribeCertificateCommand";
import {
  DescribeDefaultAuthorizerCommandInput,
  DescribeDefaultAuthorizerCommandOutput
} from "../commands/DescribeDefaultAuthorizerCommand";
import {
  DescribeDomainConfigurationCommandInput,
  DescribeDomainConfigurationCommandOutput
} from "../commands/DescribeDomainConfigurationCommand";
import {
  DescribeEndpointCommandInput,
  DescribeEndpointCommandOutput
} from "../commands/DescribeEndpointCommand";
import {
  DescribeEventConfigurationsCommandInput,
  DescribeEventConfigurationsCommandOutput
} from "../commands/DescribeEventConfigurationsCommand";
import {
  DescribeIndexCommandInput,
  DescribeIndexCommandOutput
} from "../commands/DescribeIndexCommand";
import {
  DescribeJobCommandInput,
  DescribeJobCommandOutput
} from "../commands/DescribeJobCommand";
import {
  DescribeJobExecutionCommandInput,
  DescribeJobExecutionCommandOutput
} from "../commands/DescribeJobExecutionCommand";
import {
  DescribeMitigationActionCommandInput,
  DescribeMitigationActionCommandOutput
} from "../commands/DescribeMitigationActionCommand";
import {
  DescribeProvisioningTemplateCommandInput,
  DescribeProvisioningTemplateCommandOutput
} from "../commands/DescribeProvisioningTemplateCommand";
import {
  DescribeProvisioningTemplateVersionCommandInput,
  DescribeProvisioningTemplateVersionCommandOutput
} from "../commands/DescribeProvisioningTemplateVersionCommand";
import {
  DescribeRoleAliasCommandInput,
  DescribeRoleAliasCommandOutput
} from "../commands/DescribeRoleAliasCommand";
import {
  DescribeScheduledAuditCommandInput,
  DescribeScheduledAuditCommandOutput
} from "../commands/DescribeScheduledAuditCommand";
import {
  DescribeSecurityProfileCommandInput,
  DescribeSecurityProfileCommandOutput
} from "../commands/DescribeSecurityProfileCommand";
import {
  DescribeStreamCommandInput,
  DescribeStreamCommandOutput
} from "../commands/DescribeStreamCommand";
import {
  DescribeThingCommandInput,
  DescribeThingCommandOutput
} from "../commands/DescribeThingCommand";
import {
  DescribeThingGroupCommandInput,
  DescribeThingGroupCommandOutput
} from "../commands/DescribeThingGroupCommand";
import {
  DescribeThingRegistrationTaskCommandInput,
  DescribeThingRegistrationTaskCommandOutput
} from "../commands/DescribeThingRegistrationTaskCommand";
import {
  DescribeThingTypeCommandInput,
  DescribeThingTypeCommandOutput
} from "../commands/DescribeThingTypeCommand";
import {
  DetachPolicyCommandInput,
  DetachPolicyCommandOutput
} from "../commands/DetachPolicyCommand";
import {
  DetachPrincipalPolicyCommandInput,
  DetachPrincipalPolicyCommandOutput
} from "../commands/DetachPrincipalPolicyCommand";
import {
  DetachSecurityProfileCommandInput,
  DetachSecurityProfileCommandOutput
} from "../commands/DetachSecurityProfileCommand";
import {
  DetachThingPrincipalCommandInput,
  DetachThingPrincipalCommandOutput
} from "../commands/DetachThingPrincipalCommand";
import {
  DisableTopicRuleCommandInput,
  DisableTopicRuleCommandOutput
} from "../commands/DisableTopicRuleCommand";
import {
  EnableTopicRuleCommandInput,
  EnableTopicRuleCommandOutput
} from "../commands/EnableTopicRuleCommand";
import {
  GetCardinalityCommandInput,
  GetCardinalityCommandOutput
} from "../commands/GetCardinalityCommand";
import {
  GetEffectivePoliciesCommandInput,
  GetEffectivePoliciesCommandOutput
} from "../commands/GetEffectivePoliciesCommand";
import {
  GetIndexingConfigurationCommandInput,
  GetIndexingConfigurationCommandOutput
} from "../commands/GetIndexingConfigurationCommand";
import {
  GetJobDocumentCommandInput,
  GetJobDocumentCommandOutput
} from "../commands/GetJobDocumentCommand";
import {
  GetLoggingOptionsCommandInput,
  GetLoggingOptionsCommandOutput
} from "../commands/GetLoggingOptionsCommand";
import {
  GetOTAUpdateCommandInput,
  GetOTAUpdateCommandOutput
} from "../commands/GetOTAUpdateCommand";
import {
  GetPercentilesCommandInput,
  GetPercentilesCommandOutput
} from "../commands/GetPercentilesCommand";
import {
  GetPolicyCommandInput,
  GetPolicyCommandOutput
} from "../commands/GetPolicyCommand";
import {
  GetPolicyVersionCommandInput,
  GetPolicyVersionCommandOutput
} from "../commands/GetPolicyVersionCommand";
import {
  GetRegistrationCodeCommandInput,
  GetRegistrationCodeCommandOutput
} from "../commands/GetRegistrationCodeCommand";
import {
  GetStatisticsCommandInput,
  GetStatisticsCommandOutput
} from "../commands/GetStatisticsCommand";
import {
  GetTopicRuleCommandInput,
  GetTopicRuleCommandOutput
} from "../commands/GetTopicRuleCommand";
import {
  GetTopicRuleDestinationCommandInput,
  GetTopicRuleDestinationCommandOutput
} from "../commands/GetTopicRuleDestinationCommand";
import {
  GetV2LoggingOptionsCommandInput,
  GetV2LoggingOptionsCommandOutput
} from "../commands/GetV2LoggingOptionsCommand";
import {
  ListActiveViolationsCommandInput,
  ListActiveViolationsCommandOutput
} from "../commands/ListActiveViolationsCommand";
import {
  ListAttachedPoliciesCommandInput,
  ListAttachedPoliciesCommandOutput
} from "../commands/ListAttachedPoliciesCommand";
import {
  ListAuditFindingsCommandInput,
  ListAuditFindingsCommandOutput
} from "../commands/ListAuditFindingsCommand";
import {
  ListAuditMitigationActionsExecutionsCommandInput,
  ListAuditMitigationActionsExecutionsCommandOutput
} from "../commands/ListAuditMitigationActionsExecutionsCommand";
import {
  ListAuditMitigationActionsTasksCommandInput,
  ListAuditMitigationActionsTasksCommandOutput
} from "../commands/ListAuditMitigationActionsTasksCommand";
import {
  ListAuditTasksCommandInput,
  ListAuditTasksCommandOutput
} from "../commands/ListAuditTasksCommand";
import {
  ListAuthorizersCommandInput,
  ListAuthorizersCommandOutput
} from "../commands/ListAuthorizersCommand";
import {
  ListBillingGroupsCommandInput,
  ListBillingGroupsCommandOutput
} from "../commands/ListBillingGroupsCommand";
import {
  ListCACertificatesCommandInput,
  ListCACertificatesCommandOutput
} from "../commands/ListCACertificatesCommand";
import {
  ListCertificatesByCACommandInput,
  ListCertificatesByCACommandOutput
} from "../commands/ListCertificatesByCACommand";
import {
  ListCertificatesCommandInput,
  ListCertificatesCommandOutput
} from "../commands/ListCertificatesCommand";
import {
  ListDomainConfigurationsCommandInput,
  ListDomainConfigurationsCommandOutput
} from "../commands/ListDomainConfigurationsCommand";
import {
  ListIndicesCommandInput,
  ListIndicesCommandOutput
} from "../commands/ListIndicesCommand";
import {
  ListJobExecutionsForJobCommandInput,
  ListJobExecutionsForJobCommandOutput
} from "../commands/ListJobExecutionsForJobCommand";
import {
  ListJobExecutionsForThingCommandInput,
  ListJobExecutionsForThingCommandOutput
} from "../commands/ListJobExecutionsForThingCommand";
import {
  ListJobsCommandInput,
  ListJobsCommandOutput
} from "../commands/ListJobsCommand";
import {
  ListMitigationActionsCommandInput,
  ListMitigationActionsCommandOutput
} from "../commands/ListMitigationActionsCommand";
import {
  ListOTAUpdatesCommandInput,
  ListOTAUpdatesCommandOutput
} from "../commands/ListOTAUpdatesCommand";
import {
  ListOutgoingCertificatesCommandInput,
  ListOutgoingCertificatesCommandOutput
} from "../commands/ListOutgoingCertificatesCommand";
import {
  ListPoliciesCommandInput,
  ListPoliciesCommandOutput
} from "../commands/ListPoliciesCommand";
import {
  ListPolicyPrincipalsCommandInput,
  ListPolicyPrincipalsCommandOutput
} from "../commands/ListPolicyPrincipalsCommand";
import {
  ListPolicyVersionsCommandInput,
  ListPolicyVersionsCommandOutput
} from "../commands/ListPolicyVersionsCommand";
import {
  ListPrincipalPoliciesCommandInput,
  ListPrincipalPoliciesCommandOutput
} from "../commands/ListPrincipalPoliciesCommand";
import {
  ListPrincipalThingsCommandInput,
  ListPrincipalThingsCommandOutput
} from "../commands/ListPrincipalThingsCommand";
import {
  ListProvisioningTemplateVersionsCommandInput,
  ListProvisioningTemplateVersionsCommandOutput
} from "../commands/ListProvisioningTemplateVersionsCommand";
import {
  ListProvisioningTemplatesCommandInput,
  ListProvisioningTemplatesCommandOutput
} from "../commands/ListProvisioningTemplatesCommand";
import {
  ListRoleAliasesCommandInput,
  ListRoleAliasesCommandOutput
} from "../commands/ListRoleAliasesCommand";
import {
  ListScheduledAuditsCommandInput,
  ListScheduledAuditsCommandOutput
} from "../commands/ListScheduledAuditsCommand";
import {
  ListSecurityProfilesCommandInput,
  ListSecurityProfilesCommandOutput
} from "../commands/ListSecurityProfilesCommand";
import {
  ListSecurityProfilesForTargetCommandInput,
  ListSecurityProfilesForTargetCommandOutput
} from "../commands/ListSecurityProfilesForTargetCommand";
import {
  ListStreamsCommandInput,
  ListStreamsCommandOutput
} from "../commands/ListStreamsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput
} from "../commands/ListTagsForResourceCommand";
import {
  ListTargetsForPolicyCommandInput,
  ListTargetsForPolicyCommandOutput
} from "../commands/ListTargetsForPolicyCommand";
import {
  ListTargetsForSecurityProfileCommandInput,
  ListTargetsForSecurityProfileCommandOutput
} from "../commands/ListTargetsForSecurityProfileCommand";
import {
  ListThingGroupsCommandInput,
  ListThingGroupsCommandOutput
} from "../commands/ListThingGroupsCommand";
import {
  ListThingGroupsForThingCommandInput,
  ListThingGroupsForThingCommandOutput
} from "../commands/ListThingGroupsForThingCommand";
import {
  ListThingPrincipalsCommandInput,
  ListThingPrincipalsCommandOutput
} from "../commands/ListThingPrincipalsCommand";
import {
  ListThingRegistrationTaskReportsCommandInput,
  ListThingRegistrationTaskReportsCommandOutput
} from "../commands/ListThingRegistrationTaskReportsCommand";
import {
  ListThingRegistrationTasksCommandInput,
  ListThingRegistrationTasksCommandOutput
} from "../commands/ListThingRegistrationTasksCommand";
import {
  ListThingTypesCommandInput,
  ListThingTypesCommandOutput
} from "../commands/ListThingTypesCommand";
import {
  ListThingsCommandInput,
  ListThingsCommandOutput
} from "../commands/ListThingsCommand";
import {
  ListThingsInBillingGroupCommandInput,
  ListThingsInBillingGroupCommandOutput
} from "../commands/ListThingsInBillingGroupCommand";
import {
  ListThingsInThingGroupCommandInput,
  ListThingsInThingGroupCommandOutput
} from "../commands/ListThingsInThingGroupCommand";
import {
  ListTopicRuleDestinationsCommandInput,
  ListTopicRuleDestinationsCommandOutput
} from "../commands/ListTopicRuleDestinationsCommand";
import {
  ListTopicRulesCommandInput,
  ListTopicRulesCommandOutput
} from "../commands/ListTopicRulesCommand";
import {
  ListV2LoggingLevelsCommandInput,
  ListV2LoggingLevelsCommandOutput
} from "../commands/ListV2LoggingLevelsCommand";
import {
  ListViolationEventsCommandInput,
  ListViolationEventsCommandOutput
} from "../commands/ListViolationEventsCommand";
import {
  RegisterCACertificateCommandInput,
  RegisterCACertificateCommandOutput
} from "../commands/RegisterCACertificateCommand";
import {
  RegisterCertificateCommandInput,
  RegisterCertificateCommandOutput
} from "../commands/RegisterCertificateCommand";
import {
  RegisterThingCommandInput,
  RegisterThingCommandOutput
} from "../commands/RegisterThingCommand";
import {
  RejectCertificateTransferCommandInput,
  RejectCertificateTransferCommandOutput
} from "../commands/RejectCertificateTransferCommand";
import {
  RemoveThingFromBillingGroupCommandInput,
  RemoveThingFromBillingGroupCommandOutput
} from "../commands/RemoveThingFromBillingGroupCommand";
import {
  RemoveThingFromThingGroupCommandInput,
  RemoveThingFromThingGroupCommandOutput
} from "../commands/RemoveThingFromThingGroupCommand";
import {
  ReplaceTopicRuleCommandInput,
  ReplaceTopicRuleCommandOutput
} from "../commands/ReplaceTopicRuleCommand";
import {
  SearchIndexCommandInput,
  SearchIndexCommandOutput
} from "../commands/SearchIndexCommand";
import {
  SetDefaultAuthorizerCommandInput,
  SetDefaultAuthorizerCommandOutput
} from "../commands/SetDefaultAuthorizerCommand";
import {
  SetDefaultPolicyVersionCommandInput,
  SetDefaultPolicyVersionCommandOutput
} from "../commands/SetDefaultPolicyVersionCommand";
import {
  SetLoggingOptionsCommandInput,
  SetLoggingOptionsCommandOutput
} from "../commands/SetLoggingOptionsCommand";
import {
  SetV2LoggingLevelCommandInput,
  SetV2LoggingLevelCommandOutput
} from "../commands/SetV2LoggingLevelCommand";
import {
  SetV2LoggingOptionsCommandInput,
  SetV2LoggingOptionsCommandOutput
} from "../commands/SetV2LoggingOptionsCommand";
import {
  StartAuditMitigationActionsTaskCommandInput,
  StartAuditMitigationActionsTaskCommandOutput
} from "../commands/StartAuditMitigationActionsTaskCommand";
import {
  StartOnDemandAuditTaskCommandInput,
  StartOnDemandAuditTaskCommandOutput
} from "../commands/StartOnDemandAuditTaskCommand";
import {
  StartThingRegistrationTaskCommandInput,
  StartThingRegistrationTaskCommandOutput
} from "../commands/StartThingRegistrationTaskCommand";
import {
  StopThingRegistrationTaskCommandInput,
  StopThingRegistrationTaskCommandOutput
} from "../commands/StopThingRegistrationTaskCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput
} from "../commands/TagResourceCommand";
import {
  TestAuthorizationCommandInput,
  TestAuthorizationCommandOutput
} from "../commands/TestAuthorizationCommand";
import {
  TestInvokeAuthorizerCommandInput,
  TestInvokeAuthorizerCommandOutput
} from "../commands/TestInvokeAuthorizerCommand";
import {
  TransferCertificateCommandInput,
  TransferCertificateCommandOutput
} from "../commands/TransferCertificateCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput
} from "../commands/UntagResourceCommand";
import {
  UpdateAccountAuditConfigurationCommandInput,
  UpdateAccountAuditConfigurationCommandOutput
} from "../commands/UpdateAccountAuditConfigurationCommand";
import {
  UpdateAuthorizerCommandInput,
  UpdateAuthorizerCommandOutput
} from "../commands/UpdateAuthorizerCommand";
import {
  UpdateBillingGroupCommandInput,
  UpdateBillingGroupCommandOutput
} from "../commands/UpdateBillingGroupCommand";
import {
  UpdateCACertificateCommandInput,
  UpdateCACertificateCommandOutput
} from "../commands/UpdateCACertificateCommand";
import {
  UpdateCertificateCommandInput,
  UpdateCertificateCommandOutput
} from "../commands/UpdateCertificateCommand";
import {
  UpdateDomainConfigurationCommandInput,
  UpdateDomainConfigurationCommandOutput
} from "../commands/UpdateDomainConfigurationCommand";
import {
  UpdateDynamicThingGroupCommandInput,
  UpdateDynamicThingGroupCommandOutput
} from "../commands/UpdateDynamicThingGroupCommand";
import {
  UpdateEventConfigurationsCommandInput,
  UpdateEventConfigurationsCommandOutput
} from "../commands/UpdateEventConfigurationsCommand";
import {
  UpdateIndexingConfigurationCommandInput,
  UpdateIndexingConfigurationCommandOutput
} from "../commands/UpdateIndexingConfigurationCommand";
import {
  UpdateJobCommandInput,
  UpdateJobCommandOutput
} from "../commands/UpdateJobCommand";
import {
  UpdateMitigationActionCommandInput,
  UpdateMitigationActionCommandOutput
} from "../commands/UpdateMitigationActionCommand";
import {
  UpdateProvisioningTemplateCommandInput,
  UpdateProvisioningTemplateCommandOutput
} from "../commands/UpdateProvisioningTemplateCommand";
import {
  UpdateRoleAliasCommandInput,
  UpdateRoleAliasCommandOutput
} from "../commands/UpdateRoleAliasCommand";
import {
  UpdateScheduledAuditCommandInput,
  UpdateScheduledAuditCommandOutput
} from "../commands/UpdateScheduledAuditCommand";
import {
  UpdateSecurityProfileCommandInput,
  UpdateSecurityProfileCommandOutput
} from "../commands/UpdateSecurityProfileCommand";
import {
  UpdateStreamCommandInput,
  UpdateStreamCommandOutput
} from "../commands/UpdateStreamCommand";
import {
  UpdateThingCommandInput,
  UpdateThingCommandOutput
} from "../commands/UpdateThingCommand";
import {
  UpdateThingGroupCommandInput,
  UpdateThingGroupCommandOutput
} from "../commands/UpdateThingGroupCommand";
import {
  UpdateThingGroupsForThingCommandInput,
  UpdateThingGroupsForThingCommandOutput
} from "../commands/UpdateThingGroupsForThingCommand";
import {
  UpdateTopicRuleDestinationCommandInput,
  UpdateTopicRuleDestinationCommandOutput
} from "../commands/UpdateTopicRuleDestinationCommand";
import {
  ValidateSecurityProfileBehaviorsCommandInput,
  ValidateSecurityProfileBehaviorsCommandOutput
} from "../commands/ValidateSecurityProfileBehaviorsCommand";
import {
  AbortConfig,
  AbortCriteria,
  Action,
  ActiveViolation,
  AddThingsToThingGroupParams,
  AlertTarget,
  AlertTargetType,
  Allowed,
  AssetPropertyTimestamp,
  AssetPropertyValue,
  AssetPropertyVariant,
  AttributePayload,
  AuditCheckConfiguration,
  AuditCheckDetails,
  AuditFinding,
  AuditMitigationActionExecutionMetadata,
  AuditMitigationActionsTaskMetadata,
  AuditMitigationActionsTaskTarget,
  AuditNotificationTarget,
  AuditNotificationType,
  AuditTaskMetadata,
  AuthInfo,
  AuthResult,
  AuthorizerConfig,
  AuthorizerDescription,
  AuthorizerSummary,
  AwsJobExecutionsRolloutConfig,
  AwsJobPresignedUrlConfig,
  Behavior,
  BehaviorCriteria,
  BillingGroupMetadata,
  BillingGroupProperties,
  CACertificate,
  CACertificateDescription,
  Certificate,
  CertificateConflictException,
  CertificateDescription,
  CertificateStateException,
  CertificateValidationException,
  CertificateValidity,
  CloudwatchAlarmAction,
  CloudwatchMetricAction,
  CodeSigning,
  CodeSigningCertificateChain,
  CodeSigningSignature,
  Configuration,
  ConflictingResourceUpdateException,
  CustomCodeSigning,
  DeleteConflictException,
  Denied,
  Destination,
  DomainConfigurationSummary,
  DynamoDBAction,
  DynamoDBv2Action,
  EffectivePolicy,
  ElasticsearchAction,
  EnableIoTLoggingParams,
  ErrorInfo,
  EventType,
  ExplicitDeny,
  ExponentialRolloutRate,
  Field,
  FileLocation,
  FirehoseAction,
  GroupNameAndArn,
  HttpAction,
  HttpActionHeader,
  HttpAuthorization,
  HttpContext,
  HttpUrlDestinationConfiguration,
  HttpUrlDestinationProperties,
  HttpUrlDestinationSummary,
  ImplicitDeny,
  IndexNotReadyException,
  InternalException,
  InternalFailureException,
  InvalidAggregationException,
  InvalidQueryException,
  InvalidRequestException,
  InvalidResponseException,
  InvalidStateTransitionException,
  IotAnalyticsAction,
  IotEventsAction,
  IotSiteWiseAction,
  Job,
  JobExecution,
  JobExecutionStatusDetails,
  JobExecutionSummary,
  JobExecutionSummaryForJob,
  JobExecutionSummaryForThing,
  JobExecutionsRolloutConfig,
  JobProcessDetails,
  JobSummary,
  KeyPair,
  KinesisAction,
  LambdaAction,
  LimitExceededException,
  LogTarget,
  LogTargetConfiguration,
  LoggingOptionsPayload,
  MalformedPolicyException,
  MetricValue,
  MitigationAction,
  MitigationActionIdentifier,
  MitigationActionParams,
  MqttContext,
  NonCompliantResource,
  NotConfiguredException,
  OTAUpdateFile,
  OTAUpdateInfo,
  OTAUpdateSummary,
  OutgoingCertificate,
  PercentPair,
  Policy,
  PolicyVersion,
  PolicyVersionIdentifier,
  PresignedUrlConfig,
  Protocol,
  ProvisioningTemplateSummary,
  ProvisioningTemplateVersionSummary,
  PublishFindingToSnsParams,
  PutAssetPropertyValueEntry,
  PutItemInput,
  RateIncreaseCriteria,
  RegistrationCodeValidationException,
  RegistrationConfig,
  RelatedResource,
  ReplaceDefaultPolicyVersionParams,
  RepublishAction,
  ResourceAlreadyExistsException,
  ResourceIdentifier,
  ResourceNotFoundException,
  ResourceRegistrationFailureException,
  RoleAliasDescription,
  S3Action,
  S3Destination,
  S3Location,
  SalesforceAction,
  ScheduledAuditMetadata,
  SecurityProfileIdentifier,
  SecurityProfileTarget,
  SecurityProfileTargetMapping,
  ServerCertificateSummary,
  ServiceUnavailableException,
  SigV4Authorization,
  SigningProfileParameter,
  SnsAction,
  SqlParseException,
  SqsAction,
  StartSigningJobParameter,
  StatisticalThreshold,
  Statistics,
  StepFunctionsAction,
  StreamFile,
  StreamInfo,
  StreamSummary,
  Tag,
  TaskAlreadyExistsException,
  TaskStatistics,
  TaskStatisticsForAuditCheck,
  ThingAttribute,
  ThingConnectivity,
  ThingDocument,
  ThingGroupDocument,
  ThingGroupIndexingConfiguration,
  ThingGroupMetadata,
  ThingGroupProperties,
  ThingIndexingConfiguration,
  ThingTypeDefinition,
  ThingTypeMetadata,
  ThingTypeProperties,
  ThrottlingException,
  TimeoutConfig,
  TlsContext,
  TopicRule,
  TopicRuleDestination,
  TopicRuleDestinationConfiguration,
  TopicRuleDestinationSummary,
  TopicRuleListItem,
  TopicRulePayload,
  TransferAlreadyCompletedException,
  TransferConflictException,
  TransferData,
  UnauthorizedException,
  UpdateCACertificateParams,
  UpdateDeviceCertificateParams,
  ValidationError,
  VersionConflictException,
  VersionsLimitExceededException,
  ViolationEvent,
  _Stream
} from "../models/index";
import {
  HttpRequest as __HttpRequest,
  HttpResponse as __HttpResponse
} from "@aws-sdk/protocol-http";
import {
  SmithyException as __SmithyException,
  extendedEncodeURIComponent as __extendedEncodeURIComponent
} from "@aws-sdk/smithy-client";
import {
  Endpoint as __Endpoint,
  MetadataBearer as __MetadataBearer,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext
} from "@aws-sdk/types";
import { v4 as generateIdempotencyToken } from "uuid";

export const serializeAws_restJson1_1ConfirmTopicRuleDestinationCommand = async (
  input: ConfirmTopicRuleDestinationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/confirmdestination/{confirmationToken+}";
  if (input.confirmationToken !== undefined) {
    const labelValue: string = input.confirmationToken;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: confirmationToken."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{confirmationToken+}",
      labelValue
        .split("/")
        .map(segment => __extendedEncodeURIComponent(segment))
        .join("/")
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: confirmationToken."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateTopicRuleCommand = async (
  input: CreateTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json",
    ...(isSerializableHeaderValue(input.tags) && {
      "x-amz-tagging": input.tags!
    })
  };
  let resolvedPath = "/rules/{ruleName}";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  if (input.topicRulePayload !== undefined) {
    body = serializeAws_restJson1_1TopicRulePayload(
      input.topicRulePayload,
      context
    );
  }
  if (body === undefined) {
    body = {};
  }
  body = JSON.stringify(body);
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateTopicRuleDestinationCommand = async (
  input: CreateTopicRuleDestinationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/destinations";
  let body: any;
  body = JSON.stringify({
    ...(input.destinationConfiguration !== undefined && {
      destinationConfiguration: serializeAws_restJson1_1TopicRuleDestinationConfiguration(
        input.destinationConfiguration,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteTopicRuleCommand = async (
  input: DeleteTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/rules/{ruleName}";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteTopicRuleDestinationCommand = async (
  input: DeleteTopicRuleDestinationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/destinations/{arn+}";
  if (input.arn !== undefined) {
    const labelValue: string = input.arn;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: arn.");
    }
    resolvedPath = resolvedPath.replace(
      "{arn+}",
      labelValue
        .split("/")
        .map(segment => __extendedEncodeURIComponent(segment))
        .join("/")
    );
  } else {
    throw new Error("No value provided for input HTTP label: arn.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteV2LoggingLevelCommand = async (
  input: DeleteV2LoggingLevelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/v2LoggingLevel";
  const query: any = {
    ...(input.targetName !== undefined && { targetName: input.targetName }),
    ...(input.targetType !== undefined && { targetType: input.targetType })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DisableTopicRuleCommand = async (
  input: DisableTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/rules/{ruleName}/disable";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1EnableTopicRuleCommand = async (
  input: EnableTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/rules/{ruleName}/enable";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetLoggingOptionsCommand = async (
  input: GetLoggingOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/loggingOptions";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetTopicRuleCommand = async (
  input: GetTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/rules/{ruleName}";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetTopicRuleDestinationCommand = async (
  input: GetTopicRuleDestinationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/destinations/{arn+}";
  if (input.arn !== undefined) {
    const labelValue: string = input.arn;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: arn.");
    }
    resolvedPath = resolvedPath.replace(
      "{arn+}",
      labelValue
        .split("/")
        .map(segment => __extendedEncodeURIComponent(segment))
        .join("/")
    );
  } else {
    throw new Error("No value provided for input HTTP label: arn.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetV2LoggingOptionsCommand = async (
  input: GetV2LoggingOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/v2LoggingOptions";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListTopicRuleDestinationsCommand = async (
  input: ListTopicRuleDestinationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/destinations";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListTopicRulesCommand = async (
  input: ListTopicRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/rules";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.ruleDisabled !== undefined && {
      ruleDisabled: input.ruleDisabled.toString()
    }),
    ...(input.topic !== undefined && { topic: input.topic })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListV2LoggingLevelsCommand = async (
  input: ListV2LoggingLevelsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/v2LoggingLevel";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.targetType !== undefined && { targetType: input.targetType })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ReplaceTopicRuleCommand = async (
  input: ReplaceTopicRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/rules/{ruleName}";
  if (input.ruleName !== undefined) {
    const labelValue: string = input.ruleName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: ruleName.");
    }
    resolvedPath = resolvedPath.replace(
      "{ruleName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: ruleName.");
  }
  let body: any;
  if (input.topicRulePayload !== undefined) {
    body = serializeAws_restJson1_1TopicRulePayload(
      input.topicRulePayload,
      context
    );
  }
  if (body === undefined) {
    body = {};
  }
  body = JSON.stringify(body);
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1SetLoggingOptionsCommand = async (
  input: SetLoggingOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/loggingOptions";
  let body: any;
  if (input.loggingOptionsPayload !== undefined) {
    body = serializeAws_restJson1_1LoggingOptionsPayload(
      input.loggingOptionsPayload,
      context
    );
  }
  if (body === undefined) {
    body = {};
  }
  body = JSON.stringify(body);
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1SetV2LoggingLevelCommand = async (
  input: SetV2LoggingLevelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/v2LoggingLevel";
  let body: any;
  body = JSON.stringify({
    ...(input.logLevel !== undefined && { logLevel: input.logLevel }),
    ...(input.logTarget !== undefined && {
      logTarget: serializeAws_restJson1_1LogTarget(input.logTarget, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1SetV2LoggingOptionsCommand = async (
  input: SetV2LoggingOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/v2LoggingOptions";
  let body: any;
  body = JSON.stringify({
    ...(input.defaultLogLevel !== undefined && {
      defaultLogLevel: input.defaultLogLevel
    }),
    ...(input.disableAllLogs !== undefined && {
      disableAllLogs: input.disableAllLogs
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateTopicRuleDestinationCommand = async (
  input: UpdateTopicRuleDestinationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/destinations";
  let body: any;
  body = JSON.stringify({
    ...(input.arn !== undefined && { arn: input.arn }),
    ...(input.status !== undefined && { status: input.status })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AcceptCertificateTransferCommand = async (
  input: AcceptCertificateTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/accept-certificate-transfer/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  const query: any = {
    ...(input.setAsActive !== undefined && {
      setAsActive: input.setAsActive.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1AttachPolicyCommand = async (
  input: AttachPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/target-policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.target !== undefined && { target: input.target })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AttachPrincipalPolicyCommand = async (
  input: AttachPrincipalPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-iot-principal": input.principal!
    })
  };
  let resolvedPath = "/principal-policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CancelCertificateTransferCommand = async (
  input: CancelCertificateTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/cancel-certificate-transfer/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ClearDefaultAuthorizerCommand = async (
  input: ClearDefaultAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/default-authorizer";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateAuthorizerCommand = async (
  input: CreateAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/authorizer/{authorizerName}";
  if (input.authorizerName !== undefined) {
    const labelValue: string = input.authorizerName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: authorizerName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{authorizerName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: authorizerName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.authorizerFunctionArn !== undefined && {
      authorizerFunctionArn: input.authorizerFunctionArn
    }),
    ...(input.signingDisabled !== undefined && {
      signingDisabled: input.signingDisabled
    }),
    ...(input.status !== undefined && { status: input.status }),
    ...(input.tokenKeyName !== undefined && {
      tokenKeyName: input.tokenKeyName
    }),
    ...(input.tokenSigningPublicKeys !== undefined && {
      tokenSigningPublicKeys: serializeAws_restJson1_1PublicKeyMap(
        input.tokenSigningPublicKeys,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateCertificateFromCsrCommand = async (
  input: CreateCertificateFromCsrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/certificates";
  const query: any = {
    ...(input.setAsActive !== undefined && {
      setAsActive: input.setAsActive.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.certificateSigningRequest !== undefined && {
      certificateSigningRequest: input.certificateSigningRequest
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CreateDomainConfigurationCommand = async (
  input: CreateDomainConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/domainConfigurations/{domainConfigurationName}";
  if (input.domainConfigurationName !== undefined) {
    const labelValue: string = input.domainConfigurationName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: domainConfigurationName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{domainConfigurationName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: domainConfigurationName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.authorizerConfig !== undefined && {
      authorizerConfig: serializeAws_restJson1_1AuthorizerConfig(
        input.authorizerConfig,
        context
      )
    }),
    ...(input.domainName !== undefined && { domainName: input.domainName }),
    ...(input.serverCertificateArns !== undefined && {
      serverCertificateArns: serializeAws_restJson1_1ServerCertificateArns(
        input.serverCertificateArns,
        context
      )
    }),
    ...(input.serviceType !== undefined && { serviceType: input.serviceType }),
    ...(input.validationCertificateArn !== undefined && {
      validationCertificateArn: input.validationCertificateArn
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateKeysAndCertificateCommand = async (
  input: CreateKeysAndCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/keys-and-certificate";
  const query: any = {
    ...(input.setAsActive !== undefined && {
      setAsActive: input.setAsActive.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CreatePolicyCommand = async (
  input: CreatePolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.policyDocument !== undefined && {
      policyDocument: input.policyDocument
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreatePolicyVersionCommand = async (
  input: CreatePolicyVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/policies/{policyName}/version";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  const query: any = {
    ...(input.setAsDefault !== undefined && {
      setAsDefault: input.setAsDefault.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.policyDocument !== undefined && {
      policyDocument: input.policyDocument
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CreateProvisioningClaimCommand = async (
  input: CreateProvisioningClaimCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath =
    "/provisioning-templates/{templateName}/provisioning-claim";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateProvisioningTemplateCommand = async (
  input: CreateProvisioningTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/provisioning-templates";
  let body: any;
  body = JSON.stringify({
    ...(input.description !== undefined && { description: input.description }),
    ...(input.enabled !== undefined && { enabled: input.enabled }),
    ...(input.provisioningRoleArn !== undefined && {
      provisioningRoleArn: input.provisioningRoleArn
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.templateBody !== undefined && {
      templateBody: input.templateBody
    }),
    ...(input.templateName !== undefined && {
      templateName: input.templateName
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateProvisioningTemplateVersionCommand = async (
  input: CreateProvisioningTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/provisioning-templates/{templateName}/versions";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  const query: any = {
    ...(input.setAsDefault !== undefined && {
      setAsDefault: input.setAsDefault.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.templateBody !== undefined && {
      templateBody: input.templateBody
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CreateRoleAliasCommand = async (
  input: CreateRoleAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/role-aliases/{roleAlias}";
  if (input.roleAlias !== undefined) {
    const labelValue: string = input.roleAlias;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: roleAlias.");
    }
    resolvedPath = resolvedPath.replace(
      "{roleAlias}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: roleAlias.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.credentialDurationSeconds !== undefined && {
      credentialDurationSeconds: input.credentialDurationSeconds
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteAuthorizerCommand = async (
  input: DeleteAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/authorizer/{authorizerName}";
  if (input.authorizerName !== undefined) {
    const labelValue: string = input.authorizerName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: authorizerName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{authorizerName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: authorizerName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteCACertificateCommand = async (
  input: DeleteCACertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/cacertificate/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteCertificateCommand = async (
  input: DeleteCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  const query: any = {
    ...(input.forceDelete !== undefined && {
      forceDelete: input.forceDelete.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteDomainConfigurationCommand = async (
  input: DeleteDomainConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/domainConfigurations/{domainConfigurationName}";
  if (input.domainConfigurationName !== undefined) {
    const labelValue: string = input.domainConfigurationName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: domainConfigurationName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{domainConfigurationName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: domainConfigurationName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeletePolicyCommand = async (
  input: DeletePolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeletePolicyVersionCommand = async (
  input: DeletePolicyVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}/version/{policyVersionId}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  if (input.policyVersionId !== undefined) {
    const labelValue: string = input.policyVersionId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: policyVersionId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{policyVersionId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyVersionId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteProvisioningTemplateCommand = async (
  input: DeleteProvisioningTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/provisioning-templates/{templateName}";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteProvisioningTemplateVersionCommand = async (
  input: DeleteProvisioningTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath =
    "/provisioning-templates/{templateName}/versions/{versionId}";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  if (input.versionId !== undefined) {
    const labelValue: string = input.versionId.toString();
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: versionId.");
    }
    resolvedPath = resolvedPath.replace(
      "{versionId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: versionId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteRegistrationCodeCommand = async (
  input: DeleteRegistrationCodeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/registrationcode";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteRoleAliasCommand = async (
  input: DeleteRoleAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/role-aliases/{roleAlias}";
  if (input.roleAlias !== undefined) {
    const labelValue: string = input.roleAlias;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: roleAlias.");
    }
    resolvedPath = resolvedPath.replace(
      "{roleAlias}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: roleAlias.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeAuthorizerCommand = async (
  input: DescribeAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/authorizer/{authorizerName}";
  if (input.authorizerName !== undefined) {
    const labelValue: string = input.authorizerName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: authorizerName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{authorizerName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: authorizerName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeCACertificateCommand = async (
  input: DescribeCACertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/cacertificate/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeCertificateCommand = async (
  input: DescribeCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeDefaultAuthorizerCommand = async (
  input: DescribeDefaultAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/default-authorizer";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeDomainConfigurationCommand = async (
  input: DescribeDomainConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/domainConfigurations/{domainConfigurationName}";
  if (input.domainConfigurationName !== undefined) {
    const labelValue: string = input.domainConfigurationName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: domainConfigurationName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{domainConfigurationName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: domainConfigurationName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeEndpointCommand = async (
  input: DescribeEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/endpoint";
  const query: any = {
    ...(input.endpointType !== undefined && {
      endpointType: input.endpointType
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DescribeProvisioningTemplateCommand = async (
  input: DescribeProvisioningTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/provisioning-templates/{templateName}";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeProvisioningTemplateVersionCommand = async (
  input: DescribeProvisioningTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath =
    "/provisioning-templates/{templateName}/versions/{versionId}";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  if (input.versionId !== undefined) {
    const labelValue: string = input.versionId.toString();
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: versionId.");
    }
    resolvedPath = resolvedPath.replace(
      "{versionId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: versionId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeRoleAliasCommand = async (
  input: DescribeRoleAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/role-aliases/{roleAlias}";
  if (input.roleAlias !== undefined) {
    const labelValue: string = input.roleAlias;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: roleAlias.");
    }
    resolvedPath = resolvedPath.replace(
      "{roleAlias}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: roleAlias.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DetachPolicyCommand = async (
  input: DetachPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/target-policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.target !== undefined && { target: input.target })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DetachPrincipalPolicyCommand = async (
  input: DetachPrincipalPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-iot-principal": input.principal!
    })
  };
  let resolvedPath = "/principal-policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetEffectivePoliciesCommand = async (
  input: GetEffectivePoliciesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/effective-policies";
  const query: any = {
    ...(input.thingName !== undefined && { thingName: input.thingName })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.cognitoIdentityPoolId !== undefined && {
      cognitoIdentityPoolId: input.cognitoIdentityPoolId
    }),
    ...(input.principal !== undefined && { principal: input.principal })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1GetPolicyCommand = async (
  input: GetPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetPolicyVersionCommand = async (
  input: GetPolicyVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}/version/{policyVersionId}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  if (input.policyVersionId !== undefined) {
    const labelValue: string = input.policyVersionId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: policyVersionId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{policyVersionId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyVersionId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetRegistrationCodeCommand = async (
  input: GetRegistrationCodeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/registrationcode";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListAttachedPoliciesCommand = async (
  input: ListAttachedPoliciesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/attached-policies/{target}";
  if (input.target !== undefined) {
    const labelValue: string = input.target;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: target.");
    }
    resolvedPath = resolvedPath.replace(
      "{target}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: target.");
  }
  const query: any = {
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && {
      pageSize: input.pageSize.toString()
    }),
    ...(input.recursive !== undefined && {
      recursive: input.recursive.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListAuthorizersCommand = async (
  input: ListAuthorizersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/authorizers";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && {
      pageSize: input.pageSize.toString()
    }),
    ...(input.status !== undefined && { status: input.status })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListCACertificatesCommand = async (
  input: ListCACertificatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/cacertificates";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListCertificatesCommand = async (
  input: ListCertificatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListCertificatesByCACommand = async (
  input: ListCertificatesByCACommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates-by-ca/{caCertificateId}";
  if (input.caCertificateId !== undefined) {
    const labelValue: string = input.caCertificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: caCertificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{caCertificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: caCertificateId.");
  }
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListDomainConfigurationsCommand = async (
  input: ListDomainConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/domainConfigurations";
  const query: any = {
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && {
      pageSize: input.pageSize.toString()
    }),
    ...(input.serviceType !== undefined && { serviceType: input.serviceType })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListOutgoingCertificatesCommand = async (
  input: ListOutgoingCertificatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates-out-going";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListPoliciesCommand = async (
  input: ListPoliciesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListPolicyPrincipalsCommand = async (
  input: ListPolicyPrincipalsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.policyName) && {
      "x-amzn-iot-policy": input.policyName!
    })
  };
  let resolvedPath = "/policy-principals";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListPolicyVersionsCommand = async (
  input: ListPolicyVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}/version";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListPrincipalPoliciesCommand = async (
  input: ListPrincipalPoliciesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-iot-principal": input.principal!
    })
  };
  let resolvedPath = "/principal-policies";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListProvisioningTemplateVersionsCommand = async (
  input: ListProvisioningTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/provisioning-templates/{templateName}/versions";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListProvisioningTemplatesCommand = async (
  input: ListProvisioningTemplatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/provisioning-templates";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListRoleAliasesCommand = async (
  input: ListRoleAliasesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/role-aliases";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListTargetsForPolicyCommand = async (
  input: ListTargetsForPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policy-targets/{policyName}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  const query: any = {
    ...(input.marker !== undefined && { marker: input.marker }),
    ...(input.pageSize !== undefined && { pageSize: input.pageSize.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1RegisterCACertificateCommand = async (
  input: RegisterCACertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/cacertificate";
  const query: any = {
    ...(input.allowAutoRegistration !== undefined && {
      allowAutoRegistration: input.allowAutoRegistration.toString()
    }),
    ...(input.setAsActive !== undefined && {
      setAsActive: input.setAsActive.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.caCertificate !== undefined && {
      caCertificate: input.caCertificate
    }),
    ...(input.registrationConfig !== undefined && {
      registrationConfig: serializeAws_restJson1_1RegistrationConfig(
        input.registrationConfig,
        context
      )
    }),
    ...(input.verificationCertificate !== undefined && {
      verificationCertificate: input.verificationCertificate
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1RegisterCertificateCommand = async (
  input: RegisterCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/certificate/register";
  const query: any = {
    ...(input.setAsActive !== undefined && {
      setAsActive: input.setAsActive.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.caCertificatePem !== undefined && {
      caCertificatePem: input.caCertificatePem
    }),
    ...(input.certificatePem !== undefined && {
      certificatePem: input.certificatePem
    }),
    ...(input.status !== undefined && { status: input.status })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1RegisterThingCommand = async (
  input: RegisterThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/things";
  let body: any;
  body = JSON.stringify({
    ...(input.parameters !== undefined && {
      parameters: serializeAws_restJson1_1Parameters(input.parameters, context)
    }),
    ...(input.templateBody !== undefined && {
      templateBody: input.templateBody
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1RejectCertificateTransferCommand = async (
  input: RejectCertificateTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/reject-certificate-transfer/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.rejectReason !== undefined && {
      rejectReason: input.rejectReason
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1SetDefaultAuthorizerCommand = async (
  input: SetDefaultAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/default-authorizer";
  let body: any;
  body = JSON.stringify({
    ...(input.authorizerName !== undefined && {
      authorizerName: input.authorizerName
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1SetDefaultPolicyVersionCommand = async (
  input: SetDefaultPolicyVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/policies/{policyName}/version/{policyVersionId}";
  if (input.policyName !== undefined) {
    const labelValue: string = input.policyName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: policyName.");
    }
    resolvedPath = resolvedPath.replace(
      "{policyName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyName.");
  }
  if (input.policyVersionId !== undefined) {
    const labelValue: string = input.policyVersionId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: policyVersionId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{policyVersionId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: policyVersionId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1TestAuthorizationCommand = async (
  input: TestAuthorizationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/test-authorization";
  const query: any = {
    ...(input.clientId !== undefined && { clientId: input.clientId })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.authInfos !== undefined && {
      authInfos: serializeAws_restJson1_1AuthInfos(input.authInfos, context)
    }),
    ...(input.cognitoIdentityPoolId !== undefined && {
      cognitoIdentityPoolId: input.cognitoIdentityPoolId
    }),
    ...(input.policyNamesToAdd !== undefined && {
      policyNamesToAdd: serializeAws_restJson1_1PolicyNames(
        input.policyNamesToAdd,
        context
      )
    }),
    ...(input.policyNamesToSkip !== undefined && {
      policyNamesToSkip: serializeAws_restJson1_1PolicyNames(
        input.policyNamesToSkip,
        context
      )
    }),
    ...(input.principal !== undefined && { principal: input.principal })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1TestInvokeAuthorizerCommand = async (
  input: TestInvokeAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/authorizer/{authorizerName}/test";
  if (input.authorizerName !== undefined) {
    const labelValue: string = input.authorizerName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: authorizerName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{authorizerName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: authorizerName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.httpContext !== undefined && {
      httpContext: serializeAws_restJson1_1HttpContext(
        input.httpContext,
        context
      )
    }),
    ...(input.mqttContext !== undefined && {
      mqttContext: serializeAws_restJson1_1MqttContext(
        input.mqttContext,
        context
      )
    }),
    ...(input.tlsContext !== undefined && {
      tlsContext: serializeAws_restJson1_1TlsContext(input.tlsContext, context)
    }),
    ...(input.token !== undefined && { token: input.token }),
    ...(input.tokenSignature !== undefined && {
      tokenSignature: input.tokenSignature
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1TransferCertificateCommand = async (
  input: TransferCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/transfer-certificate/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  const query: any = {
    ...(input.targetAwsAccount !== undefined && {
      targetAwsAccount: input.targetAwsAccount
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.transferMessage !== undefined && {
      transferMessage: input.transferMessage
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1UpdateAuthorizerCommand = async (
  input: UpdateAuthorizerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/authorizer/{authorizerName}";
  if (input.authorizerName !== undefined) {
    const labelValue: string = input.authorizerName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: authorizerName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{authorizerName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: authorizerName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.authorizerFunctionArn !== undefined && {
      authorizerFunctionArn: input.authorizerFunctionArn
    }),
    ...(input.status !== undefined && { status: input.status }),
    ...(input.tokenKeyName !== undefined && {
      tokenKeyName: input.tokenKeyName
    }),
    ...(input.tokenSigningPublicKeys !== undefined && {
      tokenSigningPublicKeys: serializeAws_restJson1_1PublicKeyMap(
        input.tokenSigningPublicKeys,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateCACertificateCommand = async (
  input: UpdateCACertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/cacertificate/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  const query: any = {
    ...(input.newAutoRegistrationStatus !== undefined && {
      newAutoRegistrationStatus: input.newAutoRegistrationStatus
    }),
    ...(input.newStatus !== undefined && { newStatus: input.newStatus })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.registrationConfig !== undefined && {
      registrationConfig: serializeAws_restJson1_1RegistrationConfig(
        input.registrationConfig,
        context
      )
    }),
    ...(input.removeAutoRegistration !== undefined && {
      removeAutoRegistration: input.removeAutoRegistration
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1UpdateCertificateCommand = async (
  input: UpdateCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/certificates/{certificateId}";
  if (input.certificateId !== undefined) {
    const labelValue: string = input.certificateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: certificateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{certificateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: certificateId.");
  }
  const query: any = {
    ...(input.newStatus !== undefined && { newStatus: input.newStatus })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1UpdateDomainConfigurationCommand = async (
  input: UpdateDomainConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/domainConfigurations/{domainConfigurationName}";
  if (input.domainConfigurationName !== undefined) {
    const labelValue: string = input.domainConfigurationName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: domainConfigurationName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{domainConfigurationName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: domainConfigurationName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.authorizerConfig !== undefined && {
      authorizerConfig: serializeAws_restJson1_1AuthorizerConfig(
        input.authorizerConfig,
        context
      )
    }),
    ...(input.domainConfigurationStatus !== undefined && {
      domainConfigurationStatus: input.domainConfigurationStatus
    }),
    ...(input.removeAuthorizerConfig !== undefined && {
      removeAuthorizerConfig: input.removeAuthorizerConfig
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateProvisioningTemplateCommand = async (
  input: UpdateProvisioningTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/provisioning-templates/{templateName}";
  if (input.templateName !== undefined) {
    const labelValue: string = input.templateName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: templateName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{templateName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: templateName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.defaultVersionId !== undefined && {
      defaultVersionId: input.defaultVersionId
    }),
    ...(input.description !== undefined && { description: input.description }),
    ...(input.enabled !== undefined && { enabled: input.enabled }),
    ...(input.provisioningRoleArn !== undefined && {
      provisioningRoleArn: input.provisioningRoleArn
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateRoleAliasCommand = async (
  input: UpdateRoleAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/role-aliases/{roleAlias}";
  if (input.roleAlias !== undefined) {
    const labelValue: string = input.roleAlias;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: roleAlias.");
    }
    resolvedPath = resolvedPath.replace(
      "{roleAlias}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: roleAlias.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.credentialDurationSeconds !== undefined && {
      credentialDurationSeconds: input.credentialDurationSeconds
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeIndexCommand = async (
  input: DescribeIndexCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/indices/{indexName}";
  if (input.indexName !== undefined) {
    const labelValue: string = input.indexName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: indexName.");
    }
    resolvedPath = resolvedPath.replace(
      "{indexName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: indexName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetCardinalityCommand = async (
  input: GetCardinalityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/indices/cardinality";
  let body: any;
  body = JSON.stringify({
    ...(input.aggregationField !== undefined && {
      aggregationField: input.aggregationField
    }),
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetIndexingConfigurationCommand = async (
  input: GetIndexingConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/indexing/config";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetPercentilesCommand = async (
  input: GetPercentilesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/indices/percentiles";
  let body: any;
  body = JSON.stringify({
    ...(input.aggregationField !== undefined && {
      aggregationField: input.aggregationField
    }),
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.percents !== undefined && {
      percents: serializeAws_restJson1_1PercentList(input.percents, context)
    }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1GetStatisticsCommand = async (
  input: GetStatisticsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/indices/statistics";
  let body: any;
  body = JSON.stringify({
    ...(input.aggregationField !== undefined && {
      aggregationField: input.aggregationField
    }),
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListIndicesCommand = async (
  input: ListIndicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/indices";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1SearchIndexCommand = async (
  input: SearchIndexCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/indices/search";
  let body: any;
  body = JSON.stringify({
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.maxResults !== undefined && { maxResults: input.maxResults }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateIndexingConfigurationCommand = async (
  input: UpdateIndexingConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/indexing/config";
  let body: any;
  body = JSON.stringify({
    ...(input.thingGroupIndexingConfiguration !== undefined && {
      thingGroupIndexingConfiguration: serializeAws_restJson1_1ThingGroupIndexingConfiguration(
        input.thingGroupIndexingConfiguration,
        context
      )
    }),
    ...(input.thingIndexingConfiguration !== undefined && {
      thingIndexingConfiguration: serializeAws_restJson1_1ThingIndexingConfiguration(
        input.thingIndexingConfiguration,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AssociateTargetsWithJobCommand = async (
  input: AssociateTargetsWithJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/jobs/{jobId}/targets";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.comment !== undefined && { comment: input.comment }),
    ...(input.targets !== undefined && {
      targets: serializeAws_restJson1_1JobTargets(input.targets, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CancelJobCommand = async (
  input: CancelJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/jobs/{jobId}/cancel";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  const query: any = {
    ...(input.force !== undefined && { force: input.force.toString() })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.comment !== undefined && { comment: input.comment }),
    ...(input.reasonCode !== undefined && { reasonCode: input.reasonCode })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CancelJobExecutionCommand = async (
  input: CancelJobExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/things/{thingName}/jobs/{jobId}/cancel";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.force !== undefined && { force: input.force.toString() })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion
    }),
    ...(input.statusDetails !== undefined && {
      statusDetails: serializeAws_restJson1_1DetailsMap(
        input.statusDetails,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CreateJobCommand = async (
  input: CreateJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/jobs/{jobId}";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.abortConfig !== undefined && {
      abortConfig: serializeAws_restJson1_1AbortConfig(
        input.abortConfig,
        context
      )
    }),
    ...(input.description !== undefined && { description: input.description }),
    ...(input.document !== undefined && { document: input.document }),
    ...(input.documentSource !== undefined && {
      documentSource: input.documentSource
    }),
    ...(input.jobExecutionsRolloutConfig !== undefined && {
      jobExecutionsRolloutConfig: serializeAws_restJson1_1JobExecutionsRolloutConfig(
        input.jobExecutionsRolloutConfig,
        context
      )
    }),
    ...(input.presignedUrlConfig !== undefined && {
      presignedUrlConfig: serializeAws_restJson1_1PresignedUrlConfig(
        input.presignedUrlConfig,
        context
      )
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.targetSelection !== undefined && {
      targetSelection: input.targetSelection
    }),
    ...(input.targets !== undefined && {
      targets: serializeAws_restJson1_1JobTargets(input.targets, context)
    }),
    ...(input.timeoutConfig !== undefined && {
      timeoutConfig: serializeAws_restJson1_1TimeoutConfig(
        input.timeoutConfig,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteJobCommand = async (
  input: DeleteJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/jobs/{jobId}";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  const query: any = {
    ...(input.force !== undefined && { force: input.force.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteJobExecutionCommand = async (
  input: DeleteJobExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath =
    "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}";
  if (input.executionNumber !== undefined) {
    const labelValue: string = input.executionNumber.toString();
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: executionNumber."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{executionNumber}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: executionNumber.");
  }
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.force !== undefined && { force: input.force.toString() })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DescribeJobCommand = async (
  input: DescribeJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/jobs/{jobId}";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeJobExecutionCommand = async (
  input: DescribeJobExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}/jobs/{jobId}";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.executionNumber !== undefined && {
      executionNumber: input.executionNumber.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1GetJobDocumentCommand = async (
  input: GetJobDocumentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/jobs/{jobId}/job-document";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListJobExecutionsForJobCommand = async (
  input: ListJobExecutionsForJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/jobs/{jobId}/things";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.status !== undefined && { status: input.status })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListJobExecutionsForThingCommand = async (
  input: ListJobExecutionsForThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}/jobs";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.status !== undefined && { status: input.status })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListJobsCommand = async (
  input: ListJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/jobs";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.status !== undefined && { status: input.status }),
    ...(input.targetSelection !== undefined && {
      targetSelection: input.targetSelection
    }),
    ...(input.thingGroupId !== undefined && {
      thingGroupId: input.thingGroupId
    }),
    ...(input.thingGroupName !== undefined && {
      thingGroupName: input.thingGroupName
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1UpdateJobCommand = async (
  input: UpdateJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/jobs/{jobId}";
  if (input.jobId !== undefined) {
    const labelValue: string = input.jobId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: jobId.");
    }
    resolvedPath = resolvedPath.replace(
      "{jobId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: jobId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.abortConfig !== undefined && {
      abortConfig: serializeAws_restJson1_1AbortConfig(
        input.abortConfig,
        context
      )
    }),
    ...(input.description !== undefined && { description: input.description }),
    ...(input.jobExecutionsRolloutConfig !== undefined && {
      jobExecutionsRolloutConfig: serializeAws_restJson1_1JobExecutionsRolloutConfig(
        input.jobExecutionsRolloutConfig,
        context
      )
    }),
    ...(input.presignedUrlConfig !== undefined && {
      presignedUrlConfig: serializeAws_restJson1_1PresignedUrlConfig(
        input.presignedUrlConfig,
        context
      )
    }),
    ...(input.timeoutConfig !== undefined && {
      timeoutConfig: serializeAws_restJson1_1TimeoutConfig(
        input.timeoutConfig,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateOTAUpdateCommand = async (
  input: CreateOTAUpdateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/otaUpdates/{otaUpdateId}";
  if (input.otaUpdateId !== undefined) {
    const labelValue: string = input.otaUpdateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: otaUpdateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{otaUpdateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: otaUpdateId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.additionalParameters !== undefined && {
      additionalParameters: serializeAws_restJson1_1AdditionalParameterMap(
        input.additionalParameters,
        context
      )
    }),
    ...(input.awsJobExecutionsRolloutConfig !== undefined && {
      awsJobExecutionsRolloutConfig: serializeAws_restJson1_1AwsJobExecutionsRolloutConfig(
        input.awsJobExecutionsRolloutConfig,
        context
      )
    }),
    ...(input.awsJobPresignedUrlConfig !== undefined && {
      awsJobPresignedUrlConfig: serializeAws_restJson1_1AwsJobPresignedUrlConfig(
        input.awsJobPresignedUrlConfig,
        context
      )
    }),
    ...(input.description !== undefined && { description: input.description }),
    ...(input.files !== undefined && {
      files: serializeAws_restJson1_1OTAUpdateFiles(input.files, context)
    }),
    ...(input.protocols !== undefined && {
      protocols: serializeAws_restJson1_1Protocols(input.protocols, context)
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.targetSelection !== undefined && {
      targetSelection: input.targetSelection
    }),
    ...(input.targets !== undefined && {
      targets: serializeAws_restJson1_1Targets(input.targets, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteOTAUpdateCommand = async (
  input: DeleteOTAUpdateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/otaUpdates/{otaUpdateId}";
  if (input.otaUpdateId !== undefined) {
    const labelValue: string = input.otaUpdateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: otaUpdateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{otaUpdateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: otaUpdateId.");
  }
  const query: any = {
    ...(input.deleteStream !== undefined && {
      deleteStream: input.deleteStream.toString()
    }),
    ...(input.forceDeleteAWSJob !== undefined && {
      forceDeleteAWSJob: input.forceDeleteAWSJob.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1GetOTAUpdateCommand = async (
  input: GetOTAUpdateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/otaUpdates/{otaUpdateId}";
  if (input.otaUpdateId !== undefined) {
    const labelValue: string = input.otaUpdateId;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: otaUpdateId."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{otaUpdateId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: otaUpdateId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListOTAUpdatesCommand = async (
  input: ListOTAUpdatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/otaUpdates";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.otaUpdateStatus !== undefined && {
      otaUpdateStatus: input.otaUpdateStatus
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1AddThingToBillingGroupCommand = async (
  input: AddThingToBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/billing-groups/addThingToBillingGroup";
  let body: any;
  body = JSON.stringify({
    ...(input.billingGroupArn !== undefined && {
      billingGroupArn: input.billingGroupArn
    }),
    ...(input.billingGroupName !== undefined && {
      billingGroupName: input.billingGroupName
    }),
    ...(input.thingArn !== undefined && { thingArn: input.thingArn }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AddThingToThingGroupCommand = async (
  input: AddThingToThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-groups/addThingToThingGroup";
  let body: any;
  body = JSON.stringify({
    ...(input.overrideDynamicGroups !== undefined && {
      overrideDynamicGroups: input.overrideDynamicGroups
    }),
    ...(input.thingArn !== undefined && { thingArn: input.thingArn }),
    ...(input.thingGroupArn !== undefined && {
      thingGroupArn: input.thingGroupArn
    }),
    ...(input.thingGroupName !== undefined && {
      thingGroupName: input.thingGroupName
    }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AttachThingPrincipalCommand = async (
  input: AttachThingPrincipalCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-principal": input.principal!
    })
  };
  let resolvedPath = "/things/{thingName}/principals";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateBillingGroupCommand = async (
  input: CreateBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/billing-groups/{billingGroupName}";
  if (input.billingGroupName !== undefined) {
    const labelValue: string = input.billingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: billingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{billingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: billingGroupName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.billingGroupProperties !== undefined && {
      billingGroupProperties: serializeAws_restJson1_1BillingGroupProperties(
        input.billingGroupProperties,
        context
      )
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateDynamicThingGroupCommand = async (
  input: CreateDynamicThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/dynamic-thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.thingGroupProperties !== undefined && {
      thingGroupProperties: serializeAws_restJson1_1ThingGroupProperties(
        input.thingGroupProperties,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateThingCommand = async (
  input: CreateThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/things/{thingName}";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.attributePayload !== undefined && {
      attributePayload: serializeAws_restJson1_1AttributePayload(
        input.attributePayload,
        context
      )
    }),
    ...(input.billingGroupName !== undefined && {
      billingGroupName: input.billingGroupName
    }),
    ...(input.thingTypeName !== undefined && {
      thingTypeName: input.thingTypeName
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateThingGroupCommand = async (
  input: CreateThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.parentGroupName !== undefined && {
      parentGroupName: input.parentGroupName
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.thingGroupProperties !== undefined && {
      thingGroupProperties: serializeAws_restJson1_1ThingGroupProperties(
        input.thingGroupProperties,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateThingTypeCommand = async (
  input: CreateThingTypeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-types/{thingTypeName}";
  if (input.thingTypeName !== undefined) {
    const labelValue: string = input.thingTypeName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingTypeName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingTypeName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingTypeName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.thingTypeProperties !== undefined && {
      thingTypeProperties: serializeAws_restJson1_1ThingTypeProperties(
        input.thingTypeProperties,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteBillingGroupCommand = async (
  input: DeleteBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/billing-groups/{billingGroupName}";
  if (input.billingGroupName !== undefined) {
    const labelValue: string = input.billingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: billingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{billingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: billingGroupName."
    );
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteDynamicThingGroupCommand = async (
  input: DeleteDynamicThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/dynamic-thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteThingCommand = async (
  input: DeleteThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteThingGroupCommand = async (
  input: DeleteThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteThingTypeCommand = async (
  input: DeleteThingTypeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-types/{thingTypeName}";
  if (input.thingTypeName !== undefined) {
    const labelValue: string = input.thingTypeName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingTypeName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingTypeName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingTypeName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeprecateThingTypeCommand = async (
  input: DeprecateThingTypeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-types/{thingTypeName}/deprecate";
  if (input.thingTypeName !== undefined) {
    const labelValue: string = input.thingTypeName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingTypeName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingTypeName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingTypeName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.undoDeprecate !== undefined && {
      undoDeprecate: input.undoDeprecate
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeBillingGroupCommand = async (
  input: DescribeBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/billing-groups/{billingGroupName}";
  if (input.billingGroupName !== undefined) {
    const labelValue: string = input.billingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: billingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{billingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: billingGroupName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeEventConfigurationsCommand = async (
  input: DescribeEventConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/event-configurations";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeThingCommand = async (
  input: DescribeThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeThingGroupCommand = async (
  input: DescribeThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeThingRegistrationTaskCommand = async (
  input: DescribeThingRegistrationTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-registration-tasks/{taskId}";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeThingTypeCommand = async (
  input: DescribeThingTypeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-types/{thingTypeName}";
  if (input.thingTypeName !== undefined) {
    const labelValue: string = input.thingTypeName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingTypeName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingTypeName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingTypeName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DetachThingPrincipalCommand = async (
  input: DetachThingPrincipalCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-principal": input.principal!
    })
  };
  let resolvedPath = "/things/{thingName}/principals";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListBillingGroupsCommand = async (
  input: ListBillingGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/billing-groups";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.namePrefixFilter !== undefined && {
      namePrefixFilter: input.namePrefixFilter
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListPrincipalThingsCommand = async (
  input: ListPrincipalThingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "",
    ...(isSerializableHeaderValue(input.principal) && {
      "x-amzn-principal": input.principal!
    })
  };
  let resolvedPath = "/principals/things";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListTagsForResourceCommand = async (
  input: ListTagsForResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/tags";
  const query: any = {
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.resourceArn !== undefined && { resourceArn: input.resourceArn })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingGroupsCommand = async (
  input: ListThingGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-groups";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.namePrefixFilter !== undefined && {
      namePrefixFilter: input.namePrefixFilter
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.parentGroup !== undefined && { parentGroup: input.parentGroup }),
    ...(input.recursive !== undefined && {
      recursive: input.recursive.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingGroupsForThingCommand = async (
  input: ListThingGroupsForThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}/thing-groups";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingPrincipalsCommand = async (
  input: ListThingPrincipalsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things/{thingName}/principals";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListThingRegistrationTaskReportsCommand = async (
  input: ListThingRegistrationTaskReportsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-registration-tasks/{taskId}/reports";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.reportType !== undefined && { reportType: input.reportType })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingRegistrationTasksCommand = async (
  input: ListThingRegistrationTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-registration-tasks";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.status !== undefined && { status: input.status })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingTypesCommand = async (
  input: ListThingTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-types";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.thingTypeName !== undefined && {
      thingTypeName: input.thingTypeName
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingsCommand = async (
  input: ListThingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/things";
  const query: any = {
    ...(input.attributeName !== undefined && {
      attributeName: input.attributeName
    }),
    ...(input.attributeValue !== undefined && {
      attributeValue: input.attributeValue
    }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.thingTypeName !== undefined && {
      thingTypeName: input.thingTypeName
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingsInBillingGroupCommand = async (
  input: ListThingsInBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/billing-groups/{billingGroupName}/things";
  if (input.billingGroupName !== undefined) {
    const labelValue: string = input.billingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: billingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{billingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: billingGroupName."
    );
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListThingsInThingGroupCommand = async (
  input: ListThingsInThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-groups/{thingGroupName}/things";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.recursive !== undefined && {
      recursive: input.recursive.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1RemoveThingFromBillingGroupCommand = async (
  input: RemoveThingFromBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/billing-groups/removeThingFromBillingGroup";
  let body: any;
  body = JSON.stringify({
    ...(input.billingGroupArn !== undefined && {
      billingGroupArn: input.billingGroupArn
    }),
    ...(input.billingGroupName !== undefined && {
      billingGroupName: input.billingGroupName
    }),
    ...(input.thingArn !== undefined && { thingArn: input.thingArn }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1RemoveThingFromThingGroupCommand = async (
  input: RemoveThingFromThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-groups/removeThingFromThingGroup";
  let body: any;
  body = JSON.stringify({
    ...(input.thingArn !== undefined && { thingArn: input.thingArn }),
    ...(input.thingGroupArn !== undefined && {
      thingGroupArn: input.thingGroupArn
    }),
    ...(input.thingGroupName !== undefined && {
      thingGroupName: input.thingGroupName
    }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1StartThingRegistrationTaskCommand = async (
  input: StartThingRegistrationTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-registration-tasks";
  let body: any;
  body = JSON.stringify({
    ...(input.inputFileBucket !== undefined && {
      inputFileBucket: input.inputFileBucket
    }),
    ...(input.inputFileKey !== undefined && {
      inputFileKey: input.inputFileKey
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.templateBody !== undefined && {
      templateBody: input.templateBody
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1StopThingRegistrationTaskCommand = async (
  input: StopThingRegistrationTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/thing-registration-tasks/{taskId}/cancel";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1TagResourceCommand = async (
  input: TagResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/tags";
  let body: any;
  body = JSON.stringify({
    ...(input.resourceArn !== undefined && { resourceArn: input.resourceArn }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UntagResourceCommand = async (
  input: UntagResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/untag";
  let body: any;
  body = JSON.stringify({
    ...(input.resourceArn !== undefined && { resourceArn: input.resourceArn }),
    ...(input.tagKeys !== undefined && {
      tagKeys: serializeAws_restJson1_1TagKeyList(input.tagKeys, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateBillingGroupCommand = async (
  input: UpdateBillingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/billing-groups/{billingGroupName}";
  if (input.billingGroupName !== undefined) {
    const labelValue: string = input.billingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: billingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{billingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: billingGroupName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.billingGroupProperties !== undefined && {
      billingGroupProperties: serializeAws_restJson1_1BillingGroupProperties(
        input.billingGroupProperties,
        context
      )
    }),
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateDynamicThingGroupCommand = async (
  input: UpdateDynamicThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/dynamic-thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion
    }),
    ...(input.indexName !== undefined && { indexName: input.indexName }),
    ...(input.queryString !== undefined && { queryString: input.queryString }),
    ...(input.queryVersion !== undefined && {
      queryVersion: input.queryVersion
    }),
    ...(input.thingGroupProperties !== undefined && {
      thingGroupProperties: serializeAws_restJson1_1ThingGroupProperties(
        input.thingGroupProperties,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateEventConfigurationsCommand = async (
  input: UpdateEventConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/event-configurations";
  let body: any;
  body = JSON.stringify({
    ...(input.eventConfigurations !== undefined && {
      eventConfigurations: serializeAws_restJson1_1EventConfigurations(
        input.eventConfigurations,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateThingCommand = async (
  input: UpdateThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/things/{thingName}";
  if (input.thingName !== undefined) {
    const labelValue: string = input.thingName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: thingName.");
    }
    resolvedPath = resolvedPath.replace(
      "{thingName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.attributePayload !== undefined && {
      attributePayload: serializeAws_restJson1_1AttributePayload(
        input.attributePayload,
        context
      )
    }),
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion
    }),
    ...(input.removeThingType !== undefined && {
      removeThingType: input.removeThingType
    }),
    ...(input.thingTypeName !== undefined && {
      thingTypeName: input.thingTypeName
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateThingGroupCommand = async (
  input: UpdateThingGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-groups/{thingGroupName}";
  if (input.thingGroupName !== undefined) {
    const labelValue: string = input.thingGroupName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: thingGroupName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{thingGroupName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: thingGroupName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion
    }),
    ...(input.thingGroupProperties !== undefined && {
      thingGroupProperties: serializeAws_restJson1_1ThingGroupProperties(
        input.thingGroupProperties,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateThingGroupsForThingCommand = async (
  input: UpdateThingGroupsForThingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/thing-groups/updateThingGroupsForThing";
  let body: any;
  body = JSON.stringify({
    ...(input.overrideDynamicGroups !== undefined && {
      overrideDynamicGroups: input.overrideDynamicGroups
    }),
    ...(input.thingGroupsToAdd !== undefined && {
      thingGroupsToAdd: serializeAws_restJson1_1ThingGroupList(
        input.thingGroupsToAdd,
        context
      )
    }),
    ...(input.thingGroupsToRemove !== undefined && {
      thingGroupsToRemove: serializeAws_restJson1_1ThingGroupList(
        input.thingGroupsToRemove,
        context
      )
    }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1AttachSecurityProfileCommand = async (
  input: AttachSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles/{securityProfileName}/targets";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  const query: any = {
    ...(input.securityProfileTargetArn !== undefined && {
      securityProfileTargetArn: input.securityProfileTargetArn
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1CancelAuditMitigationActionsTaskCommand = async (
  input: CancelAuditMitigationActionsTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/mitigationactions/tasks/{taskId}/cancel";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CancelAuditTaskCommand = async (
  input: CancelAuditTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/tasks/{taskId}/cancel";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateMitigationActionCommand = async (
  input: CreateMitigationActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/mitigationactions/actions/{actionName}";
  if (input.actionName !== undefined) {
    const labelValue: string = input.actionName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: actionName.");
    }
    resolvedPath = resolvedPath.replace(
      "{actionName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: actionName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.actionParams !== undefined && {
      actionParams: serializeAws_restJson1_1MitigationActionParams(
        input.actionParams,
        context
      )
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateScheduledAuditCommand = async (
  input: CreateScheduledAuditCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/scheduledaudits/{scheduledAuditName}";
  if (input.scheduledAuditName !== undefined) {
    const labelValue: string = input.scheduledAuditName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: scheduledAuditName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{scheduledAuditName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: scheduledAuditName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.dayOfMonth !== undefined && { dayOfMonth: input.dayOfMonth }),
    ...(input.dayOfWeek !== undefined && { dayOfWeek: input.dayOfWeek }),
    ...(input.frequency !== undefined && { frequency: input.frequency }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    }),
    ...(input.targetCheckNames !== undefined && {
      targetCheckNames: serializeAws_restJson1_1TargetAuditCheckNames(
        input.targetCheckNames,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateSecurityProfileCommand = async (
  input: CreateSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/security-profiles/{securityProfileName}";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.additionalMetricsToRetain !== undefined && {
      additionalMetricsToRetain: serializeAws_restJson1_1AdditionalMetricsToRetainList(
        input.additionalMetricsToRetain,
        context
      )
    }),
    ...(input.alertTargets !== undefined && {
      alertTargets: serializeAws_restJson1_1AlertTargets(
        input.alertTargets,
        context
      )
    }),
    ...(input.behaviors !== undefined && {
      behaviors: serializeAws_restJson1_1Behaviors(input.behaviors, context)
    }),
    ...(input.securityProfileDescription !== undefined && {
      securityProfileDescription: input.securityProfileDescription
    }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteAccountAuditConfigurationCommand = async (
  input: DeleteAccountAuditConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/configuration";
  const query: any = {
    ...(input.deleteScheduledAudits !== undefined && {
      deleteScheduledAudits: input.deleteScheduledAudits.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DeleteMitigationActionCommand = async (
  input: DeleteMitigationActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/mitigationactions/actions/{actionName}";
  if (input.actionName !== undefined) {
    const labelValue: string = input.actionName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: actionName.");
    }
    resolvedPath = resolvedPath.replace(
      "{actionName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: actionName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteScheduledAuditCommand = async (
  input: DeleteScheduledAuditCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/scheduledaudits/{scheduledAuditName}";
  if (input.scheduledAuditName !== undefined) {
    const labelValue: string = input.scheduledAuditName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: scheduledAuditName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{scheduledAuditName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: scheduledAuditName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteSecurityProfileCommand = async (
  input: DeleteSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles/{securityProfileName}";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1DescribeAccountAuditConfigurationCommand = async (
  input: DescribeAccountAuditConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/configuration";
  let body: any;
  body = "{}";
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeAuditFindingCommand = async (
  input: DescribeAuditFindingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/findings/{findingId}";
  if (input.findingId !== undefined) {
    const labelValue: string = input.findingId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: findingId.");
    }
    resolvedPath = resolvedPath.replace(
      "{findingId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: findingId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeAuditMitigationActionsTaskCommand = async (
  input: DescribeAuditMitigationActionsTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/mitigationactions/tasks/{taskId}";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeAuditTaskCommand = async (
  input: DescribeAuditTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/tasks/{taskId}";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeMitigationActionCommand = async (
  input: DescribeMitigationActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/mitigationactions/actions/{actionName}";
  if (input.actionName !== undefined) {
    const labelValue: string = input.actionName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: actionName.");
    }
    resolvedPath = resolvedPath.replace(
      "{actionName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: actionName.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeScheduledAuditCommand = async (
  input: DescribeScheduledAuditCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/scheduledaudits/{scheduledAuditName}";
  if (input.scheduledAuditName !== undefined) {
    const labelValue: string = input.scheduledAuditName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: scheduledAuditName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{scheduledAuditName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: scheduledAuditName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeSecurityProfileCommand = async (
  input: DescribeSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles/{securityProfileName}";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DetachSecurityProfileCommand = async (
  input: DetachSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles/{securityProfileName}/targets";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  const query: any = {
    ...(input.securityProfileTargetArn !== undefined && {
      securityProfileTargetArn: input.securityProfileTargetArn
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListActiveViolationsCommand = async (
  input: ListActiveViolationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/active-violations";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.securityProfileName !== undefined && {
      securityProfileName: input.securityProfileName
    }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListAuditFindingsCommand = async (
  input: ListAuditFindingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/findings";
  let body: any;
  body = JSON.stringify({
    ...(input.checkName !== undefined && { checkName: input.checkName }),
    ...(input.endTime !== undefined && {
      endTime: Math.round(input.endTime.getTime() / 1000)
    }),
    ...(input.maxResults !== undefined && { maxResults: input.maxResults }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.resourceIdentifier !== undefined && {
      resourceIdentifier: serializeAws_restJson1_1ResourceIdentifier(
        input.resourceIdentifier,
        context
      )
    }),
    ...(input.startTime !== undefined && {
      startTime: Math.round(input.startTime.getTime() / 1000)
    }),
    ...(input.taskId !== undefined && { taskId: input.taskId })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListAuditMitigationActionsExecutionsCommand = async (
  input: ListAuditMitigationActionsExecutionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/mitigationactions/executions";
  const query: any = {
    ...(input.actionStatus !== undefined && {
      actionStatus: input.actionStatus
    }),
    ...(input.findingId !== undefined && { findingId: input.findingId }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.taskId !== undefined && { taskId: input.taskId })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListAuditMitigationActionsTasksCommand = async (
  input: ListAuditMitigationActionsTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/mitigationactions/tasks";
  const query: any = {
    ...(input.auditTaskId !== undefined && { auditTaskId: input.auditTaskId }),
    ...(input.endTime !== undefined && {
      endTime: (input.endTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.findingId !== undefined && { findingId: input.findingId }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.startTime !== undefined && {
      startTime: (input.startTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.taskStatus !== undefined && { taskStatus: input.taskStatus })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListAuditTasksCommand = async (
  input: ListAuditTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/tasks";
  const query: any = {
    ...(input.endTime !== undefined && {
      endTime: (input.endTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.startTime !== undefined && {
      startTime: (input.startTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.taskStatus !== undefined && { taskStatus: input.taskStatus }),
    ...(input.taskType !== undefined && { taskType: input.taskType })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListMitigationActionsCommand = async (
  input: ListMitigationActionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/mitigationactions/actions";
  const query: any = {
    ...(input.actionType !== undefined && { actionType: input.actionType }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListScheduledAuditsCommand = async (
  input: ListScheduledAuditsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/audit/scheduledaudits";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListSecurityProfilesCommand = async (
  input: ListSecurityProfilesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListSecurityProfilesForTargetCommand = async (
  input: ListSecurityProfilesForTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles-for-target";
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.recursive !== undefined && {
      recursive: input.recursive.toString()
    }),
    ...(input.securityProfileTargetArn !== undefined && {
      securityProfileTargetArn: input.securityProfileTargetArn
    })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListTargetsForSecurityProfileCommand = async (
  input: ListTargetsForSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/security-profiles/{securityProfileName}/targets";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  const query: any = {
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ListViolationEventsCommand = async (
  input: ListViolationEventsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/violation-events";
  const query: any = {
    ...(input.endTime !== undefined && {
      endTime: (input.endTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken }),
    ...(input.securityProfileName !== undefined && {
      securityProfileName: input.securityProfileName
    }),
    ...(input.startTime !== undefined && {
      startTime: (input.startTime.toISOString().split(".")[0] + "Z").toString()
    }),
    ...(input.thingName !== undefined && { thingName: input.thingName })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1StartAuditMitigationActionsTaskCommand = async (
  input: StartAuditMitigationActionsTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/mitigationactions/tasks/{taskId}";
  if (input.taskId !== undefined) {
    const labelValue: string = input.taskId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: taskId.");
    }
    resolvedPath = resolvedPath.replace(
      "{taskId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: taskId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.auditCheckToActionsMapping !== undefined && {
      auditCheckToActionsMapping: serializeAws_restJson1_1AuditCheckToActionsMapping(
        input.auditCheckToActionsMapping,
        context
      )
    }),
    clientRequestToken: input.clientRequestToken ?? generateIdempotencyToken(),
    ...(input.target !== undefined && {
      target: serializeAws_restJson1_1AuditMitigationActionsTaskTarget(
        input.target,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1StartOnDemandAuditTaskCommand = async (
  input: StartOnDemandAuditTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/tasks";
  let body: any;
  body = JSON.stringify({
    ...(input.targetCheckNames !== undefined && {
      targetCheckNames: serializeAws_restJson1_1TargetAuditCheckNames(
        input.targetCheckNames,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateAccountAuditConfigurationCommand = async (
  input: UpdateAccountAuditConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/configuration";
  let body: any;
  body = JSON.stringify({
    ...(input.auditCheckConfigurations !== undefined && {
      auditCheckConfigurations: serializeAws_restJson1_1AuditCheckConfigurations(
        input.auditCheckConfigurations,
        context
      )
    }),
    ...(input.auditNotificationTargetConfigurations !== undefined && {
      auditNotificationTargetConfigurations: serializeAws_restJson1_1AuditNotificationTargetConfigurations(
        input.auditNotificationTargetConfigurations,
        context
      )
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateMitigationActionCommand = async (
  input: UpdateMitigationActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/mitigationactions/actions/{actionName}";
  if (input.actionName !== undefined) {
    const labelValue: string = input.actionName;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: actionName.");
    }
    resolvedPath = resolvedPath.replace(
      "{actionName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: actionName.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.actionParams !== undefined && {
      actionParams: serializeAws_restJson1_1MitigationActionParams(
        input.actionParams,
        context
      )
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateScheduledAuditCommand = async (
  input: UpdateScheduledAuditCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/audit/scheduledaudits/{scheduledAuditName}";
  if (input.scheduledAuditName !== undefined) {
    const labelValue: string = input.scheduledAuditName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: scheduledAuditName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{scheduledAuditName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: scheduledAuditName."
    );
  }
  let body: any;
  body = JSON.stringify({
    ...(input.dayOfMonth !== undefined && { dayOfMonth: input.dayOfMonth }),
    ...(input.dayOfWeek !== undefined && { dayOfWeek: input.dayOfWeek }),
    ...(input.frequency !== undefined && { frequency: input.frequency }),
    ...(input.targetCheckNames !== undefined && {
      targetCheckNames: serializeAws_restJson1_1TargetAuditCheckNames(
        input.targetCheckNames,
        context
      )
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1UpdateSecurityProfileCommand = async (
  input: UpdateSecurityProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/security-profiles/{securityProfileName}";
  if (input.securityProfileName !== undefined) {
    const labelValue: string = input.securityProfileName;
    if (labelValue.length <= 0) {
      throw new Error(
        "Empty value provided for input HTTP label: securityProfileName."
      );
    }
    resolvedPath = resolvedPath.replace(
      "{securityProfileName}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error(
      "No value provided for input HTTP label: securityProfileName."
    );
  }
  const query: any = {
    ...(input.expectedVersion !== undefined && {
      expectedVersion: input.expectedVersion.toString()
    })
  };
  let body: any;
  body = JSON.stringify({
    ...(input.additionalMetricsToRetain !== undefined && {
      additionalMetricsToRetain: serializeAws_restJson1_1AdditionalMetricsToRetainList(
        input.additionalMetricsToRetain,
        context
      )
    }),
    ...(input.alertTargets !== undefined && {
      alertTargets: serializeAws_restJson1_1AlertTargets(
        input.alertTargets,
        context
      )
    }),
    ...(input.behaviors !== undefined && {
      behaviors: serializeAws_restJson1_1Behaviors(input.behaviors, context)
    }),
    ...(input.deleteAdditionalMetricsToRetain !== undefined && {
      deleteAdditionalMetricsToRetain: input.deleteAdditionalMetricsToRetain
    }),
    ...(input.deleteAlertTargets !== undefined && {
      deleteAlertTargets: input.deleteAlertTargets
    }),
    ...(input.deleteBehaviors !== undefined && {
      deleteBehaviors: input.deleteBehaviors
    }),
    ...(input.securityProfileDescription !== undefined && {
      securityProfileDescription: input.securityProfileDescription
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PATCH",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1ValidateSecurityProfileBehaviorsCommand = async (
  input: ValidateSecurityProfileBehaviorsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/security-profile-behaviors/validate";
  let body: any;
  body = JSON.stringify({
    ...(input.behaviors !== undefined && {
      behaviors: serializeAws_restJson1_1Behaviors(input.behaviors, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1CreateStreamCommand = async (
  input: CreateStreamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/streams/{streamId}";
  if (input.streamId !== undefined) {
    const labelValue: string = input.streamId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: streamId.");
    }
    resolvedPath = resolvedPath.replace(
      "{streamId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: streamId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.description !== undefined && { description: input.description }),
    ...(input.files !== undefined && {
      files: serializeAws_restJson1_1StreamFiles(input.files, context)
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.tags !== undefined && {
      tags: serializeAws_restJson1_1TagList(input.tags, context)
    })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DeleteStreamCommand = async (
  input: DeleteStreamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/streams/{streamId}";
  if (input.streamId !== undefined) {
    const labelValue: string = input.streamId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: streamId.");
    }
    resolvedPath = resolvedPath.replace(
      "{streamId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: streamId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1DescribeStreamCommand = async (
  input: DescribeStreamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/streams/{streamId}";
  if (input.streamId !== undefined) {
    const labelValue: string = input.streamId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: streamId.");
    }
    resolvedPath = resolvedPath.replace(
      "{streamId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: streamId.");
  }
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body
  });
};

export const serializeAws_restJson1_1ListStreamsCommand = async (
  input: ListStreamsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": ""
  };
  let resolvedPath = "/streams";
  const query: any = {
    ...(input.ascendingOrder !== undefined && {
      isAscendingOrder: input.ascendingOrder.toString()
    }),
    ...(input.maxResults !== undefined && {
      maxResults: input.maxResults.toString()
    }),
    ...(input.nextToken !== undefined && { nextToken: input.nextToken })
  };
  let body: any;
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body
  });
};

export const serializeAws_restJson1_1UpdateStreamCommand = async (
  input: UpdateStreamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: any = {
    "Content-Type": "application/json"
  };
  let resolvedPath = "/streams/{streamId}";
  if (input.streamId !== undefined) {
    const labelValue: string = input.streamId;
    if (labelValue.length <= 0) {
      throw new Error("Empty value provided for input HTTP label: streamId.");
    }
    resolvedPath = resolvedPath.replace(
      "{streamId}",
      __extendedEncodeURIComponent(labelValue)
    );
  } else {
    throw new Error("No value provided for input HTTP label: streamId.");
  }
  let body: any;
  body = JSON.stringify({
    ...(input.description !== undefined && { description: input.description }),
    ...(input.files !== undefined && {
      files: serializeAws_restJson1_1StreamFiles(input.files, context)
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  });
  const { hostname, protocol = "https", port } = await context.endpoint();
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body
  });
};

export const deserializeAws_restJson1_1ConfirmTopicRuleDestinationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmTopicRuleDestinationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ConfirmTopicRuleDestinationCommandError(
      output,
      context
    );
  }
  const contents: ConfirmTopicRuleDestinationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ConfirmTopicRuleDestinationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ConfirmTopicRuleDestinationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmTopicRuleDestinationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateTopicRuleCommandError(
      output,
      context
    );
  }
  const contents: CreateTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "SqlParseException":
    case "com.amazonaws.iot.common.types#SqlParseException":
      response = {
        ...(await deserializeAws_restJson1_1SqlParseExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateTopicRuleDestinationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTopicRuleDestinationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateTopicRuleDestinationCommandError(
      output,
      context
    );
  }
  const contents: CreateTopicRuleDestinationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateTopicRuleDestinationResponse",
    topicRuleDestination: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.topicRuleDestination !== undefined &&
    data.topicRuleDestination !== null
  ) {
    contents.topicRuleDestination = deserializeAws_restJson1_1TopicRuleDestination(
      data.topicRuleDestination,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateTopicRuleDestinationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTopicRuleDestinationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteTopicRuleCommandError(
      output,
      context
    );
  }
  const contents: DeleteTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteTopicRuleDestinationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTopicRuleDestinationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteTopicRuleDestinationCommandError(
      output,
      context
    );
  }
  const contents: DeleteTopicRuleDestinationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteTopicRuleDestinationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteTopicRuleDestinationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTopicRuleDestinationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteV2LoggingLevelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteV2LoggingLevelCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteV2LoggingLevelCommandError(
      output,
      context
    );
  }
  const contents: DeleteV2LoggingLevelCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteV2LoggingLevelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteV2LoggingLevelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DisableTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DisableTopicRuleCommandError(
      output,
      context
    );
  }
  const contents: DisableTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DisableTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1EnableTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1EnableTopicRuleCommandError(
      output,
      context
    );
  }
  const contents: EnableTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1EnableTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetLoggingOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLoggingOptionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetLoggingOptionsCommandError(
      output,
      context
    );
  }
  const contents: GetLoggingOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetLoggingOptionsResponse",
    logLevel: undefined,
    roleArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.logLevel !== undefined && data.logLevel !== null) {
    contents.logLevel = data.logLevel;
  }
  if (data.roleArn !== undefined && data.roleArn !== null) {
    contents.roleArn = data.roleArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetLoggingOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLoggingOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetTopicRuleCommandError(output, context);
  }
  const contents: GetTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetTopicRuleResponse",
    rule: undefined,
    ruleArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.rule !== undefined && data.rule !== null) {
    contents.rule = deserializeAws_restJson1_1TopicRule(data.rule, context);
  }
  if (data.ruleArn !== undefined && data.ruleArn !== null) {
    contents.ruleArn = data.ruleArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetTopicRuleDestinationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTopicRuleDestinationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetTopicRuleDestinationCommandError(
      output,
      context
    );
  }
  const contents: GetTopicRuleDestinationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetTopicRuleDestinationResponse",
    topicRuleDestination: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.topicRuleDestination !== undefined &&
    data.topicRuleDestination !== null
  ) {
    contents.topicRuleDestination = deserializeAws_restJson1_1TopicRuleDestination(
      data.topicRuleDestination,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetTopicRuleDestinationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTopicRuleDestinationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetV2LoggingOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetV2LoggingOptionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetV2LoggingOptionsCommandError(
      output,
      context
    );
  }
  const contents: GetV2LoggingOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetV2LoggingOptionsResponse",
    defaultLogLevel: undefined,
    disableAllLogs: undefined,
    roleArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.defaultLogLevel !== undefined && data.defaultLogLevel !== null) {
    contents.defaultLogLevel = data.defaultLogLevel;
  }
  if (data.disableAllLogs !== undefined && data.disableAllLogs !== null) {
    contents.disableAllLogs = data.disableAllLogs;
  }
  if (data.roleArn !== undefined && data.roleArn !== null) {
    contents.roleArn = data.roleArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetV2LoggingOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetV2LoggingOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "NotConfiguredException":
    case "com.amazonaws.iot.common.types#NotConfiguredException":
      response = {
        ...(await deserializeAws_restJson1_1NotConfiguredExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListTopicRuleDestinationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTopicRuleDestinationsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListTopicRuleDestinationsCommandError(
      output,
      context
    );
  }
  const contents: ListTopicRuleDestinationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListTopicRuleDestinationsResponse",
    destinationSummaries: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.destinationSummaries !== undefined &&
    data.destinationSummaries !== null
  ) {
    contents.destinationSummaries = deserializeAws_restJson1_1TopicRuleDestinationSummaries(
      data.destinationSummaries,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListTopicRuleDestinationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTopicRuleDestinationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListTopicRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTopicRulesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListTopicRulesCommandError(
      output,
      context
    );
  }
  const contents: ListTopicRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListTopicRulesResponse",
    nextToken: undefined,
    rules: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.rules !== undefined && data.rules !== null) {
    contents.rules = deserializeAws_restJson1_1TopicRuleList(
      data.rules,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListTopicRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTopicRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListV2LoggingLevelsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListV2LoggingLevelsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListV2LoggingLevelsCommandError(
      output,
      context
    );
  }
  const contents: ListV2LoggingLevelsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListV2LoggingLevelsResponse",
    logTargetConfigurations: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.logTargetConfigurations !== undefined &&
    data.logTargetConfigurations !== null
  ) {
    contents.logTargetConfigurations = deserializeAws_restJson1_1LogTargetConfigurations(
      data.logTargetConfigurations,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListV2LoggingLevelsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListV2LoggingLevelsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "NotConfiguredException":
    case "com.amazonaws.iot.common.types#NotConfiguredException":
      response = {
        ...(await deserializeAws_restJson1_1NotConfiguredExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ReplaceTopicRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTopicRuleCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ReplaceTopicRuleCommandError(
      output,
      context
    );
  }
  const contents: ReplaceTopicRuleCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ReplaceTopicRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTopicRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "SqlParseException":
    case "com.amazonaws.iot.common.types#SqlParseException":
      response = {
        ...(await deserializeAws_restJson1_1SqlParseExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SetLoggingOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetLoggingOptionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SetLoggingOptionsCommandError(
      output,
      context
    );
  }
  const contents: SetLoggingOptionsCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SetLoggingOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetLoggingOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SetV2LoggingLevelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetV2LoggingLevelCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SetV2LoggingLevelCommandError(
      output,
      context
    );
  }
  const contents: SetV2LoggingLevelCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SetV2LoggingLevelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetV2LoggingLevelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "NotConfiguredException":
    case "com.amazonaws.iot.common.types#NotConfiguredException":
      response = {
        ...(await deserializeAws_restJson1_1NotConfiguredExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SetV2LoggingOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetV2LoggingOptionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SetV2LoggingOptionsCommandError(
      output,
      context
    );
  }
  const contents: SetV2LoggingOptionsCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SetV2LoggingOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetV2LoggingOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateTopicRuleDestinationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTopicRuleDestinationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateTopicRuleDestinationCommandError(
      output,
      context
    );
  }
  const contents: UpdateTopicRuleDestinationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateTopicRuleDestinationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateTopicRuleDestinationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTopicRuleDestinationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalException":
    case "com.amazonaws.iot.common.types#InternalException":
      response = {
        ...(await deserializeAws_restJson1_1InternalExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AcceptCertificateTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptCertificateTransferCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AcceptCertificateTransferCommandError(
      output,
      context
    );
  }
  const contents: AcceptCertificateTransferCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AcceptCertificateTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptCertificateTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot.common.types#TransferAlreadyCompletedException":
      response = {
        ...(await deserializeAws_restJson1_1TransferAlreadyCompletedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AttachPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AttachPolicyCommandError(output, context);
  }
  const contents: AttachPolicyCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AttachPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AttachPrincipalPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachPrincipalPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AttachPrincipalPolicyCommandError(
      output,
      context
    );
  }
  const contents: AttachPrincipalPolicyCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AttachPrincipalPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachPrincipalPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CancelCertificateTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCertificateTransferCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CancelCertificateTransferCommandError(
      output,
      context
    );
  }
  const contents: CancelCertificateTransferCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CancelCertificateTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCertificateTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot.common.types#TransferAlreadyCompletedException":
      response = {
        ...(await deserializeAws_restJson1_1TransferAlreadyCompletedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ClearDefaultAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ClearDefaultAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ClearDefaultAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: ClearDefaultAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ClearDefaultAuthorizerResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ClearDefaultAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ClearDefaultAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: CreateAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateAuthorizerResponse",
    authorizerArn: undefined,
    authorizerName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authorizerArn !== undefined && data.authorizerArn !== null) {
    contents.authorizerArn = data.authorizerArn;
  }
  if (data.authorizerName !== undefined && data.authorizerName !== null) {
    contents.authorizerName = data.authorizerName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateCertificateFromCsrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCertificateFromCsrCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateCertificateFromCsrCommandError(
      output,
      context
    );
  }
  const contents: CreateCertificateFromCsrCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateCertificateFromCsrResponse",
    certificateArn: undefined,
    certificateId: undefined,
    certificatePem: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificateArn !== undefined && data.certificateArn !== null) {
    contents.certificateArn = data.certificateArn;
  }
  if (data.certificateId !== undefined && data.certificateId !== null) {
    contents.certificateId = data.certificateId;
  }
  if (data.certificatePem !== undefined && data.certificatePem !== null) {
    contents.certificatePem = data.certificatePem;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateCertificateFromCsrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCertificateFromCsrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateDomainConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDomainConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateDomainConfigurationCommandError(
      output,
      context
    );
  }
  const contents: CreateDomainConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateDomainConfigurationResponse",
    domainConfigurationArn: undefined,
    domainConfigurationName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.domainConfigurationArn !== undefined &&
    data.domainConfigurationArn !== null
  ) {
    contents.domainConfigurationArn = data.domainConfigurationArn;
  }
  if (
    data.domainConfigurationName !== undefined &&
    data.domainConfigurationName !== null
  ) {
    contents.domainConfigurationName = data.domainConfigurationName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateDomainConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDomainConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot.common.types#CertificateValidationException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateValidationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateKeysAndCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeysAndCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateKeysAndCertificateCommandError(
      output,
      context
    );
  }
  const contents: CreateKeysAndCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateKeysAndCertificateResponse",
    certificateArn: undefined,
    certificateId: undefined,
    certificatePem: undefined,
    keyPair: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificateArn !== undefined && data.certificateArn !== null) {
    contents.certificateArn = data.certificateArn;
  }
  if (data.certificateId !== undefined && data.certificateId !== null) {
    contents.certificateId = data.certificateId;
  }
  if (data.certificatePem !== undefined && data.certificatePem !== null) {
    contents.certificatePem = data.certificatePem;
  }
  if (data.keyPair !== undefined && data.keyPair !== null) {
    contents.keyPair = deserializeAws_restJson1_1KeyPair(data.keyPair, context);
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateKeysAndCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeysAndCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreatePolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreatePolicyCommandError(output, context);
  }
  const contents: CreatePolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreatePolicyResponse",
    policyArn: undefined,
    policyDocument: undefined,
    policyName: undefined,
    policyVersionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.policyArn !== undefined && data.policyArn !== null) {
    contents.policyArn = data.policyArn;
  }
  if (data.policyDocument !== undefined && data.policyDocument !== null) {
    contents.policyDocument = data.policyDocument;
  }
  if (data.policyName !== undefined && data.policyName !== null) {
    contents.policyName = data.policyName;
  }
  if (data.policyVersionId !== undefined && data.policyVersionId !== null) {
    contents.policyVersionId = data.policyVersionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreatePolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "MalformedPolicyException":
    case "com.amazonaws.iot.common.types#MalformedPolicyException":
      response = {
        ...(await deserializeAws_restJson1_1MalformedPolicyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreatePolicyVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePolicyVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreatePolicyVersionCommandError(
      output,
      context
    );
  }
  const contents: CreatePolicyVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreatePolicyVersionResponse",
    isDefaultVersion: undefined,
    policyArn: undefined,
    policyDocument: undefined,
    policyVersionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.isDefaultVersion !== undefined && data.isDefaultVersion !== null) {
    contents.isDefaultVersion = data.isDefaultVersion;
  }
  if (data.policyArn !== undefined && data.policyArn !== null) {
    contents.policyArn = data.policyArn;
  }
  if (data.policyDocument !== undefined && data.policyDocument !== null) {
    contents.policyDocument = data.policyDocument;
  }
  if (data.policyVersionId !== undefined && data.policyVersionId !== null) {
    contents.policyVersionId = data.policyVersionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreatePolicyVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePolicyVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "MalformedPolicyException":
    case "com.amazonaws.iot.common.types#MalformedPolicyException":
      response = {
        ...(await deserializeAws_restJson1_1MalformedPolicyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionsLimitExceededException":
    case "com.amazonaws.iot.common.types#VersionsLimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1VersionsLimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateProvisioningClaimCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningClaimCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateProvisioningClaimCommandError(
      output,
      context
    );
  }
  const contents: CreateProvisioningClaimCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateProvisioningClaimResponse",
    certificateId: undefined,
    certificatePem: undefined,
    expiration: undefined,
    keyPair: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificateId !== undefined && data.certificateId !== null) {
    contents.certificateId = data.certificateId;
  }
  if (data.certificatePem !== undefined && data.certificatePem !== null) {
    contents.certificatePem = data.certificatePem;
  }
  if (data.expiration !== undefined && data.expiration !== null) {
    contents.expiration = new Date(Math.round(data.expiration * 1000));
  }
  if (data.keyPair !== undefined && data.keyPair !== null) {
    contents.keyPair = deserializeAws_restJson1_1KeyPair(data.keyPair, context);
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateProvisioningClaimCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningClaimCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateProvisioningTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateProvisioningTemplateCommandError(
      output,
      context
    );
  }
  const contents: CreateProvisioningTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateProvisioningTemplateResponse",
    defaultVersionId: undefined,
    templateArn: undefined,
    templateName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.defaultVersionId !== undefined && data.defaultVersionId !== null) {
    contents.defaultVersionId = data.defaultVersionId;
  }
  if (data.templateArn !== undefined && data.templateArn !== null) {
    contents.templateArn = data.templateArn;
  }
  if (data.templateName !== undefined && data.templateName !== null) {
    contents.templateName = data.templateName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateProvisioningTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateProvisioningTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningTemplateVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateProvisioningTemplateVersionCommandError(
      output,
      context
    );
  }
  const contents: CreateProvisioningTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateProvisioningTemplateVersionResponse",
    isDefaultVersion: undefined,
    templateArn: undefined,
    templateName: undefined,
    versionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.isDefaultVersion !== undefined && data.isDefaultVersion !== null) {
    contents.isDefaultVersion = data.isDefaultVersion;
  }
  if (data.templateArn !== undefined && data.templateArn !== null) {
    contents.templateArn = data.templateArn;
  }
  if (data.templateName !== undefined && data.templateName !== null) {
    contents.templateName = data.templateName;
  }
  if (data.versionId !== undefined && data.versionId !== null) {
    contents.versionId = data.versionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateProvisioningTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProvisioningTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionsLimitExceededException":
    case "com.amazonaws.iot.common.types#VersionsLimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1VersionsLimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateRoleAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRoleAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateRoleAliasCommandError(
      output,
      context
    );
  }
  const contents: CreateRoleAliasCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateRoleAliasResponse",
    roleAlias: undefined,
    roleAliasArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.roleAlias !== undefined && data.roleAlias !== null) {
    contents.roleAlias = data.roleAlias;
  }
  if (data.roleAliasArn !== undefined && data.roleAliasArn !== null) {
    contents.roleAliasArn = data.roleAliasArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateRoleAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRoleAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: DeleteAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteAuthorizerResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteCACertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCACertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteCACertificateCommandError(
      output,
      context
    );
  }
  const contents: DeleteCACertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteCACertificateResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteCACertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCACertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot.common.types#CertificateStateException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateStateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteCertificateCommandError(
      output,
      context
    );
  }
  const contents: DeleteCertificateCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot.common.types#CertificateStateException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateStateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteDomainConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDomainConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteDomainConfigurationCommandError(
      output,
      context
    );
  }
  const contents: DeleteDomainConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteDomainConfigurationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteDomainConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDomainConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeletePolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeletePolicyCommandError(output, context);
  }
  const contents: DeletePolicyCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeletePolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeletePolicyVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePolicyVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeletePolicyVersionCommandError(
      output,
      context
    );
  }
  const contents: DeletePolicyVersionCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeletePolicyVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePolicyVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteProvisioningTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProvisioningTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteProvisioningTemplateCommandError(
      output,
      context
    );
  }
  const contents: DeleteProvisioningTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteProvisioningTemplateResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteProvisioningTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProvisioningTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteProvisioningTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProvisioningTemplateVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteProvisioningTemplateVersionCommandError(
      output,
      context
    );
  }
  const contents: DeleteProvisioningTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteProvisioningTemplateVersionResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteProvisioningTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProvisioningTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteRegistrationCodeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRegistrationCodeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteRegistrationCodeCommandError(
      output,
      context
    );
  }
  const contents: DeleteRegistrationCodeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteRegistrationCodeResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteRegistrationCodeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRegistrationCodeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteRoleAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRoleAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteRoleAliasCommandError(
      output,
      context
    );
  }
  const contents: DeleteRoleAliasCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteRoleAliasResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteRoleAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRoleAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: DescribeAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeAuthorizerResponse",
    authorizerDescription: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.authorizerDescription !== undefined &&
    data.authorizerDescription !== null
  ) {
    contents.authorizerDescription = deserializeAws_restJson1_1AuthorizerDescription(
      data.authorizerDescription,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeCACertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCACertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeCACertificateCommandError(
      output,
      context
    );
  }
  const contents: DescribeCACertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeCACertificateResponse",
    certificateDescription: undefined,
    registrationConfig: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.certificateDescription !== undefined &&
    data.certificateDescription !== null
  ) {
    contents.certificateDescription = deserializeAws_restJson1_1CACertificateDescription(
      data.certificateDescription,
      context
    );
  }
  if (
    data.registrationConfig !== undefined &&
    data.registrationConfig !== null
  ) {
    contents.registrationConfig = deserializeAws_restJson1_1RegistrationConfig(
      data.registrationConfig,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeCACertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCACertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeCertificateCommandError(
      output,
      context
    );
  }
  const contents: DescribeCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeCertificateResponse",
    certificateDescription: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.certificateDescription !== undefined &&
    data.certificateDescription !== null
  ) {
    contents.certificateDescription = deserializeAws_restJson1_1CertificateDescription(
      data.certificateDescription,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeDefaultAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDefaultAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeDefaultAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: DescribeDefaultAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeDefaultAuthorizerResponse",
    authorizerDescription: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.authorizerDescription !== undefined &&
    data.authorizerDescription !== null
  ) {
    contents.authorizerDescription = deserializeAws_restJson1_1AuthorizerDescription(
      data.authorizerDescription,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeDefaultAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDefaultAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeDomainConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDomainConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeDomainConfigurationCommandError(
      output,
      context
    );
  }
  const contents: DescribeDomainConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeDomainConfigurationResponse",
    authorizerConfig: undefined,
    domainConfigurationArn: undefined,
    domainConfigurationName: undefined,
    domainConfigurationStatus: undefined,
    domainName: undefined,
    domainType: undefined,
    serverCertificates: undefined,
    serviceType: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authorizerConfig !== undefined && data.authorizerConfig !== null) {
    contents.authorizerConfig = deserializeAws_restJson1_1AuthorizerConfig(
      data.authorizerConfig,
      context
    );
  }
  if (
    data.domainConfigurationArn !== undefined &&
    data.domainConfigurationArn !== null
  ) {
    contents.domainConfigurationArn = data.domainConfigurationArn;
  }
  if (
    data.domainConfigurationName !== undefined &&
    data.domainConfigurationName !== null
  ) {
    contents.domainConfigurationName = data.domainConfigurationName;
  }
  if (
    data.domainConfigurationStatus !== undefined &&
    data.domainConfigurationStatus !== null
  ) {
    contents.domainConfigurationStatus = data.domainConfigurationStatus;
  }
  if (data.domainName !== undefined && data.domainName !== null) {
    contents.domainName = data.domainName;
  }
  if (data.domainType !== undefined && data.domainType !== null) {
    contents.domainType = data.domainType;
  }
  if (
    data.serverCertificates !== undefined &&
    data.serverCertificates !== null
  ) {
    contents.serverCertificates = deserializeAws_restJson1_1ServerCertificates(
      data.serverCertificates,
      context
    );
  }
  if (data.serviceType !== undefined && data.serviceType !== null) {
    contents.serviceType = data.serviceType;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeDomainConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDomainConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeEndpointCommandError(
      output,
      context
    );
  }
  const contents: DescribeEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeEndpointResponse",
    endpointAddress: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.endpointAddress !== undefined && data.endpointAddress !== null) {
    contents.endpointAddress = data.endpointAddress;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeProvisioningTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProvisioningTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeProvisioningTemplateCommandError(
      output,
      context
    );
  }
  const contents: DescribeProvisioningTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeProvisioningTemplateResponse",
    creationDate: undefined,
    defaultVersionId: undefined,
    description: undefined,
    enabled: undefined,
    lastModifiedDate: undefined,
    provisioningRoleArn: undefined,
    templateArn: undefined,
    templateBody: undefined,
    templateName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.defaultVersionId !== undefined && data.defaultVersionId !== null) {
    contents.defaultVersionId = data.defaultVersionId;
  }
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.enabled !== undefined && data.enabled !== null) {
    contents.enabled = data.enabled;
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (
    data.provisioningRoleArn !== undefined &&
    data.provisioningRoleArn !== null
  ) {
    contents.provisioningRoleArn = data.provisioningRoleArn;
  }
  if (data.templateArn !== undefined && data.templateArn !== null) {
    contents.templateArn = data.templateArn;
  }
  if (data.templateBody !== undefined && data.templateBody !== null) {
    contents.templateBody = data.templateBody;
  }
  if (data.templateName !== undefined && data.templateName !== null) {
    contents.templateName = data.templateName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeProvisioningTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProvisioningTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeProvisioningTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProvisioningTemplateVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeProvisioningTemplateVersionCommandError(
      output,
      context
    );
  }
  const contents: DescribeProvisioningTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeProvisioningTemplateVersionResponse",
    creationDate: undefined,
    isDefaultVersion: undefined,
    templateBody: undefined,
    versionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.isDefaultVersion !== undefined && data.isDefaultVersion !== null) {
    contents.isDefaultVersion = data.isDefaultVersion;
  }
  if (data.templateBody !== undefined && data.templateBody !== null) {
    contents.templateBody = data.templateBody;
  }
  if (data.versionId !== undefined && data.versionId !== null) {
    contents.versionId = data.versionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeProvisioningTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProvisioningTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeRoleAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRoleAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeRoleAliasCommandError(
      output,
      context
    );
  }
  const contents: DescribeRoleAliasCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeRoleAliasResponse",
    roleAliasDescription: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.roleAliasDescription !== undefined &&
    data.roleAliasDescription !== null
  ) {
    contents.roleAliasDescription = deserializeAws_restJson1_1RoleAliasDescription(
      data.roleAliasDescription,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeRoleAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRoleAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DetachPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DetachPolicyCommandError(output, context);
  }
  const contents: DetachPolicyCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DetachPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DetachPrincipalPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachPrincipalPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DetachPrincipalPolicyCommandError(
      output,
      context
    );
  }
  const contents: DetachPrincipalPolicyCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DetachPrincipalPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachPrincipalPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetEffectivePoliciesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEffectivePoliciesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetEffectivePoliciesCommandError(
      output,
      context
    );
  }
  const contents: GetEffectivePoliciesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetEffectivePoliciesResponse",
    effectivePolicies: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.effectivePolicies !== undefined && data.effectivePolicies !== null) {
    contents.effectivePolicies = deserializeAws_restJson1_1EffectivePolicies(
      data.effectivePolicies,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetEffectivePoliciesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEffectivePoliciesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetPolicyCommandError(output, context);
  }
  const contents: GetPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetPolicyResponse",
    creationDate: undefined,
    defaultVersionId: undefined,
    generationId: undefined,
    lastModifiedDate: undefined,
    policyArn: undefined,
    policyDocument: undefined,
    policyName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.defaultVersionId !== undefined && data.defaultVersionId !== null) {
    contents.defaultVersionId = data.defaultVersionId;
  }
  if (data.generationId !== undefined && data.generationId !== null) {
    contents.generationId = data.generationId;
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (data.policyArn !== undefined && data.policyArn !== null) {
    contents.policyArn = data.policyArn;
  }
  if (data.policyDocument !== undefined && data.policyDocument !== null) {
    contents.policyDocument = data.policyDocument;
  }
  if (data.policyName !== undefined && data.policyName !== null) {
    contents.policyName = data.policyName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetPolicyVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPolicyVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetPolicyVersionCommandError(
      output,
      context
    );
  }
  const contents: GetPolicyVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetPolicyVersionResponse",
    creationDate: undefined,
    generationId: undefined,
    isDefaultVersion: undefined,
    lastModifiedDate: undefined,
    policyArn: undefined,
    policyDocument: undefined,
    policyName: undefined,
    policyVersionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.generationId !== undefined && data.generationId !== null) {
    contents.generationId = data.generationId;
  }
  if (data.isDefaultVersion !== undefined && data.isDefaultVersion !== null) {
    contents.isDefaultVersion = data.isDefaultVersion;
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (data.policyArn !== undefined && data.policyArn !== null) {
    contents.policyArn = data.policyArn;
  }
  if (data.policyDocument !== undefined && data.policyDocument !== null) {
    contents.policyDocument = data.policyDocument;
  }
  if (data.policyName !== undefined && data.policyName !== null) {
    contents.policyName = data.policyName;
  }
  if (data.policyVersionId !== undefined && data.policyVersionId !== null) {
    contents.policyVersionId = data.policyVersionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetPolicyVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPolicyVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetRegistrationCodeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetRegistrationCodeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetRegistrationCodeCommandError(
      output,
      context
    );
  }
  const contents: GetRegistrationCodeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetRegistrationCodeResponse",
    registrationCode: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.registrationCode !== undefined && data.registrationCode !== null) {
    contents.registrationCode = data.registrationCode;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetRegistrationCodeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetRegistrationCodeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAttachedPoliciesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAttachedPoliciesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAttachedPoliciesCommandError(
      output,
      context
    );
  }
  const contents: ListAttachedPoliciesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAttachedPoliciesResponse",
    nextMarker: undefined,
    policies: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.policies !== undefined && data.policies !== null) {
    contents.policies = deserializeAws_restJson1_1Policies(
      data.policies,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAttachedPoliciesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAttachedPoliciesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAuthorizersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuthorizersCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAuthorizersCommandError(
      output,
      context
    );
  }
  const contents: ListAuthorizersCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAuthorizersResponse",
    authorizers: undefined,
    nextMarker: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authorizers !== undefined && data.authorizers !== null) {
    contents.authorizers = deserializeAws_restJson1_1Authorizers(
      data.authorizers,
      context
    );
  }
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAuthorizersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuthorizersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListCACertificatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCACertificatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListCACertificatesCommandError(
      output,
      context
    );
  }
  const contents: ListCACertificatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListCACertificatesResponse",
    certificates: undefined,
    nextMarker: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificates !== undefined && data.certificates !== null) {
    contents.certificates = deserializeAws_restJson1_1CACertificates(
      data.certificates,
      context
    );
  }
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListCACertificatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCACertificatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListCertificatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCertificatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListCertificatesCommandError(
      output,
      context
    );
  }
  const contents: ListCertificatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListCertificatesResponse",
    certificates: undefined,
    nextMarker: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificates !== undefined && data.certificates !== null) {
    contents.certificates = deserializeAws_restJson1_1Certificates(
      data.certificates,
      context
    );
  }
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListCertificatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCertificatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListCertificatesByCACommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCertificatesByCACommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListCertificatesByCACommandError(
      output,
      context
    );
  }
  const contents: ListCertificatesByCACommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListCertificatesByCAResponse",
    certificates: undefined,
    nextMarker: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificates !== undefined && data.certificates !== null) {
    contents.certificates = deserializeAws_restJson1_1Certificates(
      data.certificates,
      context
    );
  }
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListCertificatesByCACommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCertificatesByCACommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListDomainConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDomainConfigurationsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListDomainConfigurationsCommandError(
      output,
      context
    );
  }
  const contents: ListDomainConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListDomainConfigurationsResponse",
    domainConfigurations: undefined,
    nextMarker: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.domainConfigurations !== undefined &&
    data.domainConfigurations !== null
  ) {
    contents.domainConfigurations = deserializeAws_restJson1_1DomainConfigurations(
      data.domainConfigurations,
      context
    );
  }
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListDomainConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDomainConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListOutgoingCertificatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListOutgoingCertificatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListOutgoingCertificatesCommandError(
      output,
      context
    );
  }
  const contents: ListOutgoingCertificatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListOutgoingCertificatesResponse",
    nextMarker: undefined,
    outgoingCertificates: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (
    data.outgoingCertificates !== undefined &&
    data.outgoingCertificates !== null
  ) {
    contents.outgoingCertificates = deserializeAws_restJson1_1OutgoingCertificates(
      data.outgoingCertificates,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListOutgoingCertificatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListOutgoingCertificatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListPoliciesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPoliciesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListPoliciesCommandError(output, context);
  }
  const contents: ListPoliciesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListPoliciesResponse",
    nextMarker: undefined,
    policies: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.policies !== undefined && data.policies !== null) {
    contents.policies = deserializeAws_restJson1_1Policies(
      data.policies,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListPoliciesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPoliciesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListPolicyPrincipalsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPolicyPrincipalsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListPolicyPrincipalsCommandError(
      output,
      context
    );
  }
  const contents: ListPolicyPrincipalsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListPolicyPrincipalsResponse",
    nextMarker: undefined,
    principals: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.principals !== undefined && data.principals !== null) {
    contents.principals = deserializeAws_restJson1_1Principals(
      data.principals,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListPolicyPrincipalsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPolicyPrincipalsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListPolicyVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPolicyVersionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListPolicyVersionsCommandError(
      output,
      context
    );
  }
  const contents: ListPolicyVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListPolicyVersionsResponse",
    policyVersions: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.policyVersions !== undefined && data.policyVersions !== null) {
    contents.policyVersions = deserializeAws_restJson1_1PolicyVersions(
      data.policyVersions,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListPolicyVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPolicyVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListPrincipalPoliciesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPrincipalPoliciesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListPrincipalPoliciesCommandError(
      output,
      context
    );
  }
  const contents: ListPrincipalPoliciesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListPrincipalPoliciesResponse",
    nextMarker: undefined,
    policies: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.policies !== undefined && data.policies !== null) {
    contents.policies = deserializeAws_restJson1_1Policies(
      data.policies,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListPrincipalPoliciesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPrincipalPoliciesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListProvisioningTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProvisioningTemplateVersionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListProvisioningTemplateVersionsCommandError(
      output,
      context
    );
  }
  const contents: ListProvisioningTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListProvisioningTemplateVersionsResponse",
    nextToken: undefined,
    versions: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.versions !== undefined && data.versions !== null) {
    contents.versions = deserializeAws_restJson1_1ProvisioningTemplateVersionListing(
      data.versions,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListProvisioningTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProvisioningTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListProvisioningTemplatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProvisioningTemplatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListProvisioningTemplatesCommandError(
      output,
      context
    );
  }
  const contents: ListProvisioningTemplatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListProvisioningTemplatesResponse",
    nextToken: undefined,
    templates: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.templates !== undefined && data.templates !== null) {
    contents.templates = deserializeAws_restJson1_1ProvisioningTemplateListing(
      data.templates,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListProvisioningTemplatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProvisioningTemplatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListRoleAliasesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListRoleAliasesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListRoleAliasesCommandError(
      output,
      context
    );
  }
  const contents: ListRoleAliasesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListRoleAliasesResponse",
    nextMarker: undefined,
    roleAliases: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.roleAliases !== undefined && data.roleAliases !== null) {
    contents.roleAliases = deserializeAws_restJson1_1RoleAliases(
      data.roleAliases,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListRoleAliasesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListRoleAliasesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListTargetsForPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTargetsForPolicyCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListTargetsForPolicyCommandError(
      output,
      context
    );
  }
  const contents: ListTargetsForPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListTargetsForPolicyResponse",
    nextMarker: undefined,
    targets: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextMarker !== undefined && data.nextMarker !== null) {
    contents.nextMarker = data.nextMarker;
  }
  if (data.targets !== undefined && data.targets !== null) {
    contents.targets = deserializeAws_restJson1_1PolicyTargets(
      data.targets,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListTargetsForPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTargetsForPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RegisterCACertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterCACertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RegisterCACertificateCommandError(
      output,
      context
    );
  }
  const contents: RegisterCACertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "RegisterCACertificateResponse",
    certificateArn: undefined,
    certificateId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificateArn !== undefined && data.certificateArn !== null) {
    contents.certificateArn = data.certificateArn;
  }
  if (data.certificateId !== undefined && data.certificateId !== null) {
    contents.certificateId = data.certificateId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RegisterCACertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterCACertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot.common.types#CertificateValidationException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateValidationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "RegistrationCodeValidationException":
    case "com.amazonaws.iot.common.types#RegistrationCodeValidationException":
      response = {
        ...(await deserializeAws_restJson1_1RegistrationCodeValidationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RegisterCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RegisterCertificateCommandError(
      output,
      context
    );
  }
  const contents: RegisterCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "RegisterCertificateResponse",
    certificateArn: undefined,
    certificateId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificateArn !== undefined && data.certificateArn !== null) {
    contents.certificateArn = data.certificateArn;
  }
  if (data.certificateId !== undefined && data.certificateId !== null) {
    contents.certificateId = data.certificateId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RegisterCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateConflictException":
    case "com.amazonaws.iot.common.types#CertificateConflictException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "CertificateStateException":
    case "com.amazonaws.iot.common.types#CertificateStateException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateStateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "CertificateValidationException":
    case "com.amazonaws.iot.common.types#CertificateValidationException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateValidationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RegisterThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RegisterThingCommandError(output, context);
  }
  const contents: RegisterThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "RegisterThingResponse",
    certificatePem: undefined,
    resourceArns: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.certificatePem !== undefined && data.certificatePem !== null) {
    contents.certificatePem = data.certificatePem;
  }
  if (data.resourceArns !== undefined && data.resourceArns !== null) {
    contents.resourceArns = deserializeAws_restJson1_1ResourceArns(
      data.resourceArns,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RegisterThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceRegistrationFailureException":
    case "com.amazonaws.iot.common.types#ResourceRegistrationFailureException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceRegistrationFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RejectCertificateTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectCertificateTransferCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RejectCertificateTransferCommandError(
      output,
      context
    );
  }
  const contents: RejectCertificateTransferCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RejectCertificateTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectCertificateTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "TransferAlreadyCompletedException":
    case "com.amazonaws.iot.common.types#TransferAlreadyCompletedException":
      response = {
        ...(await deserializeAws_restJson1_1TransferAlreadyCompletedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SetDefaultAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetDefaultAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SetDefaultAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: SetDefaultAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "SetDefaultAuthorizerResponse",
    authorizerArn: undefined,
    authorizerName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authorizerArn !== undefined && data.authorizerArn !== null) {
    contents.authorizerArn = data.authorizerArn;
  }
  if (data.authorizerName !== undefined && data.authorizerName !== null) {
    contents.authorizerName = data.authorizerName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SetDefaultAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetDefaultAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SetDefaultPolicyVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetDefaultPolicyVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SetDefaultPolicyVersionCommandError(
      output,
      context
    );
  }
  const contents: SetDefaultPolicyVersionCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SetDefaultPolicyVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SetDefaultPolicyVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1TestAuthorizationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TestAuthorizationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1TestAuthorizationCommandError(
      output,
      context
    );
  }
  const contents: TestAuthorizationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "TestAuthorizationResponse",
    authResults: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authResults !== undefined && data.authResults !== null) {
    contents.authResults = deserializeAws_restJson1_1AuthResults(
      data.authResults,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1TestAuthorizationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TestAuthorizationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1TestInvokeAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TestInvokeAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1TestInvokeAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: TestInvokeAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "TestInvokeAuthorizerResponse",
    disconnectAfterInSeconds: undefined,
    isAuthenticated: undefined,
    policyDocuments: undefined,
    principalId: undefined,
    refreshAfterInSeconds: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.disconnectAfterInSeconds !== undefined &&
    data.disconnectAfterInSeconds !== null
  ) {
    contents.disconnectAfterInSeconds = data.disconnectAfterInSeconds;
  }
  if (data.isAuthenticated !== undefined && data.isAuthenticated !== null) {
    contents.isAuthenticated = data.isAuthenticated;
  }
  if (data.policyDocuments !== undefined && data.policyDocuments !== null) {
    contents.policyDocuments = deserializeAws_restJson1_1PolicyDocuments(
      data.policyDocuments,
      context
    );
  }
  if (data.principalId !== undefined && data.principalId !== null) {
    contents.principalId = data.principalId;
  }
  if (
    data.refreshAfterInSeconds !== undefined &&
    data.refreshAfterInSeconds !== null
  ) {
    contents.refreshAfterInSeconds = data.refreshAfterInSeconds;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1TestInvokeAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TestInvokeAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidResponseException":
    case "com.amazonaws.iot.common.types#InvalidResponseException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidResponseExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1TransferCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TransferCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1TransferCertificateCommandError(
      output,
      context
    );
  }
  const contents: TransferCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "TransferCertificateResponse",
    transferredCertificateArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.transferredCertificateArn !== undefined &&
    data.transferredCertificateArn !== null
  ) {
    contents.transferredCertificateArn = data.transferredCertificateArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1TransferCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TransferCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot.common.types#CertificateStateException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateStateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "TransferConflictException":
    case "com.amazonaws.iot.common.types#TransferConflictException":
      response = {
        ...(await deserializeAws_restJson1_1TransferConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateAuthorizerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAuthorizerCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateAuthorizerCommandError(
      output,
      context
    );
  }
  const contents: UpdateAuthorizerCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateAuthorizerResponse",
    authorizerArn: undefined,
    authorizerName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.authorizerArn !== undefined && data.authorizerArn !== null) {
    contents.authorizerArn = data.authorizerArn;
  }
  if (data.authorizerName !== undefined && data.authorizerName !== null) {
    contents.authorizerName = data.authorizerName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateAuthorizerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAuthorizerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateCACertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCACertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateCACertificateCommandError(
      output,
      context
    );
  }
  const contents: UpdateCACertificateCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateCACertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCACertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCertificateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateCertificateCommandError(
      output,
      context
    );
  }
  const contents: UpdateCertificateCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateStateException":
    case "com.amazonaws.iot.common.types#CertificateStateException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateStateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateDomainConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDomainConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateDomainConfigurationCommandError(
      output,
      context
    );
  }
  const contents: UpdateDomainConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateDomainConfigurationResponse",
    domainConfigurationArn: undefined,
    domainConfigurationName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.domainConfigurationArn !== undefined &&
    data.domainConfigurationArn !== null
  ) {
    contents.domainConfigurationArn = data.domainConfigurationArn;
  }
  if (
    data.domainConfigurationName !== undefined &&
    data.domainConfigurationName !== null
  ) {
    contents.domainConfigurationName = data.domainConfigurationName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateDomainConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDomainConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateValidationException":
    case "com.amazonaws.iot.common.types#CertificateValidationException":
      response = {
        ...(await deserializeAws_restJson1_1CertificateValidationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateProvisioningTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateProvisioningTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateProvisioningTemplateCommandError(
      output,
      context
    );
  }
  const contents: UpdateProvisioningTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateProvisioningTemplateResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateProvisioningTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateProvisioningTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingResourceUpdateException":
    case "com.amazonaws.iot.common.types#ConflictingResourceUpdateException":
      response = {
        ...(await deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateRoleAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateRoleAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateRoleAliasCommandError(
      output,
      context
    );
  }
  const contents: UpdateRoleAliasCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateRoleAliasResponse",
    roleAlias: undefined,
    roleAliasArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.roleAlias !== undefined && data.roleAlias !== null) {
    contents.roleAlias = data.roleAlias;
  }
  if (data.roleAliasArn !== undefined && data.roleAliasArn !== null) {
    contents.roleAliasArn = data.roleAliasArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateRoleAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateRoleAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeIndexCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIndexCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeIndexCommandError(output, context);
  }
  const contents: DescribeIndexCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeIndexResponse",
    indexName: undefined,
    indexStatus: undefined,
    schema: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.indexName !== undefined && data.indexName !== null) {
    contents.indexName = data.indexName;
  }
  if (data.indexStatus !== undefined && data.indexStatus !== null) {
    contents.indexStatus = data.indexStatus;
  }
  if (data.schema !== undefined && data.schema !== null) {
    contents.schema = data.schema;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeIndexCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIndexCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetCardinalityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCardinalityCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetCardinalityCommandError(
      output,
      context
    );
  }
  const contents: GetCardinalityCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetCardinalityResponse",
    cardinality: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.cardinality !== undefined && data.cardinality !== null) {
    contents.cardinality = data.cardinality;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetCardinalityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCardinalityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidAggregationException":
    case "com.amazonaws.iot.common.types#InvalidAggregationException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidAggregationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "IndexNotReadyException":
    case "com.amazonaws.iot.indexing#IndexNotReadyException":
      response = {
        ...(await deserializeAws_restJson1_1IndexNotReadyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetIndexingConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIndexingConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetIndexingConfigurationCommandError(
      output,
      context
    );
  }
  const contents: GetIndexingConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetIndexingConfigurationResponse",
    thingGroupIndexingConfiguration: undefined,
    thingIndexingConfiguration: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.thingGroupIndexingConfiguration !== undefined &&
    data.thingGroupIndexingConfiguration !== null
  ) {
    contents.thingGroupIndexingConfiguration = deserializeAws_restJson1_1ThingGroupIndexingConfiguration(
      data.thingGroupIndexingConfiguration,
      context
    );
  }
  if (
    data.thingIndexingConfiguration !== undefined &&
    data.thingIndexingConfiguration !== null
  ) {
    contents.thingIndexingConfiguration = deserializeAws_restJson1_1ThingIndexingConfiguration(
      data.thingIndexingConfiguration,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetIndexingConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIndexingConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetPercentilesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPercentilesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetPercentilesCommandError(
      output,
      context
    );
  }
  const contents: GetPercentilesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetPercentilesResponse",
    percentiles: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.percentiles !== undefined && data.percentiles !== null) {
    contents.percentiles = deserializeAws_restJson1_1Percentiles(
      data.percentiles,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetPercentilesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPercentilesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidAggregationException":
    case "com.amazonaws.iot.common.types#InvalidAggregationException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidAggregationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "IndexNotReadyException":
    case "com.amazonaws.iot.indexing#IndexNotReadyException":
      response = {
        ...(await deserializeAws_restJson1_1IndexNotReadyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetStatisticsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetStatisticsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetStatisticsCommandError(output, context);
  }
  const contents: GetStatisticsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetStatisticsResponse",
    statistics: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.statistics !== undefined && data.statistics !== null) {
    contents.statistics = deserializeAws_restJson1_1Statistics(
      data.statistics,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetStatisticsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetStatisticsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidAggregationException":
    case "com.amazonaws.iot.common.types#InvalidAggregationException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidAggregationExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "IndexNotReadyException":
    case "com.amazonaws.iot.indexing#IndexNotReadyException":
      response = {
        ...(await deserializeAws_restJson1_1IndexNotReadyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListIndicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIndicesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListIndicesCommandError(output, context);
  }
  const contents: ListIndicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListIndicesResponse",
    indexNames: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.indexNames !== undefined && data.indexNames !== null) {
    contents.indexNames = deserializeAws_restJson1_1IndexNamesList(
      data.indexNames,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListIndicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIndicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1SearchIndexCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchIndexCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1SearchIndexCommandError(output, context);
  }
  const contents: SearchIndexCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "SearchIndexResponse",
    nextToken: undefined,
    thingGroups: undefined,
    things: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.thingGroups !== undefined && data.thingGroups !== null) {
    contents.thingGroups = deserializeAws_restJson1_1ThingGroupDocumentList(
      data.thingGroups,
      context
    );
  }
  if (data.things !== undefined && data.things !== null) {
    contents.things = deserializeAws_restJson1_1ThingDocumentList(
      data.things,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1SearchIndexCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchIndexCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "IndexNotReadyException":
    case "com.amazonaws.iot.indexing#IndexNotReadyException":
      response = {
        ...(await deserializeAws_restJson1_1IndexNotReadyExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateIndexingConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIndexingConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateIndexingConfigurationCommandError(
      output,
      context
    );
  }
  const contents: UpdateIndexingConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateIndexingConfigurationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateIndexingConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIndexingConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AssociateTargetsWithJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTargetsWithJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AssociateTargetsWithJobCommandError(
      output,
      context
    );
  }
  const contents: AssociateTargetsWithJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "AssociateTargetsWithJobResponse",
    description: undefined,
    jobArn: undefined,
    jobId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.jobArn !== undefined && data.jobArn !== null) {
    contents.jobArn = data.jobArn;
  }
  if (data.jobId !== undefined && data.jobId !== null) {
    contents.jobId = data.jobId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AssociateTargetsWithJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTargetsWithJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CancelJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CancelJobCommandError(output, context);
  }
  const contents: CancelJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CancelJobResponse",
    description: undefined,
    jobArn: undefined,
    jobId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.jobArn !== undefined && data.jobArn !== null) {
    contents.jobArn = data.jobArn;
  }
  if (data.jobId !== undefined && data.jobId !== null) {
    contents.jobId = data.jobId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CancelJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CancelJobExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelJobExecutionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CancelJobExecutionCommandError(
      output,
      context
    );
  }
  const contents: CancelJobExecutionCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CancelJobExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelJobExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot.common.types#InvalidStateTransitionException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidStateTransitionExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateJobCommandError(output, context);
  }
  const contents: CreateJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateJobResponse",
    description: undefined,
    jobArn: undefined,
    jobId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.jobArn !== undefined && data.jobArn !== null) {
    contents.jobArn = data.jobArn;
  }
  if (data.jobId !== undefined && data.jobId !== null) {
    contents.jobId = data.jobId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteJobCommandError(output, context);
  }
  const contents: DeleteJobCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot.common.types#InvalidStateTransitionException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidStateTransitionExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteJobExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteJobExecutionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteJobExecutionCommandError(
      output,
      context
    );
  }
  const contents: DeleteJobExecutionCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteJobExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteJobExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidStateTransitionException":
    case "com.amazonaws.iot.common.types#InvalidStateTransitionException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidStateTransitionExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeJobCommandError(output, context);
  }
  const contents: DescribeJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeJobResponse",
    documentSource: undefined,
    job: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.documentSource !== undefined && data.documentSource !== null) {
    contents.documentSource = data.documentSource;
  }
  if (data.job !== undefined && data.job !== null) {
    contents.job = deserializeAws_restJson1_1Job(data.job, context);
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeJobExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeJobExecutionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeJobExecutionCommandError(
      output,
      context
    );
  }
  const contents: DescribeJobExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeJobExecutionResponse",
    execution: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.execution !== undefined && data.execution !== null) {
    contents.execution = deserializeAws_restJson1_1JobExecution(
      data.execution,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeJobExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeJobExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetJobDocumentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetJobDocumentCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetJobDocumentCommandError(
      output,
      context
    );
  }
  const contents: GetJobDocumentCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetJobDocumentResponse",
    document: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.document !== undefined && data.document !== null) {
    contents.document = data.document;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetJobDocumentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetJobDocumentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListJobExecutionsForJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobExecutionsForJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListJobExecutionsForJobCommandError(
      output,
      context
    );
  }
  const contents: ListJobExecutionsForJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListJobExecutionsForJobResponse",
    executionSummaries: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.executionSummaries !== undefined &&
    data.executionSummaries !== null
  ) {
    contents.executionSummaries = deserializeAws_restJson1_1JobExecutionSummaryForJobList(
      data.executionSummaries,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListJobExecutionsForJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobExecutionsForJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListJobExecutionsForThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobExecutionsForThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListJobExecutionsForThingCommandError(
      output,
      context
    );
  }
  const contents: ListJobExecutionsForThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListJobExecutionsForThingResponse",
    executionSummaries: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.executionSummaries !== undefined &&
    data.executionSummaries !== null
  ) {
    contents.executionSummaries = deserializeAws_restJson1_1JobExecutionSummaryForThingList(
      data.executionSummaries,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListJobExecutionsForThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobExecutionsForThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListJobsCommandError(output, context);
  }
  const contents: ListJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListJobsResponse",
    jobs: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.jobs !== undefined && data.jobs !== null) {
    contents.jobs = deserializeAws_restJson1_1JobSummaryList(
      data.jobs,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateJobCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateJobCommandError(output, context);
  }
  const contents: UpdateJobCommandOutput = {
    $metadata: deserializeMetadata(output)
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateOTAUpdateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateOTAUpdateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateOTAUpdateCommandError(
      output,
      context
    );
  }
  const contents: CreateOTAUpdateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateOTAUpdateResponse",
    awsIotJobArn: undefined,
    awsIotJobId: undefined,
    otaUpdateArn: undefined,
    otaUpdateId: undefined,
    otaUpdateStatus: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.awsIotJobArn !== undefined && data.awsIotJobArn !== null) {
    contents.awsIotJobArn = data.awsIotJobArn;
  }
  if (data.awsIotJobId !== undefined && data.awsIotJobId !== null) {
    contents.awsIotJobId = data.awsIotJobId;
  }
  if (data.otaUpdateArn !== undefined && data.otaUpdateArn !== null) {
    contents.otaUpdateArn = data.otaUpdateArn;
  }
  if (data.otaUpdateId !== undefined && data.otaUpdateId !== null) {
    contents.otaUpdateId = data.otaUpdateId;
  }
  if (data.otaUpdateStatus !== undefined && data.otaUpdateStatus !== null) {
    contents.otaUpdateStatus = data.otaUpdateStatus;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateOTAUpdateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateOTAUpdateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteOTAUpdateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteOTAUpdateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteOTAUpdateCommandError(
      output,
      context
    );
  }
  const contents: DeleteOTAUpdateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteOTAUpdateResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteOTAUpdateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteOTAUpdateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1GetOTAUpdateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetOTAUpdateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1GetOTAUpdateCommandError(output, context);
  }
  const contents: GetOTAUpdateCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "GetOTAUpdateResponse",
    otaUpdateInfo: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.otaUpdateInfo !== undefined && data.otaUpdateInfo !== null) {
    contents.otaUpdateInfo = deserializeAws_restJson1_1OTAUpdateInfo(
      data.otaUpdateInfo,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1GetOTAUpdateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetOTAUpdateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListOTAUpdatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListOTAUpdatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListOTAUpdatesCommandError(
      output,
      context
    );
  }
  const contents: ListOTAUpdatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListOTAUpdatesResponse",
    nextToken: undefined,
    otaUpdates: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.otaUpdates !== undefined && data.otaUpdates !== null) {
    contents.otaUpdates = deserializeAws_restJson1_1OTAUpdatesSummary(
      data.otaUpdates,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListOTAUpdatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListOTAUpdatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AddThingToBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddThingToBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AddThingToBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: AddThingToBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "AddThingToBillingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AddThingToBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddThingToBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AddThingToThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddThingToThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AddThingToThingGroupCommandError(
      output,
      context
    );
  }
  const contents: AddThingToThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "AddThingToThingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AddThingToThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddThingToThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AttachThingPrincipalCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachThingPrincipalCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AttachThingPrincipalCommandError(
      output,
      context
    );
  }
  const contents: AttachThingPrincipalCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "AttachThingPrincipalResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AttachThingPrincipalCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachThingPrincipalCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: CreateBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateBillingGroupResponse",
    billingGroupArn: undefined,
    billingGroupId: undefined,
    billingGroupName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.billingGroupArn !== undefined && data.billingGroupArn !== null) {
    contents.billingGroupArn = data.billingGroupArn;
  }
  if (data.billingGroupId !== undefined && data.billingGroupId !== null) {
    contents.billingGroupId = data.billingGroupId;
  }
  if (data.billingGroupName !== undefined && data.billingGroupName !== null) {
    contents.billingGroupName = data.billingGroupName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateDynamicThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDynamicThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateDynamicThingGroupCommandError(
      output,
      context
    );
  }
  const contents: CreateDynamicThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateDynamicThingGroupResponse",
    indexName: undefined,
    queryString: undefined,
    queryVersion: undefined,
    thingGroupArn: undefined,
    thingGroupId: undefined,
    thingGroupName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.indexName !== undefined && data.indexName !== null) {
    contents.indexName = data.indexName;
  }
  if (data.queryString !== undefined && data.queryString !== null) {
    contents.queryString = data.queryString;
  }
  if (data.queryVersion !== undefined && data.queryVersion !== null) {
    contents.queryVersion = data.queryVersion;
  }
  if (data.thingGroupArn !== undefined && data.thingGroupArn !== null) {
    contents.thingGroupArn = data.thingGroupArn;
  }
  if (data.thingGroupId !== undefined && data.thingGroupId !== null) {
    contents.thingGroupId = data.thingGroupId;
  }
  if (data.thingGroupName !== undefined && data.thingGroupName !== null) {
    contents.thingGroupName = data.thingGroupName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateDynamicThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDynamicThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateThingCommandError(output, context);
  }
  const contents: CreateThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateThingResponse",
    thingArn: undefined,
    thingId: undefined,
    thingName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.thingArn !== undefined && data.thingArn !== null) {
    contents.thingArn = data.thingArn;
  }
  if (data.thingId !== undefined && data.thingId !== null) {
    contents.thingId = data.thingId;
  }
  if (data.thingName !== undefined && data.thingName !== null) {
    contents.thingName = data.thingName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateThingGroupCommandError(
      output,
      context
    );
  }
  const contents: CreateThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateThingGroupResponse",
    thingGroupArn: undefined,
    thingGroupId: undefined,
    thingGroupName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.thingGroupArn !== undefined && data.thingGroupArn !== null) {
    contents.thingGroupArn = data.thingGroupArn;
  }
  if (data.thingGroupId !== undefined && data.thingGroupId !== null) {
    contents.thingGroupId = data.thingGroupId;
  }
  if (data.thingGroupName !== undefined && data.thingGroupName !== null) {
    contents.thingGroupName = data.thingGroupName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateThingTypeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingTypeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateThingTypeCommandError(
      output,
      context
    );
  }
  const contents: CreateThingTypeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateThingTypeResponse",
    thingTypeArn: undefined,
    thingTypeId: undefined,
    thingTypeName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.thingTypeArn !== undefined && data.thingTypeArn !== null) {
    contents.thingTypeArn = data.thingTypeArn;
  }
  if (data.thingTypeId !== undefined && data.thingTypeId !== null) {
    contents.thingTypeId = data.thingTypeId;
  }
  if (data.thingTypeName !== undefined && data.thingTypeName !== null) {
    contents.thingTypeName = data.thingTypeName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateThingTypeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThingTypeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: DeleteBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteBillingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteDynamicThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDynamicThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteDynamicThingGroupCommandError(
      output,
      context
    );
  }
  const contents: DeleteDynamicThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteDynamicThingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteDynamicThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDynamicThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteThingCommandError(output, context);
  }
  const contents: DeleteThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteThingResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteThingGroupCommandError(
      output,
      context
    );
  }
  const contents: DeleteThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteThingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteThingTypeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingTypeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteThingTypeCommandError(
      output,
      context
    );
  }
  const contents: DeleteThingTypeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteThingTypeResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteThingTypeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThingTypeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeprecateThingTypeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprecateThingTypeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeprecateThingTypeCommandError(
      output,
      context
    );
  }
  const contents: DeprecateThingTypeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeprecateThingTypeResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeprecateThingTypeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprecateThingTypeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: DescribeBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeBillingGroupResponse",
    billingGroupArn: undefined,
    billingGroupId: undefined,
    billingGroupMetadata: undefined,
    billingGroupName: undefined,
    billingGroupProperties: undefined,
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.billingGroupArn !== undefined && data.billingGroupArn !== null) {
    contents.billingGroupArn = data.billingGroupArn;
  }
  if (data.billingGroupId !== undefined && data.billingGroupId !== null) {
    contents.billingGroupId = data.billingGroupId;
  }
  if (
    data.billingGroupMetadata !== undefined &&
    data.billingGroupMetadata !== null
  ) {
    contents.billingGroupMetadata = deserializeAws_restJson1_1BillingGroupMetadata(
      data.billingGroupMetadata,
      context
    );
  }
  if (data.billingGroupName !== undefined && data.billingGroupName !== null) {
    contents.billingGroupName = data.billingGroupName;
  }
  if (
    data.billingGroupProperties !== undefined &&
    data.billingGroupProperties !== null
  ) {
    contents.billingGroupProperties = deserializeAws_restJson1_1BillingGroupProperties(
      data.billingGroupProperties,
      context
    );
  }
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeEventConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEventConfigurationsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeEventConfigurationsCommandError(
      output,
      context
    );
  }
  const contents: DescribeEventConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeEventConfigurationsResponse",
    creationDate: undefined,
    eventConfigurations: undefined,
    lastModifiedDate: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (
    data.eventConfigurations !== undefined &&
    data.eventConfigurations !== null
  ) {
    contents.eventConfigurations = deserializeAws_restJson1_1EventConfigurations(
      data.eventConfigurations,
      context
    );
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeEventConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEventConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeThingCommandError(output, context);
  }
  const contents: DescribeThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeThingResponse",
    attributes: undefined,
    billingGroupName: undefined,
    defaultClientId: undefined,
    thingArn: undefined,
    thingId: undefined,
    thingName: undefined,
    thingTypeName: undefined,
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.attributes !== undefined && data.attributes !== null) {
    contents.attributes = deserializeAws_restJson1_1Attributes(
      data.attributes,
      context
    );
  }
  if (data.billingGroupName !== undefined && data.billingGroupName !== null) {
    contents.billingGroupName = data.billingGroupName;
  }
  if (data.defaultClientId !== undefined && data.defaultClientId !== null) {
    contents.defaultClientId = data.defaultClientId;
  }
  if (data.thingArn !== undefined && data.thingArn !== null) {
    contents.thingArn = data.thingArn;
  }
  if (data.thingId !== undefined && data.thingId !== null) {
    contents.thingId = data.thingId;
  }
  if (data.thingName !== undefined && data.thingName !== null) {
    contents.thingName = data.thingName;
  }
  if (data.thingTypeName !== undefined && data.thingTypeName !== null) {
    contents.thingTypeName = data.thingTypeName;
  }
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeThingGroupCommandError(
      output,
      context
    );
  }
  const contents: DescribeThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeThingGroupResponse",
    indexName: undefined,
    queryString: undefined,
    queryVersion: undefined,
    status: undefined,
    thingGroupArn: undefined,
    thingGroupId: undefined,
    thingGroupMetadata: undefined,
    thingGroupName: undefined,
    thingGroupProperties: undefined,
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.indexName !== undefined && data.indexName !== null) {
    contents.indexName = data.indexName;
  }
  if (data.queryString !== undefined && data.queryString !== null) {
    contents.queryString = data.queryString;
  }
  if (data.queryVersion !== undefined && data.queryVersion !== null) {
    contents.queryVersion = data.queryVersion;
  }
  if (data.status !== undefined && data.status !== null) {
    contents.status = data.status;
  }
  if (data.thingGroupArn !== undefined && data.thingGroupArn !== null) {
    contents.thingGroupArn = data.thingGroupArn;
  }
  if (data.thingGroupId !== undefined && data.thingGroupId !== null) {
    contents.thingGroupId = data.thingGroupId;
  }
  if (
    data.thingGroupMetadata !== undefined &&
    data.thingGroupMetadata !== null
  ) {
    contents.thingGroupMetadata = deserializeAws_restJson1_1ThingGroupMetadata(
      data.thingGroupMetadata,
      context
    );
  }
  if (data.thingGroupName !== undefined && data.thingGroupName !== null) {
    contents.thingGroupName = data.thingGroupName;
  }
  if (
    data.thingGroupProperties !== undefined &&
    data.thingGroupProperties !== null
  ) {
    contents.thingGroupProperties = deserializeAws_restJson1_1ThingGroupProperties(
      data.thingGroupProperties,
      context
    );
  }
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeThingRegistrationTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingRegistrationTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeThingRegistrationTaskCommandError(
      output,
      context
    );
  }
  const contents: DescribeThingRegistrationTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeThingRegistrationTaskResponse",
    creationDate: undefined,
    failureCount: undefined,
    inputFileBucket: undefined,
    inputFileKey: undefined,
    lastModifiedDate: undefined,
    message: undefined,
    percentageProgress: undefined,
    roleArn: undefined,
    status: undefined,
    successCount: undefined,
    taskId: undefined,
    templateBody: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.failureCount !== undefined && data.failureCount !== null) {
    contents.failureCount = data.failureCount;
  }
  if (data.inputFileBucket !== undefined && data.inputFileBucket !== null) {
    contents.inputFileBucket = data.inputFileBucket;
  }
  if (data.inputFileKey !== undefined && data.inputFileKey !== null) {
    contents.inputFileKey = data.inputFileKey;
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  if (
    data.percentageProgress !== undefined &&
    data.percentageProgress !== null
  ) {
    contents.percentageProgress = data.percentageProgress;
  }
  if (data.roleArn !== undefined && data.roleArn !== null) {
    contents.roleArn = data.roleArn;
  }
  if (data.status !== undefined && data.status !== null) {
    contents.status = data.status;
  }
  if (data.successCount !== undefined && data.successCount !== null) {
    contents.successCount = data.successCount;
  }
  if (data.taskId !== undefined && data.taskId !== null) {
    contents.taskId = data.taskId;
  }
  if (data.templateBody !== undefined && data.templateBody !== null) {
    contents.templateBody = data.templateBody;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeThingRegistrationTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingRegistrationTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeThingTypeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingTypeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeThingTypeCommandError(
      output,
      context
    );
  }
  const contents: DescribeThingTypeCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeThingTypeResponse",
    thingTypeArn: undefined,
    thingTypeId: undefined,
    thingTypeMetadata: undefined,
    thingTypeName: undefined,
    thingTypeProperties: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.thingTypeArn !== undefined && data.thingTypeArn !== null) {
    contents.thingTypeArn = data.thingTypeArn;
  }
  if (data.thingTypeId !== undefined && data.thingTypeId !== null) {
    contents.thingTypeId = data.thingTypeId;
  }
  if (data.thingTypeMetadata !== undefined && data.thingTypeMetadata !== null) {
    contents.thingTypeMetadata = deserializeAws_restJson1_1ThingTypeMetadata(
      data.thingTypeMetadata,
      context
    );
  }
  if (data.thingTypeName !== undefined && data.thingTypeName !== null) {
    contents.thingTypeName = data.thingTypeName;
  }
  if (
    data.thingTypeProperties !== undefined &&
    data.thingTypeProperties !== null
  ) {
    contents.thingTypeProperties = deserializeAws_restJson1_1ThingTypeProperties(
      data.thingTypeProperties,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeThingTypeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThingTypeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DetachThingPrincipalCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachThingPrincipalCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DetachThingPrincipalCommandError(
      output,
      context
    );
  }
  const contents: DetachThingPrincipalCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DetachThingPrincipalResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DetachThingPrincipalCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachThingPrincipalCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListBillingGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListBillingGroupsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListBillingGroupsCommandError(
      output,
      context
    );
  }
  const contents: ListBillingGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListBillingGroupsResponse",
    billingGroups: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.billingGroups !== undefined && data.billingGroups !== null) {
    contents.billingGroups = deserializeAws_restJson1_1BillingGroupNameAndArnList(
      data.billingGroups,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListBillingGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListBillingGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListPrincipalThingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPrincipalThingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListPrincipalThingsCommandError(
      output,
      context
    );
  }
  const contents: ListPrincipalThingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListPrincipalThingsResponse",
    nextToken: undefined,
    things: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.things !== undefined && data.things !== null) {
    contents.things = deserializeAws_restJson1_1ThingNameList(
      data.things,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListPrincipalThingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPrincipalThingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListTagsForResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsForResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListTagsForResourceCommandError(
      output,
      context
    );
  }
  const contents: ListTagsForResourceCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListTagsForResourceResponse",
    nextToken: undefined,
    tags: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.tags !== undefined && data.tags !== null) {
    contents.tags = deserializeAws_restJson1_1TagList(data.tags, context);
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListTagsForResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsForResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingGroupsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingGroupsCommandError(
      output,
      context
    );
  }
  const contents: ListThingGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingGroupsResponse",
    nextToken: undefined,
    thingGroups: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.thingGroups !== undefined && data.thingGroups !== null) {
    contents.thingGroups = deserializeAws_restJson1_1ThingGroupNameAndArnList(
      data.thingGroups,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingGroupsForThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingGroupsForThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingGroupsForThingCommandError(
      output,
      context
    );
  }
  const contents: ListThingGroupsForThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingGroupsForThingResponse",
    nextToken: undefined,
    thingGroups: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.thingGroups !== undefined && data.thingGroups !== null) {
    contents.thingGroups = deserializeAws_restJson1_1ThingGroupNameAndArnList(
      data.thingGroups,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingGroupsForThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingGroupsForThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingPrincipalsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingPrincipalsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingPrincipalsCommandError(
      output,
      context
    );
  }
  const contents: ListThingPrincipalsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingPrincipalsResponse",
    principals: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.principals !== undefined && data.principals !== null) {
    contents.principals = deserializeAws_restJson1_1Principals(
      data.principals,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingPrincipalsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingPrincipalsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingRegistrationTaskReportsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingRegistrationTaskReportsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingRegistrationTaskReportsCommandError(
      output,
      context
    );
  }
  const contents: ListThingRegistrationTaskReportsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingRegistrationTaskReportsResponse",
    nextToken: undefined,
    reportType: undefined,
    resourceLinks: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.reportType !== undefined && data.reportType !== null) {
    contents.reportType = data.reportType;
  }
  if (data.resourceLinks !== undefined && data.resourceLinks !== null) {
    contents.resourceLinks = deserializeAws_restJson1_1S3FileUrlList(
      data.resourceLinks,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingRegistrationTaskReportsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingRegistrationTaskReportsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingRegistrationTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingRegistrationTasksCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingRegistrationTasksCommandError(
      output,
      context
    );
  }
  const contents: ListThingRegistrationTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingRegistrationTasksResponse",
    nextToken: undefined,
    taskIds: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.taskIds !== undefined && data.taskIds !== null) {
    contents.taskIds = deserializeAws_restJson1_1TaskIdList(
      data.taskIds,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingRegistrationTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingRegistrationTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingTypesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingTypesCommandError(
      output,
      context
    );
  }
  const contents: ListThingTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingTypesResponse",
    nextToken: undefined,
    thingTypes: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.thingTypes !== undefined && data.thingTypes !== null) {
    contents.thingTypes = deserializeAws_restJson1_1ThingTypeList(
      data.thingTypes,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingsCommandError(output, context);
  }
  const contents: ListThingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingsResponse",
    nextToken: undefined,
    things: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.things !== undefined && data.things !== null) {
    contents.things = deserializeAws_restJson1_1ThingAttributeList(
      data.things,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingsInBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsInBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingsInBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: ListThingsInBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingsInBillingGroupResponse",
    nextToken: undefined,
    things: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.things !== undefined && data.things !== null) {
    contents.things = deserializeAws_restJson1_1ThingNameList(
      data.things,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingsInBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsInBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListThingsInThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsInThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListThingsInThingGroupCommandError(
      output,
      context
    );
  }
  const contents: ListThingsInThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListThingsInThingGroupResponse",
    nextToken: undefined,
    things: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.things !== undefined && data.things !== null) {
    contents.things = deserializeAws_restJson1_1ThingNameList(
      data.things,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListThingsInThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThingsInThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RemoveThingFromBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RemoveThingFromBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RemoveThingFromBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: RemoveThingFromBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "RemoveThingFromBillingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RemoveThingFromBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RemoveThingFromBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1RemoveThingFromThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RemoveThingFromThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1RemoveThingFromThingGroupCommandError(
      output,
      context
    );
  }
  const contents: RemoveThingFromThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "RemoveThingFromThingGroupResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1RemoveThingFromThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RemoveThingFromThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1StartThingRegistrationTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartThingRegistrationTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1StartThingRegistrationTaskCommandError(
      output,
      context
    );
  }
  const contents: StartThingRegistrationTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "StartThingRegistrationTaskResponse",
    taskId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.taskId !== undefined && data.taskId !== null) {
    contents.taskId = data.taskId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1StartThingRegistrationTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartThingRegistrationTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1StopThingRegistrationTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopThingRegistrationTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1StopThingRegistrationTaskCommandError(
      output,
      context
    );
  }
  const contents: StopThingRegistrationTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "StopThingRegistrationTaskResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1StopThingRegistrationTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopThingRegistrationTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1TagResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TagResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1TagResourceCommandError(output, context);
  }
  const contents: TagResourceCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "TagResourceResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1TagResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TagResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UntagResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UntagResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UntagResourceCommandError(output, context);
  }
  const contents: UntagResourceCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UntagResourceResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UntagResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UntagResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateBillingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateBillingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateBillingGroupCommandError(
      output,
      context
    );
  }
  const contents: UpdateBillingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateBillingGroupResponse",
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateBillingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateBillingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateDynamicThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDynamicThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateDynamicThingGroupCommandError(
      output,
      context
    );
  }
  const contents: UpdateDynamicThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateDynamicThingGroupResponse",
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateDynamicThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDynamicThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidQueryException":
    case "com.amazonaws.iot.common.types#InvalidQueryException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidQueryExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateEventConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEventConfigurationsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateEventConfigurationsCommandError(
      output,
      context
    );
  }
  const contents: UpdateEventConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateEventConfigurationsResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateEventConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEventConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateThingCommandError(output, context);
  }
  const contents: UpdateThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateThingResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateThingGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateThingGroupCommandError(
      output,
      context
    );
  }
  const contents: UpdateThingGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateThingGroupResponse",
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateThingGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateThingGroupsForThingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingGroupsForThingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateThingGroupsForThingCommandError(
      output,
      context
    );
  }
  const contents: UpdateThingGroupsForThingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateThingGroupsForThingResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateThingGroupsForThingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThingGroupsForThingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1AttachSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1AttachSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: AttachSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "AttachSecurityProfileResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1AttachSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CancelAuditMitigationActionsTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelAuditMitigationActionsTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CancelAuditMitigationActionsTaskCommandError(
      output,
      context
    );
  }
  const contents: CancelAuditMitigationActionsTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CancelAuditMitigationActionsTaskResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CancelAuditMitigationActionsTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelAuditMitigationActionsTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CancelAuditTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelAuditTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CancelAuditTaskCommandError(
      output,
      context
    );
  }
  const contents: CancelAuditTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CancelAuditTaskResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CancelAuditTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelAuditTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateMitigationActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateMitigationActionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateMitigationActionCommandError(
      output,
      context
    );
  }
  const contents: CreateMitigationActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateMitigationActionResponse",
    actionArn: undefined,
    actionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionArn !== undefined && data.actionArn !== null) {
    contents.actionArn = data.actionArn;
  }
  if (data.actionId !== undefined && data.actionId !== null) {
    contents.actionId = data.actionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateMitigationActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateMitigationActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateScheduledAuditCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateScheduledAuditCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateScheduledAuditCommandError(
      output,
      context
    );
  }
  const contents: CreateScheduledAuditCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateScheduledAuditResponse",
    scheduledAuditArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.scheduledAuditArn !== undefined && data.scheduledAuditArn !== null) {
    contents.scheduledAuditArn = data.scheduledAuditArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateScheduledAuditCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateScheduledAuditCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: CreateSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateSecurityProfileResponse",
    securityProfileArn: undefined,
    securityProfileName: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.securityProfileArn !== undefined &&
    data.securityProfileArn !== null
  ) {
    contents.securityProfileArn = data.securityProfileArn;
  }
  if (
    data.securityProfileName !== undefined &&
    data.securityProfileName !== null
  ) {
    contents.securityProfileName = data.securityProfileName;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteAccountAuditConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountAuditConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteAccountAuditConfigurationCommandError(
      output,
      context
    );
  }
  const contents: DeleteAccountAuditConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteAccountAuditConfigurationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteAccountAuditConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountAuditConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteMitigationActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteMitigationActionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteMitigationActionCommandError(
      output,
      context
    );
  }
  const contents: DeleteMitigationActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteMitigationActionResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteMitigationActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteMitigationActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteScheduledAuditCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteScheduledAuditCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteScheduledAuditCommandError(
      output,
      context
    );
  }
  const contents: DeleteScheduledAuditCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteScheduledAuditResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteScheduledAuditCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteScheduledAuditCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: DeleteSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteSecurityProfileResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeAccountAuditConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAuditConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeAccountAuditConfigurationCommandError(
      output,
      context
    );
  }
  const contents: DescribeAccountAuditConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeAccountAuditConfigurationResponse",
    auditCheckConfigurations: undefined,
    auditNotificationTargetConfigurations: undefined,
    roleArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.auditCheckConfigurations !== undefined &&
    data.auditCheckConfigurations !== null
  ) {
    contents.auditCheckConfigurations = deserializeAws_restJson1_1AuditCheckConfigurations(
      data.auditCheckConfigurations,
      context
    );
  }
  if (
    data.auditNotificationTargetConfigurations !== undefined &&
    data.auditNotificationTargetConfigurations !== null
  ) {
    contents.auditNotificationTargetConfigurations = deserializeAws_restJson1_1AuditNotificationTargetConfigurations(
      data.auditNotificationTargetConfigurations,
      context
    );
  }
  if (data.roleArn !== undefined && data.roleArn !== null) {
    contents.roleArn = data.roleArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeAccountAuditConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAuditConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeAuditFindingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditFindingCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeAuditFindingCommandError(
      output,
      context
    );
  }
  const contents: DescribeAuditFindingCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeAuditFindingResponse",
    finding: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.finding !== undefined && data.finding !== null) {
    contents.finding = deserializeAws_restJson1_1AuditFinding(
      data.finding,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeAuditFindingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditFindingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeAuditMitigationActionsTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditMitigationActionsTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeAuditMitigationActionsTaskCommandError(
      output,
      context
    );
  }
  const contents: DescribeAuditMitigationActionsTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeAuditMitigationActionsTaskResponse",
    actionsDefinition: undefined,
    auditCheckToActionsMapping: undefined,
    endTime: undefined,
    startTime: undefined,
    target: undefined,
    taskStatistics: undefined,
    taskStatus: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionsDefinition !== undefined && data.actionsDefinition !== null) {
    contents.actionsDefinition = deserializeAws_restJson1_1MitigationActionList(
      data.actionsDefinition,
      context
    );
  }
  if (
    data.auditCheckToActionsMapping !== undefined &&
    data.auditCheckToActionsMapping !== null
  ) {
    contents.auditCheckToActionsMapping = deserializeAws_restJson1_1AuditCheckToActionsMapping(
      data.auditCheckToActionsMapping,
      context
    );
  }
  if (data.endTime !== undefined && data.endTime !== null) {
    contents.endTime = new Date(Math.round(data.endTime * 1000));
  }
  if (data.startTime !== undefined && data.startTime !== null) {
    contents.startTime = new Date(Math.round(data.startTime * 1000));
  }
  if (data.target !== undefined && data.target !== null) {
    contents.target = deserializeAws_restJson1_1AuditMitigationActionsTaskTarget(
      data.target,
      context
    );
  }
  if (data.taskStatistics !== undefined && data.taskStatistics !== null) {
    contents.taskStatistics = deserializeAws_restJson1_1AuditMitigationActionsTaskStatistics(
      data.taskStatistics,
      context
    );
  }
  if (data.taskStatus !== undefined && data.taskStatus !== null) {
    contents.taskStatus = data.taskStatus;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeAuditMitigationActionsTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditMitigationActionsTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeAuditTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeAuditTaskCommandError(
      output,
      context
    );
  }
  const contents: DescribeAuditTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeAuditTaskResponse",
    auditDetails: undefined,
    scheduledAuditName: undefined,
    taskStartTime: undefined,
    taskStatistics: undefined,
    taskStatus: undefined,
    taskType: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.auditDetails !== undefined && data.auditDetails !== null) {
    contents.auditDetails = deserializeAws_restJson1_1AuditDetails(
      data.auditDetails,
      context
    );
  }
  if (
    data.scheduledAuditName !== undefined &&
    data.scheduledAuditName !== null
  ) {
    contents.scheduledAuditName = data.scheduledAuditName;
  }
  if (data.taskStartTime !== undefined && data.taskStartTime !== null) {
    contents.taskStartTime = new Date(Math.round(data.taskStartTime * 1000));
  }
  if (data.taskStatistics !== undefined && data.taskStatistics !== null) {
    contents.taskStatistics = deserializeAws_restJson1_1TaskStatistics(
      data.taskStatistics,
      context
    );
  }
  if (data.taskStatus !== undefined && data.taskStatus !== null) {
    contents.taskStatus = data.taskStatus;
  }
  if (data.taskType !== undefined && data.taskType !== null) {
    contents.taskType = data.taskType;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeAuditTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAuditTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeMitigationActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMitigationActionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeMitigationActionCommandError(
      output,
      context
    );
  }
  const contents: DescribeMitigationActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeMitigationActionResponse",
    actionArn: undefined,
    actionId: undefined,
    actionName: undefined,
    actionParams: undefined,
    actionType: undefined,
    creationDate: undefined,
    lastModifiedDate: undefined,
    roleArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionArn !== undefined && data.actionArn !== null) {
    contents.actionArn = data.actionArn;
  }
  if (data.actionId !== undefined && data.actionId !== null) {
    contents.actionId = data.actionId;
  }
  if (data.actionName !== undefined && data.actionName !== null) {
    contents.actionName = data.actionName;
  }
  if (data.actionParams !== undefined && data.actionParams !== null) {
    contents.actionParams = deserializeAws_restJson1_1MitigationActionParams(
      data.actionParams,
      context
    );
  }
  if (data.actionType !== undefined && data.actionType !== null) {
    contents.actionType = data.actionType;
  }
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (data.roleArn !== undefined && data.roleArn !== null) {
    contents.roleArn = data.roleArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeMitigationActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMitigationActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeScheduledAuditCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledAuditCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeScheduledAuditCommandError(
      output,
      context
    );
  }
  const contents: DescribeScheduledAuditCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeScheduledAuditResponse",
    dayOfMonth: undefined,
    dayOfWeek: undefined,
    frequency: undefined,
    scheduledAuditArn: undefined,
    scheduledAuditName: undefined,
    targetCheckNames: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.dayOfMonth !== undefined && data.dayOfMonth !== null) {
    contents.dayOfMonth = data.dayOfMonth;
  }
  if (data.dayOfWeek !== undefined && data.dayOfWeek !== null) {
    contents.dayOfWeek = data.dayOfWeek;
  }
  if (data.frequency !== undefined && data.frequency !== null) {
    contents.frequency = data.frequency;
  }
  if (data.scheduledAuditArn !== undefined && data.scheduledAuditArn !== null) {
    contents.scheduledAuditArn = data.scheduledAuditArn;
  }
  if (
    data.scheduledAuditName !== undefined &&
    data.scheduledAuditName !== null
  ) {
    contents.scheduledAuditName = data.scheduledAuditName;
  }
  if (data.targetCheckNames !== undefined && data.targetCheckNames !== null) {
    contents.targetCheckNames = deserializeAws_restJson1_1TargetAuditCheckNames(
      data.targetCheckNames,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeScheduledAuditCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledAuditCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: DescribeSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeSecurityProfileResponse",
    additionalMetricsToRetain: undefined,
    alertTargets: undefined,
    behaviors: undefined,
    creationDate: undefined,
    lastModifiedDate: undefined,
    securityProfileArn: undefined,
    securityProfileDescription: undefined,
    securityProfileName: undefined,
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.additionalMetricsToRetain !== undefined &&
    data.additionalMetricsToRetain !== null
  ) {
    contents.additionalMetricsToRetain = deserializeAws_restJson1_1AdditionalMetricsToRetainList(
      data.additionalMetricsToRetain,
      context
    );
  }
  if (data.alertTargets !== undefined && data.alertTargets !== null) {
    contents.alertTargets = deserializeAws_restJson1_1AlertTargets(
      data.alertTargets,
      context
    );
  }
  if (data.behaviors !== undefined && data.behaviors !== null) {
    contents.behaviors = deserializeAws_restJson1_1Behaviors(
      data.behaviors,
      context
    );
  }
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (
    data.securityProfileArn !== undefined &&
    data.securityProfileArn !== null
  ) {
    contents.securityProfileArn = data.securityProfileArn;
  }
  if (
    data.securityProfileDescription !== undefined &&
    data.securityProfileDescription !== null
  ) {
    contents.securityProfileDescription = data.securityProfileDescription;
  }
  if (
    data.securityProfileName !== undefined &&
    data.securityProfileName !== null
  ) {
    contents.securityProfileName = data.securityProfileName;
  }
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DetachSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DetachSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: DetachSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DetachSecurityProfileResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DetachSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListActiveViolationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListActiveViolationsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListActiveViolationsCommandError(
      output,
      context
    );
  }
  const contents: ListActiveViolationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListActiveViolationsResponse",
    activeViolations: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.activeViolations !== undefined && data.activeViolations !== null) {
    contents.activeViolations = deserializeAws_restJson1_1ActiveViolations(
      data.activeViolations,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListActiveViolationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListActiveViolationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAuditFindingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditFindingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAuditFindingsCommandError(
      output,
      context
    );
  }
  const contents: ListAuditFindingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAuditFindingsResponse",
    findings: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.findings !== undefined && data.findings !== null) {
    contents.findings = deserializeAws_restJson1_1AuditFindings(
      data.findings,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAuditFindingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditFindingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAuditMitigationActionsExecutionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditMitigationActionsExecutionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAuditMitigationActionsExecutionsCommandError(
      output,
      context
    );
  }
  const contents: ListAuditMitigationActionsExecutionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAuditMitigationActionsExecutionsResponse",
    actionsExecutions: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionsExecutions !== undefined && data.actionsExecutions !== null) {
    contents.actionsExecutions = deserializeAws_restJson1_1AuditMitigationActionExecutionMetadataList(
      data.actionsExecutions,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAuditMitigationActionsExecutionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditMitigationActionsExecutionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAuditMitigationActionsTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditMitigationActionsTasksCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAuditMitigationActionsTasksCommandError(
      output,
      context
    );
  }
  const contents: ListAuditMitigationActionsTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAuditMitigationActionsTasksResponse",
    nextToken: undefined,
    tasks: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.tasks !== undefined && data.tasks !== null) {
    contents.tasks = deserializeAws_restJson1_1AuditMitigationActionsTaskMetadataList(
      data.tasks,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAuditMitigationActionsTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditMitigationActionsTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListAuditTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditTasksCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListAuditTasksCommandError(
      output,
      context
    );
  }
  const contents: ListAuditTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListAuditTasksResponse",
    nextToken: undefined,
    tasks: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.tasks !== undefined && data.tasks !== null) {
    contents.tasks = deserializeAws_restJson1_1AuditTaskMetadataList(
      data.tasks,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListAuditTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAuditTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListMitigationActionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMitigationActionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListMitigationActionsCommandError(
      output,
      context
    );
  }
  const contents: ListMitigationActionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListMitigationActionsResponse",
    actionIdentifiers: undefined,
    nextToken: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionIdentifiers !== undefined && data.actionIdentifiers !== null) {
    contents.actionIdentifiers = deserializeAws_restJson1_1MitigationActionIdentifierList(
      data.actionIdentifiers,
      context
    );
  }
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListMitigationActionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMitigationActionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListScheduledAuditsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListScheduledAuditsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListScheduledAuditsCommandError(
      output,
      context
    );
  }
  const contents: ListScheduledAuditsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListScheduledAuditsResponse",
    nextToken: undefined,
    scheduledAudits: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.scheduledAudits !== undefined && data.scheduledAudits !== null) {
    contents.scheduledAudits = deserializeAws_restJson1_1ScheduledAuditMetadataList(
      data.scheduledAudits,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListScheduledAuditsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListScheduledAuditsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListSecurityProfilesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSecurityProfilesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListSecurityProfilesCommandError(
      output,
      context
    );
  }
  const contents: ListSecurityProfilesCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListSecurityProfilesResponse",
    nextToken: undefined,
    securityProfileIdentifiers: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (
    data.securityProfileIdentifiers !== undefined &&
    data.securityProfileIdentifiers !== null
  ) {
    contents.securityProfileIdentifiers = deserializeAws_restJson1_1SecurityProfileIdentifiers(
      data.securityProfileIdentifiers,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListSecurityProfilesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSecurityProfilesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListSecurityProfilesForTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSecurityProfilesForTargetCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListSecurityProfilesForTargetCommandError(
      output,
      context
    );
  }
  const contents: ListSecurityProfilesForTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListSecurityProfilesForTargetResponse",
    nextToken: undefined,
    securityProfileTargetMappings: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (
    data.securityProfileTargetMappings !== undefined &&
    data.securityProfileTargetMappings !== null
  ) {
    contents.securityProfileTargetMappings = deserializeAws_restJson1_1SecurityProfileTargetMappings(
      data.securityProfileTargetMappings,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListSecurityProfilesForTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSecurityProfilesForTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListTargetsForSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTargetsForSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListTargetsForSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: ListTargetsForSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListTargetsForSecurityProfileResponse",
    nextToken: undefined,
    securityProfileTargets: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (
    data.securityProfileTargets !== undefined &&
    data.securityProfileTargets !== null
  ) {
    contents.securityProfileTargets = deserializeAws_restJson1_1SecurityProfileTargets(
      data.securityProfileTargets,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListTargetsForSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTargetsForSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListViolationEventsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListViolationEventsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListViolationEventsCommandError(
      output,
      context
    );
  }
  const contents: ListViolationEventsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListViolationEventsResponse",
    nextToken: undefined,
    violationEvents: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.violationEvents !== undefined && data.violationEvents !== null) {
    contents.violationEvents = deserializeAws_restJson1_1ViolationEvents(
      data.violationEvents,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListViolationEventsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListViolationEventsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1StartAuditMitigationActionsTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartAuditMitigationActionsTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1StartAuditMitigationActionsTaskCommandError(
      output,
      context
    );
  }
  const contents: StartAuditMitigationActionsTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "StartAuditMitigationActionsTaskResponse",
    taskId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.taskId !== undefined && data.taskId !== null) {
    contents.taskId = data.taskId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1StartAuditMitigationActionsTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartAuditMitigationActionsTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "TaskAlreadyExistsException":
    case "com.amazonaws.iot.sepio.types.audit#TaskAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1TaskAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1StartOnDemandAuditTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartOnDemandAuditTaskCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1StartOnDemandAuditTaskCommandError(
      output,
      context
    );
  }
  const contents: StartOnDemandAuditTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "StartOnDemandAuditTaskResponse",
    taskId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.taskId !== undefined && data.taskId !== null) {
    contents.taskId = data.taskId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1StartOnDemandAuditTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartOnDemandAuditTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateAccountAuditConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountAuditConfigurationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateAccountAuditConfigurationCommandError(
      output,
      context
    );
  }
  const contents: UpdateAccountAuditConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateAccountAuditConfigurationResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateAccountAuditConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountAuditConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateMitigationActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateMitigationActionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateMitigationActionCommandError(
      output,
      context
    );
  }
  const contents: UpdateMitigationActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateMitigationActionResponse",
    actionArn: undefined,
    actionId: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.actionArn !== undefined && data.actionArn !== null) {
    contents.actionArn = data.actionArn;
  }
  if (data.actionId !== undefined && data.actionId !== null) {
    contents.actionId = data.actionId;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateMitigationActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateMitigationActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateScheduledAuditCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateScheduledAuditCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateScheduledAuditCommandError(
      output,
      context
    );
  }
  const contents: UpdateScheduledAuditCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateScheduledAuditResponse",
    scheduledAuditArn: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.scheduledAuditArn !== undefined && data.scheduledAuditArn !== null) {
    contents.scheduledAuditArn = data.scheduledAuditArn;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateScheduledAuditCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateScheduledAuditCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateSecurityProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityProfileCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateSecurityProfileCommandError(
      output,
      context
    );
  }
  const contents: UpdateSecurityProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateSecurityProfileResponse",
    additionalMetricsToRetain: undefined,
    alertTargets: undefined,
    behaviors: undefined,
    creationDate: undefined,
    lastModifiedDate: undefined,
    securityProfileArn: undefined,
    securityProfileDescription: undefined,
    securityProfileName: undefined,
    version: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (
    data.additionalMetricsToRetain !== undefined &&
    data.additionalMetricsToRetain !== null
  ) {
    contents.additionalMetricsToRetain = deserializeAws_restJson1_1AdditionalMetricsToRetainList(
      data.additionalMetricsToRetain,
      context
    );
  }
  if (data.alertTargets !== undefined && data.alertTargets !== null) {
    contents.alertTargets = deserializeAws_restJson1_1AlertTargets(
      data.alertTargets,
      context
    );
  }
  if (data.behaviors !== undefined && data.behaviors !== null) {
    contents.behaviors = deserializeAws_restJson1_1Behaviors(
      data.behaviors,
      context
    );
  }
  if (data.creationDate !== undefined && data.creationDate !== null) {
    contents.creationDate = new Date(Math.round(data.creationDate * 1000));
  }
  if (data.lastModifiedDate !== undefined && data.lastModifiedDate !== null) {
    contents.lastModifiedDate = new Date(
      Math.round(data.lastModifiedDate * 1000)
    );
  }
  if (
    data.securityProfileArn !== undefined &&
    data.securityProfileArn !== null
  ) {
    contents.securityProfileArn = data.securityProfileArn;
  }
  if (
    data.securityProfileDescription !== undefined &&
    data.securityProfileDescription !== null
  ) {
    contents.securityProfileDescription = data.securityProfileDescription;
  }
  if (
    data.securityProfileName !== undefined &&
    data.securityProfileName !== null
  ) {
    contents.securityProfileName = data.securityProfileName;
  }
  if (data.version !== undefined && data.version !== null) {
    contents.version = data.version;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateSecurityProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "VersionConflictException":
    case "com.amazonaws.iot.common.types#VersionConflictException":
      response = {
        ...(await deserializeAws_restJson1_1VersionConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ValidateSecurityProfileBehaviorsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ValidateSecurityProfileBehaviorsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ValidateSecurityProfileBehaviorsCommandError(
      output,
      context
    );
  }
  const contents: ValidateSecurityProfileBehaviorsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ValidateSecurityProfileBehaviorsResponse",
    valid: undefined,
    validationErrors: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.valid !== undefined && data.valid !== null) {
    contents.valid = data.valid;
  }
  if (data.validationErrors !== undefined && data.validationErrors !== null) {
    contents.validationErrors = deserializeAws_restJson1_1ValidationErrors(
      data.validationErrors,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ValidateSecurityProfileBehaviorsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ValidateSecurityProfileBehaviorsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1CreateStreamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStreamCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1CreateStreamCommandError(output, context);
  }
  const contents: CreateStreamCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "CreateStreamResponse",
    description: undefined,
    streamArn: undefined,
    streamId: undefined,
    streamVersion: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.streamArn !== undefined && data.streamArn !== null) {
    contents.streamArn = data.streamArn;
  }
  if (data.streamId !== undefined && data.streamId !== null) {
    contents.streamId = data.streamId;
  }
  if (data.streamVersion !== undefined && data.streamVersion !== null) {
    contents.streamVersion = data.streamVersion;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1CreateStreamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStreamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "LimitExceededException":
    case "com.amazonaws.iot.common.types#LimitExceededException":
      response = {
        ...(await deserializeAws_restJson1_1LimitExceededExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iot.common.types#ResourceAlreadyExistsException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DeleteStreamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteStreamCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DeleteStreamCommandError(output, context);
  }
  const contents: DeleteStreamCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DeleteStreamResponse"
  };
  await collectBody(output.body, context);
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DeleteStreamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteStreamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "DeleteConflictException":
    case "com.amazonaws.iot.common.types#DeleteConflictException":
      response = {
        ...(await deserializeAws_restJson1_1DeleteConflictExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1DescribeStreamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStreamCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1DescribeStreamCommandError(
      output,
      context
    );
  }
  const contents: DescribeStreamCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "DescribeStreamResponse",
    streamInfo: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.streamInfo !== undefined && data.streamInfo !== null) {
    contents.streamInfo = deserializeAws_restJson1_1StreamInfo(
      data.streamInfo,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1DescribeStreamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStreamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1ListStreamsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListStreamsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1ListStreamsCommandError(output, context);
  }
  const contents: ListStreamsCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "ListStreamsResponse",
    nextToken: undefined,
    streams: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.nextToken !== undefined && data.nextToken !== null) {
    contents.nextToken = data.nextToken;
  }
  if (data.streams !== undefined && data.streams !== null) {
    contents.streams = deserializeAws_restJson1_1StreamsSummary(
      data.streams,
      context
    );
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1ListStreamsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListStreamsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_restJson1_1UpdateStreamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateStreamCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 400) {
    return deserializeAws_restJson1_1UpdateStreamCommandError(output, context);
  }
  const contents: UpdateStreamCommandOutput = {
    $metadata: deserializeMetadata(output),
    __type: "UpdateStreamResponse",
    description: undefined,
    streamArn: undefined,
    streamId: undefined,
    streamVersion: undefined
  };
  const data: any = await parseBody(output.body, context);
  if (data.description !== undefined && data.description !== null) {
    contents.description = data.description;
  }
  if (data.streamArn !== undefined && data.streamArn !== null) {
    contents.streamArn = data.streamArn;
  }
  if (data.streamId !== undefined && data.streamId !== null) {
    contents.streamId = data.streamId;
  }
  if (data.streamVersion !== undefined && data.streamVersion !== null) {
    contents.streamVersion = data.streamVersion;
  }
  return Promise.resolve(contents);
};

const deserializeAws_restJson1_1UpdateStreamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateStreamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context)
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iot.common.types#InternalFailureException":
      response = {
        ...(await deserializeAws_restJson1_1InternalFailureExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "InvalidRequestException":
    case "com.amazonaws.iot.common.types#InvalidRequestException":
      response = {
        ...(await deserializeAws_restJson1_1InvalidRequestExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ResourceNotFoundException":
    case "com.amazonaws.iot.common.types#ResourceNotFoundException":
      response = {
        ...(await deserializeAws_restJson1_1ResourceNotFoundExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ServiceUnavailableException":
    case "com.amazonaws.iot.common.types#ServiceUnavailableException":
      response = {
        ...(await deserializeAws_restJson1_1ServiceUnavailableExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "ThrottlingException":
    case "com.amazonaws.iot.common.types#ThrottlingException":
      response = {
        ...(await deserializeAws_restJson1_1ThrottlingExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    case "UnauthorizedException":
    case "com.amazonaws.iot.common.types#UnauthorizedException":
      response = {
        ...(await deserializeAws_restJson1_1UnauthorizedExceptionResponse(
          parsedOutput,
          context
        )),
        name: errorCode,
        $metadata: deserializeMetadata(output)
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output)
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

const deserializeAws_restJson1_1CertificateConflictExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<CertificateConflictException> => {
  const contents: CertificateConflictException = {
    name: "CertificateConflictException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1CertificateStateExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<CertificateStateException> => {
  const contents: CertificateStateException = {
    name: "CertificateStateException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1CertificateValidationExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<CertificateValidationException> => {
  const contents: CertificateValidationException = {
    name: "CertificateValidationException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1ConflictingResourceUpdateExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ConflictingResourceUpdateException> => {
  const contents: ConflictingResourceUpdateException = {
    name: "ConflictingResourceUpdateException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1DeleteConflictExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<DeleteConflictException> => {
  const contents: DeleteConflictException = {
    name: "DeleteConflictException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InternalExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InternalException> => {
  const contents: InternalException = {
    name: "InternalException",
    $fault: "server",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InternalFailureExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InternalFailureException> => {
  const contents: InternalFailureException = {
    name: "InternalFailureException",
    $fault: "server",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InvalidAggregationExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidAggregationException> => {
  const contents: InvalidAggregationException = {
    name: "InvalidAggregationException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InvalidQueryExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidQueryException> => {
  const contents: InvalidQueryException = {
    name: "InvalidQueryException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InvalidRequestExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidRequestException> => {
  const contents: InvalidRequestException = {
    name: "InvalidRequestException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InvalidResponseExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidResponseException> => {
  const contents: InvalidResponseException = {
    name: "InvalidResponseException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1InvalidStateTransitionExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidStateTransitionException> => {
  const contents: InvalidStateTransitionException = {
    name: "InvalidStateTransitionException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1LimitExceededExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<LimitExceededException> => {
  const contents: LimitExceededException = {
    name: "LimitExceededException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1MalformedPolicyExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<MalformedPolicyException> => {
  const contents: MalformedPolicyException = {
    name: "MalformedPolicyException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1NotConfiguredExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<NotConfiguredException> => {
  const contents: NotConfiguredException = {
    name: "NotConfiguredException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1RegistrationCodeValidationExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<RegistrationCodeValidationException> => {
  const contents: RegistrationCodeValidationException = {
    name: "RegistrationCodeValidationException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1ResourceAlreadyExistsExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceAlreadyExistsException> => {
  const contents: ResourceAlreadyExistsException = {
    name: "ResourceAlreadyExistsException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined,
    resourceArn: undefined,
    resourceId: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  if (data.resourceArn !== undefined && data.resourceArn !== null) {
    contents.resourceArn = data.resourceArn;
  }
  if (data.resourceId !== undefined && data.resourceId !== null) {
    contents.resourceId = data.resourceId;
  }
  return contents;
};

const deserializeAws_restJson1_1ResourceNotFoundExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceNotFoundException> => {
  const contents: ResourceNotFoundException = {
    name: "ResourceNotFoundException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1ResourceRegistrationFailureExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceRegistrationFailureException> => {
  const contents: ResourceRegistrationFailureException = {
    name: "ResourceRegistrationFailureException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1ServiceUnavailableExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ServiceUnavailableException> => {
  const contents: ServiceUnavailableException = {
    name: "ServiceUnavailableException",
    $fault: "server",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1SqlParseExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<SqlParseException> => {
  const contents: SqlParseException = {
    name: "SqlParseException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1ThrottlingExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ThrottlingException> => {
  const contents: ThrottlingException = {
    name: "ThrottlingException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1TransferAlreadyCompletedExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<TransferAlreadyCompletedException> => {
  const contents: TransferAlreadyCompletedException = {
    name: "TransferAlreadyCompletedException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1TransferConflictExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<TransferConflictException> => {
  const contents: TransferConflictException = {
    name: "TransferConflictException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1UnauthorizedExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<UnauthorizedException> => {
  const contents: UnauthorizedException = {
    name: "UnauthorizedException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1VersionConflictExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<VersionConflictException> => {
  const contents: VersionConflictException = {
    name: "VersionConflictException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1VersionsLimitExceededExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<VersionsLimitExceededException> => {
  const contents: VersionsLimitExceededException = {
    name: "VersionsLimitExceededException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1IndexNotReadyExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<IndexNotReadyException> => {
  const contents: IndexNotReadyException = {
    name: "IndexNotReadyException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const deserializeAws_restJson1_1TaskAlreadyExistsExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<TaskAlreadyExistsException> => {
  const contents: TaskAlreadyExistsException = {
    name: "TaskAlreadyExistsException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    message: undefined
  };
  const data: any = parsedOutput.body;
  if (data.message !== undefined && data.message !== null) {
    contents.message = data.message;
  }
  return contents;
};

const serializeAws_restJson1_1Configuration = (
  input: Configuration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Enabled !== undefined && { Enabled: input.Enabled })
  };
};

const serializeAws_restJson1_1EventConfigurations = (
  input: { [key: string]: Configuration },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (
      acc: { [key: string]: Configuration },
      [key, value]: [EventType | string, any]
    ) => ({
      ...acc,
      [key]: serializeAws_restJson1_1Configuration(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1PolicyNames = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1Tag = (
  input: Tag,
  context: __SerdeContext
): any => {
  return {
    ...(input.Key !== undefined && { Key: input.Key }),
    ...(input.Value !== undefined && { Value: input.Value })
  };
};

const serializeAws_restJson1_1TagKeyList = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1TagList = (
  input: Tag[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1Tag(entry, context));
};

const serializeAws_restJson1_1Action = (
  input: Action,
  context: __SerdeContext
): any => {
  return {
    ...(input.cloudwatchAlarm !== undefined && {
      cloudwatchAlarm: serializeAws_restJson1_1CloudwatchAlarmAction(
        input.cloudwatchAlarm,
        context
      )
    }),
    ...(input.cloudwatchMetric !== undefined && {
      cloudwatchMetric: serializeAws_restJson1_1CloudwatchMetricAction(
        input.cloudwatchMetric,
        context
      )
    }),
    ...(input.dynamoDB !== undefined && {
      dynamoDB: serializeAws_restJson1_1DynamoDBAction(input.dynamoDB, context)
    }),
    ...(input.dynamoDBv2 !== undefined && {
      dynamoDBv2: serializeAws_restJson1_1DynamoDBv2Action(
        input.dynamoDBv2,
        context
      )
    }),
    ...(input.elasticsearch !== undefined && {
      elasticsearch: serializeAws_restJson1_1ElasticsearchAction(
        input.elasticsearch,
        context
      )
    }),
    ...(input.firehose !== undefined && {
      firehose: serializeAws_restJson1_1FirehoseAction(input.firehose, context)
    }),
    ...(input.http !== undefined && {
      http: serializeAws_restJson1_1HttpAction(input.http, context)
    }),
    ...(input.iotAnalytics !== undefined && {
      iotAnalytics: serializeAws_restJson1_1IotAnalyticsAction(
        input.iotAnalytics,
        context
      )
    }),
    ...(input.iotEvents !== undefined && {
      iotEvents: serializeAws_restJson1_1IotEventsAction(
        input.iotEvents,
        context
      )
    }),
    ...(input.iotSiteWise !== undefined && {
      iotSiteWise: serializeAws_restJson1_1IotSiteWiseAction(
        input.iotSiteWise,
        context
      )
    }),
    ...(input.kinesis !== undefined && {
      kinesis: serializeAws_restJson1_1KinesisAction(input.kinesis, context)
    }),
    ...(input.lambda !== undefined && {
      lambda: serializeAws_restJson1_1LambdaAction(input.lambda, context)
    }),
    ...(input.republish !== undefined && {
      republish: serializeAws_restJson1_1RepublishAction(
        input.republish,
        context
      )
    }),
    ...(input.s3 !== undefined && {
      s3: serializeAws_restJson1_1S3Action(input.s3, context)
    }),
    ...(input.salesforce !== undefined && {
      salesforce: serializeAws_restJson1_1SalesforceAction(
        input.salesforce,
        context
      )
    }),
    ...(input.sns !== undefined && {
      sns: serializeAws_restJson1_1SnsAction(input.sns, context)
    }),
    ...(input.sqs !== undefined && {
      sqs: serializeAws_restJson1_1SqsAction(input.sqs, context)
    }),
    ...(input.stepFunctions !== undefined && {
      stepFunctions: serializeAws_restJson1_1StepFunctionsAction(
        input.stepFunctions,
        context
      )
    })
  };
};

const serializeAws_restJson1_1ActionList = (
  input: Action[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1Action(entry, context));
};

const serializeAws_restJson1_1AssetPropertyTimestamp = (
  input: AssetPropertyTimestamp,
  context: __SerdeContext
): any => {
  return {
    ...(input.offsetInNanos !== undefined && {
      offsetInNanos: input.offsetInNanos
    }),
    ...(input.timeInSeconds !== undefined && {
      timeInSeconds: input.timeInSeconds
    })
  };
};

const serializeAws_restJson1_1AssetPropertyValue = (
  input: AssetPropertyValue,
  context: __SerdeContext
): any => {
  return {
    ...(input.quality !== undefined && { quality: input.quality }),
    ...(input.timestamp !== undefined && {
      timestamp: serializeAws_restJson1_1AssetPropertyTimestamp(
        input.timestamp,
        context
      )
    }),
    ...(input.value !== undefined && {
      value: serializeAws_restJson1_1AssetPropertyVariant(input.value, context)
    })
  };
};

const serializeAws_restJson1_1AssetPropertyValueList = (
  input: AssetPropertyValue[],
  context: __SerdeContext
): any => {
  return input.map(entry =>
    serializeAws_restJson1_1AssetPropertyValue(entry, context)
  );
};

const serializeAws_restJson1_1AssetPropertyVariant = (
  input: AssetPropertyVariant,
  context: __SerdeContext
): any => {
  return {
    ...(input.booleanValue !== undefined && {
      booleanValue: input.booleanValue
    }),
    ...(input.doubleValue !== undefined && { doubleValue: input.doubleValue }),
    ...(input.integerValue !== undefined && {
      integerValue: input.integerValue
    }),
    ...(input.stringValue !== undefined && { stringValue: input.stringValue })
  };
};

const serializeAws_restJson1_1CloudwatchAlarmAction = (
  input: CloudwatchAlarmAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.alarmName !== undefined && { alarmName: input.alarmName }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.stateReason !== undefined && { stateReason: input.stateReason }),
    ...(input.stateValue !== undefined && { stateValue: input.stateValue })
  };
};

const serializeAws_restJson1_1CloudwatchMetricAction = (
  input: CloudwatchMetricAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.metricName !== undefined && { metricName: input.metricName }),
    ...(input.metricNamespace !== undefined && {
      metricNamespace: input.metricNamespace
    }),
    ...(input.metricTimestamp !== undefined && {
      metricTimestamp: input.metricTimestamp
    }),
    ...(input.metricUnit !== undefined && { metricUnit: input.metricUnit }),
    ...(input.metricValue !== undefined && { metricValue: input.metricValue }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1DynamoDBAction = (
  input: DynamoDBAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.hashKeyField !== undefined && {
      hashKeyField: input.hashKeyField
    }),
    ...(input.hashKeyType !== undefined && { hashKeyType: input.hashKeyType }),
    ...(input.hashKeyValue !== undefined && {
      hashKeyValue: input.hashKeyValue
    }),
    ...(input.operation !== undefined && { operation: input.operation }),
    ...(input.payloadField !== undefined && {
      payloadField: input.payloadField
    }),
    ...(input.rangeKeyField !== undefined && {
      rangeKeyField: input.rangeKeyField
    }),
    ...(input.rangeKeyType !== undefined && {
      rangeKeyType: input.rangeKeyType
    }),
    ...(input.rangeKeyValue !== undefined && {
      rangeKeyValue: input.rangeKeyValue
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.tableName !== undefined && { tableName: input.tableName })
  };
};

const serializeAws_restJson1_1DynamoDBv2Action = (
  input: DynamoDBv2Action,
  context: __SerdeContext
): any => {
  return {
    ...(input.putItem !== undefined && {
      putItem: serializeAws_restJson1_1PutItemInput(input.putItem, context)
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1ElasticsearchAction = (
  input: ElasticsearchAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.endpoint !== undefined && { endpoint: input.endpoint }),
    ...(input.id !== undefined && { id: input.id }),
    ...(input.index !== undefined && { index: input.index }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.type !== undefined && { type: input.type })
  };
};

const serializeAws_restJson1_1FirehoseAction = (
  input: FirehoseAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.deliveryStreamName !== undefined && {
      deliveryStreamName: input.deliveryStreamName
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.separator !== undefined && { separator: input.separator })
  };
};

const serializeAws_restJson1_1HeaderList = (
  input: HttpActionHeader[],
  context: __SerdeContext
): any => {
  return input.map(entry =>
    serializeAws_restJson1_1HttpActionHeader(entry, context)
  );
};

const serializeAws_restJson1_1HttpAction = (
  input: HttpAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.auth !== undefined && {
      auth: serializeAws_restJson1_1HttpAuthorization(input.auth, context)
    }),
    ...(input.confirmationUrl !== undefined && {
      confirmationUrl: input.confirmationUrl
    }),
    ...(input.headers !== undefined && {
      headers: serializeAws_restJson1_1HeaderList(input.headers, context)
    }),
    ...(input.url !== undefined && { url: input.url })
  };
};

const serializeAws_restJson1_1HttpActionHeader = (
  input: HttpActionHeader,
  context: __SerdeContext
): any => {
  return {
    ...(input.key !== undefined && { key: input.key }),
    ...(input.value !== undefined && { value: input.value })
  };
};

const serializeAws_restJson1_1HttpAuthorization = (
  input: HttpAuthorization,
  context: __SerdeContext
): any => {
  return {
    ...(input.sigv4 !== undefined && {
      sigv4: serializeAws_restJson1_1SigV4Authorization(input.sigv4, context)
    })
  };
};

const serializeAws_restJson1_1HttpUrlDestinationConfiguration = (
  input: HttpUrlDestinationConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.confirmationUrl !== undefined && {
      confirmationUrl: input.confirmationUrl
    })
  };
};

const serializeAws_restJson1_1IotAnalyticsAction = (
  input: IotAnalyticsAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.channelArn !== undefined && { channelArn: input.channelArn }),
    ...(input.channelName !== undefined && { channelName: input.channelName }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1IotEventsAction = (
  input: IotEventsAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.inputName !== undefined && { inputName: input.inputName }),
    ...(input.messageId !== undefined && { messageId: input.messageId }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1IotSiteWiseAction = (
  input: IotSiteWiseAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.putAssetPropertyValueEntries !== undefined && {
      putAssetPropertyValueEntries: serializeAws_restJson1_1PutAssetPropertyValueEntryList(
        input.putAssetPropertyValueEntries,
        context
      )
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1KinesisAction = (
  input: KinesisAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.partitionKey !== undefined && {
      partitionKey: input.partitionKey
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.streamName !== undefined && { streamName: input.streamName })
  };
};

const serializeAws_restJson1_1LambdaAction = (
  input: LambdaAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.functionArn !== undefined && { functionArn: input.functionArn })
  };
};

const serializeAws_restJson1_1LogTarget = (
  input: LogTarget,
  context: __SerdeContext
): any => {
  return {
    ...(input.targetName !== undefined && { targetName: input.targetName }),
    ...(input.targetType !== undefined && { targetType: input.targetType })
  };
};

const serializeAws_restJson1_1LoggingOptionsPayload = (
  input: LoggingOptionsPayload,
  context: __SerdeContext
): any => {
  return {
    ...(input.logLevel !== undefined && { logLevel: input.logLevel }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1PutAssetPropertyValueEntry = (
  input: PutAssetPropertyValueEntry,
  context: __SerdeContext
): any => {
  return {
    ...(input.assetId !== undefined && { assetId: input.assetId }),
    ...(input.entryId !== undefined && { entryId: input.entryId }),
    ...(input.propertyAlias !== undefined && {
      propertyAlias: input.propertyAlias
    }),
    ...(input.propertyId !== undefined && { propertyId: input.propertyId }),
    ...(input.propertyValues !== undefined && {
      propertyValues: serializeAws_restJson1_1AssetPropertyValueList(
        input.propertyValues,
        context
      )
    })
  };
};

const serializeAws_restJson1_1PutAssetPropertyValueEntryList = (
  input: PutAssetPropertyValueEntry[],
  context: __SerdeContext
): any => {
  return input.map(entry =>
    serializeAws_restJson1_1PutAssetPropertyValueEntry(entry, context)
  );
};

const serializeAws_restJson1_1PutItemInput = (
  input: PutItemInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.tableName !== undefined && { tableName: input.tableName })
  };
};

const serializeAws_restJson1_1RepublishAction = (
  input: RepublishAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.qos !== undefined && { qos: input.qos }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.topic !== undefined && { topic: input.topic })
  };
};

const serializeAws_restJson1_1S3Action = (
  input: S3Action,
  context: __SerdeContext
): any => {
  return {
    ...(input.bucketName !== undefined && { bucketName: input.bucketName }),
    ...(input.cannedAcl !== undefined && { cannedAcl: input.cannedAcl }),
    ...(input.key !== undefined && { key: input.key }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1SalesforceAction = (
  input: SalesforceAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.token !== undefined && { token: input.token }),
    ...(input.url !== undefined && { url: input.url })
  };
};

const serializeAws_restJson1_1SigV4Authorization = (
  input: SigV4Authorization,
  context: __SerdeContext
): any => {
  return {
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.serviceName !== undefined && { serviceName: input.serviceName }),
    ...(input.signingRegion !== undefined && {
      signingRegion: input.signingRegion
    })
  };
};

const serializeAws_restJson1_1SnsAction = (
  input: SnsAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.messageFormat !== undefined && {
      messageFormat: input.messageFormat
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.targetArn !== undefined && { targetArn: input.targetArn })
  };
};

const serializeAws_restJson1_1SqsAction = (
  input: SqsAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.queueUrl !== undefined && { queueUrl: input.queueUrl }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.useBase64 !== undefined && { useBase64: input.useBase64 })
  };
};

const serializeAws_restJson1_1StepFunctionsAction = (
  input: StepFunctionsAction,
  context: __SerdeContext
): any => {
  return {
    ...(input.executionNamePrefix !== undefined && {
      executionNamePrefix: input.executionNamePrefix
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.stateMachineName !== undefined && {
      stateMachineName: input.stateMachineName
    })
  };
};

const serializeAws_restJson1_1TopicRuleDestinationConfiguration = (
  input: TopicRuleDestinationConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.httpUrlConfiguration !== undefined && {
      httpUrlConfiguration: serializeAws_restJson1_1HttpUrlDestinationConfiguration(
        input.httpUrlConfiguration,
        context
      )
    })
  };
};

const serializeAws_restJson1_1TopicRulePayload = (
  input: TopicRulePayload,
  context: __SerdeContext
): any => {
  return {
    ...(input.actions !== undefined && {
      actions: serializeAws_restJson1_1ActionList(input.actions, context)
    }),
    ...(input.awsIotSqlVersion !== undefined && {
      awsIotSqlVersion: input.awsIotSqlVersion
    }),
    ...(input.description !== undefined && { description: input.description }),
    ...(input.errorAction !== undefined && {
      errorAction: serializeAws_restJson1_1Action(input.errorAction, context)
    }),
    ...(input.ruleDisabled !== undefined && {
      ruleDisabled: input.ruleDisabled
    }),
    ...(input.sql !== undefined && { sql: input.sql })
  };
};

const serializeAws_restJson1_1AuthInfo = (
  input: AuthInfo,
  context: __SerdeContext
): any => {
  return {
    ...(input.actionType !== undefined && { actionType: input.actionType }),
    ...(input.resources !== undefined && {
      resources: serializeAws_restJson1_1Resources(input.resources, context)
    })
  };
};

const serializeAws_restJson1_1AuthInfos = (
  input: AuthInfo[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1AuthInfo(entry, context));
};

const serializeAws_restJson1_1AuthorizerConfig = (
  input: AuthorizerConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.allowAuthorizerOverride !== undefined && {
      allowAuthorizerOverride: input.allowAuthorizerOverride
    }),
    ...(input.defaultAuthorizerName !== undefined && {
      defaultAuthorizerName: input.defaultAuthorizerName
    })
  };
};

const serializeAws_restJson1_1HttpContext = (
  input: HttpContext,
  context: __SerdeContext
): any => {
  return {
    ...(input.headers !== undefined && {
      headers: serializeAws_restJson1_1HttpHeaders(input.headers, context)
    }),
    ...(input.queryString !== undefined && { queryString: input.queryString })
  };
};

const serializeAws_restJson1_1HttpHeaders = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1MqttContext = (
  input: MqttContext,
  context: __SerdeContext
): any => {
  return {
    ...(input.clientId !== undefined && { clientId: input.clientId }),
    ...(input.password !== undefined && {
      password: context.base64Encoder(input.password)
    }),
    ...(input.username !== undefined && { username: input.username })
  };
};

const serializeAws_restJson1_1Parameters = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1PublicKeyMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1RegistrationConfig = (
  input: RegistrationConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.templateBody !== undefined && {
      templateBody: input.templateBody
    })
  };
};

const serializeAws_restJson1_1Resources = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1ServerCertificateArns = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1TlsContext = (
  input: TlsContext,
  context: __SerdeContext
): any => {
  return {
    ...(input.serverName !== undefined && { serverName: input.serverName })
  };
};

const serializeAws_restJson1_1Field = (
  input: Field,
  context: __SerdeContext
): any => {
  return {
    ...(input.name !== undefined && { name: input.name }),
    ...(input.type !== undefined && { type: input.type })
  };
};

const serializeAws_restJson1_1Fields = (
  input: Field[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1Field(entry, context));
};

const serializeAws_restJson1_1PercentList = (
  input: number[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1ThingGroupIndexingConfiguration = (
  input: ThingGroupIndexingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.customFields !== undefined && {
      customFields: serializeAws_restJson1_1Fields(input.customFields, context)
    }),
    ...(input.managedFields !== undefined && {
      managedFields: serializeAws_restJson1_1Fields(
        input.managedFields,
        context
      )
    }),
    ...(input.thingGroupIndexingMode !== undefined && {
      thingGroupIndexingMode: input.thingGroupIndexingMode
    })
  };
};

const serializeAws_restJson1_1ThingIndexingConfiguration = (
  input: ThingIndexingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.customFields !== undefined && {
      customFields: serializeAws_restJson1_1Fields(input.customFields, context)
    }),
    ...(input.managedFields !== undefined && {
      managedFields: serializeAws_restJson1_1Fields(
        input.managedFields,
        context
      )
    }),
    ...(input.thingConnectivityIndexingMode !== undefined && {
      thingConnectivityIndexingMode: input.thingConnectivityIndexingMode
    }),
    ...(input.thingIndexingMode !== undefined && {
      thingIndexingMode: input.thingIndexingMode
    })
  };
};

const serializeAws_restJson1_1AbortConfig = (
  input: AbortConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.criteriaList !== undefined && {
      criteriaList: serializeAws_restJson1_1AbortCriteriaList(
        input.criteriaList,
        context
      )
    })
  };
};

const serializeAws_restJson1_1AbortCriteria = (
  input: AbortCriteria,
  context: __SerdeContext
): any => {
  return {
    ...(input.action !== undefined && { action: input.action }),
    ...(input.failureType !== undefined && { failureType: input.failureType }),
    ...(input.minNumberOfExecutedThings !== undefined && {
      minNumberOfExecutedThings: input.minNumberOfExecutedThings
    }),
    ...(input.thresholdPercentage !== undefined && {
      thresholdPercentage: input.thresholdPercentage
    })
  };
};

const serializeAws_restJson1_1AbortCriteriaList = (
  input: AbortCriteria[],
  context: __SerdeContext
): any => {
  return input.map(entry =>
    serializeAws_restJson1_1AbortCriteria(entry, context)
  );
};

const serializeAws_restJson1_1ExponentialRolloutRate = (
  input: ExponentialRolloutRate,
  context: __SerdeContext
): any => {
  return {
    ...(input.baseRatePerMinute !== undefined && {
      baseRatePerMinute: input.baseRatePerMinute
    }),
    ...(input.incrementFactor !== undefined && {
      incrementFactor: input.incrementFactor
    }),
    ...(input.rateIncreaseCriteria !== undefined && {
      rateIncreaseCriteria: serializeAws_restJson1_1RateIncreaseCriteria(
        input.rateIncreaseCriteria,
        context
      )
    })
  };
};

const serializeAws_restJson1_1JobExecutionsRolloutConfig = (
  input: JobExecutionsRolloutConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.exponentialRate !== undefined && {
      exponentialRate: serializeAws_restJson1_1ExponentialRolloutRate(
        input.exponentialRate,
        context
      )
    }),
    ...(input.maximumPerMinute !== undefined && {
      maximumPerMinute: input.maximumPerMinute
    })
  };
};

const serializeAws_restJson1_1JobTargets = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1PresignedUrlConfig = (
  input: PresignedUrlConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.expiresInSec !== undefined && {
      expiresInSec: input.expiresInSec
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1RateIncreaseCriteria = (
  input: RateIncreaseCriteria,
  context: __SerdeContext
): any => {
  return {
    ...(input.numberOfNotifiedThings !== undefined && {
      numberOfNotifiedThings: input.numberOfNotifiedThings
    }),
    ...(input.numberOfSucceededThings !== undefined && {
      numberOfSucceededThings: input.numberOfSucceededThings
    })
  };
};

const serializeAws_restJson1_1TimeoutConfig = (
  input: TimeoutConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.inProgressTimeoutInMinutes !== undefined && {
      inProgressTimeoutInMinutes: input.inProgressTimeoutInMinutes
    })
  };
};

const serializeAws_restJson1_1DetailsMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1AdditionalParameterMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1AttributesMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1AwsJobExecutionsRolloutConfig = (
  input: AwsJobExecutionsRolloutConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.maximumPerMinute !== undefined && {
      maximumPerMinute: input.maximumPerMinute
    })
  };
};

const serializeAws_restJson1_1AwsJobPresignedUrlConfig = (
  input: AwsJobPresignedUrlConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.expiresInSec !== undefined && {
      expiresInSec: input.expiresInSec
    })
  };
};

const serializeAws_restJson1_1CodeSigning = (
  input: CodeSigning,
  context: __SerdeContext
): any => {
  return {
    ...(input.awsSignerJobId !== undefined && {
      awsSignerJobId: input.awsSignerJobId
    }),
    ...(input.customCodeSigning !== undefined && {
      customCodeSigning: serializeAws_restJson1_1CustomCodeSigning(
        input.customCodeSigning,
        context
      )
    }),
    ...(input.startSigningJobParameter !== undefined && {
      startSigningJobParameter: serializeAws_restJson1_1StartSigningJobParameter(
        input.startSigningJobParameter,
        context
      )
    })
  };
};

const serializeAws_restJson1_1CodeSigningCertificateChain = (
  input: CodeSigningCertificateChain,
  context: __SerdeContext
): any => {
  return {
    ...(input.certificateName !== undefined && {
      certificateName: input.certificateName
    }),
    ...(input.inlineDocument !== undefined && {
      inlineDocument: input.inlineDocument
    })
  };
};

const serializeAws_restJson1_1CodeSigningSignature = (
  input: CodeSigningSignature,
  context: __SerdeContext
): any => {
  return {
    ...(input.inlineDocument !== undefined && {
      inlineDocument: context.base64Encoder(input.inlineDocument)
    })
  };
};

const serializeAws_restJson1_1CustomCodeSigning = (
  input: CustomCodeSigning,
  context: __SerdeContext
): any => {
  return {
    ...(input.certificateChain !== undefined && {
      certificateChain: serializeAws_restJson1_1CodeSigningCertificateChain(
        input.certificateChain,
        context
      )
    }),
    ...(input.hashAlgorithm !== undefined && {
      hashAlgorithm: input.hashAlgorithm
    }),
    ...(input.signature !== undefined && {
      signature: serializeAws_restJson1_1CodeSigningSignature(
        input.signature,
        context
      )
    }),
    ...(input.signatureAlgorithm !== undefined && {
      signatureAlgorithm: input.signatureAlgorithm
    })
  };
};

const serializeAws_restJson1_1Destination = (
  input: Destination,
  context: __SerdeContext
): any => {
  return {
    ...(input.s3Destination !== undefined && {
      s3Destination: serializeAws_restJson1_1S3Destination(
        input.s3Destination,
        context
      )
    })
  };
};

const serializeAws_restJson1_1FileLocation = (
  input: FileLocation,
  context: __SerdeContext
): any => {
  return {
    ...(input.s3Location !== undefined && {
      s3Location: serializeAws_restJson1_1S3Location(input.s3Location, context)
    }),
    ...(input.stream !== undefined && {
      stream: serializeAws_restJson1_1_Stream(input.stream, context)
    })
  };
};

const serializeAws_restJson1_1OTAUpdateFile = (
  input: OTAUpdateFile,
  context: __SerdeContext
): any => {
  return {
    ...(input.attributes !== undefined && {
      attributes: serializeAws_restJson1_1AttributesMap(
        input.attributes,
        context
      )
    }),
    ...(input.codeSigning !== undefined && {
      codeSigning: serializeAws_restJson1_1CodeSigning(
        input.codeSigning,
        context
      )
    }),
    ...(input.fileLocation !== undefined && {
      fileLocation: serializeAws_restJson1_1FileLocation(
        input.fileLocation,
        context
      )
    }),
    ...(input.fileName !== undefined && { fileName: input.fileName }),
    ...(input.fileVersion !== undefined && { fileVersion: input.fileVersion })
  };
};

const serializeAws_restJson1_1OTAUpdateFiles = (
  input: OTAUpdateFile[],
  context: __SerdeContext
): any => {
  return input.map(entry =>
    serializeAws_restJson1_1OTAUpdateFile(entry, context)
  );
};

const serializeAws_restJson1_1Protocols = (
  input: (Protocol | string)[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1S3Destination = (
  input: S3Destination,
  context: __SerdeContext
): any => {
  return {
    ...(input.bucket !== undefined && { bucket: input.bucket }),
    ...(input.prefix !== undefined && { prefix: input.prefix })
  };
};

const serializeAws_restJson1_1SigningProfileParameter = (
  input: SigningProfileParameter,
  context: __SerdeContext
): any => {
  return {
    ...(input.certificateArn !== undefined && {
      certificateArn: input.certificateArn
    }),
    ...(input.certificatePathOnDevice !== undefined && {
      certificatePathOnDevice: input.certificatePathOnDevice
    }),
    ...(input.platform !== undefined && { platform: input.platform })
  };
};

const serializeAws_restJson1_1StartSigningJobParameter = (
  input: StartSigningJobParameter,
  context: __SerdeContext
): any => {
  return {
    ...(input.destination !== undefined && {
      destination: serializeAws_restJson1_1Destination(
        input.destination,
        context
      )
    }),
    ...(input.signingProfileName !== undefined && {
      signingProfileName: input.signingProfileName
    }),
    ...(input.signingProfileParameter !== undefined && {
      signingProfileParameter: serializeAws_restJson1_1SigningProfileParameter(
        input.signingProfileParameter,
        context
      )
    })
  };
};

const serializeAws_restJson1_1_Stream = (
  input: _Stream,
  context: __SerdeContext
): any => {
  return {
    ...(input.fileId !== undefined && { fileId: input.fileId }),
    ...(input.streamId !== undefined && { streamId: input.streamId })
  };
};

const serializeAws_restJson1_1Targets = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1AttributePayload = (
  input: AttributePayload,
  context: __SerdeContext
): any => {
  return {
    ...(input.attributes !== undefined && {
      attributes: serializeAws_restJson1_1Attributes(input.attributes, context)
    }),
    ...(input.merge !== undefined && { merge: input.merge })
  };
};

const serializeAws_restJson1_1Attributes = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const serializeAws_restJson1_1BillingGroupProperties = (
  input: BillingGroupProperties,
  context: __SerdeContext
): any => {
  return {
    ...(input.billingGroupDescription !== undefined && {
      billingGroupDescription: input.billingGroupDescription
    })
  };
};

const serializeAws_restJson1_1SearchableAttributes = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1ThingGroupList = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1ThingGroupProperties = (
  input: ThingGroupProperties,
  context: __SerdeContext
): any => {
  return {
    ...(input.attributePayload !== undefined && {
      attributePayload: serializeAws_restJson1_1AttributePayload(
        input.attributePayload,
        context
      )
    }),
    ...(input.thingGroupDescription !== undefined && {
      thingGroupDescription: input.thingGroupDescription
    })
  };
};

const serializeAws_restJson1_1ThingTypeProperties = (
  input: ThingTypeProperties,
  context: __SerdeContext
): any => {
  return {
    ...(input.searchableAttributes !== undefined && {
      searchableAttributes: serializeAws_restJson1_1SearchableAttributes(
        input.searchableAttributes,
        context
      )
    }),
    ...(input.thingTypeDescription !== undefined && {
      thingTypeDescription: input.thingTypeDescription
    })
  };
};

const serializeAws_restJson1_1AddThingsToThingGroupParams = (
  input: AddThingsToThingGroupParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.overrideDynamicGroups !== undefined && {
      overrideDynamicGroups: input.overrideDynamicGroups
    }),
    ...(input.thingGroupNames !== undefined && {
      thingGroupNames: serializeAws_restJson1_1ThingGroupNames(
        input.thingGroupNames,
        context
      )
    })
  };
};

const serializeAws_restJson1_1EnableIoTLoggingParams = (
  input: EnableIoTLoggingParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.logLevel !== undefined && { logLevel: input.logLevel }),
    ...(input.roleArnForLogging !== undefined && {
      roleArnForLogging: input.roleArnForLogging
    })
  };
};

const serializeAws_restJson1_1MitigationActionParams = (
  input: MitigationActionParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.addThingsToThingGroupParams !== undefined && {
      addThingsToThingGroupParams: serializeAws_restJson1_1AddThingsToThingGroupParams(
        input.addThingsToThingGroupParams,
        context
      )
    }),
    ...(input.enableIoTLoggingParams !== undefined && {
      enableIoTLoggingParams: serializeAws_restJson1_1EnableIoTLoggingParams(
        input.enableIoTLoggingParams,
        context
      )
    }),
    ...(input.publishFindingToSnsParams !== undefined && {
      publishFindingToSnsParams: serializeAws_restJson1_1PublishFindingToSnsParams(
        input.publishFindingToSnsParams,
        context
      )
    }),
    ...(input.replaceDefaultPolicyVersionParams !== undefined && {
      replaceDefaultPolicyVersionParams: serializeAws_restJson1_1ReplaceDefaultPolicyVersionParams(
        input.replaceDefaultPolicyVersionParams,
        context
      )
    }),
    ...(input.updateCACertificateParams !== undefined && {
      updateCACertificateParams: serializeAws_restJson1_1UpdateCACertificateParams(
        input.updateCACertificateParams,
        context
      )
    }),
    ...(input.updateDeviceCertificateParams !== undefined && {
      updateDeviceCertificateParams: serializeAws_restJson1_1UpdateDeviceCertificateParams(
        input.updateDeviceCertificateParams,
        context
      )
    })
  };
};

const serializeAws_restJson1_1PublishFindingToSnsParams = (
  input: PublishFindingToSnsParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.topicArn !== undefined && { topicArn: input.topicArn })
  };
};

const serializeAws_restJson1_1ReplaceDefaultPolicyVersionParams = (
  input: ReplaceDefaultPolicyVersionParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.templateName !== undefined && {
      templateName: input.templateName
    })
  };
};

const serializeAws_restJson1_1ThingGroupNames = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1UpdateCACertificateParams = (
  input: UpdateCACertificateParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.action !== undefined && { action: input.action })
  };
};

const serializeAws_restJson1_1UpdateDeviceCertificateParams = (
  input: UpdateDeviceCertificateParams,
  context: __SerdeContext
): any => {
  return {
    ...(input.action !== undefined && { action: input.action })
  };
};

const serializeAws_restJson1_1AuditCheckConfiguration = (
  input: AuditCheckConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.enabled !== undefined && { enabled: input.enabled })
  };
};

const serializeAws_restJson1_1AuditCheckConfigurations = (
  input: { [key: string]: AuditCheckConfiguration },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (
      acc: { [key: string]: AuditCheckConfiguration },
      [key, value]: [string, any]
    ) => ({
      ...acc,
      [key]: serializeAws_restJson1_1AuditCheckConfiguration(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1AuditCheckToActionsMapping = (
  input: { [key: string]: string[] },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string[] }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: serializeAws_restJson1_1MitigationActionNameList(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1AuditCheckToReasonCodeFilter = (
  input: { [key: string]: string[] },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: string[] }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: serializeAws_restJson1_1ReasonForNonComplianceCodes(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1AuditMitigationActionsTaskTarget = (
  input: AuditMitigationActionsTaskTarget,
  context: __SerdeContext
): any => {
  return {
    ...(input.auditCheckToReasonCodeFilter !== undefined && {
      auditCheckToReasonCodeFilter: serializeAws_restJson1_1AuditCheckToReasonCodeFilter(
        input.auditCheckToReasonCodeFilter,
        context
      )
    }),
    ...(input.auditTaskId !== undefined && { auditTaskId: input.auditTaskId }),
    ...(input.findingIds !== undefined && {
      findingIds: serializeAws_restJson1_1FindingIds(input.findingIds, context)
    })
  };
};

const serializeAws_restJson1_1AuditNotificationTarget = (
  input: AuditNotificationTarget,
  context: __SerdeContext
): any => {
  return {
    ...(input.enabled !== undefined && { enabled: input.enabled }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn }),
    ...(input.targetArn !== undefined && { targetArn: input.targetArn })
  };
};

const serializeAws_restJson1_1AuditNotificationTargetConfigurations = (
  input: { [key: string]: AuditNotificationTarget },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (
      acc: { [key: string]: AuditNotificationTarget },
      [key, value]: [AuditNotificationType | string, any]
    ) => ({
      ...acc,
      [key]: serializeAws_restJson1_1AuditNotificationTarget(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1FindingIds = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1MitigationActionNameList = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1PolicyVersionIdentifier = (
  input: PolicyVersionIdentifier,
  context: __SerdeContext
): any => {
  return {
    ...(input.policyName !== undefined && { policyName: input.policyName }),
    ...(input.policyVersionId !== undefined && {
      policyVersionId: input.policyVersionId
    })
  };
};

const serializeAws_restJson1_1ReasonForNonComplianceCodes = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1ResourceIdentifier = (
  input: ResourceIdentifier,
  context: __SerdeContext
): any => {
  return {
    ...(input.account !== undefined && { account: input.account }),
    ...(input.caCertificateId !== undefined && {
      caCertificateId: input.caCertificateId
    }),
    ...(input.clientId !== undefined && { clientId: input.clientId }),
    ...(input.cognitoIdentityPoolId !== undefined && {
      cognitoIdentityPoolId: input.cognitoIdentityPoolId
    }),
    ...(input.deviceCertificateId !== undefined && {
      deviceCertificateId: input.deviceCertificateId
    }),
    ...(input.iamRoleArn !== undefined && { iamRoleArn: input.iamRoleArn }),
    ...(input.policyVersionIdentifier !== undefined && {
      policyVersionIdentifier: serializeAws_restJson1_1PolicyVersionIdentifier(
        input.policyVersionIdentifier,
        context
      )
    }),
    ...(input.roleAliasArn !== undefined && {
      roleAliasArn: input.roleAliasArn
    })
  };
};

const serializeAws_restJson1_1TargetAuditCheckNames = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1AdditionalMetricsToRetainList = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1AlertTarget = (
  input: AlertTarget,
  context: __SerdeContext
): any => {
  return {
    ...(input.alertTargetArn !== undefined && {
      alertTargetArn: input.alertTargetArn
    }),
    ...(input.roleArn !== undefined && { roleArn: input.roleArn })
  };
};

const serializeAws_restJson1_1AlertTargets = (
  input: { [key: string]: AlertTarget },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (
      acc: { [key: string]: AlertTarget },
      [key, value]: [AlertTargetType | string, any]
    ) => ({
      ...acc,
      [key]: serializeAws_restJson1_1AlertTarget(value, context)
    }),
    {}
  );
};

const serializeAws_restJson1_1Behavior = (
  input: Behavior,
  context: __SerdeContext
): any => {
  return {
    ...(input.criteria !== undefined && {
      criteria: serializeAws_restJson1_1BehaviorCriteria(
        input.criteria,
        context
      )
    }),
    ...(input.metric !== undefined && { metric: input.metric }),
    ...(input.name !== undefined && { name: input.name })
  };
};

const serializeAws_restJson1_1BehaviorCriteria = (
  input: BehaviorCriteria,
  context: __SerdeContext
): any => {
  return {
    ...(input.comparisonOperator !== undefined && {
      comparisonOperator: input.comparisonOperator
    }),
    ...(input.consecutiveDatapointsToAlarm !== undefined && {
      consecutiveDatapointsToAlarm: input.consecutiveDatapointsToAlarm
    }),
    ...(input.consecutiveDatapointsToClear !== undefined && {
      consecutiveDatapointsToClear: input.consecutiveDatapointsToClear
    }),
    ...(input.durationSeconds !== undefined && {
      durationSeconds: input.durationSeconds
    }),
    ...(input.statisticalThreshold !== undefined && {
      statisticalThreshold: serializeAws_restJson1_1StatisticalThreshold(
        input.statisticalThreshold,
        context
      )
    }),
    ...(input.value !== undefined && {
      value: serializeAws_restJson1_1MetricValue(input.value, context)
    })
  };
};

const serializeAws_restJson1_1Behaviors = (
  input: Behavior[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1Behavior(entry, context));
};

const serializeAws_restJson1_1Cidrs = (
  input: string[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1MetricValue = (
  input: MetricValue,
  context: __SerdeContext
): any => {
  return {
    ...(input.cidrs !== undefined && {
      cidrs: serializeAws_restJson1_1Cidrs(input.cidrs, context)
    }),
    ...(input.count !== undefined && { count: input.count }),
    ...(input.ports !== undefined && {
      ports: serializeAws_restJson1_1Ports(input.ports, context)
    })
  };
};

const serializeAws_restJson1_1Ports = (
  input: number[],
  context: __SerdeContext
): any => {
  return input.map(entry => entry);
};

const serializeAws_restJson1_1StatisticalThreshold = (
  input: StatisticalThreshold,
  context: __SerdeContext
): any => {
  return {
    ...(input.statistic !== undefined && { statistic: input.statistic })
  };
};

const serializeAws_restJson1_1StreamFile = (
  input: StreamFile,
  context: __SerdeContext
): any => {
  return {
    ...(input.fileId !== undefined && { fileId: input.fileId }),
    ...(input.s3Location !== undefined && {
      s3Location: serializeAws_restJson1_1S3Location(input.s3Location, context)
    })
  };
};

const serializeAws_restJson1_1StreamFiles = (
  input: StreamFile[],
  context: __SerdeContext
): any => {
  return input.map(entry => serializeAws_restJson1_1StreamFile(entry, context));
};

const serializeAws_restJson1_1S3Location = (
  input: S3Location,
  context: __SerdeContext
): any => {
  return {
    ...(input.bucket !== undefined && { bucket: input.bucket }),
    ...(input.key !== undefined && { key: input.key }),
    ...(input.version !== undefined && { version: input.version })
  };
};

const deserializeAws_restJson1_1Configuration = (
  output: any,
  context: __SerdeContext
): Configuration => {
  return {
    __type: "Configuration",
    Enabled:
      output.Enabled !== undefined && output.Enabled !== null
        ? output.Enabled
        : undefined
  } as any;
};

const deserializeAws_restJson1_1EventConfigurations = (
  output: any,
  context: __SerdeContext
): { [key: string]: Configuration } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: Configuration },
      [key, value]: [EventType | string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1Configuration(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1PolicyTargets = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1Principals = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1Tag = (
  output: any,
  context: __SerdeContext
): Tag => {
  return {
    __type: "Tag",
    Key:
      output.Key !== undefined && output.Key !== null ? output.Key : undefined,
    Value:
      output.Value !== undefined && output.Value !== null
        ? output.Value
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TagList = (
  output: any,
  context: __SerdeContext
): Tag[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Tag(entry, context)
  );
};

const deserializeAws_restJson1_1Action = (
  output: any,
  context: __SerdeContext
): Action => {
  return {
    __type: "Action",
    cloudwatchAlarm:
      output.cloudwatchAlarm !== undefined && output.cloudwatchAlarm !== null
        ? deserializeAws_restJson1_1CloudwatchAlarmAction(
            output.cloudwatchAlarm,
            context
          )
        : undefined,
    cloudwatchMetric:
      output.cloudwatchMetric !== undefined && output.cloudwatchMetric !== null
        ? deserializeAws_restJson1_1CloudwatchMetricAction(
            output.cloudwatchMetric,
            context
          )
        : undefined,
    dynamoDB:
      output.dynamoDB !== undefined && output.dynamoDB !== null
        ? deserializeAws_restJson1_1DynamoDBAction(output.dynamoDB, context)
        : undefined,
    dynamoDBv2:
      output.dynamoDBv2 !== undefined && output.dynamoDBv2 !== null
        ? deserializeAws_restJson1_1DynamoDBv2Action(output.dynamoDBv2, context)
        : undefined,
    elasticsearch:
      output.elasticsearch !== undefined && output.elasticsearch !== null
        ? deserializeAws_restJson1_1ElasticsearchAction(
            output.elasticsearch,
            context
          )
        : undefined,
    firehose:
      output.firehose !== undefined && output.firehose !== null
        ? deserializeAws_restJson1_1FirehoseAction(output.firehose, context)
        : undefined,
    http:
      output.http !== undefined && output.http !== null
        ? deserializeAws_restJson1_1HttpAction(output.http, context)
        : undefined,
    iotAnalytics:
      output.iotAnalytics !== undefined && output.iotAnalytics !== null
        ? deserializeAws_restJson1_1IotAnalyticsAction(
            output.iotAnalytics,
            context
          )
        : undefined,
    iotEvents:
      output.iotEvents !== undefined && output.iotEvents !== null
        ? deserializeAws_restJson1_1IotEventsAction(output.iotEvents, context)
        : undefined,
    iotSiteWise:
      output.iotSiteWise !== undefined && output.iotSiteWise !== null
        ? deserializeAws_restJson1_1IotSiteWiseAction(
            output.iotSiteWise,
            context
          )
        : undefined,
    kinesis:
      output.kinesis !== undefined && output.kinesis !== null
        ? deserializeAws_restJson1_1KinesisAction(output.kinesis, context)
        : undefined,
    lambda:
      output.lambda !== undefined && output.lambda !== null
        ? deserializeAws_restJson1_1LambdaAction(output.lambda, context)
        : undefined,
    republish:
      output.republish !== undefined && output.republish !== null
        ? deserializeAws_restJson1_1RepublishAction(output.republish, context)
        : undefined,
    s3:
      output.s3 !== undefined && output.s3 !== null
        ? deserializeAws_restJson1_1S3Action(output.s3, context)
        : undefined,
    salesforce:
      output.salesforce !== undefined && output.salesforce !== null
        ? deserializeAws_restJson1_1SalesforceAction(output.salesforce, context)
        : undefined,
    sns:
      output.sns !== undefined && output.sns !== null
        ? deserializeAws_restJson1_1SnsAction(output.sns, context)
        : undefined,
    sqs:
      output.sqs !== undefined && output.sqs !== null
        ? deserializeAws_restJson1_1SqsAction(output.sqs, context)
        : undefined,
    stepFunctions:
      output.stepFunctions !== undefined && output.stepFunctions !== null
        ? deserializeAws_restJson1_1StepFunctionsAction(
            output.stepFunctions,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ActionList = (
  output: any,
  context: __SerdeContext
): Action[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Action(entry, context)
  );
};

const deserializeAws_restJson1_1AssetPropertyTimestamp = (
  output: any,
  context: __SerdeContext
): AssetPropertyTimestamp => {
  return {
    __type: "AssetPropertyTimestamp",
    offsetInNanos:
      output.offsetInNanos !== undefined && output.offsetInNanos !== null
        ? output.offsetInNanos
        : undefined,
    timeInSeconds:
      output.timeInSeconds !== undefined && output.timeInSeconds !== null
        ? output.timeInSeconds
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AssetPropertyValue = (
  output: any,
  context: __SerdeContext
): AssetPropertyValue => {
  return {
    __type: "AssetPropertyValue",
    quality:
      output.quality !== undefined && output.quality !== null
        ? output.quality
        : undefined,
    timestamp:
      output.timestamp !== undefined && output.timestamp !== null
        ? deserializeAws_restJson1_1AssetPropertyTimestamp(
            output.timestamp,
            context
          )
        : undefined,
    value:
      output.value !== undefined && output.value !== null
        ? deserializeAws_restJson1_1AssetPropertyVariant(output.value, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AssetPropertyValueList = (
  output: any,
  context: __SerdeContext
): AssetPropertyValue[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AssetPropertyValue(entry, context)
  );
};

const deserializeAws_restJson1_1AssetPropertyVariant = (
  output: any,
  context: __SerdeContext
): AssetPropertyVariant => {
  return {
    __type: "AssetPropertyVariant",
    booleanValue:
      output.booleanValue !== undefined && output.booleanValue !== null
        ? output.booleanValue
        : undefined,
    doubleValue:
      output.doubleValue !== undefined && output.doubleValue !== null
        ? output.doubleValue
        : undefined,
    integerValue:
      output.integerValue !== undefined && output.integerValue !== null
        ? output.integerValue
        : undefined,
    stringValue:
      output.stringValue !== undefined && output.stringValue !== null
        ? output.stringValue
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CloudwatchAlarmAction = (
  output: any,
  context: __SerdeContext
): CloudwatchAlarmAction => {
  return {
    __type: "CloudwatchAlarmAction",
    alarmName:
      output.alarmName !== undefined && output.alarmName !== null
        ? output.alarmName
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    stateReason:
      output.stateReason !== undefined && output.stateReason !== null
        ? output.stateReason
        : undefined,
    stateValue:
      output.stateValue !== undefined && output.stateValue !== null
        ? output.stateValue
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CloudwatchMetricAction = (
  output: any,
  context: __SerdeContext
): CloudwatchMetricAction => {
  return {
    __type: "CloudwatchMetricAction",
    metricName:
      output.metricName !== undefined && output.metricName !== null
        ? output.metricName
        : undefined,
    metricNamespace:
      output.metricNamespace !== undefined && output.metricNamespace !== null
        ? output.metricNamespace
        : undefined,
    metricTimestamp:
      output.metricTimestamp !== undefined && output.metricTimestamp !== null
        ? output.metricTimestamp
        : undefined,
    metricUnit:
      output.metricUnit !== undefined && output.metricUnit !== null
        ? output.metricUnit
        : undefined,
    metricValue:
      output.metricValue !== undefined && output.metricValue !== null
        ? output.metricValue
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1DynamoDBAction = (
  output: any,
  context: __SerdeContext
): DynamoDBAction => {
  return {
    __type: "DynamoDBAction",
    hashKeyField:
      output.hashKeyField !== undefined && output.hashKeyField !== null
        ? output.hashKeyField
        : undefined,
    hashKeyType:
      output.hashKeyType !== undefined && output.hashKeyType !== null
        ? output.hashKeyType
        : undefined,
    hashKeyValue:
      output.hashKeyValue !== undefined && output.hashKeyValue !== null
        ? output.hashKeyValue
        : undefined,
    operation:
      output.operation !== undefined && output.operation !== null
        ? output.operation
        : undefined,
    payloadField:
      output.payloadField !== undefined && output.payloadField !== null
        ? output.payloadField
        : undefined,
    rangeKeyField:
      output.rangeKeyField !== undefined && output.rangeKeyField !== null
        ? output.rangeKeyField
        : undefined,
    rangeKeyType:
      output.rangeKeyType !== undefined && output.rangeKeyType !== null
        ? output.rangeKeyType
        : undefined,
    rangeKeyValue:
      output.rangeKeyValue !== undefined && output.rangeKeyValue !== null
        ? output.rangeKeyValue
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    tableName:
      output.tableName !== undefined && output.tableName !== null
        ? output.tableName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1DynamoDBv2Action = (
  output: any,
  context: __SerdeContext
): DynamoDBv2Action => {
  return {
    __type: "DynamoDBv2Action",
    putItem:
      output.putItem !== undefined && output.putItem !== null
        ? deserializeAws_restJson1_1PutItemInput(output.putItem, context)
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ElasticsearchAction = (
  output: any,
  context: __SerdeContext
): ElasticsearchAction => {
  return {
    __type: "ElasticsearchAction",
    endpoint:
      output.endpoint !== undefined && output.endpoint !== null
        ? output.endpoint
        : undefined,
    id: output.id !== undefined && output.id !== null ? output.id : undefined,
    index:
      output.index !== undefined && output.index !== null
        ? output.index
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    type:
      output.type !== undefined && output.type !== null
        ? output.type
        : undefined
  } as any;
};

const deserializeAws_restJson1_1FirehoseAction = (
  output: any,
  context: __SerdeContext
): FirehoseAction => {
  return {
    __type: "FirehoseAction",
    deliveryStreamName:
      output.deliveryStreamName !== undefined &&
      output.deliveryStreamName !== null
        ? output.deliveryStreamName
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    separator:
      output.separator !== undefined && output.separator !== null
        ? output.separator
        : undefined
  } as any;
};

const deserializeAws_restJson1_1HeaderList = (
  output: any,
  context: __SerdeContext
): HttpActionHeader[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1HttpActionHeader(entry, context)
  );
};

const deserializeAws_restJson1_1HttpAction = (
  output: any,
  context: __SerdeContext
): HttpAction => {
  return {
    __type: "HttpAction",
    auth:
      output.auth !== undefined && output.auth !== null
        ? deserializeAws_restJson1_1HttpAuthorization(output.auth, context)
        : undefined,
    confirmationUrl:
      output.confirmationUrl !== undefined && output.confirmationUrl !== null
        ? output.confirmationUrl
        : undefined,
    headers:
      output.headers !== undefined && output.headers !== null
        ? deserializeAws_restJson1_1HeaderList(output.headers, context)
        : undefined,
    url:
      output.url !== undefined && output.url !== null ? output.url : undefined
  } as any;
};

const deserializeAws_restJson1_1HttpActionHeader = (
  output: any,
  context: __SerdeContext
): HttpActionHeader => {
  return {
    __type: "HttpActionHeader",
    key:
      output.key !== undefined && output.key !== null ? output.key : undefined,
    value:
      output.value !== undefined && output.value !== null
        ? output.value
        : undefined
  } as any;
};

const deserializeAws_restJson1_1HttpAuthorization = (
  output: any,
  context: __SerdeContext
): HttpAuthorization => {
  return {
    __type: "HttpAuthorization",
    sigv4:
      output.sigv4 !== undefined && output.sigv4 !== null
        ? deserializeAws_restJson1_1SigV4Authorization(output.sigv4, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1HttpUrlDestinationProperties = (
  output: any,
  context: __SerdeContext
): HttpUrlDestinationProperties => {
  return {
    __type: "HttpUrlDestinationProperties",
    confirmationUrl:
      output.confirmationUrl !== undefined && output.confirmationUrl !== null
        ? output.confirmationUrl
        : undefined
  } as any;
};

const deserializeAws_restJson1_1HttpUrlDestinationSummary = (
  output: any,
  context: __SerdeContext
): HttpUrlDestinationSummary => {
  return {
    __type: "HttpUrlDestinationSummary",
    confirmationUrl:
      output.confirmationUrl !== undefined && output.confirmationUrl !== null
        ? output.confirmationUrl
        : undefined
  } as any;
};

const deserializeAws_restJson1_1IotAnalyticsAction = (
  output: any,
  context: __SerdeContext
): IotAnalyticsAction => {
  return {
    __type: "IotAnalyticsAction",
    channelArn:
      output.channelArn !== undefined && output.channelArn !== null
        ? output.channelArn
        : undefined,
    channelName:
      output.channelName !== undefined && output.channelName !== null
        ? output.channelName
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1IotEventsAction = (
  output: any,
  context: __SerdeContext
): IotEventsAction => {
  return {
    __type: "IotEventsAction",
    inputName:
      output.inputName !== undefined && output.inputName !== null
        ? output.inputName
        : undefined,
    messageId:
      output.messageId !== undefined && output.messageId !== null
        ? output.messageId
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1IotSiteWiseAction = (
  output: any,
  context: __SerdeContext
): IotSiteWiseAction => {
  return {
    __type: "IotSiteWiseAction",
    putAssetPropertyValueEntries:
      output.putAssetPropertyValueEntries !== undefined &&
      output.putAssetPropertyValueEntries !== null
        ? deserializeAws_restJson1_1PutAssetPropertyValueEntryList(
            output.putAssetPropertyValueEntries,
            context
          )
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1KinesisAction = (
  output: any,
  context: __SerdeContext
): KinesisAction => {
  return {
    __type: "KinesisAction",
    partitionKey:
      output.partitionKey !== undefined && output.partitionKey !== null
        ? output.partitionKey
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    streamName:
      output.streamName !== undefined && output.streamName !== null
        ? output.streamName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1LambdaAction = (
  output: any,
  context: __SerdeContext
): LambdaAction => {
  return {
    __type: "LambdaAction",
    functionArn:
      output.functionArn !== undefined && output.functionArn !== null
        ? output.functionArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1LogTarget = (
  output: any,
  context: __SerdeContext
): LogTarget => {
  return {
    __type: "LogTarget",
    targetName:
      output.targetName !== undefined && output.targetName !== null
        ? output.targetName
        : undefined,
    targetType:
      output.targetType !== undefined && output.targetType !== null
        ? output.targetType
        : undefined
  } as any;
};

const deserializeAws_restJson1_1LogTargetConfiguration = (
  output: any,
  context: __SerdeContext
): LogTargetConfiguration => {
  return {
    __type: "LogTargetConfiguration",
    logLevel:
      output.logLevel !== undefined && output.logLevel !== null
        ? output.logLevel
        : undefined,
    logTarget:
      output.logTarget !== undefined && output.logTarget !== null
        ? deserializeAws_restJson1_1LogTarget(output.logTarget, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1LogTargetConfigurations = (
  output: any,
  context: __SerdeContext
): LogTargetConfiguration[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1LogTargetConfiguration(entry, context)
  );
};

const deserializeAws_restJson1_1PutAssetPropertyValueEntry = (
  output: any,
  context: __SerdeContext
): PutAssetPropertyValueEntry => {
  return {
    __type: "PutAssetPropertyValueEntry",
    assetId:
      output.assetId !== undefined && output.assetId !== null
        ? output.assetId
        : undefined,
    entryId:
      output.entryId !== undefined && output.entryId !== null
        ? output.entryId
        : undefined,
    propertyAlias:
      output.propertyAlias !== undefined && output.propertyAlias !== null
        ? output.propertyAlias
        : undefined,
    propertyId:
      output.propertyId !== undefined && output.propertyId !== null
        ? output.propertyId
        : undefined,
    propertyValues:
      output.propertyValues !== undefined && output.propertyValues !== null
        ? deserializeAws_restJson1_1AssetPropertyValueList(
            output.propertyValues,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PutAssetPropertyValueEntryList = (
  output: any,
  context: __SerdeContext
): PutAssetPropertyValueEntry[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1PutAssetPropertyValueEntry(entry, context)
  );
};

const deserializeAws_restJson1_1PutItemInput = (
  output: any,
  context: __SerdeContext
): PutItemInput => {
  return {
    __type: "PutItemInput",
    tableName:
      output.tableName !== undefined && output.tableName !== null
        ? output.tableName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1RepublishAction = (
  output: any,
  context: __SerdeContext
): RepublishAction => {
  return {
    __type: "RepublishAction",
    qos:
      output.qos !== undefined && output.qos !== null ? output.qos : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    topic:
      output.topic !== undefined && output.topic !== null
        ? output.topic
        : undefined
  } as any;
};

const deserializeAws_restJson1_1S3Action = (
  output: any,
  context: __SerdeContext
): S3Action => {
  return {
    __type: "S3Action",
    bucketName:
      output.bucketName !== undefined && output.bucketName !== null
        ? output.bucketName
        : undefined,
    cannedAcl:
      output.cannedAcl !== undefined && output.cannedAcl !== null
        ? output.cannedAcl
        : undefined,
    key:
      output.key !== undefined && output.key !== null ? output.key : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SalesforceAction = (
  output: any,
  context: __SerdeContext
): SalesforceAction => {
  return {
    __type: "SalesforceAction",
    token:
      output.token !== undefined && output.token !== null
        ? output.token
        : undefined,
    url:
      output.url !== undefined && output.url !== null ? output.url : undefined
  } as any;
};

const deserializeAws_restJson1_1SigV4Authorization = (
  output: any,
  context: __SerdeContext
): SigV4Authorization => {
  return {
    __type: "SigV4Authorization",
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    serviceName:
      output.serviceName !== undefined && output.serviceName !== null
        ? output.serviceName
        : undefined,
    signingRegion:
      output.signingRegion !== undefined && output.signingRegion !== null
        ? output.signingRegion
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SnsAction = (
  output: any,
  context: __SerdeContext
): SnsAction => {
  return {
    __type: "SnsAction",
    messageFormat:
      output.messageFormat !== undefined && output.messageFormat !== null
        ? output.messageFormat
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    targetArn:
      output.targetArn !== undefined && output.targetArn !== null
        ? output.targetArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SqsAction = (
  output: any,
  context: __SerdeContext
): SqsAction => {
  return {
    __type: "SqsAction",
    queueUrl:
      output.queueUrl !== undefined && output.queueUrl !== null
        ? output.queueUrl
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    useBase64:
      output.useBase64 !== undefined && output.useBase64 !== null
        ? output.useBase64
        : undefined
  } as any;
};

const deserializeAws_restJson1_1StepFunctionsAction = (
  output: any,
  context: __SerdeContext
): StepFunctionsAction => {
  return {
    __type: "StepFunctionsAction",
    executionNamePrefix:
      output.executionNamePrefix !== undefined &&
      output.executionNamePrefix !== null
        ? output.executionNamePrefix
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    stateMachineName:
      output.stateMachineName !== undefined && output.stateMachineName !== null
        ? output.stateMachineName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TopicRule = (
  output: any,
  context: __SerdeContext
): TopicRule => {
  return {
    __type: "TopicRule",
    actions:
      output.actions !== undefined && output.actions !== null
        ? deserializeAws_restJson1_1ActionList(output.actions, context)
        : undefined,
    awsIotSqlVersion:
      output.awsIotSqlVersion !== undefined && output.awsIotSqlVersion !== null
        ? output.awsIotSqlVersion
        : undefined,
    createdAt:
      output.createdAt !== undefined && output.createdAt !== null
        ? new Date(Math.round(output.createdAt * 1000))
        : undefined,
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    errorAction:
      output.errorAction !== undefined && output.errorAction !== null
        ? deserializeAws_restJson1_1Action(output.errorAction, context)
        : undefined,
    ruleDisabled:
      output.ruleDisabled !== undefined && output.ruleDisabled !== null
        ? output.ruleDisabled
        : undefined,
    ruleName:
      output.ruleName !== undefined && output.ruleName !== null
        ? output.ruleName
        : undefined,
    sql:
      output.sql !== undefined && output.sql !== null ? output.sql : undefined
  } as any;
};

const deserializeAws_restJson1_1TopicRuleDestination = (
  output: any,
  context: __SerdeContext
): TopicRuleDestination => {
  return {
    __type: "TopicRuleDestination",
    arn:
      output.arn !== undefined && output.arn !== null ? output.arn : undefined,
    httpUrlProperties:
      output.httpUrlProperties !== undefined &&
      output.httpUrlProperties !== null
        ? deserializeAws_restJson1_1HttpUrlDestinationProperties(
            output.httpUrlProperties,
            context
          )
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    statusReason:
      output.statusReason !== undefined && output.statusReason !== null
        ? output.statusReason
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TopicRuleDestinationSummaries = (
  output: any,
  context: __SerdeContext
): TopicRuleDestinationSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1TopicRuleDestinationSummary(entry, context)
  );
};

const deserializeAws_restJson1_1TopicRuleDestinationSummary = (
  output: any,
  context: __SerdeContext
): TopicRuleDestinationSummary => {
  return {
    __type: "TopicRuleDestinationSummary",
    arn:
      output.arn !== undefined && output.arn !== null ? output.arn : undefined,
    httpUrlSummary:
      output.httpUrlSummary !== undefined && output.httpUrlSummary !== null
        ? deserializeAws_restJson1_1HttpUrlDestinationSummary(
            output.httpUrlSummary,
            context
          )
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    statusReason:
      output.statusReason !== undefined && output.statusReason !== null
        ? output.statusReason
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TopicRuleList = (
  output: any,
  context: __SerdeContext
): TopicRuleListItem[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1TopicRuleListItem(entry, context)
  );
};

const deserializeAws_restJson1_1TopicRuleListItem = (
  output: any,
  context: __SerdeContext
): TopicRuleListItem => {
  return {
    __type: "TopicRuleListItem",
    createdAt:
      output.createdAt !== undefined && output.createdAt !== null
        ? new Date(Math.round(output.createdAt * 1000))
        : undefined,
    ruleArn:
      output.ruleArn !== undefined && output.ruleArn !== null
        ? output.ruleArn
        : undefined,
    ruleDisabled:
      output.ruleDisabled !== undefined && output.ruleDisabled !== null
        ? output.ruleDisabled
        : undefined,
    ruleName:
      output.ruleName !== undefined && output.ruleName !== null
        ? output.ruleName
        : undefined,
    topicPattern:
      output.topicPattern !== undefined && output.topicPattern !== null
        ? output.topicPattern
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Allowed = (
  output: any,
  context: __SerdeContext
): Allowed => {
  return {
    __type: "Allowed",
    policies:
      output.policies !== undefined && output.policies !== null
        ? deserializeAws_restJson1_1Policies(output.policies, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuthInfo = (
  output: any,
  context: __SerdeContext
): AuthInfo => {
  return {
    __type: "AuthInfo",
    actionType:
      output.actionType !== undefined && output.actionType !== null
        ? output.actionType
        : undefined,
    resources:
      output.resources !== undefined && output.resources !== null
        ? deserializeAws_restJson1_1Resources(output.resources, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuthResult = (
  output: any,
  context: __SerdeContext
): AuthResult => {
  return {
    __type: "AuthResult",
    allowed:
      output.allowed !== undefined && output.allowed !== null
        ? deserializeAws_restJson1_1Allowed(output.allowed, context)
        : undefined,
    authDecision:
      output.authDecision !== undefined && output.authDecision !== null
        ? output.authDecision
        : undefined,
    authInfo:
      output.authInfo !== undefined && output.authInfo !== null
        ? deserializeAws_restJson1_1AuthInfo(output.authInfo, context)
        : undefined,
    denied:
      output.denied !== undefined && output.denied !== null
        ? deserializeAws_restJson1_1Denied(output.denied, context)
        : undefined,
    missingContextValues:
      output.missingContextValues !== undefined &&
      output.missingContextValues !== null
        ? deserializeAws_restJson1_1MissingContextValues(
            output.missingContextValues,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuthResults = (
  output: any,
  context: __SerdeContext
): AuthResult[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuthResult(entry, context)
  );
};

const deserializeAws_restJson1_1AuthorizerConfig = (
  output: any,
  context: __SerdeContext
): AuthorizerConfig => {
  return {
    __type: "AuthorizerConfig",
    allowAuthorizerOverride:
      output.allowAuthorizerOverride !== undefined &&
      output.allowAuthorizerOverride !== null
        ? output.allowAuthorizerOverride
        : undefined,
    defaultAuthorizerName:
      output.defaultAuthorizerName !== undefined &&
      output.defaultAuthorizerName !== null
        ? output.defaultAuthorizerName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuthorizerDescription = (
  output: any,
  context: __SerdeContext
): AuthorizerDescription => {
  return {
    __type: "AuthorizerDescription",
    authorizerArn:
      output.authorizerArn !== undefined && output.authorizerArn !== null
        ? output.authorizerArn
        : undefined,
    authorizerFunctionArn:
      output.authorizerFunctionArn !== undefined &&
      output.authorizerFunctionArn !== null
        ? output.authorizerFunctionArn
        : undefined,
    authorizerName:
      output.authorizerName !== undefined && output.authorizerName !== null
        ? output.authorizerName
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    signingDisabled:
      output.signingDisabled !== undefined && output.signingDisabled !== null
        ? output.signingDisabled
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    tokenKeyName:
      output.tokenKeyName !== undefined && output.tokenKeyName !== null
        ? output.tokenKeyName
        : undefined,
    tokenSigningPublicKeys:
      output.tokenSigningPublicKeys !== undefined &&
      output.tokenSigningPublicKeys !== null
        ? deserializeAws_restJson1_1PublicKeyMap(
            output.tokenSigningPublicKeys,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuthorizerSummary = (
  output: any,
  context: __SerdeContext
): AuthorizerSummary => {
  return {
    __type: "AuthorizerSummary",
    authorizerArn:
      output.authorizerArn !== undefined && output.authorizerArn !== null
        ? output.authorizerArn
        : undefined,
    authorizerName:
      output.authorizerName !== undefined && output.authorizerName !== null
        ? output.authorizerName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Authorizers = (
  output: any,
  context: __SerdeContext
): AuthorizerSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuthorizerSummary(entry, context)
  );
};

const deserializeAws_restJson1_1CACertificate = (
  output: any,
  context: __SerdeContext
): CACertificate => {
  return {
    __type: "CACertificate",
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificateId:
      output.certificateId !== undefined && output.certificateId !== null
        ? output.certificateId
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CACertificateDescription = (
  output: any,
  context: __SerdeContext
): CACertificateDescription => {
  return {
    __type: "CACertificateDescription",
    autoRegistrationStatus:
      output.autoRegistrationStatus !== undefined &&
      output.autoRegistrationStatus !== null
        ? output.autoRegistrationStatus
        : undefined,
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificateId:
      output.certificateId !== undefined && output.certificateId !== null
        ? output.certificateId
        : undefined,
    certificatePem:
      output.certificatePem !== undefined && output.certificatePem !== null
        ? output.certificatePem
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    customerVersion:
      output.customerVersion !== undefined && output.customerVersion !== null
        ? output.customerVersion
        : undefined,
    generationId:
      output.generationId !== undefined && output.generationId !== null
        ? output.generationId
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    ownedBy:
      output.ownedBy !== undefined && output.ownedBy !== null
        ? output.ownedBy
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    validity:
      output.validity !== undefined && output.validity !== null
        ? deserializeAws_restJson1_1CertificateValidity(
            output.validity,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CACertificates = (
  output: any,
  context: __SerdeContext
): CACertificate[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1CACertificate(entry, context)
  );
};

const deserializeAws_restJson1_1Certificate = (
  output: any,
  context: __SerdeContext
): Certificate => {
  return {
    __type: "Certificate",
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificateId:
      output.certificateId !== undefined && output.certificateId !== null
        ? output.certificateId
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CertificateDescription = (
  output: any,
  context: __SerdeContext
): CertificateDescription => {
  return {
    __type: "CertificateDescription",
    caCertificateId:
      output.caCertificateId !== undefined && output.caCertificateId !== null
        ? output.caCertificateId
        : undefined,
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificateId:
      output.certificateId !== undefined && output.certificateId !== null
        ? output.certificateId
        : undefined,
    certificatePem:
      output.certificatePem !== undefined && output.certificatePem !== null
        ? output.certificatePem
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    customerVersion:
      output.customerVersion !== undefined && output.customerVersion !== null
        ? output.customerVersion
        : undefined,
    generationId:
      output.generationId !== undefined && output.generationId !== null
        ? output.generationId
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    ownedBy:
      output.ownedBy !== undefined && output.ownedBy !== null
        ? output.ownedBy
        : undefined,
    previousOwnedBy:
      output.previousOwnedBy !== undefined && output.previousOwnedBy !== null
        ? output.previousOwnedBy
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    transferData:
      output.transferData !== undefined && output.transferData !== null
        ? deserializeAws_restJson1_1TransferData(output.transferData, context)
        : undefined,
    validity:
      output.validity !== undefined && output.validity !== null
        ? deserializeAws_restJson1_1CertificateValidity(
            output.validity,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CertificateValidity = (
  output: any,
  context: __SerdeContext
): CertificateValidity => {
  return {
    __type: "CertificateValidity",
    notAfter:
      output.notAfter !== undefined && output.notAfter !== null
        ? new Date(Math.round(output.notAfter * 1000))
        : undefined,
    notBefore:
      output.notBefore !== undefined && output.notBefore !== null
        ? new Date(Math.round(output.notBefore * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Certificates = (
  output: any,
  context: __SerdeContext
): Certificate[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Certificate(entry, context)
  );
};

const deserializeAws_restJson1_1Denied = (
  output: any,
  context: __SerdeContext
): Denied => {
  return {
    __type: "Denied",
    explicitDeny:
      output.explicitDeny !== undefined && output.explicitDeny !== null
        ? deserializeAws_restJson1_1ExplicitDeny(output.explicitDeny, context)
        : undefined,
    implicitDeny:
      output.implicitDeny !== undefined && output.implicitDeny !== null
        ? deserializeAws_restJson1_1ImplicitDeny(output.implicitDeny, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1DomainConfigurationSummary = (
  output: any,
  context: __SerdeContext
): DomainConfigurationSummary => {
  return {
    __type: "DomainConfigurationSummary",
    domainConfigurationArn:
      output.domainConfigurationArn !== undefined &&
      output.domainConfigurationArn !== null
        ? output.domainConfigurationArn
        : undefined,
    domainConfigurationName:
      output.domainConfigurationName !== undefined &&
      output.domainConfigurationName !== null
        ? output.domainConfigurationName
        : undefined,
    serviceType:
      output.serviceType !== undefined && output.serviceType !== null
        ? output.serviceType
        : undefined
  } as any;
};

const deserializeAws_restJson1_1DomainConfigurations = (
  output: any,
  context: __SerdeContext
): DomainConfigurationSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1DomainConfigurationSummary(entry, context)
  );
};

const deserializeAws_restJson1_1EffectivePolicies = (
  output: any,
  context: __SerdeContext
): EffectivePolicy[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1EffectivePolicy(entry, context)
  );
};

const deserializeAws_restJson1_1EffectivePolicy = (
  output: any,
  context: __SerdeContext
): EffectivePolicy => {
  return {
    __type: "EffectivePolicy",
    policyArn:
      output.policyArn !== undefined && output.policyArn !== null
        ? output.policyArn
        : undefined,
    policyDocument:
      output.policyDocument !== undefined && output.policyDocument !== null
        ? output.policyDocument
        : undefined,
    policyName:
      output.policyName !== undefined && output.policyName !== null
        ? output.policyName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ExplicitDeny = (
  output: any,
  context: __SerdeContext
): ExplicitDeny => {
  return {
    __type: "ExplicitDeny",
    policies:
      output.policies !== undefined && output.policies !== null
        ? deserializeAws_restJson1_1Policies(output.policies, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ImplicitDeny = (
  output: any,
  context: __SerdeContext
): ImplicitDeny => {
  return {
    __type: "ImplicitDeny",
    policies:
      output.policies !== undefined && output.policies !== null
        ? deserializeAws_restJson1_1Policies(output.policies, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1KeyPair = (
  output: any,
  context: __SerdeContext
): KeyPair => {
  return {
    __type: "KeyPair",
    PrivateKey:
      output.PrivateKey !== undefined && output.PrivateKey !== null
        ? output.PrivateKey
        : undefined,
    PublicKey:
      output.PublicKey !== undefined && output.PublicKey !== null
        ? output.PublicKey
        : undefined
  } as any;
};

const deserializeAws_restJson1_1MissingContextValues = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1OutgoingCertificate = (
  output: any,
  context: __SerdeContext
): OutgoingCertificate => {
  return {
    __type: "OutgoingCertificate",
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificateId:
      output.certificateId !== undefined && output.certificateId !== null
        ? output.certificateId
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    transferDate:
      output.transferDate !== undefined && output.transferDate !== null
        ? new Date(Math.round(output.transferDate * 1000))
        : undefined,
    transferMessage:
      output.transferMessage !== undefined && output.transferMessage !== null
        ? output.transferMessage
        : undefined,
    transferredTo:
      output.transferredTo !== undefined && output.transferredTo !== null
        ? output.transferredTo
        : undefined
  } as any;
};

const deserializeAws_restJson1_1OutgoingCertificates = (
  output: any,
  context: __SerdeContext
): OutgoingCertificate[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1OutgoingCertificate(entry, context)
  );
};

const deserializeAws_restJson1_1Policies = (
  output: any,
  context: __SerdeContext
): Policy[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Policy(entry, context)
  );
};

const deserializeAws_restJson1_1Policy = (
  output: any,
  context: __SerdeContext
): Policy => {
  return {
    __type: "Policy",
    policyArn:
      output.policyArn !== undefined && output.policyArn !== null
        ? output.policyArn
        : undefined,
    policyName:
      output.policyName !== undefined && output.policyName !== null
        ? output.policyName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PolicyDocuments = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1PolicyVersion = (
  output: any,
  context: __SerdeContext
): PolicyVersion => {
  return {
    __type: "PolicyVersion",
    createDate:
      output.createDate !== undefined && output.createDate !== null
        ? new Date(Math.round(output.createDate * 1000))
        : undefined,
    isDefaultVersion:
      output.isDefaultVersion !== undefined && output.isDefaultVersion !== null
        ? output.isDefaultVersion
        : undefined,
    versionId:
      output.versionId !== undefined && output.versionId !== null
        ? output.versionId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PolicyVersions = (
  output: any,
  context: __SerdeContext
): PolicyVersion[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1PolicyVersion(entry, context)
  );
};

const deserializeAws_restJson1_1ProvisioningTemplateListing = (
  output: any,
  context: __SerdeContext
): ProvisioningTemplateSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ProvisioningTemplateSummary(entry, context)
  );
};

const deserializeAws_restJson1_1ProvisioningTemplateSummary = (
  output: any,
  context: __SerdeContext
): ProvisioningTemplateSummary => {
  return {
    __type: "ProvisioningTemplateSummary",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    enabled:
      output.enabled !== undefined && output.enabled !== null
        ? output.enabled
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    templateArn:
      output.templateArn !== undefined && output.templateArn !== null
        ? output.templateArn
        : undefined,
    templateName:
      output.templateName !== undefined && output.templateName !== null
        ? output.templateName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ProvisioningTemplateVersionListing = (
  output: any,
  context: __SerdeContext
): ProvisioningTemplateVersionSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ProvisioningTemplateVersionSummary(entry, context)
  );
};

const deserializeAws_restJson1_1ProvisioningTemplateVersionSummary = (
  output: any,
  context: __SerdeContext
): ProvisioningTemplateVersionSummary => {
  return {
    __type: "ProvisioningTemplateVersionSummary",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    isDefaultVersion:
      output.isDefaultVersion !== undefined && output.isDefaultVersion !== null
        ? output.isDefaultVersion
        : undefined,
    versionId:
      output.versionId !== undefined && output.versionId !== null
        ? output.versionId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PublicKeyMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1RegistrationConfig = (
  output: any,
  context: __SerdeContext
): RegistrationConfig => {
  return {
    __type: "RegistrationConfig",
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    templateBody:
      output.templateBody !== undefined && output.templateBody !== null
        ? output.templateBody
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ResourceArns = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1Resources = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1RoleAliasDescription = (
  output: any,
  context: __SerdeContext
): RoleAliasDescription => {
  return {
    __type: "RoleAliasDescription",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    credentialDurationSeconds:
      output.credentialDurationSeconds !== undefined &&
      output.credentialDurationSeconds !== null
        ? output.credentialDurationSeconds
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    owner:
      output.owner !== undefined && output.owner !== null
        ? output.owner
        : undefined,
    roleAlias:
      output.roleAlias !== undefined && output.roleAlias !== null
        ? output.roleAlias
        : undefined,
    roleAliasArn:
      output.roleAliasArn !== undefined && output.roleAliasArn !== null
        ? output.roleAliasArn
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1RoleAliases = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1ServerCertificateSummary = (
  output: any,
  context: __SerdeContext
): ServerCertificateSummary => {
  return {
    __type: "ServerCertificateSummary",
    serverCertificateArn:
      output.serverCertificateArn !== undefined &&
      output.serverCertificateArn !== null
        ? output.serverCertificateArn
        : undefined,
    serverCertificateStatus:
      output.serverCertificateStatus !== undefined &&
      output.serverCertificateStatus !== null
        ? output.serverCertificateStatus
        : undefined,
    serverCertificateStatusDetail:
      output.serverCertificateStatusDetail !== undefined &&
      output.serverCertificateStatusDetail !== null
        ? output.serverCertificateStatusDetail
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ServerCertificates = (
  output: any,
  context: __SerdeContext
): ServerCertificateSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ServerCertificateSummary(entry, context)
  );
};

const deserializeAws_restJson1_1TransferData = (
  output: any,
  context: __SerdeContext
): TransferData => {
  return {
    __type: "TransferData",
    acceptDate:
      output.acceptDate !== undefined && output.acceptDate !== null
        ? new Date(Math.round(output.acceptDate * 1000))
        : undefined,
    rejectDate:
      output.rejectDate !== undefined && output.rejectDate !== null
        ? new Date(Math.round(output.rejectDate * 1000))
        : undefined,
    rejectReason:
      output.rejectReason !== undefined && output.rejectReason !== null
        ? output.rejectReason
        : undefined,
    transferDate:
      output.transferDate !== undefined && output.transferDate !== null
        ? new Date(Math.round(output.transferDate * 1000))
        : undefined,
    transferMessage:
      output.transferMessage !== undefined && output.transferMessage !== null
        ? output.transferMessage
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Field = (
  output: any,
  context: __SerdeContext
): Field => {
  return {
    __type: "Field",
    name:
      output.name !== undefined && output.name !== null
        ? output.name
        : undefined,
    type:
      output.type !== undefined && output.type !== null
        ? output.type
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Fields = (
  output: any,
  context: __SerdeContext
): Field[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Field(entry, context)
  );
};

const deserializeAws_restJson1_1IndexNamesList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1PercentPair = (
  output: any,
  context: __SerdeContext
): PercentPair => {
  return {
    __type: "PercentPair",
    percent:
      output.percent !== undefined && output.percent !== null
        ? output.percent
        : undefined,
    value:
      output.value !== undefined && output.value !== null
        ? output.value
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Percentiles = (
  output: any,
  context: __SerdeContext
): PercentPair[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1PercentPair(entry, context)
  );
};

const deserializeAws_restJson1_1Statistics = (
  output: any,
  context: __SerdeContext
): Statistics => {
  return {
    __type: "Statistics",
    average:
      output.average !== undefined && output.average !== null
        ? output.average
        : undefined,
    count:
      output.count !== undefined && output.count !== null
        ? output.count
        : undefined,
    maximum:
      output.maximum !== undefined && output.maximum !== null
        ? output.maximum
        : undefined,
    minimum:
      output.minimum !== undefined && output.minimum !== null
        ? output.minimum
        : undefined,
    stdDeviation:
      output.stdDeviation !== undefined && output.stdDeviation !== null
        ? output.stdDeviation
        : undefined,
    sum:
      output.sum !== undefined && output.sum !== null ? output.sum : undefined,
    sumOfSquares:
      output.sumOfSquares !== undefined && output.sumOfSquares !== null
        ? output.sumOfSquares
        : undefined,
    variance:
      output.variance !== undefined && output.variance !== null
        ? output.variance
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingConnectivity = (
  output: any,
  context: __SerdeContext
): ThingConnectivity => {
  return {
    __type: "ThingConnectivity",
    connected:
      output.connected !== undefined && output.connected !== null
        ? output.connected
        : undefined,
    timestamp:
      output.timestamp !== undefined && output.timestamp !== null
        ? output.timestamp
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingDocument = (
  output: any,
  context: __SerdeContext
): ThingDocument => {
  return {
    __type: "ThingDocument",
    attributes:
      output.attributes !== undefined && output.attributes !== null
        ? deserializeAws_restJson1_1Attributes(output.attributes, context)
        : undefined,
    connectivity:
      output.connectivity !== undefined && output.connectivity !== null
        ? deserializeAws_restJson1_1ThingConnectivity(
            output.connectivity,
            context
          )
        : undefined,
    shadow:
      output.shadow !== undefined && output.shadow !== null
        ? output.shadow
        : undefined,
    thingGroupNames:
      output.thingGroupNames !== undefined && output.thingGroupNames !== null
        ? deserializeAws_restJson1_1ThingGroupNameList(
            output.thingGroupNames,
            context
          )
        : undefined,
    thingId:
      output.thingId !== undefined && output.thingId !== null
        ? output.thingId
        : undefined,
    thingName:
      output.thingName !== undefined && output.thingName !== null
        ? output.thingName
        : undefined,
    thingTypeName:
      output.thingTypeName !== undefined && output.thingTypeName !== null
        ? output.thingTypeName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingDocumentList = (
  output: any,
  context: __SerdeContext
): ThingDocument[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ThingDocument(entry, context)
  );
};

const deserializeAws_restJson1_1ThingGroupDocument = (
  output: any,
  context: __SerdeContext
): ThingGroupDocument => {
  return {
    __type: "ThingGroupDocument",
    attributes:
      output.attributes !== undefined && output.attributes !== null
        ? deserializeAws_restJson1_1Attributes(output.attributes, context)
        : undefined,
    parentGroupNames:
      output.parentGroupNames !== undefined && output.parentGroupNames !== null
        ? deserializeAws_restJson1_1ThingGroupNameList(
            output.parentGroupNames,
            context
          )
        : undefined,
    thingGroupDescription:
      output.thingGroupDescription !== undefined &&
      output.thingGroupDescription !== null
        ? output.thingGroupDescription
        : undefined,
    thingGroupId:
      output.thingGroupId !== undefined && output.thingGroupId !== null
        ? output.thingGroupId
        : undefined,
    thingGroupName:
      output.thingGroupName !== undefined && output.thingGroupName !== null
        ? output.thingGroupName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingGroupDocumentList = (
  output: any,
  context: __SerdeContext
): ThingGroupDocument[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ThingGroupDocument(entry, context)
  );
};

const deserializeAws_restJson1_1ThingGroupIndexingConfiguration = (
  output: any,
  context: __SerdeContext
): ThingGroupIndexingConfiguration => {
  return {
    __type: "ThingGroupIndexingConfiguration",
    customFields:
      output.customFields !== undefined && output.customFields !== null
        ? deserializeAws_restJson1_1Fields(output.customFields, context)
        : undefined,
    managedFields:
      output.managedFields !== undefined && output.managedFields !== null
        ? deserializeAws_restJson1_1Fields(output.managedFields, context)
        : undefined,
    thingGroupIndexingMode:
      output.thingGroupIndexingMode !== undefined &&
      output.thingGroupIndexingMode !== null
        ? output.thingGroupIndexingMode
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingGroupNameList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1ThingIndexingConfiguration = (
  output: any,
  context: __SerdeContext
): ThingIndexingConfiguration => {
  return {
    __type: "ThingIndexingConfiguration",
    customFields:
      output.customFields !== undefined && output.customFields !== null
        ? deserializeAws_restJson1_1Fields(output.customFields, context)
        : undefined,
    managedFields:
      output.managedFields !== undefined && output.managedFields !== null
        ? deserializeAws_restJson1_1Fields(output.managedFields, context)
        : undefined,
    thingConnectivityIndexingMode:
      output.thingConnectivityIndexingMode !== undefined &&
      output.thingConnectivityIndexingMode !== null
        ? output.thingConnectivityIndexingMode
        : undefined,
    thingIndexingMode:
      output.thingIndexingMode !== undefined &&
      output.thingIndexingMode !== null
        ? output.thingIndexingMode
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AbortConfig = (
  output: any,
  context: __SerdeContext
): AbortConfig => {
  return {
    __type: "AbortConfig",
    criteriaList:
      output.criteriaList !== undefined && output.criteriaList !== null
        ? deserializeAws_restJson1_1AbortCriteriaList(
            output.criteriaList,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AbortCriteria = (
  output: any,
  context: __SerdeContext
): AbortCriteria => {
  return {
    __type: "AbortCriteria",
    action:
      output.action !== undefined && output.action !== null
        ? output.action
        : undefined,
    failureType:
      output.failureType !== undefined && output.failureType !== null
        ? output.failureType
        : undefined,
    minNumberOfExecutedThings:
      output.minNumberOfExecutedThings !== undefined &&
      output.minNumberOfExecutedThings !== null
        ? output.minNumberOfExecutedThings
        : undefined,
    thresholdPercentage:
      output.thresholdPercentage !== undefined &&
      output.thresholdPercentage !== null
        ? output.thresholdPercentage
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AbortCriteriaList = (
  output: any,
  context: __SerdeContext
): AbortCriteria[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AbortCriteria(entry, context)
  );
};

const deserializeAws_restJson1_1ExponentialRolloutRate = (
  output: any,
  context: __SerdeContext
): ExponentialRolloutRate => {
  return {
    __type: "ExponentialRolloutRate",
    baseRatePerMinute:
      output.baseRatePerMinute !== undefined &&
      output.baseRatePerMinute !== null
        ? output.baseRatePerMinute
        : undefined,
    incrementFactor:
      output.incrementFactor !== undefined && output.incrementFactor !== null
        ? output.incrementFactor
        : undefined,
    rateIncreaseCriteria:
      output.rateIncreaseCriteria !== undefined &&
      output.rateIncreaseCriteria !== null
        ? deserializeAws_restJson1_1RateIncreaseCriteria(
            output.rateIncreaseCriteria,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Job = (
  output: any,
  context: __SerdeContext
): Job => {
  return {
    __type: "Job",
    abortConfig:
      output.abortConfig !== undefined && output.abortConfig !== null
        ? deserializeAws_restJson1_1AbortConfig(output.abortConfig, context)
        : undefined,
    comment:
      output.comment !== undefined && output.comment !== null
        ? output.comment
        : undefined,
    completedAt:
      output.completedAt !== undefined && output.completedAt !== null
        ? new Date(Math.round(output.completedAt * 1000))
        : undefined,
    createdAt:
      output.createdAt !== undefined && output.createdAt !== null
        ? new Date(Math.round(output.createdAt * 1000))
        : undefined,
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    forceCanceled:
      output.forceCanceled !== undefined && output.forceCanceled !== null
        ? output.forceCanceled
        : undefined,
    jobArn:
      output.jobArn !== undefined && output.jobArn !== null
        ? output.jobArn
        : undefined,
    jobExecutionsRolloutConfig:
      output.jobExecutionsRolloutConfig !== undefined &&
      output.jobExecutionsRolloutConfig !== null
        ? deserializeAws_restJson1_1JobExecutionsRolloutConfig(
            output.jobExecutionsRolloutConfig,
            context
          )
        : undefined,
    jobId:
      output.jobId !== undefined && output.jobId !== null
        ? output.jobId
        : undefined,
    jobProcessDetails:
      output.jobProcessDetails !== undefined &&
      output.jobProcessDetails !== null
        ? deserializeAws_restJson1_1JobProcessDetails(
            output.jobProcessDetails,
            context
          )
        : undefined,
    lastUpdatedAt:
      output.lastUpdatedAt !== undefined && output.lastUpdatedAt !== null
        ? new Date(Math.round(output.lastUpdatedAt * 1000))
        : undefined,
    presignedUrlConfig:
      output.presignedUrlConfig !== undefined &&
      output.presignedUrlConfig !== null
        ? deserializeAws_restJson1_1PresignedUrlConfig(
            output.presignedUrlConfig,
            context
          )
        : undefined,
    reasonCode:
      output.reasonCode !== undefined && output.reasonCode !== null
        ? output.reasonCode
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    targetSelection:
      output.targetSelection !== undefined && output.targetSelection !== null
        ? output.targetSelection
        : undefined,
    targets:
      output.targets !== undefined && output.targets !== null
        ? deserializeAws_restJson1_1JobTargets(output.targets, context)
        : undefined,
    timeoutConfig:
      output.timeoutConfig !== undefined && output.timeoutConfig !== null
        ? deserializeAws_restJson1_1TimeoutConfig(output.timeoutConfig, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecution = (
  output: any,
  context: __SerdeContext
): JobExecution => {
  return {
    __type: "JobExecution",
    approximateSecondsBeforeTimedOut:
      output.approximateSecondsBeforeTimedOut !== undefined &&
      output.approximateSecondsBeforeTimedOut !== null
        ? output.approximateSecondsBeforeTimedOut
        : undefined,
    executionNumber:
      output.executionNumber !== undefined && output.executionNumber !== null
        ? output.executionNumber
        : undefined,
    forceCanceled:
      output.forceCanceled !== undefined && output.forceCanceled !== null
        ? output.forceCanceled
        : undefined,
    jobId:
      output.jobId !== undefined && output.jobId !== null
        ? output.jobId
        : undefined,
    lastUpdatedAt:
      output.lastUpdatedAt !== undefined && output.lastUpdatedAt !== null
        ? new Date(Math.round(output.lastUpdatedAt * 1000))
        : undefined,
    queuedAt:
      output.queuedAt !== undefined && output.queuedAt !== null
        ? new Date(Math.round(output.queuedAt * 1000))
        : undefined,
    startedAt:
      output.startedAt !== undefined && output.startedAt !== null
        ? new Date(Math.round(output.startedAt * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    statusDetails:
      output.statusDetails !== undefined && output.statusDetails !== null
        ? deserializeAws_restJson1_1JobExecutionStatusDetails(
            output.statusDetails,
            context
          )
        : undefined,
    thingArn:
      output.thingArn !== undefined && output.thingArn !== null
        ? output.thingArn
        : undefined,
    versionNumber:
      output.versionNumber !== undefined && output.versionNumber !== null
        ? output.versionNumber
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecutionStatusDetails = (
  output: any,
  context: __SerdeContext
): JobExecutionStatusDetails => {
  return {
    __type: "JobExecutionStatusDetails",
    detailsMap:
      output.detailsMap !== undefined && output.detailsMap !== null
        ? deserializeAws_restJson1_1DetailsMap(output.detailsMap, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecutionSummary = (
  output: any,
  context: __SerdeContext
): JobExecutionSummary => {
  return {
    __type: "JobExecutionSummary",
    executionNumber:
      output.executionNumber !== undefined && output.executionNumber !== null
        ? output.executionNumber
        : undefined,
    lastUpdatedAt:
      output.lastUpdatedAt !== undefined && output.lastUpdatedAt !== null
        ? new Date(Math.round(output.lastUpdatedAt * 1000))
        : undefined,
    queuedAt:
      output.queuedAt !== undefined && output.queuedAt !== null
        ? new Date(Math.round(output.queuedAt * 1000))
        : undefined,
    startedAt:
      output.startedAt !== undefined && output.startedAt !== null
        ? new Date(Math.round(output.startedAt * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecutionSummaryForJob = (
  output: any,
  context: __SerdeContext
): JobExecutionSummaryForJob => {
  return {
    __type: "JobExecutionSummaryForJob",
    jobExecutionSummary:
      output.jobExecutionSummary !== undefined &&
      output.jobExecutionSummary !== null
        ? deserializeAws_restJson1_1JobExecutionSummary(
            output.jobExecutionSummary,
            context
          )
        : undefined,
    thingArn:
      output.thingArn !== undefined && output.thingArn !== null
        ? output.thingArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecutionSummaryForJobList = (
  output: any,
  context: __SerdeContext
): JobExecutionSummaryForJob[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1JobExecutionSummaryForJob(entry, context)
  );
};

const deserializeAws_restJson1_1JobExecutionSummaryForThing = (
  output: any,
  context: __SerdeContext
): JobExecutionSummaryForThing => {
  return {
    __type: "JobExecutionSummaryForThing",
    jobExecutionSummary:
      output.jobExecutionSummary !== undefined &&
      output.jobExecutionSummary !== null
        ? deserializeAws_restJson1_1JobExecutionSummary(
            output.jobExecutionSummary,
            context
          )
        : undefined,
    jobId:
      output.jobId !== undefined && output.jobId !== null
        ? output.jobId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobExecutionSummaryForThingList = (
  output: any,
  context: __SerdeContext
): JobExecutionSummaryForThing[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1JobExecutionSummaryForThing(entry, context)
  );
};

const deserializeAws_restJson1_1JobExecutionsRolloutConfig = (
  output: any,
  context: __SerdeContext
): JobExecutionsRolloutConfig => {
  return {
    __type: "JobExecutionsRolloutConfig",
    exponentialRate:
      output.exponentialRate !== undefined && output.exponentialRate !== null
        ? deserializeAws_restJson1_1ExponentialRolloutRate(
            output.exponentialRate,
            context
          )
        : undefined,
    maximumPerMinute:
      output.maximumPerMinute !== undefined && output.maximumPerMinute !== null
        ? output.maximumPerMinute
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobProcessDetails = (
  output: any,
  context: __SerdeContext
): JobProcessDetails => {
  return {
    __type: "JobProcessDetails",
    numberOfCanceledThings:
      output.numberOfCanceledThings !== undefined &&
      output.numberOfCanceledThings !== null
        ? output.numberOfCanceledThings
        : undefined,
    numberOfFailedThings:
      output.numberOfFailedThings !== undefined &&
      output.numberOfFailedThings !== null
        ? output.numberOfFailedThings
        : undefined,
    numberOfInProgressThings:
      output.numberOfInProgressThings !== undefined &&
      output.numberOfInProgressThings !== null
        ? output.numberOfInProgressThings
        : undefined,
    numberOfQueuedThings:
      output.numberOfQueuedThings !== undefined &&
      output.numberOfQueuedThings !== null
        ? output.numberOfQueuedThings
        : undefined,
    numberOfRejectedThings:
      output.numberOfRejectedThings !== undefined &&
      output.numberOfRejectedThings !== null
        ? output.numberOfRejectedThings
        : undefined,
    numberOfRemovedThings:
      output.numberOfRemovedThings !== undefined &&
      output.numberOfRemovedThings !== null
        ? output.numberOfRemovedThings
        : undefined,
    numberOfSucceededThings:
      output.numberOfSucceededThings !== undefined &&
      output.numberOfSucceededThings !== null
        ? output.numberOfSucceededThings
        : undefined,
    numberOfTimedOutThings:
      output.numberOfTimedOutThings !== undefined &&
      output.numberOfTimedOutThings !== null
        ? output.numberOfTimedOutThings
        : undefined,
    processingTargets:
      output.processingTargets !== undefined &&
      output.processingTargets !== null
        ? deserializeAws_restJson1_1ProcessingTargetNameList(
            output.processingTargets,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobSummary = (
  output: any,
  context: __SerdeContext
): JobSummary => {
  return {
    __type: "JobSummary",
    completedAt:
      output.completedAt !== undefined && output.completedAt !== null
        ? new Date(Math.round(output.completedAt * 1000))
        : undefined,
    createdAt:
      output.createdAt !== undefined && output.createdAt !== null
        ? new Date(Math.round(output.createdAt * 1000))
        : undefined,
    jobArn:
      output.jobArn !== undefined && output.jobArn !== null
        ? output.jobArn
        : undefined,
    jobId:
      output.jobId !== undefined && output.jobId !== null
        ? output.jobId
        : undefined,
    lastUpdatedAt:
      output.lastUpdatedAt !== undefined && output.lastUpdatedAt !== null
        ? new Date(Math.round(output.lastUpdatedAt * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    targetSelection:
      output.targetSelection !== undefined && output.targetSelection !== null
        ? output.targetSelection
        : undefined,
    thingGroupId:
      output.thingGroupId !== undefined && output.thingGroupId !== null
        ? output.thingGroupId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1JobSummaryList = (
  output: any,
  context: __SerdeContext
): JobSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1JobSummary(entry, context)
  );
};

const deserializeAws_restJson1_1JobTargets = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1PresignedUrlConfig = (
  output: any,
  context: __SerdeContext
): PresignedUrlConfig => {
  return {
    __type: "PresignedUrlConfig",
    expiresInSec:
      output.expiresInSec !== undefined && output.expiresInSec !== null
        ? output.expiresInSec
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ProcessingTargetNameList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1RateIncreaseCriteria = (
  output: any,
  context: __SerdeContext
): RateIncreaseCriteria => {
  return {
    __type: "RateIncreaseCriteria",
    numberOfNotifiedThings:
      output.numberOfNotifiedThings !== undefined &&
      output.numberOfNotifiedThings !== null
        ? output.numberOfNotifiedThings
        : undefined,
    numberOfSucceededThings:
      output.numberOfSucceededThings !== undefined &&
      output.numberOfSucceededThings !== null
        ? output.numberOfSucceededThings
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TimeoutConfig = (
  output: any,
  context: __SerdeContext
): TimeoutConfig => {
  return {
    __type: "TimeoutConfig",
    inProgressTimeoutInMinutes:
      output.inProgressTimeoutInMinutes !== undefined &&
      output.inProgressTimeoutInMinutes !== null
        ? output.inProgressTimeoutInMinutes
        : undefined
  } as any;
};

const deserializeAws_restJson1_1DetailsMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1AdditionalParameterMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1AttributesMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1AwsJobExecutionsRolloutConfig = (
  output: any,
  context: __SerdeContext
): AwsJobExecutionsRolloutConfig => {
  return {
    __type: "AwsJobExecutionsRolloutConfig",
    maximumPerMinute:
      output.maximumPerMinute !== undefined && output.maximumPerMinute !== null
        ? output.maximumPerMinute
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AwsJobPresignedUrlConfig = (
  output: any,
  context: __SerdeContext
): AwsJobPresignedUrlConfig => {
  return {
    __type: "AwsJobPresignedUrlConfig",
    expiresInSec:
      output.expiresInSec !== undefined && output.expiresInSec !== null
        ? output.expiresInSec
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CodeSigning = (
  output: any,
  context: __SerdeContext
): CodeSigning => {
  return {
    __type: "CodeSigning",
    awsSignerJobId:
      output.awsSignerJobId !== undefined && output.awsSignerJobId !== null
        ? output.awsSignerJobId
        : undefined,
    customCodeSigning:
      output.customCodeSigning !== undefined &&
      output.customCodeSigning !== null
        ? deserializeAws_restJson1_1CustomCodeSigning(
            output.customCodeSigning,
            context
          )
        : undefined,
    startSigningJobParameter:
      output.startSigningJobParameter !== undefined &&
      output.startSigningJobParameter !== null
        ? deserializeAws_restJson1_1StartSigningJobParameter(
            output.startSigningJobParameter,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CodeSigningCertificateChain = (
  output: any,
  context: __SerdeContext
): CodeSigningCertificateChain => {
  return {
    __type: "CodeSigningCertificateChain",
    certificateName:
      output.certificateName !== undefined && output.certificateName !== null
        ? output.certificateName
        : undefined,
    inlineDocument:
      output.inlineDocument !== undefined && output.inlineDocument !== null
        ? output.inlineDocument
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CodeSigningSignature = (
  output: any,
  context: __SerdeContext
): CodeSigningSignature => {
  return {
    __type: "CodeSigningSignature",
    inlineDocument:
      output.inlineDocument !== undefined && output.inlineDocument !== null
        ? context.base64Decoder(output.inlineDocument)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1CustomCodeSigning = (
  output: any,
  context: __SerdeContext
): CustomCodeSigning => {
  return {
    __type: "CustomCodeSigning",
    certificateChain:
      output.certificateChain !== undefined && output.certificateChain !== null
        ? deserializeAws_restJson1_1CodeSigningCertificateChain(
            output.certificateChain,
            context
          )
        : undefined,
    hashAlgorithm:
      output.hashAlgorithm !== undefined && output.hashAlgorithm !== null
        ? output.hashAlgorithm
        : undefined,
    signature:
      output.signature !== undefined && output.signature !== null
        ? deserializeAws_restJson1_1CodeSigningSignature(
            output.signature,
            context
          )
        : undefined,
    signatureAlgorithm:
      output.signatureAlgorithm !== undefined &&
      output.signatureAlgorithm !== null
        ? output.signatureAlgorithm
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Destination = (
  output: any,
  context: __SerdeContext
): Destination => {
  return {
    __type: "Destination",
    s3Destination:
      output.s3Destination !== undefined && output.s3Destination !== null
        ? deserializeAws_restJson1_1S3Destination(output.s3Destination, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ErrorInfo = (
  output: any,
  context: __SerdeContext
): ErrorInfo => {
  return {
    __type: "ErrorInfo",
    code:
      output.code !== undefined && output.code !== null
        ? output.code
        : undefined,
    message:
      output.message !== undefined && output.message !== null
        ? output.message
        : undefined
  } as any;
};

const deserializeAws_restJson1_1FileLocation = (
  output: any,
  context: __SerdeContext
): FileLocation => {
  return {
    __type: "FileLocation",
    s3Location:
      output.s3Location !== undefined && output.s3Location !== null
        ? deserializeAws_restJson1_1S3Location(output.s3Location, context)
        : undefined,
    stream:
      output.stream !== undefined && output.stream !== null
        ? deserializeAws_restJson1_1_Stream(output.stream, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1OTAUpdateFile = (
  output: any,
  context: __SerdeContext
): OTAUpdateFile => {
  return {
    __type: "OTAUpdateFile",
    attributes:
      output.attributes !== undefined && output.attributes !== null
        ? deserializeAws_restJson1_1AttributesMap(output.attributes, context)
        : undefined,
    codeSigning:
      output.codeSigning !== undefined && output.codeSigning !== null
        ? deserializeAws_restJson1_1CodeSigning(output.codeSigning, context)
        : undefined,
    fileLocation:
      output.fileLocation !== undefined && output.fileLocation !== null
        ? deserializeAws_restJson1_1FileLocation(output.fileLocation, context)
        : undefined,
    fileName:
      output.fileName !== undefined && output.fileName !== null
        ? output.fileName
        : undefined,
    fileVersion:
      output.fileVersion !== undefined && output.fileVersion !== null
        ? output.fileVersion
        : undefined
  } as any;
};

const deserializeAws_restJson1_1OTAUpdateFiles = (
  output: any,
  context: __SerdeContext
): OTAUpdateFile[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1OTAUpdateFile(entry, context)
  );
};

const deserializeAws_restJson1_1OTAUpdateInfo = (
  output: any,
  context: __SerdeContext
): OTAUpdateInfo => {
  return {
    __type: "OTAUpdateInfo",
    additionalParameters:
      output.additionalParameters !== undefined &&
      output.additionalParameters !== null
        ? deserializeAws_restJson1_1AdditionalParameterMap(
            output.additionalParameters,
            context
          )
        : undefined,
    awsIotJobArn:
      output.awsIotJobArn !== undefined && output.awsIotJobArn !== null
        ? output.awsIotJobArn
        : undefined,
    awsIotJobId:
      output.awsIotJobId !== undefined && output.awsIotJobId !== null
        ? output.awsIotJobId
        : undefined,
    awsJobExecutionsRolloutConfig:
      output.awsJobExecutionsRolloutConfig !== undefined &&
      output.awsJobExecutionsRolloutConfig !== null
        ? deserializeAws_restJson1_1AwsJobExecutionsRolloutConfig(
            output.awsJobExecutionsRolloutConfig,
            context
          )
        : undefined,
    awsJobPresignedUrlConfig:
      output.awsJobPresignedUrlConfig !== undefined &&
      output.awsJobPresignedUrlConfig !== null
        ? deserializeAws_restJson1_1AwsJobPresignedUrlConfig(
            output.awsJobPresignedUrlConfig,
            context
          )
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    errorInfo:
      output.errorInfo !== undefined && output.errorInfo !== null
        ? deserializeAws_restJson1_1ErrorInfo(output.errorInfo, context)
        : undefined,
    lastModifiedDate:
      output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
        ? new Date(Math.round(output.lastModifiedDate * 1000))
        : undefined,
    otaUpdateArn:
      output.otaUpdateArn !== undefined && output.otaUpdateArn !== null
        ? output.otaUpdateArn
        : undefined,
    otaUpdateFiles:
      output.otaUpdateFiles !== undefined && output.otaUpdateFiles !== null
        ? deserializeAws_restJson1_1OTAUpdateFiles(
            output.otaUpdateFiles,
            context
          )
        : undefined,
    otaUpdateId:
      output.otaUpdateId !== undefined && output.otaUpdateId !== null
        ? output.otaUpdateId
        : undefined,
    otaUpdateStatus:
      output.otaUpdateStatus !== undefined && output.otaUpdateStatus !== null
        ? output.otaUpdateStatus
        : undefined,
    protocols:
      output.protocols !== undefined && output.protocols !== null
        ? deserializeAws_restJson1_1Protocols(output.protocols, context)
        : undefined,
    targetSelection:
      output.targetSelection !== undefined && output.targetSelection !== null
        ? output.targetSelection
        : undefined,
    targets:
      output.targets !== undefined && output.targets !== null
        ? deserializeAws_restJson1_1Targets(output.targets, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1OTAUpdateSummary = (
  output: any,
  context: __SerdeContext
): OTAUpdateSummary => {
  return {
    __type: "OTAUpdateSummary",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    otaUpdateArn:
      output.otaUpdateArn !== undefined && output.otaUpdateArn !== null
        ? output.otaUpdateArn
        : undefined,
    otaUpdateId:
      output.otaUpdateId !== undefined && output.otaUpdateId !== null
        ? output.otaUpdateId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1OTAUpdatesSummary = (
  output: any,
  context: __SerdeContext
): OTAUpdateSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1OTAUpdateSummary(entry, context)
  );
};

const deserializeAws_restJson1_1Protocols = (
  output: any,
  context: __SerdeContext
): (Protocol | string)[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1S3Destination = (
  output: any,
  context: __SerdeContext
): S3Destination => {
  return {
    __type: "S3Destination",
    bucket:
      output.bucket !== undefined && output.bucket !== null
        ? output.bucket
        : undefined,
    prefix:
      output.prefix !== undefined && output.prefix !== null
        ? output.prefix
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SigningProfileParameter = (
  output: any,
  context: __SerdeContext
): SigningProfileParameter => {
  return {
    __type: "SigningProfileParameter",
    certificateArn:
      output.certificateArn !== undefined && output.certificateArn !== null
        ? output.certificateArn
        : undefined,
    certificatePathOnDevice:
      output.certificatePathOnDevice !== undefined &&
      output.certificatePathOnDevice !== null
        ? output.certificatePathOnDevice
        : undefined,
    platform:
      output.platform !== undefined && output.platform !== null
        ? output.platform
        : undefined
  } as any;
};

const deserializeAws_restJson1_1StartSigningJobParameter = (
  output: any,
  context: __SerdeContext
): StartSigningJobParameter => {
  return {
    __type: "StartSigningJobParameter",
    destination:
      output.destination !== undefined && output.destination !== null
        ? deserializeAws_restJson1_1Destination(output.destination, context)
        : undefined,
    signingProfileName:
      output.signingProfileName !== undefined &&
      output.signingProfileName !== null
        ? output.signingProfileName
        : undefined,
    signingProfileParameter:
      output.signingProfileParameter !== undefined &&
      output.signingProfileParameter !== null
        ? deserializeAws_restJson1_1SigningProfileParameter(
            output.signingProfileParameter,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1_Stream = (
  output: any,
  context: __SerdeContext
): _Stream => {
  return {
    __type: "Stream",
    fileId:
      output.fileId !== undefined && output.fileId !== null
        ? output.fileId
        : undefined,
    streamId:
      output.streamId !== undefined && output.streamId !== null
        ? output.streamId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Targets = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1AttributePayload = (
  output: any,
  context: __SerdeContext
): AttributePayload => {
  return {
    __type: "AttributePayload",
    attributes:
      output.attributes !== undefined && output.attributes !== null
        ? deserializeAws_restJson1_1Attributes(output.attributes, context)
        : undefined,
    merge:
      output.merge !== undefined && output.merge !== null
        ? output.merge
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Attributes = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1BillingGroupMetadata = (
  output: any,
  context: __SerdeContext
): BillingGroupMetadata => {
  return {
    __type: "BillingGroupMetadata",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1BillingGroupNameAndArnList = (
  output: any,
  context: __SerdeContext
): GroupNameAndArn[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1GroupNameAndArn(entry, context)
  );
};

const deserializeAws_restJson1_1BillingGroupProperties = (
  output: any,
  context: __SerdeContext
): BillingGroupProperties => {
  return {
    __type: "BillingGroupProperties",
    billingGroupDescription:
      output.billingGroupDescription !== undefined &&
      output.billingGroupDescription !== null
        ? output.billingGroupDescription
        : undefined
  } as any;
};

const deserializeAws_restJson1_1GroupNameAndArn = (
  output: any,
  context: __SerdeContext
): GroupNameAndArn => {
  return {
    __type: "GroupNameAndArn",
    groupArn:
      output.groupArn !== undefined && output.groupArn !== null
        ? output.groupArn
        : undefined,
    groupName:
      output.groupName !== undefined && output.groupName !== null
        ? output.groupName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1S3FileUrlList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1SearchableAttributes = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1TaskIdList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1ThingAttribute = (
  output: any,
  context: __SerdeContext
): ThingAttribute => {
  return {
    __type: "ThingAttribute",
    attributes:
      output.attributes !== undefined && output.attributes !== null
        ? deserializeAws_restJson1_1Attributes(output.attributes, context)
        : undefined,
    thingArn:
      output.thingArn !== undefined && output.thingArn !== null
        ? output.thingArn
        : undefined,
    thingName:
      output.thingName !== undefined && output.thingName !== null
        ? output.thingName
        : undefined,
    thingTypeName:
      output.thingTypeName !== undefined && output.thingTypeName !== null
        ? output.thingTypeName
        : undefined,
    version:
      output.version !== undefined && output.version !== null
        ? output.version
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingAttributeList = (
  output: any,
  context: __SerdeContext
): ThingAttribute[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ThingAttribute(entry, context)
  );
};

const deserializeAws_restJson1_1ThingGroupMetadata = (
  output: any,
  context: __SerdeContext
): ThingGroupMetadata => {
  return {
    __type: "ThingGroupMetadata",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    parentGroupName:
      output.parentGroupName !== undefined && output.parentGroupName !== null
        ? output.parentGroupName
        : undefined,
    rootToParentThingGroups:
      output.rootToParentThingGroups !== undefined &&
      output.rootToParentThingGroups !== null
        ? deserializeAws_restJson1_1ThingGroupNameAndArnList(
            output.rootToParentThingGroups,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingGroupNameAndArnList = (
  output: any,
  context: __SerdeContext
): GroupNameAndArn[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1GroupNameAndArn(entry, context)
  );
};

const deserializeAws_restJson1_1ThingGroupProperties = (
  output: any,
  context: __SerdeContext
): ThingGroupProperties => {
  return {
    __type: "ThingGroupProperties",
    attributePayload:
      output.attributePayload !== undefined && output.attributePayload !== null
        ? deserializeAws_restJson1_1AttributePayload(
            output.attributePayload,
            context
          )
        : undefined,
    thingGroupDescription:
      output.thingGroupDescription !== undefined &&
      output.thingGroupDescription !== null
        ? output.thingGroupDescription
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingNameList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1ThingTypeDefinition = (
  output: any,
  context: __SerdeContext
): ThingTypeDefinition => {
  return {
    __type: "ThingTypeDefinition",
    thingTypeArn:
      output.thingTypeArn !== undefined && output.thingTypeArn !== null
        ? output.thingTypeArn
        : undefined,
    thingTypeMetadata:
      output.thingTypeMetadata !== undefined &&
      output.thingTypeMetadata !== null
        ? deserializeAws_restJson1_1ThingTypeMetadata(
            output.thingTypeMetadata,
            context
          )
        : undefined,
    thingTypeName:
      output.thingTypeName !== undefined && output.thingTypeName !== null
        ? output.thingTypeName
        : undefined,
    thingTypeProperties:
      output.thingTypeProperties !== undefined &&
      output.thingTypeProperties !== null
        ? deserializeAws_restJson1_1ThingTypeProperties(
            output.thingTypeProperties,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingTypeList = (
  output: any,
  context: __SerdeContext
): ThingTypeDefinition[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ThingTypeDefinition(entry, context)
  );
};

const deserializeAws_restJson1_1ThingTypeMetadata = (
  output: any,
  context: __SerdeContext
): ThingTypeMetadata => {
  return {
    __type: "ThingTypeMetadata",
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined,
    deprecated:
      output.deprecated !== undefined && output.deprecated !== null
        ? output.deprecated
        : undefined,
    deprecationDate:
      output.deprecationDate !== undefined && output.deprecationDate !== null
        ? new Date(Math.round(output.deprecationDate * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingTypeProperties = (
  output: any,
  context: __SerdeContext
): ThingTypeProperties => {
  return {
    __type: "ThingTypeProperties",
    searchableAttributes:
      output.searchableAttributes !== undefined &&
      output.searchableAttributes !== null
        ? deserializeAws_restJson1_1SearchableAttributes(
            output.searchableAttributes,
            context
          )
        : undefined,
    thingTypeDescription:
      output.thingTypeDescription !== undefined &&
      output.thingTypeDescription !== null
        ? output.thingTypeDescription
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AddThingsToThingGroupParams = (
  output: any,
  context: __SerdeContext
): AddThingsToThingGroupParams => {
  return {
    __type: "AddThingsToThingGroupParams",
    overrideDynamicGroups:
      output.overrideDynamicGroups !== undefined &&
      output.overrideDynamicGroups !== null
        ? output.overrideDynamicGroups
        : undefined,
    thingGroupNames:
      output.thingGroupNames !== undefined && output.thingGroupNames !== null
        ? deserializeAws_restJson1_1ThingGroupNames(
            output.thingGroupNames,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1EnableIoTLoggingParams = (
  output: any,
  context: __SerdeContext
): EnableIoTLoggingParams => {
  return {
    __type: "EnableIoTLoggingParams",
    logLevel:
      output.logLevel !== undefined && output.logLevel !== null
        ? output.logLevel
        : undefined,
    roleArnForLogging:
      output.roleArnForLogging !== undefined &&
      output.roleArnForLogging !== null
        ? output.roleArnForLogging
        : undefined
  } as any;
};

const deserializeAws_restJson1_1MitigationAction = (
  output: any,
  context: __SerdeContext
): MitigationAction => {
  return {
    __type: "MitigationAction",
    actionParams:
      output.actionParams !== undefined && output.actionParams !== null
        ? deserializeAws_restJson1_1MitigationActionParams(
            output.actionParams,
            context
          )
        : undefined,
    id: output.id !== undefined && output.id !== null ? output.id : undefined,
    name:
      output.name !== undefined && output.name !== null
        ? output.name
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1MitigationActionIdentifier = (
  output: any,
  context: __SerdeContext
): MitigationActionIdentifier => {
  return {
    __type: "MitigationActionIdentifier",
    actionArn:
      output.actionArn !== undefined && output.actionArn !== null
        ? output.actionArn
        : undefined,
    actionName:
      output.actionName !== undefined && output.actionName !== null
        ? output.actionName
        : undefined,
    creationDate:
      output.creationDate !== undefined && output.creationDate !== null
        ? new Date(Math.round(output.creationDate * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1MitigationActionIdentifierList = (
  output: any,
  context: __SerdeContext
): MitigationActionIdentifier[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1MitigationActionIdentifier(entry, context)
  );
};

const deserializeAws_restJson1_1MitigationActionList = (
  output: any,
  context: __SerdeContext
): MitigationAction[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1MitigationAction(entry, context)
  );
};

const deserializeAws_restJson1_1MitigationActionParams = (
  output: any,
  context: __SerdeContext
): MitigationActionParams => {
  return {
    __type: "MitigationActionParams",
    addThingsToThingGroupParams:
      output.addThingsToThingGroupParams !== undefined &&
      output.addThingsToThingGroupParams !== null
        ? deserializeAws_restJson1_1AddThingsToThingGroupParams(
            output.addThingsToThingGroupParams,
            context
          )
        : undefined,
    enableIoTLoggingParams:
      output.enableIoTLoggingParams !== undefined &&
      output.enableIoTLoggingParams !== null
        ? deserializeAws_restJson1_1EnableIoTLoggingParams(
            output.enableIoTLoggingParams,
            context
          )
        : undefined,
    publishFindingToSnsParams:
      output.publishFindingToSnsParams !== undefined &&
      output.publishFindingToSnsParams !== null
        ? deserializeAws_restJson1_1PublishFindingToSnsParams(
            output.publishFindingToSnsParams,
            context
          )
        : undefined,
    replaceDefaultPolicyVersionParams:
      output.replaceDefaultPolicyVersionParams !== undefined &&
      output.replaceDefaultPolicyVersionParams !== null
        ? deserializeAws_restJson1_1ReplaceDefaultPolicyVersionParams(
            output.replaceDefaultPolicyVersionParams,
            context
          )
        : undefined,
    updateCACertificateParams:
      output.updateCACertificateParams !== undefined &&
      output.updateCACertificateParams !== null
        ? deserializeAws_restJson1_1UpdateCACertificateParams(
            output.updateCACertificateParams,
            context
          )
        : undefined,
    updateDeviceCertificateParams:
      output.updateDeviceCertificateParams !== undefined &&
      output.updateDeviceCertificateParams !== null
        ? deserializeAws_restJson1_1UpdateDeviceCertificateParams(
            output.updateDeviceCertificateParams,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PublishFindingToSnsParams = (
  output: any,
  context: __SerdeContext
): PublishFindingToSnsParams => {
  return {
    __type: "PublishFindingToSnsParams",
    topicArn:
      output.topicArn !== undefined && output.topicArn !== null
        ? output.topicArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ReplaceDefaultPolicyVersionParams = (
  output: any,
  context: __SerdeContext
): ReplaceDefaultPolicyVersionParams => {
  return {
    __type: "ReplaceDefaultPolicyVersionParams",
    templateName:
      output.templateName !== undefined && output.templateName !== null
        ? output.templateName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ThingGroupNames = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1UpdateCACertificateParams = (
  output: any,
  context: __SerdeContext
): UpdateCACertificateParams => {
  return {
    __type: "UpdateCACertificateParams",
    action:
      output.action !== undefined && output.action !== null
        ? output.action
        : undefined
  } as any;
};

const deserializeAws_restJson1_1UpdateDeviceCertificateParams = (
  output: any,
  context: __SerdeContext
): UpdateDeviceCertificateParams => {
  return {
    __type: "UpdateDeviceCertificateParams",
    action:
      output.action !== undefined && output.action !== null
        ? output.action
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditCheckConfiguration = (
  output: any,
  context: __SerdeContext
): AuditCheckConfiguration => {
  return {
    __type: "AuditCheckConfiguration",
    enabled:
      output.enabled !== undefined && output.enabled !== null
        ? output.enabled
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditCheckConfigurations = (
  output: any,
  context: __SerdeContext
): { [key: string]: AuditCheckConfiguration } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: AuditCheckConfiguration },
      [key, value]: [string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1AuditCheckConfiguration(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditCheckDetails = (
  output: any,
  context: __SerdeContext
): AuditCheckDetails => {
  return {
    __type: "AuditCheckDetails",
    checkCompliant:
      output.checkCompliant !== undefined && output.checkCompliant !== null
        ? output.checkCompliant
        : undefined,
    checkRunStatus:
      output.checkRunStatus !== undefined && output.checkRunStatus !== null
        ? output.checkRunStatus
        : undefined,
    errorCode:
      output.errorCode !== undefined && output.errorCode !== null
        ? output.errorCode
        : undefined,
    message:
      output.message !== undefined && output.message !== null
        ? output.message
        : undefined,
    nonCompliantResourcesCount:
      output.nonCompliantResourcesCount !== undefined &&
      output.nonCompliantResourcesCount !== null
        ? output.nonCompliantResourcesCount
        : undefined,
    totalResourcesCount:
      output.totalResourcesCount !== undefined &&
      output.totalResourcesCount !== null
        ? output.totalResourcesCount
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditCheckToActionsMapping = (
  output: any,
  context: __SerdeContext
): { [key: string]: string[] } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string[] }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1MitigationActionNameList(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditCheckToReasonCodeFilter = (
  output: any,
  context: __SerdeContext
): { [key: string]: string[] } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string[] }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1ReasonForNonComplianceCodes(
        value,
        context
      )
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditDetails = (
  output: any,
  context: __SerdeContext
): { [key: string]: AuditCheckDetails } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: AuditCheckDetails },
      [key, value]: [string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1AuditCheckDetails(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditFinding = (
  output: any,
  context: __SerdeContext
): AuditFinding => {
  return {
    __type: "AuditFinding",
    checkName:
      output.checkName !== undefined && output.checkName !== null
        ? output.checkName
        : undefined,
    findingId:
      output.findingId !== undefined && output.findingId !== null
        ? output.findingId
        : undefined,
    findingTime:
      output.findingTime !== undefined && output.findingTime !== null
        ? new Date(Math.round(output.findingTime * 1000))
        : undefined,
    nonCompliantResource:
      output.nonCompliantResource !== undefined &&
      output.nonCompliantResource !== null
        ? deserializeAws_restJson1_1NonCompliantResource(
            output.nonCompliantResource,
            context
          )
        : undefined,
    reasonForNonCompliance:
      output.reasonForNonCompliance !== undefined &&
      output.reasonForNonCompliance !== null
        ? output.reasonForNonCompliance
        : undefined,
    reasonForNonComplianceCode:
      output.reasonForNonComplianceCode !== undefined &&
      output.reasonForNonComplianceCode !== null
        ? output.reasonForNonComplianceCode
        : undefined,
    relatedResources:
      output.relatedResources !== undefined && output.relatedResources !== null
        ? deserializeAws_restJson1_1RelatedResources(
            output.relatedResources,
            context
          )
        : undefined,
    severity:
      output.severity !== undefined && output.severity !== null
        ? output.severity
        : undefined,
    taskId:
      output.taskId !== undefined && output.taskId !== null
        ? output.taskId
        : undefined,
    taskStartTime:
      output.taskStartTime !== undefined && output.taskStartTime !== null
        ? new Date(Math.round(output.taskStartTime * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditFindings = (
  output: any,
  context: __SerdeContext
): AuditFinding[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuditFinding(entry, context)
  );
};

const deserializeAws_restJson1_1AuditMitigationActionExecutionMetadata = (
  output: any,
  context: __SerdeContext
): AuditMitigationActionExecutionMetadata => {
  return {
    __type: "AuditMitigationActionExecutionMetadata",
    actionId:
      output.actionId !== undefined && output.actionId !== null
        ? output.actionId
        : undefined,
    actionName:
      output.actionName !== undefined && output.actionName !== null
        ? output.actionName
        : undefined,
    endTime:
      output.endTime !== undefined && output.endTime !== null
        ? new Date(Math.round(output.endTime * 1000))
        : undefined,
    errorCode:
      output.errorCode !== undefined && output.errorCode !== null
        ? output.errorCode
        : undefined,
    findingId:
      output.findingId !== undefined && output.findingId !== null
        ? output.findingId
        : undefined,
    message:
      output.message !== undefined && output.message !== null
        ? output.message
        : undefined,
    startTime:
      output.startTime !== undefined && output.startTime !== null
        ? new Date(Math.round(output.startTime * 1000))
        : undefined,
    status:
      output.status !== undefined && output.status !== null
        ? output.status
        : undefined,
    taskId:
      output.taskId !== undefined && output.taskId !== null
        ? output.taskId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditMitigationActionExecutionMetadataList = (
  output: any,
  context: __SerdeContext
): AuditMitigationActionExecutionMetadata[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuditMitigationActionExecutionMetadata(
      entry,
      context
    )
  );
};

const deserializeAws_restJson1_1AuditMitigationActionsTaskMetadata = (
  output: any,
  context: __SerdeContext
): AuditMitigationActionsTaskMetadata => {
  return {
    __type: "AuditMitigationActionsTaskMetadata",
    startTime:
      output.startTime !== undefined && output.startTime !== null
        ? new Date(Math.round(output.startTime * 1000))
        : undefined,
    taskId:
      output.taskId !== undefined && output.taskId !== null
        ? output.taskId
        : undefined,
    taskStatus:
      output.taskStatus !== undefined && output.taskStatus !== null
        ? output.taskStatus
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditMitigationActionsTaskMetadataList = (
  output: any,
  context: __SerdeContext
): AuditMitigationActionsTaskMetadata[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuditMitigationActionsTaskMetadata(entry, context)
  );
};

const deserializeAws_restJson1_1AuditMitigationActionsTaskStatistics = (
  output: any,
  context: __SerdeContext
): { [key: string]: TaskStatisticsForAuditCheck } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: TaskStatisticsForAuditCheck },
      [key, value]: [string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1TaskStatisticsForAuditCheck(
        value,
        context
      )
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditMitigationActionsTaskTarget = (
  output: any,
  context: __SerdeContext
): AuditMitigationActionsTaskTarget => {
  return {
    __type: "AuditMitigationActionsTaskTarget",
    auditCheckToReasonCodeFilter:
      output.auditCheckToReasonCodeFilter !== undefined &&
      output.auditCheckToReasonCodeFilter !== null
        ? deserializeAws_restJson1_1AuditCheckToReasonCodeFilter(
            output.auditCheckToReasonCodeFilter,
            context
          )
        : undefined,
    auditTaskId:
      output.auditTaskId !== undefined && output.auditTaskId !== null
        ? output.auditTaskId
        : undefined,
    findingIds:
      output.findingIds !== undefined && output.findingIds !== null
        ? deserializeAws_restJson1_1FindingIds(output.findingIds, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditNotificationTarget = (
  output: any,
  context: __SerdeContext
): AuditNotificationTarget => {
  return {
    __type: "AuditNotificationTarget",
    enabled:
      output.enabled !== undefined && output.enabled !== null
        ? output.enabled
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    targetArn:
      output.targetArn !== undefined && output.targetArn !== null
        ? output.targetArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditNotificationTargetConfigurations = (
  output: any,
  context: __SerdeContext
): { [key: string]: AuditNotificationTarget } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: AuditNotificationTarget },
      [key, value]: [AuditNotificationType | string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1AuditNotificationTarget(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1AuditTaskMetadata = (
  output: any,
  context: __SerdeContext
): AuditTaskMetadata => {
  return {
    __type: "AuditTaskMetadata",
    taskId:
      output.taskId !== undefined && output.taskId !== null
        ? output.taskId
        : undefined,
    taskStatus:
      output.taskStatus !== undefined && output.taskStatus !== null
        ? output.taskStatus
        : undefined,
    taskType:
      output.taskType !== undefined && output.taskType !== null
        ? output.taskType
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AuditTaskMetadataList = (
  output: any,
  context: __SerdeContext
): AuditTaskMetadata[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1AuditTaskMetadata(entry, context)
  );
};

const deserializeAws_restJson1_1FindingIds = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1MitigationActionNameList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1NonCompliantResource = (
  output: any,
  context: __SerdeContext
): NonCompliantResource => {
  return {
    __type: "NonCompliantResource",
    additionalInfo:
      output.additionalInfo !== undefined && output.additionalInfo !== null
        ? deserializeAws_restJson1_1StringMap(output.additionalInfo, context)
        : undefined,
    resourceIdentifier:
      output.resourceIdentifier !== undefined &&
      output.resourceIdentifier !== null
        ? deserializeAws_restJson1_1ResourceIdentifier(
            output.resourceIdentifier,
            context
          )
        : undefined,
    resourceType:
      output.resourceType !== undefined && output.resourceType !== null
        ? output.resourceType
        : undefined
  } as any;
};

const deserializeAws_restJson1_1PolicyVersionIdentifier = (
  output: any,
  context: __SerdeContext
): PolicyVersionIdentifier => {
  return {
    __type: "PolicyVersionIdentifier",
    policyName:
      output.policyName !== undefined && output.policyName !== null
        ? output.policyName
        : undefined,
    policyVersionId:
      output.policyVersionId !== undefined && output.policyVersionId !== null
        ? output.policyVersionId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ReasonForNonComplianceCodes = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1RelatedResource = (
  output: any,
  context: __SerdeContext
): RelatedResource => {
  return {
    __type: "RelatedResource",
    additionalInfo:
      output.additionalInfo !== undefined && output.additionalInfo !== null
        ? deserializeAws_restJson1_1StringMap(output.additionalInfo, context)
        : undefined,
    resourceIdentifier:
      output.resourceIdentifier !== undefined &&
      output.resourceIdentifier !== null
        ? deserializeAws_restJson1_1ResourceIdentifier(
            output.resourceIdentifier,
            context
          )
        : undefined,
    resourceType:
      output.resourceType !== undefined && output.resourceType !== null
        ? output.resourceType
        : undefined
  } as any;
};

const deserializeAws_restJson1_1RelatedResources = (
  output: any,
  context: __SerdeContext
): RelatedResource[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1RelatedResource(entry, context)
  );
};

const deserializeAws_restJson1_1ResourceIdentifier = (
  output: any,
  context: __SerdeContext
): ResourceIdentifier => {
  return {
    __type: "ResourceIdentifier",
    account:
      output.account !== undefined && output.account !== null
        ? output.account
        : undefined,
    caCertificateId:
      output.caCertificateId !== undefined && output.caCertificateId !== null
        ? output.caCertificateId
        : undefined,
    clientId:
      output.clientId !== undefined && output.clientId !== null
        ? output.clientId
        : undefined,
    cognitoIdentityPoolId:
      output.cognitoIdentityPoolId !== undefined &&
      output.cognitoIdentityPoolId !== null
        ? output.cognitoIdentityPoolId
        : undefined,
    deviceCertificateId:
      output.deviceCertificateId !== undefined &&
      output.deviceCertificateId !== null
        ? output.deviceCertificateId
        : undefined,
    iamRoleArn:
      output.iamRoleArn !== undefined && output.iamRoleArn !== null
        ? output.iamRoleArn
        : undefined,
    policyVersionIdentifier:
      output.policyVersionIdentifier !== undefined &&
      output.policyVersionIdentifier !== null
        ? deserializeAws_restJson1_1PolicyVersionIdentifier(
            output.policyVersionIdentifier,
            context
          )
        : undefined,
    roleAliasArn:
      output.roleAliasArn !== undefined && output.roleAliasArn !== null
        ? output.roleAliasArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ScheduledAuditMetadata = (
  output: any,
  context: __SerdeContext
): ScheduledAuditMetadata => {
  return {
    __type: "ScheduledAuditMetadata",
    dayOfMonth:
      output.dayOfMonth !== undefined && output.dayOfMonth !== null
        ? output.dayOfMonth
        : undefined,
    dayOfWeek:
      output.dayOfWeek !== undefined && output.dayOfWeek !== null
        ? output.dayOfWeek
        : undefined,
    frequency:
      output.frequency !== undefined && output.frequency !== null
        ? output.frequency
        : undefined,
    scheduledAuditArn:
      output.scheduledAuditArn !== undefined &&
      output.scheduledAuditArn !== null
        ? output.scheduledAuditArn
        : undefined,
    scheduledAuditName:
      output.scheduledAuditName !== undefined &&
      output.scheduledAuditName !== null
        ? output.scheduledAuditName
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ScheduledAuditMetadataList = (
  output: any,
  context: __SerdeContext
): ScheduledAuditMetadata[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ScheduledAuditMetadata(entry, context)
  );
};

const deserializeAws_restJson1_1StringMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: string }, [key, value]: [string, any]) => ({
      ...acc,
      [key]: value
    }),
    {}
  );
};

const deserializeAws_restJson1_1TargetAuditCheckNames = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1TaskStatistics = (
  output: any,
  context: __SerdeContext
): TaskStatistics => {
  return {
    __type: "TaskStatistics",
    canceledChecks:
      output.canceledChecks !== undefined && output.canceledChecks !== null
        ? output.canceledChecks
        : undefined,
    compliantChecks:
      output.compliantChecks !== undefined && output.compliantChecks !== null
        ? output.compliantChecks
        : undefined,
    failedChecks:
      output.failedChecks !== undefined && output.failedChecks !== null
        ? output.failedChecks
        : undefined,
    inProgressChecks:
      output.inProgressChecks !== undefined && output.inProgressChecks !== null
        ? output.inProgressChecks
        : undefined,
    nonCompliantChecks:
      output.nonCompliantChecks !== undefined &&
      output.nonCompliantChecks !== null
        ? output.nonCompliantChecks
        : undefined,
    totalChecks:
      output.totalChecks !== undefined && output.totalChecks !== null
        ? output.totalChecks
        : undefined,
    waitingForDataCollectionChecks:
      output.waitingForDataCollectionChecks !== undefined &&
      output.waitingForDataCollectionChecks !== null
        ? output.waitingForDataCollectionChecks
        : undefined
  } as any;
};

const deserializeAws_restJson1_1TaskStatisticsForAuditCheck = (
  output: any,
  context: __SerdeContext
): TaskStatisticsForAuditCheck => {
  return {
    __type: "TaskStatisticsForAuditCheck",
    canceledFindingsCount:
      output.canceledFindingsCount !== undefined &&
      output.canceledFindingsCount !== null
        ? output.canceledFindingsCount
        : undefined,
    failedFindingsCount:
      output.failedFindingsCount !== undefined &&
      output.failedFindingsCount !== null
        ? output.failedFindingsCount
        : undefined,
    skippedFindingsCount:
      output.skippedFindingsCount !== undefined &&
      output.skippedFindingsCount !== null
        ? output.skippedFindingsCount
        : undefined,
    succeededFindingsCount:
      output.succeededFindingsCount !== undefined &&
      output.succeededFindingsCount !== null
        ? output.succeededFindingsCount
        : undefined,
    totalFindingsCount:
      output.totalFindingsCount !== undefined &&
      output.totalFindingsCount !== null
        ? output.totalFindingsCount
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ActiveViolation = (
  output: any,
  context: __SerdeContext
): ActiveViolation => {
  return {
    __type: "ActiveViolation",
    behavior:
      output.behavior !== undefined && output.behavior !== null
        ? deserializeAws_restJson1_1Behavior(output.behavior, context)
        : undefined,
    lastViolationTime:
      output.lastViolationTime !== undefined &&
      output.lastViolationTime !== null
        ? new Date(Math.round(output.lastViolationTime * 1000))
        : undefined,
    lastViolationValue:
      output.lastViolationValue !== undefined &&
      output.lastViolationValue !== null
        ? deserializeAws_restJson1_1MetricValue(
            output.lastViolationValue,
            context
          )
        : undefined,
    securityProfileName:
      output.securityProfileName !== undefined &&
      output.securityProfileName !== null
        ? output.securityProfileName
        : undefined,
    thingName:
      output.thingName !== undefined && output.thingName !== null
        ? output.thingName
        : undefined,
    violationId:
      output.violationId !== undefined && output.violationId !== null
        ? output.violationId
        : undefined,
    violationStartTime:
      output.violationStartTime !== undefined &&
      output.violationStartTime !== null
        ? new Date(Math.round(output.violationStartTime * 1000))
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ActiveViolations = (
  output: any,
  context: __SerdeContext
): ActiveViolation[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ActiveViolation(entry, context)
  );
};

const deserializeAws_restJson1_1AdditionalMetricsToRetainList = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1AlertTarget = (
  output: any,
  context: __SerdeContext
): AlertTarget => {
  return {
    __type: "AlertTarget",
    alertTargetArn:
      output.alertTargetArn !== undefined && output.alertTargetArn !== null
        ? output.alertTargetArn
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined
  } as any;
};

const deserializeAws_restJson1_1AlertTargets = (
  output: any,
  context: __SerdeContext
): { [key: string]: AlertTarget } => {
  return Object.entries(output).reduce(
    (
      acc: { [key: string]: AlertTarget },
      [key, value]: [AlertTargetType | string, any]
    ) => ({
      ...acc,
      [key]: deserializeAws_restJson1_1AlertTarget(value, context)
    }),
    {}
  );
};

const deserializeAws_restJson1_1Behavior = (
  output: any,
  context: __SerdeContext
): Behavior => {
  return {
    __type: "Behavior",
    criteria:
      output.criteria !== undefined && output.criteria !== null
        ? deserializeAws_restJson1_1BehaviorCriteria(output.criteria, context)
        : undefined,
    metric:
      output.metric !== undefined && output.metric !== null
        ? output.metric
        : undefined,
    name:
      output.name !== undefined && output.name !== null
        ? output.name
        : undefined
  } as any;
};

const deserializeAws_restJson1_1BehaviorCriteria = (
  output: any,
  context: __SerdeContext
): BehaviorCriteria => {
  return {
    __type: "BehaviorCriteria",
    comparisonOperator:
      output.comparisonOperator !== undefined &&
      output.comparisonOperator !== null
        ? output.comparisonOperator
        : undefined,
    consecutiveDatapointsToAlarm:
      output.consecutiveDatapointsToAlarm !== undefined &&
      output.consecutiveDatapointsToAlarm !== null
        ? output.consecutiveDatapointsToAlarm
        : undefined,
    consecutiveDatapointsToClear:
      output.consecutiveDatapointsToClear !== undefined &&
      output.consecutiveDatapointsToClear !== null
        ? output.consecutiveDatapointsToClear
        : undefined,
    durationSeconds:
      output.durationSeconds !== undefined && output.durationSeconds !== null
        ? output.durationSeconds
        : undefined,
    statisticalThreshold:
      output.statisticalThreshold !== undefined &&
      output.statisticalThreshold !== null
        ? deserializeAws_restJson1_1StatisticalThreshold(
            output.statisticalThreshold,
            context
          )
        : undefined,
    value:
      output.value !== undefined && output.value !== null
        ? deserializeAws_restJson1_1MetricValue(output.value, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Behaviors = (
  output: any,
  context: __SerdeContext
): Behavior[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1Behavior(entry, context)
  );
};

const deserializeAws_restJson1_1Cidrs = (
  output: any,
  context: __SerdeContext
): string[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1MetricValue = (
  output: any,
  context: __SerdeContext
): MetricValue => {
  return {
    __type: "MetricValue",
    cidrs:
      output.cidrs !== undefined && output.cidrs !== null
        ? deserializeAws_restJson1_1Cidrs(output.cidrs, context)
        : undefined,
    count:
      output.count !== undefined && output.count !== null
        ? output.count
        : undefined,
    ports:
      output.ports !== undefined && output.ports !== null
        ? deserializeAws_restJson1_1Ports(output.ports, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1Ports = (
  output: any,
  context: __SerdeContext
): number[] => {
  return (output || []).map((entry: any) => entry);
};

const deserializeAws_restJson1_1SecurityProfileIdentifier = (
  output: any,
  context: __SerdeContext
): SecurityProfileIdentifier => {
  return {
    __type: "SecurityProfileIdentifier",
    arn:
      output.arn !== undefined && output.arn !== null ? output.arn : undefined,
    name:
      output.name !== undefined && output.name !== null
        ? output.name
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SecurityProfileIdentifiers = (
  output: any,
  context: __SerdeContext
): SecurityProfileIdentifier[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1SecurityProfileIdentifier(entry, context)
  );
};

const deserializeAws_restJson1_1SecurityProfileTarget = (
  output: any,
  context: __SerdeContext
): SecurityProfileTarget => {
  return {
    __type: "SecurityProfileTarget",
    arn:
      output.arn !== undefined && output.arn !== null ? output.arn : undefined
  } as any;
};

const deserializeAws_restJson1_1SecurityProfileTargetMapping = (
  output: any,
  context: __SerdeContext
): SecurityProfileTargetMapping => {
  return {
    __type: "SecurityProfileTargetMapping",
    securityProfileIdentifier:
      output.securityProfileIdentifier !== undefined &&
      output.securityProfileIdentifier !== null
        ? deserializeAws_restJson1_1SecurityProfileIdentifier(
            output.securityProfileIdentifier,
            context
          )
        : undefined,
    target:
      output.target !== undefined && output.target !== null
        ? deserializeAws_restJson1_1SecurityProfileTarget(
            output.target,
            context
          )
        : undefined
  } as any;
};

const deserializeAws_restJson1_1SecurityProfileTargetMappings = (
  output: any,
  context: __SerdeContext
): SecurityProfileTargetMapping[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1SecurityProfileTargetMapping(entry, context)
  );
};

const deserializeAws_restJson1_1SecurityProfileTargets = (
  output: any,
  context: __SerdeContext
): SecurityProfileTarget[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1SecurityProfileTarget(entry, context)
  );
};

const deserializeAws_restJson1_1StatisticalThreshold = (
  output: any,
  context: __SerdeContext
): StatisticalThreshold => {
  return {
    __type: "StatisticalThreshold",
    statistic:
      output.statistic !== undefined && output.statistic !== null
        ? output.statistic
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ValidationError = (
  output: any,
  context: __SerdeContext
): ValidationError => {
  return {
    __type: "ValidationError",
    errorMessage:
      output.errorMessage !== undefined && output.errorMessage !== null
        ? output.errorMessage
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ValidationErrors = (
  output: any,
  context: __SerdeContext
): ValidationError[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ValidationError(entry, context)
  );
};

const deserializeAws_restJson1_1ViolationEvent = (
  output: any,
  context: __SerdeContext
): ViolationEvent => {
  return {
    __type: "ViolationEvent",
    behavior:
      output.behavior !== undefined && output.behavior !== null
        ? deserializeAws_restJson1_1Behavior(output.behavior, context)
        : undefined,
    metricValue:
      output.metricValue !== undefined && output.metricValue !== null
        ? deserializeAws_restJson1_1MetricValue(output.metricValue, context)
        : undefined,
    securityProfileName:
      output.securityProfileName !== undefined &&
      output.securityProfileName !== null
        ? output.securityProfileName
        : undefined,
    thingName:
      output.thingName !== undefined && output.thingName !== null
        ? output.thingName
        : undefined,
    violationEventTime:
      output.violationEventTime !== undefined &&
      output.violationEventTime !== null
        ? new Date(Math.round(output.violationEventTime * 1000))
        : undefined,
    violationEventType:
      output.violationEventType !== undefined &&
      output.violationEventType !== null
        ? output.violationEventType
        : undefined,
    violationId:
      output.violationId !== undefined && output.violationId !== null
        ? output.violationId
        : undefined
  } as any;
};

const deserializeAws_restJson1_1ViolationEvents = (
  output: any,
  context: __SerdeContext
): ViolationEvent[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1ViolationEvent(entry, context)
  );
};

const deserializeAws_restJson1_1StreamFile = (
  output: any,
  context: __SerdeContext
): StreamFile => {
  return {
    __type: "StreamFile",
    fileId:
      output.fileId !== undefined && output.fileId !== null
        ? output.fileId
        : undefined,
    s3Location:
      output.s3Location !== undefined && output.s3Location !== null
        ? deserializeAws_restJson1_1S3Location(output.s3Location, context)
        : undefined
  } as any;
};

const deserializeAws_restJson1_1StreamFiles = (
  output: any,
  context: __SerdeContext
): StreamFile[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1StreamFile(entry, context)
  );
};

const deserializeAws_restJson1_1StreamInfo = (
  output: any,
  context: __SerdeContext
): StreamInfo => {
  return {
    __type: "StreamInfo",
    createdAt:
      output.createdAt !== undefined && output.createdAt !== null
        ? new Date(Math.round(output.createdAt * 1000))
        : undefined,
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    files:
      output.files !== undefined && output.files !== null
        ? deserializeAws_restJson1_1StreamFiles(output.files, context)
        : undefined,
    lastUpdatedAt:
      output.lastUpdatedAt !== undefined && output.lastUpdatedAt !== null
        ? new Date(Math.round(output.lastUpdatedAt * 1000))
        : undefined,
    roleArn:
      output.roleArn !== undefined && output.roleArn !== null
        ? output.roleArn
        : undefined,
    streamArn:
      output.streamArn !== undefined && output.streamArn !== null
        ? output.streamArn
        : undefined,
    streamId:
      output.streamId !== undefined && output.streamId !== null
        ? output.streamId
        : undefined,
    streamVersion:
      output.streamVersion !== undefined && output.streamVersion !== null
        ? output.streamVersion
        : undefined
  } as any;
};

const deserializeAws_restJson1_1StreamSummary = (
  output: any,
  context: __SerdeContext
): StreamSummary => {
  return {
    __type: "StreamSummary",
    description:
      output.description !== undefined && output.description !== null
        ? output.description
        : undefined,
    streamArn:
      output.streamArn !== undefined && output.streamArn !== null
        ? output.streamArn
        : undefined,
    streamId:
      output.streamId !== undefined && output.streamId !== null
        ? output.streamId
        : undefined,
    streamVersion:
      output.streamVersion !== undefined && output.streamVersion !== null
        ? output.streamVersion
        : undefined
  } as any;
};

const deserializeAws_restJson1_1StreamsSummary = (
  output: any,
  context: __SerdeContext
): StreamSummary[] => {
  return (output || []).map((entry: any) =>
    deserializeAws_restJson1_1StreamSummary(entry, context)
  );
};

const deserializeAws_restJson1_1S3Location = (
  output: any,
  context: __SerdeContext
): S3Location => {
  return {
    __type: "S3Location",
    bucket:
      output.bucket !== undefined && output.bucket !== null
        ? output.bucket
        : undefined,
    key:
      output.key !== undefined && output.key !== null ? output.key : undefined,
    version:
      output.version !== undefined && output.version !== null
        ? output.version
        : undefined
  } as any;
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  httpHeaders: output.headers,
  requestId: output.headers["x-amzn-requestid"]
});

// Collect low-level response body stream to Uint8Array.
const collectBody = (
  streamBody: any = new Uint8Array(),
  context: __SerdeContext
): Promise<Uint8Array> => {
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return (
    context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
  );
};

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (
  streamBody: any,
  context: __SerdeContext
): Promise<string> =>
  collectBody(streamBody, context).then(body => context.utf8Encoder(body));

const isSerializableHeaderValue = (value: any): boolean =>
  value !== undefined &&
  value !== "" &&
  (!Object.getOwnPropertyNames(value).includes("length") ||
    value.length != 0) &&
  (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then(encoded => {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });

/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {
  const findKey = (object: any, key: string) =>
    Object.keys(object).find(k => k.toLowerCase() === key.toLowerCase());

  const sanitizeErrorCode = (rawValue: string): string => {
    let cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };

  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== undefined) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }

  if (data.code !== undefined) {
    return sanitizeErrorCode(data.code);
  }

  if (data["__type"] !== undefined) {
    return sanitizeErrorCode(data["__type"]);
  }

  return "";
};
