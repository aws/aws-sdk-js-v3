"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("./");
var util_buffer_from_1 = require("@aws/util-buffer-from");
jest.mock('crypto', function () {
    var cryptoModule = jest.genMockFromModule('crypto');
    var mockHash = {
        update: jest.fn(),
        digest: jest.fn(),
    };
    var mockHmac = {
        update: jest.fn(),
        digest: jest.fn(),
    };
    cryptoModule.createHash = jest.fn(function () { return mockHash; });
    cryptoModule.createHmac = jest.fn(function () { return mockHmac; });
    return cryptoModule;
});
var crypto_1 = require("crypto");
beforeEach(function () {
    var hash = crypto_1.createHash('');
    var hmac = crypto_1.createHmac('', '');
    hash.update.mockClear();
    hash.digest.mockClear();
    hmac.update.mockClear();
    hmac.digest.mockClear();
    crypto_1.createHash.mockClear();
    crypto_1.createHmac.mockClear();
});
describe('Sha256', function () {
    it('should create a hash object by default', function () {
        var sha256 = new _1.Sha256();
        expect(crypto_1.createHash.mock.calls.length).toBe(1);
        expect(crypto_1.createHash.mock.calls[0]).toEqual(['sha256']);
        expect(crypto_1.createHmac.mock.calls.length).toBe(0);
    });
    it('should create a hmac object if a secret is supplied', function () {
        var sha256 = new _1.Sha256('foo');
        expect(crypto_1.createHash.mock.calls.length).toBe(0);
        expect(crypto_1.createHmac.mock.calls.length).toBe(1);
        expect(crypto_1.createHmac.mock.calls[0])
            .toEqual(['sha256', util_buffer_from_1.fromString('foo')]);
    });
    it('should create a hmac object with a buffer secret', function () {
        var sha256 = new _1.Sha256(Uint8Array.from([0, 0]));
        expect(crypto_1.createHash.mock.calls.length).toBe(0);
        expect(crypto_1.createHmac.mock.calls.length).toBe(1);
        var _a = crypto_1.createHmac.mock.calls[0], method = _a[0], secret = _a[1];
        expect(method).toEqual('sha256');
        expect(util_buffer_from_1.fromArrayBuffer(Uint8Array.from([0, 0]).buffer).equals(secret));
    });
    it('should incrementally update a hash', function () {
        var hash = crypto_1.createHash('sha256');
        var calls = hash.update.mock.calls;
        var sha256 = new _1.Sha256();
        expect(calls.length).toBe(0);
        sha256.update('foo', 'ascii');
        expect(calls.length).toBe(1);
        expect(calls[0]).toEqual([util_buffer_from_1.fromString('foo', "ascii")]);
        sha256.update(Uint8Array.from([0, 0]));
        expect(calls.length).toBe(2);
        expect(calls[1][0]
            .equals(util_buffer_from_1.fromArrayBuffer(Uint8Array.from([0, 0]).buffer))).toBe(true);
        sha256.update(Uint8Array.from([0, 0]).buffer);
        expect(calls.length).toBe(3);
        expect(calls[2][0]
            .equals(util_buffer_from_1.fromArrayBuffer(Uint8Array.from([0, 0]).buffer))).toBe(true);
        sha256.digest();
        expect(calls.length).toBe(3);
        expect(hash.digest.mock.calls.length).toBe(1);
    });
    it('should incrementally update an hmac', function () {
        var hash = crypto_1.createHmac('sha256', 'foo');
        var calls = hash.update.mock.calls;
        var sha256 = new _1.Sha256('foo');
        expect(calls.length).toBe(0);
        sha256.update('foo', 'ascii');
        expect(calls.length).toBe(1);
        expect(calls[0]).toEqual([util_buffer_from_1.fromString('foo', "ascii")]);
        sha256.update(Uint8Array.from([0, 0]));
        expect(calls.length).toBe(2);
        expect(calls[1][0]
            .equals(util_buffer_from_1.fromArrayBuffer(Uint8Array.from([0, 0]).buffer))).toBe(true);
        sha256.update(Uint8Array.from([0, 0]).buffer);
        expect(calls.length).toBe(3);
        expect(calls[2][0]
            .equals(util_buffer_from_1.fromArrayBuffer(Uint8Array.from([0, 0]).buffer))).toBe(true);
        sha256.digest();
        expect(calls.length).toBe(3);
        expect(hash.digest.mock.calls.length).toBe(1);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvemhlYWxsYW4vRGVza3RvcC9hd3Mtc2RrLWpzLXN0YWdpbmcvYXdzLXNkay1qcy1zdGFnaW5nL3BhY2thZ2VzL2NyeXB0by1zaGEyNTYtbm9kZS9zcmMvIiwic291cmNlcyI6WyJpbmRleC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUJBQTBCO0FBQzFCLDBEQUFrRTtBQUVsRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtJQUNoQixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFRLENBQUM7SUFDN0QsSUFBTSxRQUFRLEdBQUc7UUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNwQixDQUFDO0lBQ0YsSUFBTSxRQUFRLEdBQUc7UUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNwQixDQUFDO0lBRUYsWUFBWSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxRQUFRLEVBQVIsQ0FBUSxDQUFDLENBQUM7SUFDbEQsWUFBWSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxRQUFRLEVBQVIsQ0FBUSxDQUFDLENBQUM7SUFFbEQsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUN4QixDQUFDLENBQUMsQ0FBQztBQUNILGlDQUE4QztBQUU5QyxVQUFVLENBQUM7SUFDUCxJQUFNLElBQUksR0FBRyxtQkFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLElBQU0sSUFBSSxHQUFHLG1CQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQyxNQUFjLENBQUMsU0FBUyxFQUFFLENB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LENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUMvRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUViLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFTO2FBQ2YsTUFBTSxDQUFDLGtDQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQy9ELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBRSxJQUFJLENBQUMsTUFBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NoYTI1Nn0gZnJvbSBcIi4vXCI7XG5pbXBvcnQge2Zyb21BcnJheUJ1ZmZlciwgZnJvbVN0cmluZ30gZnJvbSAnQGF3cy91dGlsLWJ1ZmZlci1mcm9tJztcblxuamVzdC5tb2NrKCdjcnlwdG8nLCAoKSA9PiB7XG4gICAgY29uc3QgY3J5cHRvTW9kdWxlID0gamVzdC5nZW5Nb2NrRnJvbU1vZHVsZSgnY3J5cHRvJykgYXMgYW55O1xuICAgIGNvbnN0IG1vY2tIYXNoID0ge1xuICAgICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgICAgZGlnZXN0OiBqZXN0LmZuKCksXG4gICAgfTtcbiAgICBjb25zdCBtb2NrSG1hYyA9IHtcbiAgICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgICAgIGRpZ2VzdDogamVzdC5mbigpLFxuICAgIH07XG5cbiAgICBjcnlwdG9Nb2R1bGUuY3JlYXRlSGFzaCA9IGplc3QuZm4oKCkgPT4gbW9ja0hhc2gpO1xuICAgIGNyeXB0b01vZHVsZS5jcmVhdGVIbWFjID0gamVzdC5mbigoKSA9PiBtb2NrSG1hYyk7XG5cbiAgICByZXR1cm4gY3J5cHRvTW9kdWxlO1xufSk7XG5pbXBvcnQge2NyZWF0ZUhhc2gsIGNyZWF0ZUhtYWN9IGZyb20gJ2NyeXB0byc7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKCcnKTtcbiAgICBjb25zdCBobWFjID0gY3JlYXRlSG1hYygnJywgJycpO1xuICAgIChoYXNoLnVwZGF0ZSBhcyBhbnkpLm1vY2tDbGVhcigpO1xuICAgIChoYXNoLmRpZ2VzdCBhcyBhbnkpLm1vY2tDbGVhcigpO1xuICAgIChobWFjLnVwZGF0ZSBhcyBhbnkpLm1vY2tDbGVhcigpO1xuICAgIChobWFjLmRpZ2VzdCBhcyBhbnkpLm1vY2tDbGVhcigpO1xuICAgIChjcmVhdGVIYXNoIGFzIGFueSkubW9ja0NsZWFyKCk7XG4gICAgKGNyZWF0ZUhtYWMgYXMgYW55KS5tb2NrQ2xlYXIoKTtcbn0pO1xuXG5kZXNjcmliZSgnU2hhMjU2JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgaGFzaCBvYmplY3QgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2hhMjU2ID0gbmV3IFNoYTI1NigpO1xuXG4gICAgICAgIGV4cGVjdCgoY3JlYXRlSGFzaCBhcyBhbnkpLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoKGNyZWF0ZUhhc2ggYXMgYW55KS5tb2NrLmNhbGxzWzBdKS50b0VxdWFsKFsnc2hhMjU2J10pO1xuICAgICAgICBleHBlY3QoKGNyZWF0ZUhtYWMgYXMgYW55KS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgaG1hYyBvYmplY3QgaWYgYSBzZWNyZXQgaXMgc3VwcGxpZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoYTI1NiA9IG5ldyBTaGEyNTYoJ2ZvbycpO1xuXG4gICAgICAgIGV4cGVjdCgoY3JlYXRlSGFzaCBhcyBhbnkpLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoKGNyZWF0ZUhtYWMgYXMgYW55KS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KChjcmVhdGVIbWFjIGFzIGFueSkubW9jay5jYWxsc1swXSlcbiAgICAgICAgICAgIC50b0VxdWFsKFsnc2hhMjU2JywgZnJvbVN0cmluZygnZm9vJyldKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgaG1hYyBvYmplY3Qgd2l0aCBhIGJ1ZmZlciBzZWNyZXQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoYTI1NiA9IG5ldyBTaGEyNTYoVWludDhBcnJheS5mcm9tKFswLCAwXSkpO1xuXG4gICAgICAgIGV4cGVjdCgoY3JlYXRlSGFzaCBhcyBhbnkpLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoKGNyZWF0ZUhtYWMgYXMgYW55KS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcblxuICAgICAgICBjb25zdCBbbWV0aG9kLCBzZWNyZXRdID0gKGNyZWF0ZUhtYWMgYXMgYW55KS5tb2NrLmNhbGxzWzBdO1xuICAgICAgICBleHBlY3QobWV0aG9kKS50b0VxdWFsKCdzaGEyNTYnKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZnJvbUFycmF5QnVmZmVyKFVpbnQ4QXJyYXkuZnJvbShbMCwgMF0pLmJ1ZmZlcikuZXF1YWxzKHNlY3JldClcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jcmVtZW50YWxseSB1cGRhdGUgYSBoYXNoJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgnc2hhMjU2Jyk7XG4gICAgICAgIGNvbnN0IHtjYWxsc30gPSAoaGFzaC51cGRhdGUgYXMgYW55KS5tb2NrO1xuXG4gICAgICAgIGNvbnN0IHNoYTI1NiA9IG5ldyBTaGEyNTYoKTtcbiAgICAgICAgZXhwZWN0KGNhbGxzLmxlbmd0aCkudG9CZSgwKTtcblxuICAgICAgICBzaGEyNTYudXBkYXRlKCdmb28nLCAnYXNjaWknKTtcbiAgICAgICAgZXhwZWN0KGNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGNhbGxzWzBdKS50b0VxdWFsKFtmcm9tU3RyaW5nKCdmb28nLCBcImFzY2lpXCIpXSk7XG5cbiAgICAgICAgc2hhMjU2LnVwZGF0ZShVaW50OEFycmF5LmZyb20oWzAsIDBdKSk7XG4gICAgICAgIGV4cGVjdChjYWxscy5sZW5ndGgpLnRvQmUoMik7XG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIChjYWxsc1sxXVswXSBhcyBhbnkpXG4gICAgICAgICAgICAgICAgLmVxdWFscyhmcm9tQXJyYXlCdWZmZXIoVWludDhBcnJheS5mcm9tKFswLCAwXSkuYnVmZmVyKSlcbiAgICAgICAgKS50b0JlKHRydWUpO1xuXG4gICAgICAgIHNoYTI1Ni51cGRhdGUoVWludDhBcnJheS5mcm9tKFswLCAwXSkuYnVmZmVyKTtcbiAgICAgICAgZXhwZWN0KGNhbGxzLmxlbmd0aCkudG9CZSgzKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgKGNhbGxzWzJdWzBdIGFzIGFueSlcbiAgICAgICAgICAgICAgICAuZXF1YWxzKGZyb21BcnJheUJ1ZmZlcihVaW50OEFycmF5LmZyb20oWzAsIDBdKS5idWZmZXIpKVxuICAgICAgICApLnRvQmUodHJ1ZSk7XG5cbiAgICAgICAgc2hhMjU2LmRpZ2VzdCgpO1xuICAgICAgICBleHBlY3QoY2FsbHMubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgICBleHBlY3QoKGhhc2guZGlnZXN0IGFzIGFueSkubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY3JlbWVudGFsbHkgdXBkYXRlIGFuIGhtYWMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIbWFjKCdzaGEyNTYnLCAnZm9vJyk7XG4gICAgICAgIGNvbnN0IHtjYWxsc30gPSAoaGFzaC51cGRhdGUgYXMgYW55KS5tb2NrO1xuXG4gICAgICAgIGNvbnN0IHNoYTI1NiA9IG5ldyBTaGEyNTYoJ2ZvbycpO1xuICAgICAgICBleHBlY3QoY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuXG4gICAgICAgIHNoYTI1Ni51cGRhdGUoJ2ZvbycsICdhc2NpaScpO1xuICAgICAgICBleHBlY3QoY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoY2FsbHNbMF0pLnRvRXF1YWwoW2Zyb21TdHJpbmcoJ2ZvbycsIFwiYXNjaWlcIildKTtcblxuICAgICAgICBzaGEyNTYudXBkYXRlKFVpbnQ4QXJyYXkuZnJvbShbMCwgMF0pKTtcbiAgICAgICAgZXhwZWN0KGNhbGxzLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgKGNhbGxzWzFdWzBdIGFzIGFueSlcbiAgICAgICAgICAgICAgICAuZXF1YWxzKGZyb21BcnJheUJ1ZmZlcihVaW50OEFycmF5LmZyb20oWzAsIDBdKS5idWZmZXIpKVxuICAgICAgICApLnRvQmUodHJ1ZSk7XG5cbiAgICAgICAgc2hhMjU2LnVwZGF0ZShVaW50OEFycmF5LmZyb20oWzAsIDBdKS5idWZmZXIpO1xuICAgICAgICBleHBlY3QoY2FsbHMubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAoY2FsbHNbMl1bMF0gYXMgYW55KVxuICAgICAgICAgICAgICAgIC5lcXVhbHMoZnJvbUFycmF5QnVmZmVyKFVpbnQ4QXJyYXkuZnJvbShbMCwgMF0pLmJ1ZmZlcikpXG4gICAgICAgICkudG9CZSh0cnVlKTtcblxuICAgICAgICBzaGEyNTYuZGlnZXN0KCk7XG4gICAgICAgIGV4cGVjdChjYWxscy5sZW5ndGgpLnRvQmUoMyk7XG4gICAgICAgIGV4cGVjdCgoaGFzaC5kaWdlc3QgYXMgYW55KS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgICB9KTtcbn0pO1xuIl19