var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var protocol_timestamp_1 = require("@aws/protocol-timestamp");
var pixl_xml_1 = require("./pixl-xml");
var XMLParser = (function () {
    function XMLParser(base64Decoder) {
        this.base64Decoder = base64Decoder;
    }
    XMLParser.prototype.parse = function (structure, input) {
        input = input.split('').filter(function (c) { return '\t\r\n'.indexOf(c) < 0; }).join('');
        var parseOption = { preserveAttributes: true };
        return this.unmarshaller(structure.shape, pixl_xml_1.parse(input, parseOption));
    };
    XMLParser.prototype.unmarshaller = function (structure, xmlObj) {
        if (structure.type === 'structure') {
            return this.parseStructure(structure, xmlObj);
        }
        else if (structure.type === 'list') {
            return this.parseList(structure, xmlObj);
        }
        else if (structure.type === 'map') {
            return this.parseMap(structure, xmlObj);
        }
        else if (structure.type === 'blob') {
            if (!xmlObj) {
                return undefined;
            }
            return this.base64Decoder(xmlObj.toString());
        }
        else if (structure.type === 'boolean') {
            return this.parseBoolean(structure, xmlObj);
        }
        else if (structure.type === 'number') {
            if (!xmlObj || xmlObj === 'null' || xmlObj === 'undefined') {
                return undefined;
            }
            return Number(xmlObj).valueOf();
        }
        else if (structure.type === 'string') {
            return xmlObj ? xmlObj.toString() : undefined;
        }
        else if (structure.type === 'timestamp') {
            return this.parseTimeStamp(structure, xmlObj);
        }
        else {
            throw new Error(structure.type + " can not be parsed");
        }
    };
    XMLParser.prototype.parseStructure = function (structure, xmlObj) {
        var obj = {};
        try {
            for (var _a = __values(Object.keys(structure.members)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var memberName = _b.value;
                var member = structure.members[memberName];
                var xmlKey = this.mapToXMLKey(member, memberName);
                var subXmlObj = xmlObj;
                if (member.xmlAttribute) {
                    subXmlObj = xmlObj['_Attribs'];
                }
                obj[memberName] = this.unmarshaller(member.shape, subXmlObj[xmlKey]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return obj;
        var e_1, _c;
    };
    XMLParser.prototype.mapToXMLKey = function (member, name) {
        var keyName = member.locationName ? member.locationName : name;
        if (member.shape.type === 'list') {
            keyName = member.shape.flattened ? (member.shape.member.locationName ? member.shape.member.locationName : "member") : keyName;
        }
        return keyName;
    };
    XMLParser.prototype.parseList = function (structure, xmlObj) {
        var list = [], xmlList = xmlObj;
        if (!xmlObj || Object.keys(xmlObj).length === 0) {
            return list;
        }
        if (!Array.isArray(xmlObj)) {
            var key = structure.member.locationName ? structure.member.locationName : 'member';
            xmlList = xmlObj[key];
            if (!xmlList || Object.keys(xmlList).length === 0) {
                return list;
            }
            if (!Array.isArray(xmlList)) {
                xmlList = [xmlList];
            }
        }
        try {
            for (var xmlList_1 = __values(xmlList), xmlList_1_1 = xmlList_1.next(); !xmlList_1_1.done; xmlList_1_1 = xmlList_1.next()) {
                var xmlObjEntry = xmlList_1_1.value;
                list.push(this.unmarshaller(structure.member.shape, xmlObjEntry));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (xmlList_1_1 && !xmlList_1_1.done && (_a = xmlList_1.return)) _a.call(xmlList_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return list;
        var e_2, _a;
    };
    XMLParser.prototype.parseMap = function (structure, xmlObj) {
        var obj = {}, mapEntryList = xmlObj;
        if (!structure.flattened) {
            mapEntryList = xmlObj["entry"];
        }
        if (!mapEntryList || Object.keys(mapEntryList).length === 0) {
            return {};
        }
        if (!Array.isArray(mapEntryList)) {
            mapEntryList = [mapEntryList];
        }
        try {
            for (var mapEntryList_1 = __values(mapEntryList), mapEntryList_1_1 = mapEntryList_1.next(); !mapEntryList_1_1.done; mapEntryList_1_1 = mapEntryList_1.next()) {
                var mapEntry = mapEntryList_1_1.value;
                var keyName = structure.key.locationName ? structure.key.locationName : "key";
                var valueName = structure.value.locationName ? structure.value.locationName : "value";
                obj[mapEntry[keyName]] = this.unmarshaller(structure.value.shape, mapEntry[valueName]);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (mapEntryList_1_1 && !mapEntryList_1_1.done && (_a = mapEntryList_1.return)) _a.call(mapEntryList_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return obj;
        var e_3, _a;
    };
    XMLParser.prototype.parseBoolean = function (structure, xmlObj) {
        if (!xmlObj || xmlObj === 'null' || xmlObj === 'undefined') {
            return undefined;
        }
        else if (xmlObj === 'false') {
            return false;
        }
        return Boolean(xmlObj).valueOf();
    };
    XMLParser.prototype.parseTimeStamp = function (structure, xmlObj) {
        if (!xmlObj || xmlObj === 'null' || xmlObj === 'undefined') {
            return undefined;
        }
        var date = protocol_timestamp_1.toDate(xmlObj);
        if (date.toString() === "Invalid Date") {
            return undefined;
        }
        return date;
    };
    return XMLParser;
}());
exports.XMLParser = XMLParser;
//# sourceMappingURL=data:application/json;base64,