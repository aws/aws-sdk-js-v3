"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Token_1 = require("./Token");
var TokenSource_1 = require("./TokenSource");
describe('Token', function () {
    it('should not be cancellable if no source provided at construction', function () {
        var token = new Token_1.Token();
        expect(token.cancellable).toBe(false);
        expect(token.isCancellationRequested).toBe(false);
    });
    it('should defer cancellation queries to parent token source', function () {
        var source = { isCancellationRequested: true };
        var token = new Token_1.Token(source);
        expect(token.isCancellationRequested).toBe(true);
        source.isCancellationRequested = false;
        expect(token.isCancellationRequested).toBe(false);
    });
    it('should register cancellation handlers when onCancellationRequested called', function () {
        var source = new TokenSource_1.TokenSource();
        source.registerCancellationHandler = jest.fn();
        var token = new Token_1.Token(source);
        var cb = function () { };
        token.onCancellationRequested(cb);
        expect(source.registerCancellationHandler).toHaveBeenCalledWith(cb);
    });
    it('should throw if cancellation requested and throwIfCancellationRequested called', function () {
        var token = new Token_1.Token({ isCancellationRequested: true });
        expect(function () {
            token.throwIfCancellationRequested('PANIC PANIC PANIC');
        }).toThrow('PANIC PANIC PANIC');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW4uc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2tlbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQThCO0FBQzlCLDZDQUEwQztBQUUxQyxRQUFRLENBQUMsT0FBTyxFQUFFO0lBQ2QsRUFBRSxDQUFDLGlFQUFpRSxFQUFFO1FBQ2xFLElBQU0sS0FBSyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7UUFFMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRTtRQUMzRCxJQUFNLE1BQU0sR0FBRyxFQUFDLHVCQUF1QixFQUFFLElBQUksRUFBQyxDQUFDO1FBQy9DLElBQU0sS0FBSyxHQUFHLElBQUksYUFBSyxDQUFjLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztRQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUNFLDJFQUEyRSxFQUMzRTtRQUNJLElBQU0sTUFBTSxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDL0MsSUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEMsSUFBTSxFQUFFLEdBQUcsY0FBTyxDQUFDLENBQUM7UUFDcEIsS0FBSyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FDRSxnRkFBZ0YsRUFDaEY7UUFDSSxJQUFNLEtBQUssR0FBRyxJQUFJLGFBQUssQ0FBYyxFQUFDLHVCQUF1QixFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFFdEUsTUFBTSxDQUFDO1lBQ0gsS0FBSyxDQUFDLDRCQUE0QixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUNKLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VG9rZW59IGZyb20gXCIuL1Rva2VuXCI7XG5pbXBvcnQge1Rva2VuU291cmNlfSBmcm9tIFwiLi9Ub2tlblNvdXJjZVwiO1xuXG5kZXNjcmliZSgnVG9rZW4nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBub3QgYmUgY2FuY2VsbGFibGUgaWYgbm8gc291cmNlIHByb3ZpZGVkIGF0IGNvbnN0cnVjdGlvbicsICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4oKTtcblxuICAgICAgICBleHBlY3QodG9rZW4uY2FuY2VsbGFibGUpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QodG9rZW4uaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZWZlciBjYW5jZWxsYXRpb24gcXVlcmllcyB0byBwYXJlbnQgdG9rZW4gc291cmNlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB7aXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IHRydWV9O1xuICAgICAgICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbig8VG9rZW5Tb3VyY2U+c291cmNlKTtcblxuICAgICAgICBleHBlY3QodG9rZW4uaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIHNvdXJjZS5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICBleHBlY3QodG9rZW4uaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXG4gICAgICAgICdzaG91bGQgcmVnaXN0ZXIgY2FuY2VsbGF0aW9uIGhhbmRsZXJzIHdoZW4gb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQgY2FsbGVkJyxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbmV3IFRva2VuU291cmNlKCk7XG4gICAgICAgICAgICBzb3VyY2UucmVnaXN0ZXJDYW5jZWxsYXRpb25IYW5kbGVyID0gamVzdC5mbigpO1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4oc291cmNlKTtcblxuICAgICAgICAgICAgY29uc3QgY2IgPSAoKSA9PiB7fTtcbiAgICAgICAgICAgIHRva2VuLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNiKTtcbiAgICAgICAgICAgIGV4cGVjdChzb3VyY2UucmVnaXN0ZXJDYW5jZWxsYXRpb25IYW5kbGVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjYik7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgaXQoXG4gICAgICAgICdzaG91bGQgdGhyb3cgaWYgY2FuY2VsbGF0aW9uIHJlcXVlc3RlZCBhbmQgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCBjYWxsZWQnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbig8VG9rZW5Tb3VyY2U+e2lzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiB0cnVlfSk7XG5cbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9rZW4udGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCgnUEFOSUMgUEFOSUMgUEFOSUMnKTtcbiAgICAgICAgICAgIH0pLnRvVGhyb3coJ1BBTklDIFBBTklDIFBBTklDJyk7XG4gICAgICAgIH1cbiAgICApO1xufSk7XG4iXX0=