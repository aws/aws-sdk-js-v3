"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Token_1 = require("./Token");
var TokenSource_1 = require("./TokenSource");
jest.useFakeTimers();
describe('TokenSource', function () {
    it('should return a new token on each property access', function () {
        var source = new TokenSource_1.TokenSource();
        var token = source.getToken();
        expect(token).toBeInstanceOf(Token_1.Token);
        expect(source.getToken()).not.toBe(token);
    });
    it('should report that cancellation was requested after cancel called', function () {
        var source = new TokenSource_1.TokenSource();
        expect(source.isCancellationRequested).toBe(false);
        source.cancel();
        expect(source.isCancellationRequested).toBe(true);
    });
    it('should invoke registered cancellation handlers on cancellation', function () {
        var source = new TokenSource_1.TokenSource();
        var cb = jest.fn();
        source.registerCancellationHandler(cb);
        expect(cb).not.toHaveBeenCalled();
        source.cancel();
        jest.runAllTimers();
        expect(cb).toHaveBeenCalled();
    });
    it('should not invoke registered handlers if silent cancellation requested', function () {
        var source = new TokenSource_1.TokenSource();
        var cb = jest.fn();
        source.registerCancellationHandler(cb);
        expect(cb).not.toHaveBeenCalled();
        source.cancel(false);
        jest.runAllTimers();
        expect(cb).not.toHaveBeenCalled();
    });
    it('should invoke cancellation handlers immediately if cancellation already requested', function () {
        var timeoutMock = setTimeout;
        var source = new TokenSource_1.TokenSource();
        var cb = jest.fn();
        source.cancel(false);
        source.registerCancellationHandler(cb);
        expect(timeoutMock).toHaveBeenCalledWith(cb, 0);
        jest.runAllTimers();
        expect(cb).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5Tb3VyY2Uuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub2tlblNvdXJjZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQThCO0FBQzlCLDZDQUEwQztBQUUxQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFFckIsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUNwQixFQUFFLENBQUMsbURBQW1ELEVBQUU7UUFDcEQsSUFBTSxNQUFNLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDakMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBSyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQ0UsbUVBQW1FLEVBQ25FO1FBQ0ksSUFBTSxNQUFNLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FBQyxnRUFBZ0UsRUFBRTtRQUNqRSxJQUFNLE1BQU0sR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztRQUNqQyxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckIsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUNFLHdFQUF3RSxFQUN4RTtRQUNJLElBQU0sTUFBTSxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQ2pDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQixNQUFNLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN0QyxDQUFDLENBQ0osQ0FBQztJQUVGLEVBQUUsQ0FDRSxtRkFBbUYsRUFDbkY7UUFDSSxJQUFNLFdBQVcsR0FBUSxVQUFVLENBQUM7UUFFcEMsSUFBTSxNQUFNLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDakMsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FDSixDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rva2VufSBmcm9tIFwiLi9Ub2tlblwiO1xuaW1wb3J0IHtUb2tlblNvdXJjZX0gZnJvbSBcIi4vVG9rZW5Tb3VyY2VcIjtcblxuamVzdC51c2VGYWtlVGltZXJzKCk7XG5cbmRlc2NyaWJlKCdUb2tlblNvdXJjZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIG5ldyB0b2tlbiBvbiBlYWNoIHByb3BlcnR5IGFjY2VzcycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gbmV3IFRva2VuU291cmNlKCk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gc291cmNlLmdldFRva2VuKCk7XG4gICAgICAgIGV4cGVjdCh0b2tlbikudG9CZUluc3RhbmNlT2YoVG9rZW4pO1xuICAgICAgICBleHBlY3Qoc291cmNlLmdldFRva2VuKCkpLm5vdC50b0JlKHRva2VuKTtcbiAgICB9KTtcblxuICAgIGl0KFxuICAgICAgICAnc2hvdWxkIHJlcG9ydCB0aGF0IGNhbmNlbGxhdGlvbiB3YXMgcmVxdWVzdGVkIGFmdGVyIGNhbmNlbCBjYWxsZWQnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBuZXcgVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgICAgIGV4cGVjdChzb3VyY2UuaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgc291cmNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgZXhwZWN0KHNvdXJjZS5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBpdCgnc2hvdWxkIGludm9rZSByZWdpc3RlcmVkIGNhbmNlbGxhdGlvbiBoYW5kbGVycyBvbiBjYW5jZWxsYXRpb24nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBUb2tlblNvdXJjZSgpO1xuICAgICAgICBjb25zdCBjYiA9IGplc3QuZm4oKTtcbiAgICAgICAgc291cmNlLnJlZ2lzdGVyQ2FuY2VsbGF0aW9uSGFuZGxlcihjYik7XG4gICAgICAgIGV4cGVjdChjYikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgc291cmNlLmNhbmNlbCgpO1xuICAgICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgICAgICBleHBlY3QoY2IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFxuICAgICAgICAnc2hvdWxkIG5vdCBpbnZva2UgcmVnaXN0ZXJlZCBoYW5kbGVycyBpZiBzaWxlbnQgY2FuY2VsbGF0aW9uIHJlcXVlc3RlZCcsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBUb2tlblNvdXJjZSgpO1xuICAgICAgICAgICAgY29uc3QgY2IgPSBqZXN0LmZuKCk7XG4gICAgICAgICAgICBzb3VyY2UucmVnaXN0ZXJDYW5jZWxsYXRpb25IYW5kbGVyKGNiKTtcbiAgICAgICAgICAgIGV4cGVjdChjYikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIHNvdXJjZS5jYW5jZWwoZmFsc2UpO1xuICAgICAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICAgICAgICAgIGV4cGVjdChjYikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBpdChcbiAgICAgICAgJ3Nob3VsZCBpbnZva2UgY2FuY2VsbGF0aW9uIGhhbmRsZXJzIGltbWVkaWF0ZWx5IGlmIGNhbmNlbGxhdGlvbiBhbHJlYWR5IHJlcXVlc3RlZCcsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRNb2NrID0gPGFueT5zZXRUaW1lb3V0O1xuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBuZXcgVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGNiID0gamVzdC5mbigpO1xuICAgICAgICAgICAgc291cmNlLmNhbmNlbChmYWxzZSk7XG4gICAgICAgICAgICBzb3VyY2UucmVnaXN0ZXJDYW5jZWxsYXRpb25IYW5kbGVyKGNiKTtcbiAgICAgICAgICAgIGV4cGVjdCh0aW1lb3V0TW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2IsIDApO1xuICAgICAgICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICAgICAgICAgIGV4cGVjdChjYikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9XG4gICAgKTtcbn0pO1xuIl19