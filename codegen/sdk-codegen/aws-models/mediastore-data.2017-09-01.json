{
  "smithy": "1.0",
  "metadata": {
    "suppressions": [
      {
        "id": "HttpMethodSemantics",
        "namespace": "*"
      },
      {
        "id": "HttpResponseCodeSemantics",
        "namespace": "*"
      },
      {
        "id": "PaginatedTrait",
        "namespace": "*"
      },
      {
        "id": "HttpHeaderTrait",
        "namespace": "*"
      },
      {
        "id": "HttpUriConflict",
        "namespace": "*"
      },
      {
        "id": "Service",
        "namespace": "*"
      }
    ]
  },
  "shapes": {
    "com.amazonaws.mediastoredata#ContainerNotFoundException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.mediastoredata#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The specified container was not found for the specified account.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 404
      }
    },
    "com.amazonaws.mediastoredata#ContentRangePattern": {
      "type": "string",
      "traits": {
        "smithy.api#pattern": "^bytes=\\d+\\-\\d+/\\d+$"
      }
    },
    "com.amazonaws.mediastoredata#ContentType": {
      "type": "string",
      "traits": {
        "smithy.api#pattern": "^[\\w\\-\\/\\.\\+]{1,255}$"
      }
    },
    "com.amazonaws.mediastoredata#DeleteObject": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.mediastoredata#DeleteObjectRequest"
      },
      "output": {
        "target": "com.amazonaws.mediastoredata#DeleteObjectResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.mediastoredata#ContainerNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#InternalServerError"
        },
        {
          "target": "com.amazonaws.mediastoredata#ObjectNotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Deletes an object at the specified path.</p>",
        "smithy.api#http": {
          "method": "DELETE",
          "uri": "/{Path+}",
          "code": 200
        }
      }
    },
    "com.amazonaws.mediastoredata#DeleteObjectRequest": {
      "type": "structure",
      "members": {
        "Path": {
          "target": "com.amazonaws.mediastoredata#PathNaming",
          "traits": {
            "smithy.api#documentation": "<p>The path (including the file name) where the object is stored in the container.\n         Format: <folder name>/<folder name>/<file name></p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#DeleteObjectResponse": {
      "type": "structure",
      "members": {}
    },
    "com.amazonaws.mediastoredata#DescribeObject": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.mediastoredata#DescribeObjectRequest"
      },
      "output": {
        "target": "com.amazonaws.mediastoredata#DescribeObjectResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.mediastoredata#ContainerNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#InternalServerError"
        },
        {
          "target": "com.amazonaws.mediastoredata#ObjectNotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Gets the headers for an object at the specified path.</p>",
        "smithy.api#http": {
          "method": "HEAD",
          "uri": "/{Path+}",
          "code": 200
        }
      }
    },
    "com.amazonaws.mediastoredata#DescribeObjectRequest": {
      "type": "structure",
      "members": {
        "Path": {
          "target": "com.amazonaws.mediastoredata#PathNaming",
          "traits": {
            "smithy.api#documentation": "<p>The path (including the file name) where the object is stored in the container.\n         Format: <folder name>/<folder name>/<file name></p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#DescribeObjectResponse": {
      "type": "structure",
      "members": {
        "ETag": {
          "target": "com.amazonaws.mediastoredata#ETag",
          "traits": {
            "smithy.api#documentation": "<p>The ETag that represents a unique instance of the object.</p>",
            "smithy.api#httpHeader": "ETag"
          }
        },
        "ContentType": {
          "target": "com.amazonaws.mediastoredata#ContentType",
          "traits": {
            "smithy.api#documentation": "<p>The content type of the object.</p>",
            "smithy.api#httpHeader": "Content-Type"
          }
        },
        "ContentLength": {
          "target": "com.amazonaws.mediastoredata#NonNegativeLong",
          "traits": {
            "smithy.api#documentation": "<p>The length of the object in bytes.</p>",
            "smithy.api#httpHeader": "Content-Length"
          }
        },
        "CacheControl": {
          "target": "com.amazonaws.mediastoredata#StringPrimitive",
          "traits": {
            "smithy.api#documentation": "<p>An optional <code>CacheControl</code> header that allows the caller to control the\n         object's cache behavior. Headers can be passed in as specified in the HTTP at <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>\n         <p>Headers with a custom user-defined value are also accepted.</p>",
            "smithy.api#httpHeader": "Cache-Control"
          }
        },
        "LastModified": {
          "target": "com.amazonaws.mediastoredata#TimeStamp",
          "traits": {
            "smithy.api#documentation": "<p>The date and time that the object was last modified.</p>",
            "smithy.api#httpHeader": "Last-Modified"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#ETag": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 64
        },
        "smithy.api#pattern": "[0-9A-Fa-f]+"
      }
    },
    "com.amazonaws.mediastoredata#ErrorMessage": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 255
        },
        "smithy.api#pattern": "[ \\w:\\.\\?-]+"
      }
    },
    "com.amazonaws.mediastoredata#GetObject": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.mediastoredata#GetObjectRequest"
      },
      "output": {
        "target": "com.amazonaws.mediastoredata#GetObjectResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.mediastoredata#ContainerNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#InternalServerError"
        },
        {
          "target": "com.amazonaws.mediastoredata#ObjectNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#RequestedRangeNotSatisfiableException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Downloads the object at the specified path.</p>",
        "smithy.api#http": {
          "method": "GET",
          "uri": "/{Path+}",
          "code": 200
        }
      }
    },
    "com.amazonaws.mediastoredata#GetObjectRequest": {
      "type": "structure",
      "members": {
        "Path": {
          "target": "com.amazonaws.mediastoredata#PathNaming",
          "traits": {
            "smithy.api#documentation": "<p>The path (including the file name) where the object is stored in the container.\n         Format: <folder name>/<folder name>/<file name></p>\n         <p>For example, to upload the file <code>mlaw.avi</code> to the folder path\n            <code>premium\\canada</code> in the container <code>movies</code>, enter the path\n            <code>premium/canada/mlaw.avi</code>.</p>\n         <p>Do not include the container name in this path.</p>\n         <p>If the path includes any folders that don't exist yet, the service creates them. For\n         example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify\n            <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the\n            <code>premium</code> folder. You then have two subfolders, <code>usa</code> and\n            <code>canada</code>, in the <code>premium</code> folder. </p>\n         <p>There is no correlation between the path to the source and the path (folders) in the\n         container in AWS Elemental MediaStore.</p>\n         <p>For more information about folders and how they exist in a container, see the <a href=\"http://docs.aws.amazon.com/mediastore/latest/ug/\">AWS Elemental MediaStore User\n            Guide</a>.</p>\n         <p>The file name is the name that is assigned to the file that you upload. The file can\n         have the same name inside and outside of AWS Elemental MediaStore, or it can have the same\n         name. The file name can include or omit an extension. </p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "Range": {
          "target": "com.amazonaws.mediastoredata#RangePattern",
          "traits": {
            "smithy.api#documentation": "<p>The range bytes of an object to retrieve. For more information about the\n            <code>Range</code> header, go to <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>",
            "smithy.api#httpHeader": "Range"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#GetObjectResponse": {
      "type": "structure",
      "members": {
        "Body": {
          "target": "com.amazonaws.mediastoredata#PayloadBlob",
          "traits": {
            "smithy.api#documentation": "<p>The bytes of the object. </p>",
            "smithy.api#httpPayload": {}
          }
        },
        "CacheControl": {
          "target": "com.amazonaws.mediastoredata#StringPrimitive",
          "traits": {
            "smithy.api#documentation": "<p>An optional <code>CacheControl</code> header that allows the caller to control the\n         object's cache behavior. Headers can be passed in as specified in the HTTP spec at <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>\n         <p>Headers with a custom user-defined value are also accepted.</p>",
            "smithy.api#httpHeader": "Cache-Control"
          }
        },
        "ContentRange": {
          "target": "com.amazonaws.mediastoredata#ContentRangePattern",
          "traits": {
            "smithy.api#documentation": "<p>The range of bytes to retrieve.</p>",
            "smithy.api#httpHeader": "Content-Range"
          }
        },
        "ContentLength": {
          "target": "com.amazonaws.mediastoredata#NonNegativeLong",
          "traits": {
            "smithy.api#documentation": "<p>The length of the object in bytes.</p>",
            "smithy.api#httpHeader": "Content-Length"
          }
        },
        "ContentType": {
          "target": "com.amazonaws.mediastoredata#ContentType",
          "traits": {
            "smithy.api#documentation": "<p>The content type of the object.</p>",
            "smithy.api#httpHeader": "Content-Type"
          }
        },
        "ETag": {
          "target": "com.amazonaws.mediastoredata#ETag",
          "traits": {
            "smithy.api#documentation": "<p>The ETag that represents a unique instance of the object.</p>",
            "smithy.api#httpHeader": "ETag"
          }
        },
        "LastModified": {
          "target": "com.amazonaws.mediastoredata#TimeStamp",
          "traits": {
            "smithy.api#documentation": "<p>The date and time that the object was last modified.</p>",
            "smithy.api#httpHeader": "Last-Modified"
          }
        },
        "StatusCode": {
          "target": "com.amazonaws.mediastoredata#statusCode",
          "traits": {
            "smithy.api#documentation": "<p>The HTML status code of the request. Status codes ranging from 200 to 299 indicate\n         success. All other status codes indicate the type of error that occurred.</p>",
            "smithy.api#httpResponseCode": {},
            "smithy.api#required": {}
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#InternalServerError": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.mediastoredata#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The service is temporarily unavailable.</p>",
        "smithy.api#error": "server"
      }
    },
    "com.amazonaws.mediastoredata#Item": {
      "type": "structure",
      "members": {
        "Name": {
          "target": "com.amazonaws.mediastoredata#ItemName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the item.</p>"
          }
        },
        "Type": {
          "target": "com.amazonaws.mediastoredata#ItemType",
          "traits": {
            "smithy.api#documentation": "<p>The item type (folder or object).</p>"
          }
        },
        "ETag": {
          "target": "com.amazonaws.mediastoredata#ETag",
          "traits": {
            "smithy.api#documentation": "<p>The ETag that represents a unique instance of the item.</p>"
          }
        },
        "LastModified": {
          "target": "com.amazonaws.mediastoredata#TimeStamp",
          "traits": {
            "smithy.api#documentation": "<p>The date and time that the item was last modified.</p>"
          }
        },
        "ContentType": {
          "target": "com.amazonaws.mediastoredata#ContentType",
          "traits": {
            "smithy.api#documentation": "<p>The content type of the item.</p>"
          }
        },
        "ContentLength": {
          "target": "com.amazonaws.mediastoredata#NonNegativeLong",
          "traits": {
            "smithy.api#documentation": "<p>The length of the item in bytes.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>A metadata entry for a folder or object.</p>"
      }
    },
    "com.amazonaws.mediastoredata#ItemList": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.mediastoredata#Item"
      }
    },
    "com.amazonaws.mediastoredata#ItemName": {
      "type": "string",
      "traits": {
        "smithy.api#pattern": "[A-Za-z0-9_\\.\\-\\~]+"
      }
    },
    "com.amazonaws.mediastoredata#ItemType": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "OBJECT",
            "name": "OBJECT"
          },
          {
            "value": "FOLDER",
            "name": "FOLDER"
          }
        ]
      }
    },
    "com.amazonaws.mediastoredata#ListItems": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.mediastoredata#ListItemsRequest"
      },
      "output": {
        "target": "com.amazonaws.mediastoredata#ListItemsResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.mediastoredata#ContainerNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#InternalServerError"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Provides a list of metadata entries about folders and objects in the specified\n         folder.</p>",
        "smithy.api#http": {
          "method": "GET",
          "uri": "/",
          "code": 200
        }
      }
    },
    "com.amazonaws.mediastoredata#ListItemsRequest": {
      "type": "structure",
      "members": {
        "Path": {
          "target": "com.amazonaws.mediastoredata#ListPathNaming",
          "traits": {
            "smithy.api#documentation": "<p>The path in the container from which to retrieve items. Format: <folder\n         name>/<folder name>/<file name></p>",
            "smithy.api#httpQuery": "Path"
          }
        },
        "MaxResults": {
          "target": "com.amazonaws.mediastoredata#ListLimit",
          "traits": {
            "smithy.api#documentation": "<p>The maximum number of results to return per API request. For example, you submit a\n            <code>ListItems</code> request with <code>MaxResults</code> set at 500. Although 2,000\n         items match your request, the service returns no more than the first 500 items. (The\n         service also returns a <code>NextToken</code> value that you can use to fetch the next\n         batch of results.) The service might return fewer results than the <code>MaxResults</code>\n         value.</p>\n         <p>If <code>MaxResults</code> is not included in the request, the service defaults to\n         pagination with a maximum of 1,000 results per page.</p>",
            "smithy.api#httpQuery": "MaxResults"
          }
        },
        "NextToken": {
          "target": "com.amazonaws.mediastoredata#PaginationToken",
          "traits": {
            "smithy.api#documentation": "<p>The token that identifies which batch of results that you want to see. For example,\n         you submit a <code>ListItems</code> request with <code>MaxResults</code> set at 500. The\n         service returns the first batch of results (up to 500) and a <code>NextToken</code> value.\n         To see the next batch of results, you can submit the <code>ListItems</code> request a\n         second time and specify the <code>NextToken</code> value.</p>\n         <p>Tokens expire after 15 minutes.</p>",
            "smithy.api#httpQuery": "NextToken"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#ListItemsResponse": {
      "type": "structure",
      "members": {
        "Items": {
          "target": "com.amazonaws.mediastoredata#ItemList",
          "traits": {
            "smithy.api#documentation": "<p>The metadata entries for the folders and objects at the requested path.</p>"
          }
        },
        "NextToken": {
          "target": "com.amazonaws.mediastoredata#PaginationToken",
          "traits": {
            "smithy.api#documentation": "<p>The token that can be used in a request to view the next set of results. For example,\n         you submit a <code>ListItems</code> request that matches 2,000 items with\n            <code>MaxResults</code> set at 500. The service returns the first batch of results (up\n         to 500) and a <code>NextToken</code> value that can be used to fetch the next batch of\n         results.</p>"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#ListLimit": {
      "type": "integer",
      "traits": {
        "smithy.api#box": {},
        "smithy.api#range": {
          "min": 1,
          "max": 1000
        }
      }
    },
    "com.amazonaws.mediastoredata#ListPathNaming": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 900
        },
        "smithy.api#pattern": "/?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?"
      }
    },
    "com.amazonaws.mediastoredata#MediaStoreObject_20170901": {
      "type": "service",
      "version": "2017-09-01",
      "operations": [
        {
          "target": "com.amazonaws.mediastoredata#DeleteObject"
        },
        {
          "target": "com.amazonaws.mediastoredata#DescribeObject"
        },
        {
          "target": "com.amazonaws.mediastoredata#GetObject"
        },
        {
          "target": "com.amazonaws.mediastoredata#ListItems"
        },
        {
          "target": "com.amazonaws.mediastoredata#PutObject"
        }
      ],
      "traits": {
        "aws.api#service": {
          "sdkId": "MediaStore Data",
          "arnNamespace": "mediastore",
          "cloudFormationName": "MediaStoreData",
          "cloudTrailEventSource": "mediastoredata.amazonaws.com",
          "endpointPrefix": "data.mediastore"
        },
        "aws.auth#sigv4": {
          "name": "mediastore"
        },
        "aws.protocols#restJson1": {},
        "smithy.api#documentation": "<p>An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3\n         service. Objects are the fundamental entities that are stored in AWS Elemental\n         MediaStore.</p>",
        "smithy.api#title": "AWS Elemental MediaStore Data Plane",
        "smithy.api#xmlNamespace": {
          "uri": "https://object.mediastore.amazonaws.com/doc/2017-09-01"
        }
      }
    },
    "com.amazonaws.mediastoredata#NonNegativeLong": {
      "type": "long",
      "traits": {
        "smithy.api#box": {},
        "smithy.api#range": {
          "min": 0
        }
      }
    },
    "com.amazonaws.mediastoredata#ObjectNotFoundException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.mediastoredata#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Could not perform an operation on an object that does not exist.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 404
      }
    },
    "com.amazonaws.mediastoredata#PaginationToken": {
      "type": "string"
    },
    "com.amazonaws.mediastoredata#PathNaming": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 900
        },
        "smithy.api#pattern": "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+"
      }
    },
    "com.amazonaws.mediastoredata#PayloadBlob": {
      "type": "blob",
      "traits": {
        "smithy.api#streaming": {}
      }
    },
    "com.amazonaws.mediastoredata#PutObject": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.mediastoredata#PutObjectRequest"
      },
      "output": {
        "target": "com.amazonaws.mediastoredata#PutObjectResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.mediastoredata#ContainerNotFoundException"
        },
        {
          "target": "com.amazonaws.mediastoredata#InternalServerError"
        }
      ],
      "traits": {
        "aws.auth#unsignedPayload": {},
        "smithy.api#auth": ["aws.auth#sigv4"],
        "smithy.api#documentation": "<p>Uploads an object to the specified path. Object sizes are limited to 25 MB.</p>",
        "smithy.api#http": {
          "method": "PUT",
          "uri": "/{Path+}",
          "code": 200
        }
      }
    },
    "com.amazonaws.mediastoredata#PutObjectRequest": {
      "type": "structure",
      "members": {
        "Body": {
          "target": "com.amazonaws.mediastoredata#PayloadBlob",
          "traits": {
            "smithy.api#documentation": "<p>The bytes to be stored. </p>",
            "smithy.api#httpPayload": {},
            "smithy.api#required": {}
          }
        },
        "Path": {
          "target": "com.amazonaws.mediastoredata#PathNaming",
          "traits": {
            "smithy.api#documentation": "<p>The path (including the file name) where the object is stored in the container.\n         Format: <folder name>/<folder name>/<file name></p>\n         <p>For example, to upload the file <code>mlaw.avi</code> to the folder path\n            <code>premium\\canada</code> in the container <code>movies</code>, enter the path\n            <code>premium/canada/mlaw.avi</code>.</p>\n         <p>Do not include the container name in this path.</p>\n         <p>If the path includes any folders that don't exist yet, the service creates them. For\n         example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify\n            <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the\n            <code>premium</code> folder. You then have two subfolders, <code>usa</code> and\n            <code>canada</code>, in the <code>premium</code> folder. </p>\n         <p>There is no correlation between the path to the source and the path (folders) in the\n         container in AWS Elemental MediaStore.</p>\n         <p>For more information about folders and how they exist in a container, see the <a href=\"http://docs.aws.amazon.com/mediastore/latest/ug/\">AWS Elemental MediaStore User\n            Guide</a>.</p>\n         <p>The file name is the name that is assigned to the file that you upload. The file can\n         have the same name inside and outside of AWS Elemental MediaStore, or it can have the same\n         name. The file name can include or omit an extension. </p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "ContentType": {
          "target": "com.amazonaws.mediastoredata#ContentType",
          "traits": {
            "smithy.api#documentation": "<p>The content type of the object.</p>",
            "smithy.api#httpHeader": "Content-Type"
          }
        },
        "CacheControl": {
          "target": "com.amazonaws.mediastoredata#StringPrimitive",
          "traits": {
            "smithy.api#documentation": "<p>An optional <code>CacheControl</code> header that allows the caller to control the\n         object's cache behavior. Headers can be passed in as specified in the HTTP at <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>\n         <p>Headers with a custom user-defined value are also accepted.</p>",
            "smithy.api#httpHeader": "Cache-Control"
          }
        },
        "StorageClass": {
          "target": "com.amazonaws.mediastoredata#StorageClass",
          "traits": {
            "smithy.api#documentation": "<p>Indicates the storage class of a <code>Put</code> request. Defaults to\n         high-performance temporal storage class, and objects are persisted into durable storage\n         shortly after being received.</p>",
            "smithy.api#httpHeader": "x-amz-storage-class"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#PutObjectResponse": {
      "type": "structure",
      "members": {
        "ContentSHA256": {
          "target": "com.amazonaws.mediastoredata#SHA256Hash",
          "traits": {
            "smithy.api#documentation": "<p>The SHA256 digest of the object that is persisted.</p>"
          }
        },
        "ETag": {
          "target": "com.amazonaws.mediastoredata#ETag",
          "traits": {
            "smithy.api#documentation": "<p>Unique identifier of the object in the container.</p>"
          }
        },
        "StorageClass": {
          "target": "com.amazonaws.mediastoredata#StorageClass",
          "traits": {
            "smithy.api#documentation": "<p>The storage class where the object was persisted. The class should be\n         “Temporal”.</p>"
          }
        }
      }
    },
    "com.amazonaws.mediastoredata#RangePattern": {
      "type": "string",
      "traits": {
        "smithy.api#pattern": "^bytes=(?:\\d+\\-\\d*|\\d*\\-\\d+)$"
      }
    },
    "com.amazonaws.mediastoredata#RequestedRangeNotSatisfiableException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.mediastoredata#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The requested content range is not valid.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 416
      }
    },
    "com.amazonaws.mediastoredata#SHA256Hash": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 64,
          "max": 64
        },
        "smithy.api#pattern": "[0-9A-Fa-f]{64}"
      }
    },
    "com.amazonaws.mediastoredata#StorageClass": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "TEMPORAL",
            "name": "TEMPORAL"
          }
        ],
        "smithy.api#length": {
          "min": 1,
          "max": 16
        }
      }
    },
    "com.amazonaws.mediastoredata#StringPrimitive": {
      "type": "string"
    },
    "com.amazonaws.mediastoredata#TimeStamp": {
      "type": "timestamp"
    },
    "com.amazonaws.mediastoredata#statusCode": {
      "type": "integer"
    }
  }
}
