{
  "smithy": "2.0",
  "metadata": {
    "suppressions": [
      {
        "id": "HttpMethodSemantics",
        "namespace": "*"
      },
      {
        "id": "HttpResponseCodeSemantics",
        "namespace": "*"
      },
      {
        "id": "PaginatedTrait",
        "namespace": "*"
      },
      {
        "id": "HttpHeaderTrait",
        "namespace": "*"
      },
      {
        "id": "HttpUriConflict",
        "namespace": "*"
      },
      {
        "id": "Service",
        "namespace": "*"
      }
    ]
  },
  "shapes": {
    "com.amazonaws.lexruntimeservice#AWSDeepSenseRunTimeService": {
      "type": "service",
      "version": "2016-11-28",
      "operations": [
        {
          "target": "com.amazonaws.lexruntimeservice#DeleteSession"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#GetSession"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#PostContent"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#PostText"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#PutSession"
        }
      ],
      "traits": {
        "aws.api#service": {
          "sdkId": "Lex Runtime Service",
          "arnNamespace": "lex",
          "cloudFormationName": "LexRuntimeService",
          "cloudTrailEventSource": "lexruntimeservice.amazonaws.com",
          "endpointPrefix": "runtime.lex"
        },
        "aws.auth#sigv4": {
          "name": "lex"
        },
        "aws.protocols#restJson1": {},
        "smithy.api#documentation": "<p>Amazon Lex provides both build and runtime endpoints. Each endpoint\n      provides a set of operations (API). Your conversational bot uses the\n      runtime API to understand user utterances (user input text or voice). For\n      example, suppose a user says \"I want pizza\", your bot sends this input to\n      Amazon Lex using the runtime API. Amazon Lex recognizes that the user\n      request is for the OrderPizza intent (one of the intents defined in the\n      bot). Then Amazon Lex engages in user conversation on behalf of the bot to\n      elicit required information (slot values, such as pizza size and crust\n      type), and then performs fulfillment activity (that you configured when\n      you created the bot). You use the build-time API to create and manage your\n      Amazon Lex bot. For a list of build-time operations, see the build-time\n      API, . </p>",
        "smithy.api#title": "Amazon Lex Runtime Service",
        "smithy.rules#endpointRuleSet": {
          "version": "1.0",
          "parameters": {
            "Region": {
              "builtIn": "AWS::Region",
              "required": false,
              "documentation": "The AWS region used to dispatch the request.",
              "type": "String"
            },
            "UseDualStack": {
              "builtIn": "AWS::UseDualStack",
              "required": true,
              "default": false,
              "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
              "type": "Boolean"
            },
            "UseFIPS": {
              "builtIn": "AWS::UseFIPS",
              "required": true,
              "default": false,
              "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
              "type": "Boolean"
            },
            "Endpoint": {
              "builtIn": "SDK::Endpoint",
              "required": false,
              "documentation": "Override the endpoint used to send this request",
              "type": "String"
            }
          },
          "rules": [
            {
              "conditions": [
                {
                  "fn": "aws.partition",
                  "argv": [
                    {
                      "ref": "Region"
                    }
                  ],
                  "assign": "PartitionResult"
                }
              ],
              "type": "tree",
              "rules": [
                {
                  "conditions": [
                    {
                      "fn": "isSet",
                      "argv": [
                        {
                          "ref": "Endpoint"
                        }
                      ]
                    },
                    {
                      "fn": "parseURL",
                      "argv": [
                        {
                          "ref": "Endpoint"
                        }
                      ],
                      "assign": "url"
                    }
                  ],
                  "type": "tree",
                  "rules": [
                    {
                      "conditions": [
                        {
                          "fn": "booleanEquals",
                          "argv": [
                            {
                              "ref": "UseFIPS"
                            },
                            true
                          ]
                        }
                      ],
                      "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                      "type": "error"
                    },
                    {
                      "conditions": [],
                      "type": "tree",
                      "rules": [
                        {
                          "conditions": [
                            {
                              "fn": "booleanEquals",
                              "argv": [
                                {
                                  "ref": "UseDualStack"
                                },
                                true
                              ]
                            }
                          ],
                          "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                          "type": "error"
                        },
                        {
                          "conditions": [],
                          "endpoint": {
                            "url": {
                              "ref": "Endpoint"
                            },
                            "properties": {},
                            "headers": {}
                          },
                          "type": "endpoint"
                        }
                      ]
                    }
                  ]
                },
                {
                  "conditions": [
                    {
                      "fn": "booleanEquals",
                      "argv": [
                        {
                          "ref": "UseFIPS"
                        },
                        true
                      ]
                    },
                    {
                      "fn": "booleanEquals",
                      "argv": [
                        {
                          "ref": "UseDualStack"
                        },
                        true
                      ]
                    }
                  ],
                  "type": "tree",
                  "rules": [
                    {
                      "conditions": [
                        {
                          "fn": "booleanEquals",
                          "argv": [
                            true,
                            {
                              "fn": "getAttr",
                              "argv": [
                                {
                                  "ref": "PartitionResult"
                                },
                                "supportsFIPS"
                              ]
                            }
                          ]
                        },
                        {
                          "fn": "booleanEquals",
                          "argv": [
                            true,
                            {
                              "fn": "getAttr",
                              "argv": [
                                {
                                  "ref": "PartitionResult"
                                },
                                "supportsDualStack"
                              ]
                            }
                          ]
                        }
                      ],
                      "type": "tree",
                      "rules": [
                        {
                          "conditions": [],
                          "endpoint": {
                            "url": "https://runtime.lex-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                            "properties": {},
                            "headers": {}
                          },
                          "type": "endpoint"
                        }
                      ]
                    },
                    {
                      "conditions": [],
                      "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                      "type": "error"
                    }
                  ]
                },
                {
                  "conditions": [
                    {
                      "fn": "booleanEquals",
                      "argv": [
                        {
                          "ref": "UseFIPS"
                        },
                        true
                      ]
                    }
                  ],
                  "type": "tree",
                  "rules": [
                    {
                      "conditions": [
                        {
                          "fn": "booleanEquals",
                          "argv": [
                            true,
                            {
                              "fn": "getAttr",
                              "argv": [
                                {
                                  "ref": "PartitionResult"
                                },
                                "supportsFIPS"
                              ]
                            }
                          ]
                        }
                      ],
                      "type": "tree",
                      "rules": [
                        {
                          "conditions": [],
                          "type": "tree",
                          "rules": [
                            {
                              "conditions": [
                                {
                                  "fn": "stringEquals",
                                  "argv": [
                                    "aws",
                                    {
                                      "fn": "getAttr",
                                      "argv": [
                                        {
                                          "ref": "PartitionResult"
                                        },
                                        "name"
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "endpoint": {
                                "url": "https://runtime-fips.lex.{Region}.{PartitionResult#dnsSuffix}",
                                "properties": {},
                                "headers": {}
                              },
                              "type": "endpoint"
                            },
                            {
                              "conditions": [
                                {
                                  "fn": "stringEquals",
                                  "argv": [
                                    "aws-us-gov",
                                    {
                                      "fn": "getAttr",
                                      "argv": [
                                        {
                                          "ref": "PartitionResult"
                                        },
                                        "name"
                                      ]
                                    }
                                  ]
                                }
                              ],
                              "endpoint": {
                                "url": "https://runtime-fips.lex.{Region}.{PartitionResult#dnsSuffix}",
                                "properties": {},
                                "headers": {}
                              },
                              "type": "endpoint"
                            },
                            {
                              "conditions": [],
                              "endpoint": {
                                "url": "https://runtime.lex-fips.{Region}.{PartitionResult#dnsSuffix}",
                                "properties": {},
                                "headers": {}
                              },
                              "type": "endpoint"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "conditions": [],
                      "error": "FIPS is enabled but this partition does not support FIPS",
                      "type": "error"
                    }
                  ]
                },
                {
                  "conditions": [
                    {
                      "fn": "booleanEquals",
                      "argv": [
                        {
                          "ref": "UseDualStack"
                        },
                        true
                      ]
                    }
                  ],
                  "type": "tree",
                  "rules": [
                    {
                      "conditions": [
                        {
                          "fn": "booleanEquals",
                          "argv": [
                            true,
                            {
                              "fn": "getAttr",
                              "argv": [
                                {
                                  "ref": "PartitionResult"
                                },
                                "supportsDualStack"
                              ]
                            }
                          ]
                        }
                      ],
                      "type": "tree",
                      "rules": [
                        {
                          "conditions": [],
                          "endpoint": {
                            "url": "https://runtime.lex.{Region}.{PartitionResult#dualStackDnsSuffix}",
                            "properties": {},
                            "headers": {}
                          },
                          "type": "endpoint"
                        }
                      ]
                    },
                    {
                      "conditions": [],
                      "error": "DualStack is enabled but this partition does not support DualStack",
                      "type": "error"
                    }
                  ]
                },
                {
                  "conditions": [],
                  "endpoint": {
                    "url": "https://runtime.lex.{Region}.{PartitionResult#dnsSuffix}",
                    "properties": {},
                    "headers": {}
                  },
                  "type": "endpoint"
                }
              ]
            }
          ]
        },
        "smithy.rules#endpointTests": {
          "testCases": [
            {
              "documentation": "For region eu-central-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.eu-central-1.api.aws"
                }
              },
              "params": {
                "Region": "eu-central-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-central-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.eu-central-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-central-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-central-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-central-1.api.aws"
                }
              },
              "params": {
                "Region": "eu-central-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region eu-central-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-central-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-central-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-west-2 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.us-west-2.api.aws"
                }
              },
              "params": {
                "Region": "us-west-2",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-west-2 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.us-west-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-west-2",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-west-2 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-west-2.api.aws"
                }
              },
              "params": {
                "Region": "us-west-2",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-west-2 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-west-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-west-2",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region eu-west-2 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.eu-west-2.api.aws"
                }
              },
              "params": {
                "Region": "eu-west-2",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-west-2 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.eu-west-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-west-2",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-west-2 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-west-2.api.aws"
                }
              },
              "params": {
                "Region": "eu-west-2",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region eu-west-2 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-west-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-west-2",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region eu-west-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.eu-west-1.api.aws"
                }
              },
              "params": {
                "Region": "eu-west-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-west-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.eu-west-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-west-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region eu-west-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-west-1.api.aws"
                }
              },
              "params": {
                "Region": "eu-west-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region eu-west-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.eu-west-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "eu-west-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-northeast-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.ap-northeast-1.api.aws"
                }
              },
              "params": {
                "Region": "ap-northeast-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-northeast-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.ap-northeast-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-northeast-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-northeast-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-northeast-1.api.aws"
                }
              },
              "params": {
                "Region": "ap-northeast-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-northeast-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-northeast-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-northeast-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-gov-west-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.us-gov-west-1.api.aws"
                }
              },
              "params": {
                "Region": "us-gov-west-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-gov-west-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.us-gov-west-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-gov-west-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-gov-west-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-gov-west-1.api.aws"
                }
              },
              "params": {
                "Region": "us-gov-west-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-gov-west-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-gov-west-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-gov-west-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-southeast-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.ap-southeast-1.api.aws"
                }
              },
              "params": {
                "Region": "ap-southeast-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-southeast-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.ap-southeast-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-southeast-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-southeast-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-southeast-1.api.aws"
                }
              },
              "params": {
                "Region": "ap-southeast-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-southeast-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-southeast-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-southeast-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-southeast-2 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.ap-southeast-2.api.aws"
                }
              },
              "params": {
                "Region": "ap-southeast-2",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-southeast-2 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.ap-southeast-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-southeast-2",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region ap-southeast-2 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-southeast-2.api.aws"
                }
              },
              "params": {
                "Region": "ap-southeast-2",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region ap-southeast-2 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.ap-southeast-2.amazonaws.com"
                }
              },
              "params": {
                "Region": "ap-southeast-2",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-east-1 with FIPS enabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex-fips.us-east-1.api.aws"
                }
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": true,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-east-1 with FIPS enabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime-fips.lex.us-east-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": false,
                "UseFIPS": true
              }
            },
            {
              "documentation": "For region us-east-1 with FIPS disabled and DualStack enabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-east-1.api.aws"
                }
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": true,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For region us-east-1 with FIPS disabled and DualStack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://runtime.lex.us-east-1.amazonaws.com"
                }
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": false,
                "UseFIPS": false
              }
            },
            {
              "documentation": "For custom endpoint with fips disabled and dualstack disabled",
              "expect": {
                "endpoint": {
                  "url": "https://example.com"
                }
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": false,
                "UseFIPS": false,
                "Endpoint": "https://example.com"
              }
            },
            {
              "documentation": "For custom endpoint with fips enabled and dualstack disabled",
              "expect": {
                "error": "Invalid Configuration: FIPS and custom endpoint are not supported"
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": false,
                "UseFIPS": true,
                "Endpoint": "https://example.com"
              }
            },
            {
              "documentation": "For custom endpoint with fips disabled and dualstack enabled",
              "expect": {
                "error": "Invalid Configuration: Dualstack and custom endpoint are not supported"
              },
              "params": {
                "Region": "us-east-1",
                "UseDualStack": true,
                "UseFIPS": false,
                "Endpoint": "https://example.com"
              }
            }
          ],
          "version": "1.0"
        }
      }
    },
    "com.amazonaws.lexruntimeservice#Accept": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#ActiveContext": {
      "type": "structure",
      "members": {
        "name": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the context.</p>",
            "smithy.api#required": {}
          }
        },
        "timeToLive": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextTimeToLive",
          "traits": {
            "smithy.api#documentation": "<p>The length of time or number of turns that a context remains\n      active.</p>",
            "smithy.api#required": {}
          }
        },
        "parameters": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextParametersMap",
          "traits": {
            "smithy.api#documentation": "<p>State variables for the current context. You can use these values as\n      default values for slots in subsequent events.</p>",
            "smithy.api#required": {}
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>A context is a variable that contains information about the current\n      state of the conversation between a user and Amazon Lex. Context can be set\n      automatically by Amazon Lex when an intent is fulfilled, or it can be set at\n      runtime using the <code>PutContent</code>, <code>PutText</code>, or\n        <code>PutSession</code> operation.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextName": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 100
        },
        "smithy.api#pattern": "^([A-Za-z]_?)+$"
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextParametersMap": {
      "type": "map",
      "key": {
        "target": "com.amazonaws.lexruntimeservice#ParameterName"
      },
      "value": {
        "target": "com.amazonaws.lexruntimeservice#Text"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 10
        }
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextTimeToLive": {
      "type": "structure",
      "members": {
        "timeToLiveInSeconds": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextTimeToLiveInSeconds",
          "traits": {
            "smithy.api#documentation": "<p>The number of seconds that the context should be active after it is\n      first sent in a <code>PostContent</code> or <code>PostText</code>\n      response. You can set the value between 5 and 86,400 seconds (24\n      hours).</p>"
          }
        },
        "turnsToLive": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextTurnsToLive",
          "traits": {
            "smithy.api#documentation": "<p>The number of conversation turns that the context should be active. A\n      conversation turn is one <code>PostContent</code> or <code>PostText</code>\n      request and the corresponding response from Amazon Lex.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The length of time or number of turns that a context remains\n      active.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextTimeToLiveInSeconds": {
      "type": "integer",
      "traits": {
        "smithy.api#range": {
          "min": 5,
          "max": 86400
        }
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextTurnsToLive": {
      "type": "integer",
      "traits": {
        "smithy.api#range": {
          "min": 1,
          "max": 20
        }
      }
    },
    "com.amazonaws.lexruntimeservice#ActiveContextsList": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.lexruntimeservice#ActiveContext"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 20
        },
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#BadGatewayException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.lexruntimeservice#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Either the Amazon Lex bot is still building, or one of the dependent\n      services (Amazon Polly, AWS Lambda) failed with an internal service\n      error.</p>",
        "smithy.api#error": "server",
        "smithy.api#httpError": 502
      }
    },
    "com.amazonaws.lexruntimeservice#BadRequestException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p> Request validation failed, there is no usable message in the context,\n      or the bot build failed, is still in progress, or contains unbuilt\n      changes. </p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 400
      }
    },
    "com.amazonaws.lexruntimeservice#BlobStream": {
      "type": "blob",
      "traits": {
        "smithy.api#streaming": {}
      }
    },
    "com.amazonaws.lexruntimeservice#BotAlias": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#BotName": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#BotVersion": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 64
        },
        "smithy.api#pattern": "[0-9]+|\\$LATEST"
      }
    },
    "com.amazonaws.lexruntimeservice#Button": {
      "type": "structure",
      "members": {
        "text": {
          "target": "com.amazonaws.lexruntimeservice#ButtonTextStringWithLength",
          "traits": {
            "smithy.api#documentation": "<p>Text that is visible to the user on the button.</p>",
            "smithy.api#required": {}
          }
        },
        "value": {
          "target": "com.amazonaws.lexruntimeservice#ButtonValueStringWithLength",
          "traits": {
            "smithy.api#documentation": "<p>The value sent to Amazon Lex when a user chooses the button. For\n      example, consider button text \"NYC.\" When the user chooses the button, the\n      value sent can be \"New York City.\"</p>",
            "smithy.api#required": {}
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Represents an option to be shown on the client platform (Facebook,\n      Slack, etc.)</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#ButtonTextStringWithLength": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 15
        }
      }
    },
    "com.amazonaws.lexruntimeservice#ButtonValueStringWithLength": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 1000
        }
      }
    },
    "com.amazonaws.lexruntimeservice#ConfirmationStatus": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "None",
            "name": "NONE"
          },
          {
            "value": "Confirmed",
            "name": "CONFIRMED"
          },
          {
            "value": "Denied",
            "name": "DENIED"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#ConflictException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p> Two clients are using the same AWS account, Amazon Lex bot, and user\n      ID. </p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 409
      }
    },
    "com.amazonaws.lexruntimeservice#ContentType": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "application/vnd.amazonaws.card.generic",
            "name": "GENERIC"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#DeleteSession": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.lexruntimeservice#DeleteSessionRequest"
      },
      "output": {
        "target": "com.amazonaws.lexruntimeservice#DeleteSessionResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.lexruntimeservice#BadRequestException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#ConflictException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#InternalFailureException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LimitExceededException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Removes session information for a specified bot, alias, and user ID.\n    </p>",
        "smithy.api#http": {
          "method": "DELETE",
          "uri": "/bot/{botName}/alias/{botAlias}/user/{userId}/session",
          "code": 200
        }
      }
    },
    "com.amazonaws.lexruntimeservice#DeleteSessionRequest": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>The alias in use for the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The identifier of the user associated with the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#DeleteSessionResponse": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the bot associated with the session data.</p>"
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>The alias in use for the bot associated with the session data.</p>"
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The ID of the client application user.</p>"
          }
        },
        "sessionId": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The unique identifier for the session.</p>"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#DependencyFailedException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.lexruntimeservice#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p> One of the dependencies, such as AWS Lambda or Amazon Polly, threw an\n      exception. For example, </p>\n         <ul>\n            <li>\n               <p>If Amazon Lex does not have sufficient permissions to call a Lambda\n          function.</p>\n            </li>\n            <li>\n               <p>If a Lambda function takes longer than 30 seconds to\n          execute.</p>\n            </li>\n            <li>\n               <p>If a fulfillment Lambda function returns a <code>Delegate</code>\n          dialog action without removing any slot values.</p>\n            </li>\n         </ul>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 424
      }
    },
    "com.amazonaws.lexruntimeservice#DialogAction": {
      "type": "structure",
      "members": {
        "type": {
          "target": "com.amazonaws.lexruntimeservice#DialogActionType",
          "traits": {
            "smithy.api#documentation": "<p>The next action that the bot should take in its interaction with the\n      user. The possible values are:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ConfirmIntent</code> - The next action is asking the user if\n          the intent is complete and ready to be fulfilled. This is a yes/no\n          question such as \"Place the order?\"</p>\n            </li>\n            <li>\n               <p>\n                  <code>Close</code> - Indicates that the there will not be a\n          response from the user. For example, the statement \"Your order has\n          been placed\" does not require a response.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Delegate</code> - The next action is determined by\n          Amazon Lex.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitIntent</code> - The next action is to determine the\n          intent that the user wants to fulfill.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitSlot</code> - The next action is to elicit a slot\n          value from the user.</p>\n            </li>\n         </ul>",
            "smithy.api#required": {}
          }
        },
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the intent.</p>"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Map of the slots that have been gathered and their values. </p>"
          }
        },
        "slotToElicit": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The name of the slot that should be elicited from the user.</p>"
          }
        },
        "fulfillmentState": {
          "target": "com.amazonaws.lexruntimeservice#FulfillmentState",
          "traits": {
            "smithy.api#documentation": "<p>The fulfillment state of the intent. The possible values are:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>Failed</code> - The Lambda function associated with the\n          intent failed to fulfill the intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Fulfilled</code> - The intent has fulfilled by the Lambda\n          function associated with the intent. </p>\n            </li>\n            <li>\n               <p>\n                  <code>ReadyForFulfillment</code> - All of the information\n          necessary for the intent is present and the intent ready to be\n          fulfilled by the client application.</p>\n            </li>\n         </ul>"
          }
        },
        "message": {
          "target": "com.amazonaws.lexruntimeservice#Text",
          "traits": {
            "smithy.api#documentation": "<p>The message that should be shown to the user. If you don't specify a\n      message, Amazon Lex will use the message configured for the intent.</p>"
          }
        },
        "messageFormat": {
          "target": "com.amazonaws.lexruntimeservice#MessageFormatType",
          "traits": {
            "smithy.api#documentation": "<ul>\n            <li>\n               <p>\n                  <code>PlainText</code> - The message contains plain UTF-8\n          text.</p>\n            </li>\n            <li>\n               <p>\n                  <code>CustomPayload</code> - The message is a custom format for\n          the client.</p>\n            </li>\n            <li>\n               <p>\n                  <code>SSML</code> - The message contains text formatted for voice\n          output.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Composite</code> - The message contains an escaped JSON\n          object containing one or more messages. For more information, see\n            <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\">Message Groups</a>. </p>\n            </li>\n         </ul>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Describes the next action that the bot should take in its interaction\n      with the user and provides information about the context in which the\n      action takes place. Use the <code>DialogAction</code> data type to set the\n      interaction to a specific state, or to return the interaction to a\n      previous state.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#DialogActionType": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "ElicitIntent",
            "name": "ELICIT_INTENT"
          },
          {
            "value": "ConfirmIntent",
            "name": "CONFIRM_INTENT"
          },
          {
            "value": "ElicitSlot",
            "name": "ELICIT_SLOT"
          },
          {
            "value": "Close",
            "name": "CLOSE"
          },
          {
            "value": "Delegate",
            "name": "DELEGATE"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#DialogState": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "ElicitIntent",
            "name": "ELICIT_INTENT"
          },
          {
            "value": "ConfirmIntent",
            "name": "CONFIRM_INTENT"
          },
          {
            "value": "ElicitSlot",
            "name": "ELICIT_SLOT"
          },
          {
            "value": "Fulfilled",
            "name": "FULFILLED"
          },
          {
            "value": "ReadyForFulfillment",
            "name": "READY_FOR_FULFILLMENT"
          },
          {
            "value": "Failed",
            "name": "FAILED"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#Double": {
      "type": "double",
      "traits": {
        "smithy.api#default": 0
      }
    },
    "com.amazonaws.lexruntimeservice#ErrorMessage": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#FulfillmentState": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "Fulfilled",
            "name": "FULFILLED"
          },
          {
            "value": "Failed",
            "name": "FAILED"
          },
          {
            "value": "ReadyForFulfillment",
            "name": "READY_FOR_FULFILLMENT"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#GenericAttachment": {
      "type": "structure",
      "members": {
        "title": {
          "target": "com.amazonaws.lexruntimeservice#StringWithLength",
          "traits": {
            "smithy.api#documentation": "<p>The title of the option.</p>"
          }
        },
        "subTitle": {
          "target": "com.amazonaws.lexruntimeservice#StringWithLength",
          "traits": {
            "smithy.api#documentation": "<p>The subtitle shown below the title.</p>"
          }
        },
        "attachmentLinkUrl": {
          "target": "com.amazonaws.lexruntimeservice#StringUrlWithLength",
          "traits": {
            "smithy.api#documentation": "<p>The URL of an attachment to the response card.</p>"
          }
        },
        "imageUrl": {
          "target": "com.amazonaws.lexruntimeservice#StringUrlWithLength",
          "traits": {
            "smithy.api#documentation": "<p>The URL of an image that is displayed to the user.</p>"
          }
        },
        "buttons": {
          "target": "com.amazonaws.lexruntimeservice#listOfButtons",
          "traits": {
            "smithy.api#documentation": "<p>The list of options to show to the user.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Represents an option rendered to the user when a prompt is shown. It\n      could be an image, a button, a link, or text. </p>"
      }
    },
    "com.amazonaws.lexruntimeservice#GetSession": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.lexruntimeservice#GetSessionRequest"
      },
      "output": {
        "target": "com.amazonaws.lexruntimeservice#GetSessionResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.lexruntimeservice#BadRequestException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#InternalFailureException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LimitExceededException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Returns session information for a specified bot, alias, and user\n      ID.</p>",
        "smithy.api#http": {
          "method": "GET",
          "uri": "/bot/{botName}/alias/{botAlias}/user/{userId}/session",
          "code": 200
        }
      }
    },
    "com.amazonaws.lexruntimeservice#GetSessionRequest": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>The alias in use for the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The ID of the client application user. Amazon Lex uses this to identify a\n      user's conversation with your bot. </p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "checkpointLabelFilter": {
          "target": "com.amazonaws.lexruntimeservice#IntentSummaryCheckpointLabel",
          "traits": {
            "smithy.api#documentation": "<p>A string used to filter the intents returned in the\n        <code>recentIntentSummaryView</code> structure. </p>\n         <p>When you specify a filter, only intents with their\n        <code>checkpointLabel</code> field set to that string are\n      returned.</p>",
            "smithy.api#httpQuery": "checkpointLabelFilter"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#GetSessionResponse": {
      "type": "structure",
      "members": {
        "recentIntentSummaryView": {
          "target": "com.amazonaws.lexruntimeservice#IntentSummaryList",
          "traits": {
            "smithy.api#documentation": "<p>An array of information about the intents used in the session. The\n      array can contain a maximum of three summaries. If more than three intents\n      are used in the session, the <code>recentIntentSummaryView</code>\n      operation contains information about the last three intents used.</p>\n         <p>If you set the <code>checkpointLabelFilter</code> parameter in the\n      request, the array contains only the intents with the specified\n      label.</p>"
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Map of key/value pairs representing the session-specific context\n      information. It contains application information passed between Amazon Lex and\n      a client application.</p>"
          }
        },
        "sessionId": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>A unique identifier for the session.</p>"
          }
        },
        "dialogAction": {
          "target": "com.amazonaws.lexruntimeservice#DialogAction",
          "traits": {
            "smithy.api#documentation": "<p>Describes the current state of the bot.</p>"
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextsList",
          "traits": {
            "smithy.api#documentation": "<p>A list of active contexts for the session. A context can be set when\n      an intent is fulfilled or by calling the <code>PostContent</code>,\n        <code>PostText</code>, or <code>PutSession</code> operation.</p>\n         <p>You can use a context to control the intents that can follow up an\n      intent, or to modify the operation of your application.</p>"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#HttpContentType": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#IntentConfidence": {
      "type": "structure",
      "members": {
        "score": {
          "target": "com.amazonaws.lexruntimeservice#Double",
          "traits": {
            "smithy.api#default": 0,
            "smithy.api#documentation": "<p>A score that indicates how confident Amazon Lex is that an intent satisfies\n      the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate\n      higher confidence.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Provides a score that indicates the confidence that Amazon Lex has that an\n      intent is the one that satisfies the user's intent.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#IntentList": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.lexruntimeservice#PredictedIntent"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 4
        }
      }
    },
    "com.amazonaws.lexruntimeservice#IntentName": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#IntentSummary": {
      "type": "structure",
      "members": {
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the intent.</p>"
          }
        },
        "checkpointLabel": {
          "target": "com.amazonaws.lexruntimeservice#IntentSummaryCheckpointLabel",
          "traits": {
            "smithy.api#documentation": "<p>A user-defined label that identifies a particular intent. You can use\n      this label to return to a previous intent. </p>\n         <p>Use the <code>checkpointLabelFilter</code> parameter of the\n        <code>GetSessionRequest</code> operation to filter the intents returned\n      by the operation to those with only the specified label.</p>"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Map of the slots that have been gathered and their values. </p>"
          }
        },
        "confirmationStatus": {
          "target": "com.amazonaws.lexruntimeservice#ConfirmationStatus",
          "traits": {
            "smithy.api#documentation": "<p>The status of the intent after the user responds to the confirmation\n      prompt. If the user confirms the intent, Amazon Lex sets this field to\n        <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets this\n      value to <code>Denied</code>. The possible values are:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>Confirmed</code> - The user has responded \"Yes\" to the\n          confirmation prompt, confirming that the intent is complete and that\n          it is ready to be fulfilled.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Denied</code> - The user has responded \"No\" to the\n          confirmation prompt.</p>\n            </li>\n            <li>\n               <p>\n                  <code>None</code> - The user has never been prompted for\n          confirmation; or, the user was prompted but did not confirm or deny\n          the prompt.</p>\n            </li>\n         </ul>"
          }
        },
        "dialogActionType": {
          "target": "com.amazonaws.lexruntimeservice#DialogActionType",
          "traits": {
            "smithy.api#documentation": "<p>The next action that the bot should take in its interaction with the\n      user. The possible values are:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>ConfirmIntent</code> - The next action is asking the user if\n          the intent is complete and ready to be fulfilled. This is a yes/no\n          question such as \"Place the order?\"</p>\n            </li>\n            <li>\n               <p>\n                  <code>Close</code> - Indicates that the there will not be a\n          response from the user. For example, the statement \"Your order has\n          been placed\" does not require a response.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitIntent</code> - The next action is to determine the\n          intent that the user wants to fulfill.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitSlot</code> - The next action is to elicit a slot\n          value from the user.</p>\n            </li>\n         </ul>",
            "smithy.api#required": {}
          }
        },
        "fulfillmentState": {
          "target": "com.amazonaws.lexruntimeservice#FulfillmentState",
          "traits": {
            "smithy.api#documentation": "<p>The fulfillment state of the intent. The possible values are:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>Failed</code> - The Lambda function associated with the\n          intent failed to fulfill the intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Fulfilled</code> - The intent has fulfilled by the Lambda\n          function associated with the intent. </p>\n            </li>\n            <li>\n               <p>\n                  <code>ReadyForFulfillment</code> - All of the information\n          necessary for the intent is present and the intent ready to be\n          fulfilled by the client application.</p>\n            </li>\n         </ul>"
          }
        },
        "slotToElicit": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The next slot to elicit from the user. If there is not slot to elicit,\n      the field is blank.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Provides information about the state of an intent. You can use this\n      information to get the current state of an intent so that you can process\n      the intent, or so that you can return the intent to its previous\n      state.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#IntentSummaryCheckpointLabel": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 255
        },
        "smithy.api#pattern": "[a-zA-Z0-9-]+"
      }
    },
    "com.amazonaws.lexruntimeservice#IntentSummaryList": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.lexruntimeservice#IntentSummary"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 3
        }
      }
    },
    "com.amazonaws.lexruntimeservice#InternalFailureException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Internal service error. Retry the call.</p>",
        "smithy.api#error": "server",
        "smithy.api#httpError": 500
      }
    },
    "com.amazonaws.lexruntimeservice#LimitExceededException": {
      "type": "structure",
      "members": {
        "retryAfterSeconds": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#httpHeader": "Retry-After"
          }
        },
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>Exceeded a limit.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 429
      }
    },
    "com.amazonaws.lexruntimeservice#LoopDetectedException": {
      "type": "structure",
      "members": {
        "Message": {
          "target": "com.amazonaws.lexruntimeservice#ErrorMessage"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>This exception is not used.</p>",
        "smithy.api#error": "server",
        "smithy.api#httpError": 508
      }
    },
    "com.amazonaws.lexruntimeservice#MessageFormatType": {
      "type": "string",
      "traits": {
        "smithy.api#enum": [
          {
            "value": "PlainText",
            "name": "PLAIN_TEXT"
          },
          {
            "value": "CustomPayload",
            "name": "CUSTOM_PAYLOAD"
          },
          {
            "value": "SSML",
            "name": "SSML"
          },
          {
            "value": "Composite",
            "name": "COMPOSITE"
          }
        ]
      }
    },
    "com.amazonaws.lexruntimeservice#NotAcceptableException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The accept header in the request does not have a valid value.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 406
      }
    },
    "com.amazonaws.lexruntimeservice#NotFoundException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The resource (such as the Amazon Lex bot or an alias) that is referred\n      to is not found.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 404
      }
    },
    "com.amazonaws.lexruntimeservice#ParameterName": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 100
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostContent": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.lexruntimeservice#PostContentRequest"
      },
      "output": {
        "target": "com.amazonaws.lexruntimeservice#PostContentResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.lexruntimeservice#BadGatewayException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#BadRequestException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#ConflictException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#DependencyFailedException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#InternalFailureException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LimitExceededException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LoopDetectedException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotAcceptableException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotFoundException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#RequestTimeoutException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException"
        }
      ],
      "traits": {
        "aws.auth#unsignedPayload": {},
        "smithy.api#auth": [
          "aws.auth#sigv4"
        ],
        "smithy.api#documentation": "<p> Sends user input (text or speech) to Amazon Lex. Clients use this API to\n      send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the\n      user input using the machine learning model that it built for the bot. </p>\n         <p>The <code>PostContent</code> operation supports audio input at 8kHz\n      and 16kHz. You can use 8kHz audio to achieve higher speech recognition\n      accuracy in telephone audio applications. </p>\n         <p> In response, Amazon Lex returns the next message to convey to the user.\n      Consider the following example messages: </p>\n         <ul>\n            <li>\n               <p> For a user input \"I would like a pizza,\" Amazon Lex might return a\n          response with a message eliciting slot data (for example,\n            <code>PizzaSize</code>): \"What size pizza would you like?\". </p>\n            </li>\n            <li>\n               <p> After the user provides all of the pizza order information, Amazon Lex\n          might return a response with a message to get user confirmation:\n          \"Order the pizza?\". </p>\n            </li>\n            <li>\n               <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex\n          might return a conclusion statement: \"Thank you, your cheese pizza has\n          been ordered.\". </p>\n            </li>\n         </ul>\n         <p> Not all Amazon Lex messages require a response from the user. For example,\n      conclusion statements do not require a response. Some messages require\n      only a yes or no response. In addition to the <code>message</code>, Amazon Lex\n      provides additional context about the message in the response that you can\n      use to enhance client behavior, such as displaying the appropriate client\n      user interface. Consider the following examples: </p>\n         <ul>\n            <li>\n               <p> If the message is to elicit slot data, Amazon Lex returns the\n          following context information: </p>\n               <ul>\n                  <li>\n                     <p>\n                        <code>x-amz-lex-dialog-state</code> header set to\n                <code>ElicitSlot</code>\n                     </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>x-amz-lex-intent-name</code> header set to the intent name\n              in the current context </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>x-amz-lex-slot-to-elicit</code> header set to the slot name\n              for which the <code>message</code> is eliciting information\n            </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>x-amz-lex-slots</code> header set to a map of slots\n              configured for the intent with their current values </p>\n                  </li>\n               </ul>\n            </li>\n            <li>\n               <p> If the message is a confirmation prompt, the\n            <code>x-amz-lex-dialog-state</code> header is set to\n            <code>Confirmation</code> and the\n            <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p>\n            </li>\n            <li>\n               <p> If the message is a clarification prompt configured for the\n          intent, indicating that the user intent is not understood, the\n            <code>x-amz-dialog-state</code> header is set to\n            <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code>\n          header is omitted. </p>\n            </li>\n         </ul>\n         <p> In addition, Amazon Lex also returns your application-specific\n        <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing\n        Conversation Context</a>. </p>",
        "smithy.api#http": {
          "method": "POST",
          "uri": "/bot/{botName}/alias/{botAlias}/user/{userId}/content",
          "code": 200
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostContentRequest": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>Name of the Amazon Lex bot.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>Alias of the Amazon Lex bot.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The ID of the client application user. Amazon Lex uses this to identify a\n      user's conversation with your bot. At runtime, each request must contain\n      the <code>userID</code> field.</p>\n         <p>To decide the user ID to use for your application, consider the\n      following factors.</p>\n         <ul>\n            <li>\n               <p>The <code>userID</code> field must not contain any personally\n          identifiable information of the user, for example, name, personal\n          identification numbers, or other end user personal information.</p>\n            </li>\n            <li>\n               <p>If you want a user to start a conversation on one device and\n          continue on another device, use a user-specific identifier.</p>\n            </li>\n            <li>\n               <p>If you want the same user to be able to have two independent\n          conversations on two different devices, choose a device-specific\n          identifier.</p>\n            </li>\n            <li>\n               <p>A user can't have two independent conversations with two different\n          versions of the same bot. For example, a user can't have a\n          conversation with the PROD and BETA versions of the same bot. If you\n          anticipate that a user will need to have conversation with two\n          different versions, for example, while testing, include the bot alias\n          in the user ID to separate the two conversations.</p>\n            </li>\n         </ul>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonAttributesString",
          "traits": {
            "smithy.api#documentation": "<p>You pass this value as the <code>x-amz-lex-session-attributes</code>\n      HTTP header.</p>\n         <p>Application-specific information passed between Amazon Lex and a client\n      application. The value must be a JSON serialized and base64 encoded map\n      with string keys and values. The total size of the\n        <code>sessionAttributes</code> and <code>requestAttributes</code>\n      headers is limited to 12 KB.</p>\n         <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>",
            "smithy.api#httpHeader": "x-amz-lex-session-attributes"
          }
        },
        "requestAttributes": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonAttributesString",
          "traits": {
            "smithy.api#documentation": "<p>You pass this value as the <code>x-amz-lex-request-attributes</code>\n      HTTP header.</p>\n         <p>Request-specific information passed between Amazon Lex and a client\n      application. The value must be a JSON serialized and base64 encoded map\n      with string keys and values. The total size of the\n        <code>requestAttributes</code> and <code>sessionAttributes</code>\n      headers is limited to 12 KB.</p>\n         <p>The namespace <code>x-amz-lex:</code> is reserved for special\n      attributes. Don't create any request attributes with the prefix\n        <code>x-amz-lex:</code>.</p>\n         <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>",
            "smithy.api#httpHeader": "x-amz-lex-request-attributes"
          }
        },
        "contentType": {
          "target": "com.amazonaws.lexruntimeservice#HttpContentType",
          "traits": {
            "smithy.api#documentation": "<p> You pass this value as the <code>Content-Type</code> HTTP header. </p>\n         <p> Indicates the audio format or text. The header value must start with\n      one of the following prefixes: </p>\n         <ul>\n            <li>\n               <p>PCM format, audio data must be in little-endian byte order.</p>\n               <ul>\n                  <li>\n                     <p>audio/l16; rate=16000; channels=1</p>\n                  </li>\n                  <li>\n                     <p>audio/x-l16; sample-rate=16000; channel-count=1</p>\n                  </li>\n                  <li>\n                     <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;\n              channel-count=1; is-big-endian=false </p>\n                  </li>\n               </ul>\n            </li>\n            <li>\n               <p>Opus format</p>\n               <ul>\n                  <li>\n                     <p>audio/x-cbr-opus-with-preamble; preamble-size=0;\n              bit-rate=256000; frame-size-milliseconds=4</p>\n                  </li>\n               </ul>\n            </li>\n            <li>\n               <p>Text format</p>\n               <ul>\n                  <li>\n                     <p>text/plain; charset=utf-8</p>\n                  </li>\n               </ul>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "Content-Type",
            "smithy.api#required": {}
          }
        },
        "accept": {
          "target": "com.amazonaws.lexruntimeservice#Accept",
          "traits": {
            "smithy.api#documentation": "<p> You pass this value as the <code>Accept</code> HTTP header. </p>\n         <p> The message Amazon Lex returns in the response can be either text or\n      speech based on the <code>Accept</code> HTTP header value in the request. </p>\n         <ul>\n            <li>\n               <p> If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex\n          returns text in the response. </p>\n            </li>\n            <li>\n               <p> If the value begins with <code>audio/</code>, Amazon Lex returns\n          speech in the response. Amazon Lex uses Amazon Polly to generate the speech\n          (using the configuration you specified in the <code>Accept</code>\n          header). For example, if you specify <code>audio/mpeg</code> as the\n          value, Amazon Lex returns speech in the MPEG format.</p>\n            </li>\n            <li>\n               <p>If the value is <code>audio/pcm</code>, the speech returned is\n            <code>audio/pcm</code> in 16-bit, little endian format.\n          </p>\n            </li>\n            <li>\n               <p>The following are the accepted values:</p>\n               <ul>\n                  <li>\n                     <p>audio/mpeg</p>\n                  </li>\n                  <li>\n                     <p>audio/ogg</p>\n                  </li>\n                  <li>\n                     <p>audio/pcm</p>\n                  </li>\n                  <li>\n                     <p>text/plain; charset=utf-8</p>\n                  </li>\n                  <li>\n                     <p>audio/* (defaults to mpeg)</p>\n                  </li>\n               </ul>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "Accept"
          }
        },
        "inputStream": {
          "target": "com.amazonaws.lexruntimeservice#BlobStream",
          "traits": {
            "smithy.api#documentation": "<p> User input in PCM or Opus audio format or text format as described in\n      the <code>Content-Type</code> HTTP header. </p>\n         <p>You can stream audio data to Amazon Lex or you can create a local buffer\n      that captures all of the audio data before sending. In general, you get\n      better performance if you stream audio data rather than buffering the data\n      locally.</p>",
            "smithy.api#httpPayload": {},
            "smithy.api#required": {}
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonActiveContextsString",
          "traits": {
            "smithy.api#documentation": "<p>A list of contexts active for the request. A context can be activated\n      when a previous intent is fulfilled, or by including the context in the\n      request,</p>\n         <p>If you don't specify a list of contexts, Amazon Lex will use the current\n      list of contexts for the session. If you specify an empty list, all\n      contexts for the session are cleared.</p>",
            "smithy.api#httpHeader": "x-amz-lex-active-contexts"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostContentResponse": {
      "type": "structure",
      "members": {
        "contentType": {
          "target": "com.amazonaws.lexruntimeservice#HttpContentType",
          "traits": {
            "smithy.api#documentation": "<p>Content type as specified in the <code>Accept</code> HTTP header in\n      the request.</p>",
            "smithy.api#httpHeader": "Content-Type"
          }
        },
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>Current user intent that Amazon Lex is aware of.</p>",
            "smithy.api#httpHeader": "x-amz-lex-intent-name"
          }
        },
        "nluIntentConfidence": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p>Provides a score that indicates how confident Amazon Lex is that the\n      returned intent is the one that matches the user's intent. The score is\n      between 0.0 and 1.0.</p>\n         <p>The score is a relative score, not an absolute score. The score may\n      change based on improvements to Amazon Lex. </p>",
            "smithy.api#httpHeader": "x-amz-lex-nlu-intent-confidence"
          }
        },
        "alternativeIntents": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p>One to four alternative intents that may be applicable to the user's\n      intent.</p>\n         <p>Each alternative includes a score that indicates how confident Amazon Lex\n      is that the intent matches the user's intent. The intents are sorted by\n      the confidence score.</p>",
            "smithy.api#httpHeader": "x-amz-lex-alternative-intents"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p>Map of zero or more intent slots (name/value pairs) Amazon Lex detected\n      from the user input during the conversation. The field is base-64\n      encoded.</p>\n         <p>Amazon Lex creates a resolution list containing likely values for a slot.\n      The value that it returns is determined by the\n        <code>valueSelectionStrategy</code> selected when the slot type was\n      created or updated. If <code>valueSelectionStrategy</code> is set to\n        <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,\n      if the user value is similar to the slot values. If\n        <code>valueSelectionStrategy</code> is set to\n        <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the\n      resolution list or, if there is no resolution list, null. If you don't\n      specify a <code>valueSelectionStrategy</code>, the default is\n        <code>ORIGINAL_VALUE</code>.</p>",
            "smithy.api#httpHeader": "x-amz-lex-slots"
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p> Map of key/value pairs representing the session-specific context\n      information. </p>",
            "smithy.api#httpHeader": "x-amz-lex-session-attributes"
          }
        },
        "sentimentResponse": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The sentiment expressed in an utterance.</p>\n         <p>When the bot is configured to send utterances to Amazon Comprehend for\n      sentiment analysis, this field contains the result of the analysis.</p>",
            "smithy.api#httpHeader": "x-amz-lex-sentiment"
          }
        },
        "message": {
          "target": "com.amazonaws.lexruntimeservice#Text",
          "traits": {
            "smithy.api#deprecated": {
              "message": "The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales."
            },
            "smithy.api#documentation": "<p>You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,\n      es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the\n        <code>message</code> field is null. You should use the\n        <code>encodedMessage</code> field instead.</p>\n         <p>The message to convey to the user. The message can come from the bot's\n      configuration or from a Lambda function.</p>\n         <p>If the intent is not configured with a Lambda function, or if the Lambda\n      function returned <code>Delegate</code> as the\n        <code>dialogAction.type</code> in its response, Amazon Lex decides on the\n      next course of action and selects an appropriate message from the bot's\n      configuration based on the current interaction context. For example, if\n      Amazon Lex isn't able to understand user input, it uses a clarification prompt\n      message.</p>\n         <p>When you create an intent you can assign messages to groups. When\n      messages are assigned to groups Amazon Lex returns one message from each group\n      in the response. The message field is an escaped JSON string containing\n      the messages. For more information about the structure of the JSON string\n      returned, see <a>msg-prompts-formats</a>.</p>\n         <p>If the Lambda function returns a message, Amazon Lex passes it to the client\n      in its response.</p>",
            "smithy.api#httpHeader": "x-amz-lex-message"
          }
        },
        "encodedMessage": {
          "target": "com.amazonaws.lexruntimeservice#SensitiveString",
          "traits": {
            "smithy.api#documentation": "<p>The message to convey to the user. The message can come from the bot's\n      configuration or from a Lambda function.</p>\n         <p>If the intent is not configured with a Lambda function, or if the Lambda\n      function returned <code>Delegate</code> as the\n        <code>dialogAction.type</code> in its response, Amazon Lex decides on the\n      next course of action and selects an appropriate message from the bot's\n      configuration based on the current interaction context. For example, if\n      Amazon Lex isn't able to understand user input, it uses a clarification prompt\n      message.</p>\n         <p>When you create an intent you can assign messages to groups. When\n      messages are assigned to groups Amazon Lex returns one message from each group\n      in the response. The message field is an escaped JSON string containing\n      the messages. For more information about the structure of the JSON string\n      returned, see <a>msg-prompts-formats</a>.</p>\n         <p>If the Lambda function returns a message, Amazon Lex passes it to the client\n      in its response.</p>\n         <p>The <code>encodedMessage</code> field is base-64 encoded. You must \n      decode the field before you can use the value.</p>",
            "smithy.api#httpHeader": "x-amz-lex-encoded-message"
          }
        },
        "messageFormat": {
          "target": "com.amazonaws.lexruntimeservice#MessageFormatType",
          "traits": {
            "smithy.api#documentation": "<p>The format of the response message. One of the following\n      values:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>PlainText</code> - The message contains plain UTF-8\n          text.</p>\n            </li>\n            <li>\n               <p>\n                  <code>CustomPayload</code> - The message is a custom format for\n          the client.</p>\n            </li>\n            <li>\n               <p>\n                  <code>SSML</code> - The message contains text formatted for voice\n          output.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Composite</code> - The message contains an escaped JSON\n          object containing one or more messages from the groups that messages\n          were assigned to when the intent was created.</p>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "x-amz-lex-message-format"
          }
        },
        "dialogState": {
          "target": "com.amazonaws.lexruntimeservice#DialogState",
          "traits": {
            "smithy.api#documentation": "<p>Identifies the current state of the user interaction. Amazon Lex returns\n      one of the following values as <code>dialogState</code>. The client can\n      optionally use this information to customize the user interface. </p>\n         <ul>\n            <li>\n               <p>\n                  <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.\n          Consider the following examples: </p>\n               <p> For example, a user might utter an intent (\"I want to order a\n          pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it\n          will return this dialog state. </p>\n            </li>\n            <li>\n               <p>\n                  <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\"\n          response. </p>\n               <p>For example, Amazon Lex wants user confirmation before fulfilling an\n          intent. Instead of a simple \"yes\" or \"no\" response, a user might\n          respond with additional information. For example, \"yes, but make it a\n          thick crust pizza\" or \"no, I want to order a drink.\" Amazon Lex can process\n          such additional information (in these examples, update the crust type\n          slot or change the intent from OrderPizza to OrderDrink). </p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for\n          the current intent. </p>\n               <p> For example, suppose that in the response Amazon Lex sends this\n          message: \"What size pizza would you like?\". A user might reply with\n          the slot value (e.g., \"medium\"). The user might also provide\n          additional information in the response (e.g., \"medium thick crust\n          pizza\"). Amazon Lex can process such additional information appropriately.\n        </p>\n            </li>\n            <li>\n               <p>\n                  <code>Fulfilled</code> - Conveys that the Lambda function has\n          successfully fulfilled the intent. </p>\n            </li>\n            <li>\n               <p>\n                  <code>ReadyForFulfillment</code> - Conveys that the client has to\n          fulfill the request. </p>\n            </li>\n            <li>\n               <p>\n                  <code>Failed</code> - Conveys that the conversation with the user\n          failed. </p>\n               <p> This can happen for various reasons, including that the user does\n          not provide an appropriate response to prompts from the service (you\n          can configure how many times Amazon Lex can prompt a user for specific\n          information), or if the Lambda function fails to fulfill the intent.\n        </p>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "x-amz-lex-dialog-state"
          }
        },
        "slotToElicit": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p> If the <code>dialogState</code> value is <code>ElicitSlot</code>,\n      returns the name of the slot for which Amazon Lex is eliciting a value. </p>",
            "smithy.api#httpHeader": "x-amz-lex-slot-to-elicit"
          }
        },
        "inputTranscript": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#deprecated": {
              "message": "The inputTranscript field is deprecated, use the encodedInputTranscript field instead. The inputTranscript field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales."
            },
            "smithy.api#documentation": "<p>The text used to process the request.</p>\n         <p>You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,\n      es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the\n        <code>inputTranscript</code> field is null. You should use the\n        <code>encodedInputTranscript</code> field instead.</p>\n         <p>If the input was an audio stream, the <code>inputTranscript</code>\n      field contains the text extracted from the audio stream. This is the text\n      that is actually processed to recognize intents and slot values. You can\n      use this information to determine if Amazon Lex is correctly processing the\n      audio that you send.</p>",
            "smithy.api#httpHeader": "x-amz-lex-input-transcript"
          }
        },
        "encodedInputTranscript": {
          "target": "com.amazonaws.lexruntimeservice#SensitiveStringUnbounded",
          "traits": {
            "smithy.api#documentation": "<p>The text used to process the request.</p>\n         <p>If the input was an audio stream, the\n        <code>encodedInputTranscript</code> field contains the text extracted\n      from the audio stream. This is the text that is actually processed to\n      recognize intents and slot values. You can use this information to\n      determine if Amazon Lex is correctly processing the audio that you send.</p>\n         <p>The <code>encodedInputTranscript</code> field is base-64 encoded. You must \n      decode the field before you can use the value.</p>",
            "smithy.api#httpHeader": "x-amz-lex-encoded-input-transcript"
          }
        },
        "audioStream": {
          "target": "com.amazonaws.lexruntimeservice#BlobStream",
          "traits": {
            "smithy.api#default": "",
            "smithy.api#documentation": "<p>The prompt (or statement) to convey to the user. This is based on the\n      bot configuration and context. For example, if Amazon Lex did not understand\n      the user intent, it sends the <code>clarificationPrompt</code> configured\n      for the bot. If the intent requires confirmation before taking the\n      fulfillment action, it sends the <code>confirmationPrompt</code>. Another\n      example: Suppose that the Lambda function successfully fulfilled the\n      intent, and sent a message to convey to the user. Then Amazon Lex sends that\n      message in the response. </p>",
            "smithy.api#httpPayload": {}
          }
        },
        "botVersion": {
          "target": "com.amazonaws.lexruntimeservice#BotVersion",
          "traits": {
            "smithy.api#documentation": "<p>The version of the bot that responded to the conversation. You can use\n      this information to help determine if one version of a bot is performing\n      better than another version.</p>",
            "smithy.api#httpHeader": "x-amz-lex-bot-version"
          }
        },
        "sessionId": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The unique identifier for the session.</p>",
            "smithy.api#httpHeader": "x-amz-lex-session-id"
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonActiveContextsString",
          "traits": {
            "smithy.api#documentation": "<p>A list of active contexts for the session. A context can be set when\n      an intent is fulfilled or by calling the <code>PostContent</code>,\n        <code>PostText</code>, or <code>PutSession</code> operation.</p>\n         <p>You can use a context to control the intents that can follow up an\n      intent, or to modify the operation of your application.</p>",
            "smithy.api#httpHeader": "x-amz-lex-active-contexts"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostText": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.lexruntimeservice#PostTextRequest"
      },
      "output": {
        "target": "com.amazonaws.lexruntimeservice#PostTextResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.lexruntimeservice#BadGatewayException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#BadRequestException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#ConflictException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#DependencyFailedException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#InternalFailureException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LimitExceededException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LoopDetectedException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Sends user input to Amazon Lex. Client applications can use this API to\n      send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input\n      using the machine learning model it built for the bot. </p>\n         <p> In response, Amazon Lex returns the next <code>message</code> to convey to\n      the user an optional <code>responseCard</code> to display. Consider the\n      following example messages: </p>\n         <ul>\n            <li>\n               <p> For a user input \"I would like a pizza\", Amazon Lex might return a\n          response with a message eliciting slot data (for example, PizzaSize):\n          \"What size pizza would you like?\" </p>\n            </li>\n            <li>\n               <p> After the user provides all of the pizza order information,\n          Amazon Lex might return a response with a message to obtain user\n          confirmation \"Proceed with the pizza order?\". </p>\n            </li>\n            <li>\n               <p> After the user replies to a confirmation prompt with a \"yes\",\n          Amazon Lex might return a conclusion statement: \"Thank you, your cheese\n          pizza has been ordered.\". </p>\n            </li>\n         </ul>\n\n         <p> Not all Amazon Lex messages require a user response. For example, a\n      conclusion statement does not require a response. Some messages require\n      only a \"yes\" or \"no\" user response. In addition to the\n        <code>message</code>, Amazon Lex provides additional context about the\n      message in the response that you might use to enhance client behavior, for\n      example, to display the appropriate client user interface. These are the\n        <code>slotToElicit</code>, <code>dialogState</code>,\n        <code>intentName</code>, and <code>slots</code> fields in the response.\n      Consider the following examples: </p>\n\n         <ul>\n            <li>\n               <p>If the message is to elicit slot data, Amazon Lex returns the\n          following context information:</p>\n               <ul>\n                  <li>\n                     <p>\n                        <code>dialogState</code> set to ElicitSlot </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>intentName</code> set to the intent name in the current\n              context </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>slotToElicit</code> set to the slot name for which the\n                <code>message</code> is eliciting information </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>slots</code> set to a map of slots, configured for the\n              intent, with currently known values </p>\n                  </li>\n               </ul>\n            </li>\n            <li>\n               <p> If the message is a confirmation prompt, the\n            <code>dialogState</code> is set to ConfirmIntent and\n            <code>SlotToElicit</code> is set to null. </p>\n            </li>\n            <li>\n               <p>If the message is a clarification prompt (configured for the\n          intent) that indicates that user intent is not understood, the\n            <code>dialogState</code> is set to ElicitIntent and\n            <code>slotToElicit</code> is set to null. </p>\n            </li>\n         </ul>\n\n         <p> In addition, Amazon Lex also returns your application-specific\n        <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing\n        Conversation Context</a>. </p>",
        "smithy.api#http": {
          "method": "POST",
          "uri": "/bot/{botName}/alias/{botAlias}/user/{userId}/text",
          "code": 200
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostTextRequest": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the Amazon Lex bot.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>The alias of the Amazon Lex bot.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The ID of the client application user. Amazon Lex uses this to identify a\n      user's conversation with your bot. At runtime, each request must contain\n      the <code>userID</code> field.</p>\n         <p>To decide the user ID to use for your application, consider the\n      following factors.</p>\n         <ul>\n            <li>\n               <p>The <code>userID</code> field must not contain any personally\n          identifiable information of the user, for example, name, personal\n          identification numbers, or other end user personal information.</p>\n            </li>\n            <li>\n               <p>If you want a user to start a conversation on one device and\n          continue on another device, use a user-specific identifier.</p>\n            </li>\n            <li>\n               <p>If you want the same user to be able to have two independent\n          conversations on two different devices, choose a device-specific\n          identifier.</p>\n            </li>\n            <li>\n               <p>A user can't have two independent conversations with two different\n          versions of the same bot. For example, a user can't have a\n          conversation with the PROD and BETA versions of the same bot. If you\n          anticipate that a user will need to have conversation with two\n          different versions, for example, while testing, include the bot alias\n          in the user ID to separate the two conversations.</p>\n            </li>\n         </ul>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Application-specific information passed between Amazon Lex and a client\n      application.</p>\n         <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>"
          }
        },
        "requestAttributes": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Request-specific information passed between Amazon Lex and a client\n      application.</p>\n         <p>The namespace <code>x-amz-lex:</code> is reserved for special\n      attributes. Don't create any request attributes with the prefix\n        <code>x-amz-lex:</code>.</p>\n         <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>"
          }
        },
        "inputText": {
          "target": "com.amazonaws.lexruntimeservice#Text",
          "traits": {
            "smithy.api#documentation": "<p>The text that the user entered (Amazon Lex interprets this text).</p>",
            "smithy.api#required": {}
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextsList",
          "traits": {
            "smithy.api#documentation": "<p>A list of contexts active for the request. A context can be activated\n      when a previous intent is fulfilled, or by including the context in the\n      request,</p>\n         <p>If you don't specify a list of contexts, Amazon Lex will use the current\n      list of contexts for the session. If you specify an empty list, all\n      contexts for the session are cleared.</p>"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PostTextResponse": {
      "type": "structure",
      "members": {
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>The current user intent that Amazon Lex is aware of.</p>"
          }
        },
        "nluIntentConfidence": {
          "target": "com.amazonaws.lexruntimeservice#IntentConfidence",
          "traits": {
            "smithy.api#documentation": "<p>Provides a score that indicates how confident Amazon Lex is that the\n      returned intent is the one that matches the user's intent. The score is\n      between 0.0 and 1.0. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence Scores</a>.</p>\n         <p>The score is a relative score, not an absolute score. The score may\n      change based on improvements to Amazon Lex.</p>"
          }
        },
        "alternativeIntents": {
          "target": "com.amazonaws.lexruntimeservice#IntentList",
          "traits": {
            "smithy.api#documentation": "<p>One to four alternative intents that may be applicable to the user's\n      intent.</p>\n         <p>Each alternative includes a score that indicates how confident Amazon Lex\n      is that the intent matches the user's intent. The intents are sorted by\n      the confidence score.</p>"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p> The intent slots that Amazon Lex detected from the user input in the\n      conversation. </p>\n         <p>Amazon Lex creates a resolution list containing likely values for a slot.\n      The value that it returns is determined by the\n        <code>valueSelectionStrategy</code> selected when the slot type was\n      created or updated. If <code>valueSelectionStrategy</code> is set to\n        <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,\n      if the user value is similar to the slot values. If\n        <code>valueSelectionStrategy</code> is set to\n        <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the\n      resolution list or, if there is no resolution list, null. If you don't\n      specify a <code>valueSelectionStrategy</code>, the default is\n        <code>ORIGINAL_VALUE</code>.</p>"
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>A map of key-value pairs representing the session-specific context\n      information.</p>"
          }
        },
        "message": {
          "target": "com.amazonaws.lexruntimeservice#Text",
          "traits": {
            "smithy.api#documentation": "<p>The message to convey to the user. The message can come from the bot's\n      configuration or from a Lambda function.</p>\n         <p>If the intent is not configured with a Lambda function, or if the Lambda\n      function returned <code>Delegate</code> as the\n        <code>dialogAction.type</code> its response, Amazon Lex decides on the next\n      course of action and selects an appropriate message from the bot's\n      configuration based on the current interaction context. For example, if\n      Amazon Lex isn't able to understand user input, it uses a clarification prompt\n      message.</p>\n         <p>When you create an intent you can assign messages to groups. When\n      messages are assigned to groups Amazon Lex returns one message from each group\n      in the response. The message field is an escaped JSON string containing\n      the messages. For more information about the structure of the JSON string\n      returned, see <a>msg-prompts-formats</a>.</p>\n         <p>If the Lambda function returns a message, Amazon Lex passes it to the client\n      in its response.</p>"
          }
        },
        "sentimentResponse": {
          "target": "com.amazonaws.lexruntimeservice#SentimentResponse",
          "traits": {
            "smithy.api#documentation": "<p>The sentiment expressed in and utterance.</p>\n         <p>When the bot is configured to send utterances to Amazon Comprehend for\n      sentiment analysis, this field contains the result of the analysis.</p>"
          }
        },
        "messageFormat": {
          "target": "com.amazonaws.lexruntimeservice#MessageFormatType",
          "traits": {
            "smithy.api#documentation": "<p>The format of the response message. One of the following\n      values:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>PlainText</code> - The message contains plain UTF-8\n          text.</p>\n            </li>\n            <li>\n               <p>\n                  <code>CustomPayload</code> - The message is a custom format\n          defined by the Lambda function.</p>\n            </li>\n            <li>\n               <p>\n                  <code>SSML</code> - The message contains text formatted for voice\n          output.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Composite</code> - The message contains an escaped JSON\n          object containing one or more messages from the groups that messages\n          were assigned to when the intent was created.</p>\n            </li>\n         </ul>"
          }
        },
        "dialogState": {
          "target": "com.amazonaws.lexruntimeservice#DialogState",
          "traits": {
            "smithy.api#documentation": "<p> Identifies the current state of the user interaction. Amazon Lex returns\n      one of the following values as <code>dialogState</code>. The client can\n      optionally use this information to customize the user interface. </p>\n         <ul>\n            <li>\n               <p>\n                  <code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. </p>\n               <p>For example, a user might utter an intent (\"I want to order a\n          pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it\n          will return this dialogState.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\"\n          response. </p>\n               <p> For example, Amazon Lex wants user confirmation before fulfilling an\n          intent. </p>\n               <p>Instead of a simple \"yes\" or \"no,\" a user might respond with\n          additional information. For example, \"yes, but make it thick crust\n          pizza\" or \"no, I want to order a drink\". Amazon Lex can process such\n          additional information (in these examples, update the crust type slot\n          value, or change intent from OrderPizza to OrderDrink).</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the\n          current intent. </p>\n               <p>For example, suppose that in the response Amazon Lex sends this\n          message: \"What size pizza would you like?\". A user might reply with\n          the slot value (e.g., \"medium\"). The user might also provide\n          additional information in the response (e.g., \"medium thick crust\n          pizza\"). Amazon Lex can process such additional information appropriately.\n        </p>\n            </li>\n            <li>\n               <p>\n                  <code>Fulfilled</code> - Conveys that the Lambda function configured\n          for the intent has successfully fulfilled the intent. </p>\n\n            </li>\n            <li>\n               <p>\n                  <code>ReadyForFulfillment</code> - Conveys that the client has to\n          fulfill the intent. </p>\n            </li>\n            <li>\n               <p>\n                  <code>Failed</code> - Conveys that the conversation with the user\n          failed. </p>\n               <p> This can happen for various reasons including that the user did\n          not provide an appropriate response to prompts from the service (you\n          can configure how many times Amazon Lex can prompt a user for specific\n          information), or the Lambda function failed to fulfill the intent.\n        </p>\n            </li>\n         </ul>"
          }
        },
        "slotToElicit": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>If the <code>dialogState</code> value is <code>ElicitSlot</code>,\n      returns the name of the slot for which Amazon Lex is eliciting a value. </p>"
          }
        },
        "responseCard": {
          "target": "com.amazonaws.lexruntimeservice#ResponseCard",
          "traits": {
            "smithy.api#documentation": "<p>Represents the options that the user has to respond to the current\n      prompt. Response Card can come from the bot configuration (in the\n      Amazon Lex console, choose the settings button next to a slot) or from a\n      code hook (Lambda function). </p>"
          }
        },
        "sessionId": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>A unique identifier for the session.</p>"
          }
        },
        "botVersion": {
          "target": "com.amazonaws.lexruntimeservice#BotVersion",
          "traits": {
            "smithy.api#documentation": "<p>The version of the bot that responded to the conversation. You can use\n      this information to help determine if one version of a bot is performing\n      better than another version.</p>"
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextsList",
          "traits": {
            "smithy.api#documentation": "<p>A list of active contexts for the session. A context can be set when\n      an intent is fulfilled or by calling the <code>PostContent</code>,\n        <code>PostText</code>, or <code>PutSession</code> operation.</p>\n         <p>You can use a context to control the intents that can follow up an\n      intent, or to modify the operation of your application.</p>"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PredictedIntent": {
      "type": "structure",
      "members": {
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the intent that Amazon Lex suggests satisfies the user's\n      intent.</p>"
          }
        },
        "nluIntentConfidence": {
          "target": "com.amazonaws.lexruntimeservice#IntentConfidence",
          "traits": {
            "smithy.api#documentation": "<p>Indicates how confident Amazon Lex is that an intent satisfies the user's\n      intent.</p>"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>The slot and slot values associated with the predicted intent.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>An intent that Amazon Lex suggests satisfies the user's intent. Includes\n      the name of the intent, the confidence that Amazon Lex has that the user's\n      intent is satisfied, and the slots defined for the intent.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#PutSession": {
      "type": "operation",
      "input": {
        "target": "com.amazonaws.lexruntimeservice#PutSessionRequest"
      },
      "output": {
        "target": "com.amazonaws.lexruntimeservice#PutSessionResponse"
      },
      "errors": [
        {
          "target": "com.amazonaws.lexruntimeservice#BadGatewayException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#BadRequestException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#ConflictException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#DependencyFailedException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#InternalFailureException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#LimitExceededException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotAcceptableException"
        },
        {
          "target": "com.amazonaws.lexruntimeservice#NotFoundException"
        }
      ],
      "traits": {
        "smithy.api#documentation": "<p>Creates a new session or modifies an existing session with an Amazon Lex\n      bot. Use this operation to enable your application to set the state of the\n      bot.</p>\n         <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing\n        Sessions</a>.</p>",
        "smithy.api#http": {
          "method": "POST",
          "uri": "/bot/{botName}/alias/{botAlias}/user/{userId}/session",
          "code": 200
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PutSessionRequest": {
      "type": "structure",
      "members": {
        "botName": {
          "target": "com.amazonaws.lexruntimeservice#BotName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "botAlias": {
          "target": "com.amazonaws.lexruntimeservice#BotAlias",
          "traits": {
            "smithy.api#documentation": "<p>The alias in use for the bot that contains the session data.</p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "userId": {
          "target": "com.amazonaws.lexruntimeservice#UserId",
          "traits": {
            "smithy.api#documentation": "<p>The ID of the client application user. Amazon Lex uses this to identify a\n      user's conversation with your bot. </p>",
            "smithy.api#httpLabel": {},
            "smithy.api#required": {}
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#StringMap",
          "traits": {
            "smithy.api#documentation": "<p>Map of key/value pairs representing the session-specific context\n      information. It contains application information passed between Amazon Lex and\n      a client application.</p>"
          }
        },
        "dialogAction": {
          "target": "com.amazonaws.lexruntimeservice#DialogAction",
          "traits": {
            "smithy.api#documentation": "<p>Sets the next action that the bot should take to fulfill the\n      conversation.</p>"
          }
        },
        "recentIntentSummaryView": {
          "target": "com.amazonaws.lexruntimeservice#IntentSummaryList",
          "traits": {
            "smithy.api#documentation": "<p>A summary of the recent intents for the bot. You can use the intent\n      summary view to set a checkpoint label on an intent and modify attributes\n      of intents. You can also use it to remove or add intent summary objects to\n      the list.</p>\n         <p>An intent that you modify or add to the list must make sense for the\n      bot. For example, the intent name must be valid for the bot. You must\n      provide valid values for:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>intentName</code>\n               </p>\n            </li>\n            <li>\n               <p>slot names</p>\n            </li>\n            <li>\n               <p>\n                  <code>slotToElict</code>\n               </p>\n            </li>\n         </ul>\n         <p>If you send the <code>recentIntentSummaryView</code> parameter in a\n        <code>PutSession</code> request, the contents of the new summary view\n      replaces the old summary view. For example, if a <code>GetSession</code>\n      request returns three intents in the summary view and you call\n        <code>PutSession</code> with one intent in the summary view, the next\n      call to <code>GetSession</code> will only return one intent.</p>"
          }
        },
        "accept": {
          "target": "com.amazonaws.lexruntimeservice#Accept",
          "traits": {
            "smithy.api#documentation": "<p>The message that Amazon Lex returns in the response can be either text or\n      speech based depending on the value of this field.</p>\n         <ul>\n            <li>\n               <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex\n          returns text in the response.</p>\n            </li>\n            <li>\n               <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech\n          in the response. Amazon Lex uses Amazon Polly to generate the speech in the\n          configuration that you specify. For example, if you specify\n            <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the\n          MPEG format.</p>\n            </li>\n            <li>\n               <p>If the value is <code>audio/pcm</code>, the speech is returned as\n            <code>audio/pcm</code> in 16-bit, little endian format.</p>\n            </li>\n            <li>\n               <p>The following are the accepted values:</p>\n               <ul>\n                  <li>\n                     <p>\n                        <code>audio/mpeg</code>\n                     </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>audio/ogg</code>\n                     </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>audio/pcm</code>\n                     </p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>audio/*</code> (defaults to mpeg)</p>\n                  </li>\n                  <li>\n                     <p>\n                        <code>text/plain; charset=utf-8</code>\n                     </p>\n                  </li>\n               </ul>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "Accept"
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#ActiveContextsList",
          "traits": {
            "smithy.api#documentation": "<p>A list of contexts active for the request. A context can be activated\n      when a previous intent is fulfilled, or by including the context in the\n      request,</p>\n         <p>If you don't specify a list of contexts, Amazon Lex will use the current\n      list of contexts for the session. If you specify an empty list, all\n      contexts for the session are cleared.</p>"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#PutSessionResponse": {
      "type": "structure",
      "members": {
        "contentType": {
          "target": "com.amazonaws.lexruntimeservice#HttpContentType",
          "traits": {
            "smithy.api#documentation": "<p>Content type as specified in the <code>Accept</code> HTTP header in\n      the request.</p>",
            "smithy.api#httpHeader": "Content-Type"
          }
        },
        "intentName": {
          "target": "com.amazonaws.lexruntimeservice#IntentName",
          "traits": {
            "smithy.api#documentation": "<p>The name of the current intent.</p>",
            "smithy.api#httpHeader": "x-amz-lex-intent-name"
          }
        },
        "slots": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p>Map of zero or more intent slots Amazon Lex detected from the user input\n      during the conversation.</p>\n         <p>Amazon Lex creates a resolution list containing likely values for a slot.\n      The value that it returns is determined by the\n        <code>valueSelectionStrategy</code> selected when the slot type was\n      created or updated. If <code>valueSelectionStrategy</code> is set to\n        <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,\n      if the user value is similar to the slot values. If\n        <code>valueSelectionStrategy</code> is set to\n        <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the\n      resolution list or, if there is no resolution list, null. If you don't\n      specify a <code>valueSelectionStrategy</code> the default is\n        <code>ORIGINAL_VALUE</code>. </p>",
            "smithy.api#httpHeader": "x-amz-lex-slots"
          }
        },
        "sessionAttributes": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonString",
          "traits": {
            "smithy.api#documentation": "<p>Map of key/value pairs representing session-specific context\n      information.</p>",
            "smithy.api#httpHeader": "x-amz-lex-session-attributes"
          }
        },
        "message": {
          "target": "com.amazonaws.lexruntimeservice#Text",
          "traits": {
            "smithy.api#deprecated": {
              "message": "The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales."
            },
            "smithy.api#documentation": "<p>The next message that should be presented to the user.</p>\n         <p>You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,\n      es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the\n        <code>message</code> field is null. You should use the\n        <code>encodedMessage</code> field instead.</p>",
            "smithy.api#httpHeader": "x-amz-lex-message"
          }
        },
        "encodedMessage": {
          "target": "com.amazonaws.lexruntimeservice#SensitiveString",
          "traits": {
            "smithy.api#documentation": "<p>The next message that should be presented to the user.</p>\n         <p>The <code>encodedMessage</code> field is base-64 encoded. You must \n      decode the field before you can use the value.</p>",
            "smithy.api#httpHeader": "x-amz-lex-encoded-message"
          }
        },
        "messageFormat": {
          "target": "com.amazonaws.lexruntimeservice#MessageFormatType",
          "traits": {
            "smithy.api#documentation": "<p>The format of the response message. One of the following\n      values:</p>\n         <ul>\n            <li>\n               <p>\n                  <code>PlainText</code> - The message contains plain UTF-8\n          text.</p>\n            </li>\n            <li>\n               <p>\n                  <code>CustomPayload</code> - The message is a custom format for\n          the client.</p>\n            </li>\n            <li>\n               <p>\n                  <code>SSML</code> - The message contains text formatted for voice\n          output.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Composite</code> - The message contains an escaped JSON\n          object containing one or more messages from the groups that messages\n          were assigned to when the intent was created.</p>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "x-amz-lex-message-format"
          }
        },
        "dialogState": {
          "target": "com.amazonaws.lexruntimeservice#DialogState",
          "traits": {
            "smithy.api#documentation": "<p></p>\n         <ul>\n            <li>\n               <p>\n                  <code>ConfirmIntent</code> - Amazon Lex is expecting a \"yes\" or \"no\"\n          response to confirm the intent before fulfilling an intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's\n          intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot\n          for the current intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Failed</code> - Conveys that the conversation with the user\n          has failed. This can happen for various reasons, including the user\n          does not provide an appropriate response to prompts from the service,\n          or if the Lambda function fails to fulfill the intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>Fulfilled</code> - Conveys that the Lambda function has\n          sucessfully fulfilled the intent.</p>\n            </li>\n            <li>\n               <p>\n                  <code>ReadyForFulfillment</code> - Conveys that the client has to\n          fulfill the intent.</p>\n            </li>\n         </ul>",
            "smithy.api#httpHeader": "x-amz-lex-dialog-state"
          }
        },
        "slotToElicit": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>If the <code>dialogState</code> is <code>ElicitSlot</code>, returns\n      the name of the slot for which Amazon Lex is eliciting a value.</p>",
            "smithy.api#httpHeader": "x-amz-lex-slot-to-elicit"
          }
        },
        "audioStream": {
          "target": "com.amazonaws.lexruntimeservice#BlobStream",
          "traits": {
            "smithy.api#default": "",
            "smithy.api#documentation": "<p>The audio version of the message to convey to the user.</p>",
            "smithy.api#httpPayload": {}
          }
        },
        "sessionId": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>A unique identifier for the session.</p>",
            "smithy.api#httpHeader": "x-amz-lex-session-id"
          }
        },
        "activeContexts": {
          "target": "com.amazonaws.lexruntimeservice#SynthesizedJsonActiveContextsString",
          "traits": {
            "smithy.api#documentation": "<p>A list of active contexts for the session.</p>",
            "smithy.api#httpHeader": "x-amz-lex-active-contexts"
          }
        }
      }
    },
    "com.amazonaws.lexruntimeservice#RequestTimeoutException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The input speech is too long.</p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 408
      }
    },
    "com.amazonaws.lexruntimeservice#ResponseCard": {
      "type": "structure",
      "members": {
        "version": {
          "target": "com.amazonaws.lexruntimeservice#String",
          "traits": {
            "smithy.api#documentation": "<p>The version of the response card format.</p>"
          }
        },
        "contentType": {
          "target": "com.amazonaws.lexruntimeservice#ContentType",
          "traits": {
            "smithy.api#documentation": "<p>The content type of the response.</p>"
          }
        },
        "genericAttachments": {
          "target": "com.amazonaws.lexruntimeservice#genericAttachmentList",
          "traits": {
            "smithy.api#documentation": "<p>An array of attachment objects representing options.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>If you configure a response card when creating your bots, Amazon Lex\n      substitutes the session attributes and slot values that are available, and\n      then returns it. The response card can also come from a Lambda function (\n        <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an\n      intent).</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#SensitiveString": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 1366
        },
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#SensitiveStringUnbounded": {
      "type": "string",
      "traits": {
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#SentimentLabel": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#SentimentResponse": {
      "type": "structure",
      "members": {
        "sentimentLabel": {
          "target": "com.amazonaws.lexruntimeservice#SentimentLabel",
          "traits": {
            "smithy.api#documentation": "<p>The inferred sentiment that Amazon Comprehend has the highest\n      confidence in.</p>"
          }
        },
        "sentimentScore": {
          "target": "com.amazonaws.lexruntimeservice#SentimentScore",
          "traits": {
            "smithy.api#documentation": "<p>The likelihood that the sentiment was correctly inferred.</p>"
          }
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The sentiment expressed in an utterance.</p>\n         <p>When the bot is configured to send utterances to Amazon Comprehend for\n      sentiment analysis, this field structure contains the result of the\n      analysis.</p>"
      }
    },
    "com.amazonaws.lexruntimeservice#SentimentScore": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#String": {
      "type": "string"
    },
    "com.amazonaws.lexruntimeservice#StringMap": {
      "type": "map",
      "key": {
        "target": "com.amazonaws.lexruntimeservice#String"
      },
      "value": {
        "target": "com.amazonaws.lexruntimeservice#String"
      },
      "traits": {
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#StringUrlWithLength": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 2048
        }
      }
    },
    "com.amazonaws.lexruntimeservice#StringWithLength": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 80
        }
      }
    },
    "com.amazonaws.lexruntimeservice#SynthesizedJsonActiveContextsString": {
      "type": "string",
      "traits": {
        "smithy.api#mediaType": "application/json",
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#SynthesizedJsonAttributesString": {
      "type": "string",
      "traits": {
        "smithy.api#mediaType": "application/json",
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#SynthesizedJsonString": {
      "type": "string",
      "traits": {
        "smithy.api#mediaType": "application/json"
      }
    },
    "com.amazonaws.lexruntimeservice#Text": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 1,
          "max": 1024
        },
        "smithy.api#sensitive": {}
      }
    },
    "com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException": {
      "type": "structure",
      "members": {
        "message": {
          "target": "com.amazonaws.lexruntimeservice#String"
        }
      },
      "traits": {
        "smithy.api#documentation": "<p>The Content-Type header (<code>PostContent</code> API) has an invalid\n      value. </p>",
        "smithy.api#error": "client",
        "smithy.api#httpError": 415
      }
    },
    "com.amazonaws.lexruntimeservice#UserId": {
      "type": "string",
      "traits": {
        "smithy.api#length": {
          "min": 2,
          "max": 100
        },
        "smithy.api#pattern": "[0-9a-zA-Z._:-]+"
      }
    },
    "com.amazonaws.lexruntimeservice#genericAttachmentList": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.lexruntimeservice#GenericAttachment"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 10
        }
      }
    },
    "com.amazonaws.lexruntimeservice#listOfButtons": {
      "type": "list",
      "member": {
        "target": "com.amazonaws.lexruntimeservice#Button"
      },
      "traits": {
        "smithy.api#length": {
          "min": 0,
          "max": 5
        }
      }
    }
  }
}